=================================== addshape ===================================
Help on function addshape in turtle:

turtle.addshape = addshape(name, shape=None)
    Adds a turtle shape to TurtleScreen's shapelist.
    
    Arguments:
    (1) name is the name of a gif-file and shape is None.
        Installs the corresponding image shape.
        !! Image-shapes DO NOT rotate when turning the turtle,
        !! so they do not display the heading of the turtle!
    (2) name is an arbitrary string and shape is a tuple
        of pairs of coordinates. Installs the corresponding
        polygon shape
    (3) name is an arbitrary string and shape is a
        (compound) Shape object. Installs the corresponding
        compound shape.
    To use a shape, you have to issue the command shape(shapename).
    
    call: register_shape("turtle.gif")
    --or: register_shape("tri", ((0,0), (10,10), (-10,10)))
    
    Example:
    >>> register_shape("triangle", ((5,-3),(0,5),(-5,-3)))

None
=================================== back ===================================
Help on function back in turtle:

turtle.back = back(distance)
    Move the turtle backward by distance.
    
    Aliases: back | backward | bk
    
    Argument:
    distance -- a number
    
    Move the turtle backward by distance, opposite to the direction the
    turtle is headed. Do not change the turtle's heading.
    
    Example:
    >>> position()
    (0.00, 0.00)
    >>> backward(30)
    >>> position()
    (-30.00, 0.00)

None
=================================== backward ===================================
Help on function backward in turtle:

turtle.backward = backward(distance)
    Move the turtle backward by distance.
    
    Aliases: back | backward | bk
    
    Argument:
    distance -- a number
    
    Move the turtle backward by distance, opposite to the direction the
    turtle is headed. Do not change the turtle's heading.
    
    Example:
    >>> position()
    (0.00, 0.00)
    >>> backward(30)
    >>> position()
    (-30.00, 0.00)

None
=================================== begin_fill ===================================
Help on function begin_fill in turtle:

turtle.begin_fill = begin_fill()
    Called just before drawing a shape to be filled.
    
    No argument.
    
    Example:
    >>> color("black", "red")
    >>> begin_fill()
    >>> circle(60)
    >>> end_fill()

None
=================================== begin_poly ===================================
Help on function begin_poly in turtle:

turtle.begin_poly = begin_poly()
    Start recording the vertices of a polygon.
    
    No argument.
    
    Start recording the vertices of a polygon. Current turtle position
    is first point of polygon.
    
    Example:
    >>> begin_poly()

None
=================================== bgcolor ===================================
Help on function bgcolor in turtle:

turtle.bgcolor = bgcolor(*args)
    Set or return backgroundcolor of the TurtleScreen.
    
    Arguments (if given): a color string or three numbers
    in the range 0..colormode or a 3-tuple of such numbers.
    
    Example:
    >>> bgcolor("orange")
    >>> bgcolor()
    'orange'
    >>> bgcolor(0.5,0,0.5)
    >>> bgcolor()
    '#800080'

None
=================================== bgpic ===================================
Help on function bgpic in turtle:

turtle.bgpic = bgpic(picname=None)
    Set background image or return name of current backgroundimage.
    
    Optional argument:
    picname -- a string, name of a gif-file or "nopic".
    
    If picname is a filename, set the corresponding image as background.
    If picname is "nopic", delete backgroundimage, if present.
    If picname is None, return the filename of the current backgroundimage.
    
    Example:
    >>> bgpic()
    'nopic'
    >>> bgpic("landscape.gif")
    >>> bgpic()
    'landscape.gif'

None
=================================== bk ===================================
Help on function bk in turtle:

turtle.bk = bk(distance)
    Move the turtle backward by distance.
    
    Aliases: back | backward | bk
    
    Argument:
    distance -- a number
    
    Move the turtle backward by distance, opposite to the direction the
    turtle is headed. Do not change the turtle's heading.
    
    Example:
    >>> position()
    (0.00, 0.00)
    >>> backward(30)
    >>> position()
    (-30.00, 0.00)

None
=================================== bye ===================================
Help on function bye in turtle:

turtle.bye = bye()
    Shut the turtlegraphics window.
    
    Example:
    >>> bye()

None
=================================== circle ===================================
Help on function circle in turtle:

turtle.circle = circle(radius, extent=None, steps=None)
    Draw a circle with given radius.
    
    Arguments:
    radius -- a number
    extent (optional) -- a number
    steps (optional) -- an integer
    
    Draw a circle with given radius. The center is radius units left
    of the turtle; extent - an angle - determines which part of the
    circle is drawn. If extent is not given, draw the entire circle.
    If extent is not a full circle, one endpoint of the arc is the
    current pen position. Draw the arc in counterclockwise direction
    if radius is positive, otherwise in clockwise direction. Finally
    the direction of the turtle is changed by the amount of extent.
    
    As the circle is approximated by an inscribed regular polygon,
    steps determines the number of steps to use. If not given,
    it will be calculated automatically. Maybe used to draw regular
    polygons.
    
    call: circle(radius)                  # full circle
    --or: circle(radius, extent)          # arc
    --or: circle(radius, extent, steps)
    --or: circle(radius, steps=6)         # 6-sided polygon
    
    Example:
    >>> circle(50)
    >>> circle(120, 180)  # semicircle

None
=================================== clear ===================================
Help on function clear in turtle:

turtle.clear = clear()
    Delete the turtle's drawings from the screen. Do not move 
    
    No arguments.
    
    Delete the turtle's drawings from the screen. Do not move 
    State and position of the turtle as well as drawings of other
    turtles are not affected.
    
    Examples:
    >>> clear()

None
=================================== clearscreen ===================================
Help on function clearscreen in turtle:

turtle.clearscreen = clearscreen()
    Delete all drawings and all turtles from the TurtleScreen.
    
    No argument.
    
    Reset empty TurtleScreen to its initial state: white background,
    no backgroundimage, no eventbindings and tracing on.
    
    Example:
    >>> clear()
    
    Note: this method is not available as function.

None
=================================== clearstamp ===================================
Help on function clearstamp in turtle:

turtle.clearstamp = clearstamp(stampid)
    Delete stamp with given stampid
    
    Argument:
    stampid - an integer, must be return value of previous stamp() call.
    
    Example:
    >>> color("blue")
    >>> astamp = stamp()
    >>> fd(50)
    >>> clearstamp(astamp)

None
=================================== clearstamps ===================================
Help on function clearstamps in turtle:

turtle.clearstamps = clearstamps(n=None)
    Delete all or first/last n of turtle's stamps.
    
    Optional argument:
    n -- an integer
    
    If n is None, delete all of pen's stamps,
    else if n > 0 delete first n stamps
    else if n < 0 delete last n stamps.
    
    Example:
    >>> for i in range(8):
    ...     stamp(); fd(30)
    ...
    >>> clearstamps(2)
    >>> clearstamps(-2)
    >>> clearstamps()

None
=================================== clone ===================================
Help on function clone in turtle:

turtle.clone = clone()
    Create and return a clone of the 
    
    No argument.
    
    Create and return a clone of the turtle with same position, heading
    and turtle properties.
    
    Example (for a Turtle instance named mick):
    mick = Turtle()
    joe = mick.clone()

None
=================================== color ===================================
Help on function color in turtle:

turtle.color = color(*args)
    Return or set the pencolor and fillcolor.
    
    Arguments:
    Several input formats are allowed.
    They use 0, 1, 2, or 3 arguments as follows:
    
    color()
        Return the current pencolor and the current fillcolor
        as a pair of color specification strings as are returned
        by pencolor and fillcolor.
    color(colorstring), color((r,g,b)), color(r,g,b)
        inputs as in pencolor, set both, fillcolor and pencolor,
        to the given value.
    color(colorstring1, colorstring2),
    color((r1,g1,b1), (r2,g2,b2))
        equivalent to pencolor(colorstring1) and fillcolor(colorstring2)
        and analogously, if the other input format is used.
    
    If turtleshape is a polygon, outline and interior of that polygon
    is drawn with the newly set colors.
    For more info see: pencolor, fillcolor
    
    Example:
    >>> color('red', 'green')
    >>> color()
    ('red', 'green')
    >>> colormode(255)
    >>> color((40, 80, 120), (160, 200, 240))
    >>> color()
    ('#285078', '#a0c8f0')

None
=================================== colormode ===================================
Help on function colormode in turtle:

turtle.colormode = colormode(cmode=None)
    Return the colormode or set it to 1.0 or 255.
    
    Optional argument:
    cmode -- one of the values 1.0 or 255
    
    r, g, b values of colortriples have to be in range 0..cmode.
    
    Example:
    >>> colormode()
    1.0
    >>> colormode(255)
    >>> pencolor(240,160,80)

None
=================================== config_dict ===================================
Help on function config_dict in turtle:

turtle.config_dict = config_dict(filename)
    Convert content of config-file into dictionary.

None
=================================== deepcopy ===================================
Help on function deepcopy in turtle:

turtle.deepcopy = deepcopy(x, memo=None, _nil=[])
    Deep copy operation on arbitrary Python objects.
    
    See the module's __doc__ string for more info.

None
=================================== degrees ===================================
Help on function degrees in turtle:

turtle.degrees = degrees(fullcircle=360.0)
    Set angle measurement units to degrees.
    
    Optional argument:
    fullcircle -  a number
    
    Set angle measurement units, i. e. set number
    of 'degrees' for a full circle. Default value is
    360 degrees.
    
    Example:
    >>> left(90)
    >>> heading()
    90
    
    Change angle measurement unit to grad (also known as gon,
    grade, or gradian and equals 1/100-th of the right angle.)
    >>> degrees(400.0)
    >>> heading()
    100

None
=================================== delay ===================================
Help on function delay in turtle:

turtle.delay = delay(delay=None)
    Return or set the drawing delay in milliseconds.
    
    Optional argument:
    delay -- positive integer
    
    Example:
    >>> delay(15)
    >>> delay()
    15

None
=================================== distance ===================================
Help on function distance in turtle:

turtle.distance = distance(x, y=None)
    Return the distance from the turtle to (x,y) in turtle step units.
    
    Arguments:
    x -- a number   or  a pair/vector of numbers   or   a turtle instance
    y -- a number       None                            None
    
    call: distance(x, y)         # two coordinates
    --or: distance((x, y))       # a pair (tuple) of coordinates
    --or: distance(vec)          # e.g. as returned by pos()
    --or: distance(mypen)        # where mypen is another turtle
    
    Example:
    >>> pos()
    (0.00, 0.00)
    >>> distance(30,40)
    50.0
    >>> pen = Turtle()
    >>> pen.forward(77)
    >>> distance(pen)
    77.0

None
=================================== done ===================================
Help on function mainloop in turtle:

turtle.done = mainloop()
    Starts event loop - calling Tkinter's mainloop function.
    
    No argument.
    
    Must be last statement in a turtle graphics program.
    Must NOT be used if a script is run from within IDLE in -n mode
    (No subprocess) - for interactive use of turtle graphics.
    
    Example:
    >>> mainloop()

None
=================================== dot ===================================
Help on function dot in turtle:

turtle.dot = dot(size=None, *color)
    Draw a dot with diameter size, using color.
    
    Optional arguments:
    size -- an integer >= 1 (if given)
    color -- a colorstring or a numeric color tuple
    
    Draw a circular dot with diameter size, using color.
    If size is not given, the maximum of pensize+4 and 2*pensize is used.
    
    Example:
    >>> dot()
    >>> fd(50); dot(20, "blue"); fd(50)

None
=================================== down ===================================
Help on function down in turtle:

turtle.down = down()
    Pull the pen down -- drawing when moving.
    
    Aliases: pendown | pd | down
    
    No argument.
    
    Example:
    >>> pendown()

None
=================================== end_fill ===================================
Help on function end_fill in turtle:

turtle.end_fill = end_fill()
    Fill the shape drawn after the call begin_fill().
    
    No argument.
    
    Example:
    >>> color("black", "red")
    >>> begin_fill()
    >>> circle(60)
    >>> end_fill()

None
=================================== end_poly ===================================
Help on function end_poly in turtle:

turtle.end_poly = end_poly()
    Stop recording the vertices of a polygon.
    
    No argument.
    
    Stop recording the vertices of a polygon. Current turtle position is
    last point of polygon. This will be connected with the first point.
    
    Example:
    >>> end_poly()

None
=================================== exitonclick ===================================
Help on function exitonclick in turtle:

turtle.exitonclick = exitonclick()
    Go into mainloop until the mouse is clicked.
    
    No arguments.
    
    Bind bye() method to mouseclick on TurtleScreen.
    If "using_IDLE" - value in configuration dictionary is False
    (default value), enter mainloop.
    If IDLE with -n switch (no subprocess) is used, this value should be
    set to True in turtle.cfg. In this case IDLE's mainloop
    is active also for the client script.
    
    This is a method of the Screen-class and not available for
    TurtleScreen instances.
    
    Example:
    >>> exitonclick()

None
=================================== fd ===================================
Help on function fd in turtle:

turtle.fd = fd(distance)
    Move the turtle forward by the specified distance.
    
    Aliases: forward | fd
    
    Argument:
    distance -- a number (integer or float)
    
    Move the turtle forward by the specified distance, in the direction
    the turtle is headed.
    
    Example:
    >>> position()
    (0.00, 0.00)
    >>> forward(25)
    >>> position()
    (25.00,0.00)
    >>> forward(-75)
    >>> position()
    (-50.00,0.00)

None
=================================== fillcolor ===================================
Help on function fillcolor in turtle:

turtle.fillcolor = fillcolor(*args)
    Return or set the fillcolor.
    
    Arguments:
    Four input formats are allowed:
      - fillcolor()
        Return the current fillcolor as color specification string,
        possibly in hex-number format (see example).
        May be used as input to another color/pencolor/fillcolor call.
      - fillcolor(colorstring)
        s is a Tk color specification string, such as "red" or "yellow"
      - fillcolor((r, g, b))
        *a tuple* of r, g, and b, which represent, an RGB color,
        and each of r, g, and b are in the range 0..colormode,
        where colormode is either 1.0 or 255
      - fillcolor(r, g, b)
        r, g, and b represent an RGB color, and each of r, g, and b
        are in the range 0..colormode
    
    If turtleshape is a polygon, the interior of that polygon is drawn
    with the newly set fillcolor.
    
    Example:
    >>> fillcolor('violet')
    >>> col = pencolor()
    >>> fillcolor(col)
    >>> fillcolor(0, .5, 0)

None
=================================== filling ===================================
Help on function filling in turtle:

turtle.filling = filling()
    Return fillstate (True if filling, False else).
    
    No argument.
    
    Example:
    >>> begin_fill()
    >>> if filling():
    ...     pensize(5)
    ... else:
    ...     pensize(3)

None
=================================== forward ===================================
Help on function forward in turtle:

turtle.forward = forward(distance)
    Move the turtle forward by the specified distance.
    
    Aliases: forward | fd
    
    Argument:
    distance -- a number (integer or float)
    
    Move the turtle forward by the specified distance, in the direction
    the turtle is headed.
    
    Example:
    >>> position()
    (0.00, 0.00)
    >>> forward(25)
    >>> position()
    (25.00,0.00)
    >>> forward(-75)
    >>> position()
    (-50.00,0.00)

None
=================================== get_poly ===================================
Help on function get_poly in turtle:

turtle.get_poly = get_poly()
    Return the lastly recorded polygon.
    
    No argument.
    
    Example:
    >>> p = get_poly()
    >>> register_shape("myFavouriteShape", p)

None
=================================== get_shapepoly ===================================
Help on function get_shapepoly in turtle:

turtle.get_shapepoly = get_shapepoly()
    Return the current shape polygon as tuple of coordinate pairs.
    
    No argument.
    
    Examples:
    >>> shape("square")
    >>> shapetransform(4, -1, 0, 2)
    >>> get_shapepoly()
    ((50, -20), (30, 20), (-50, 20), (-30, -20))

None
=================================== getcanvas ===================================
Help on function getcanvas in turtle:

turtle.getcanvas = getcanvas()
    Return the Canvas of this TurtleScreen.
    
    No argument.
    
    Example:
    >>> cv = getcanvas()
    >>> cv
    <turtle.ScrolledCanvas instance at 0x010742D8>

None
=================================== getmethparlist ===================================
Help on function getmethparlist in turtle:

turtle.getmethparlist = getmethparlist(ob)
    Get strings describing the arguments for the given object
    
    Returns a pair of strings representing function parameter lists
    including parenthesis.  The first string is suitable for use in
    function definition and the second is suitable for use in function
    call.  The "self" parameter is not included.

None
=================================== getpen ===================================
Help on function getpen in turtle:

turtle.getpen = getpen()
    Return the Turtleobject itself.
    
    No argument.
    
    Only reasonable use: as a function to return the 'anonymous turtle':
    
    Example:
    >>> pet = getturtle()
    >>> pet.fd(50)
    >>> pet
    <Turtle object at 0x0187D810>
    >>> turtles()
    [<Turtle object at 0x0187D810>]

None
=================================== getscreen ===================================
Help on function getscreen in turtle:

turtle.getscreen = getscreen()
    Return the TurtleScreen object, the turtle is drawing  on.
    
    No argument.
    
    Return the TurtleScreen object, the turtle is drawing  on.
    So TurtleScreen-methods can be called for that object.
    
    Example:
    >>> ts = getscreen()
    >>> ts
    <TurtleScreen object at 0x0106B770>
    >>> ts.bgcolor("pink")

None
=================================== getshapes ===================================
Help on function getshapes in turtle:

turtle.getshapes = getshapes()
    Return a list of names of all currently available turtle shapes.
    
    No argument.
    
    Example:
    >>> getshapes()
    ['arrow', 'blank', 'circle', ... , 'turtle']

None
=================================== getturtle ===================================
Help on function getturtle in turtle:

turtle.getturtle = getturtle()
    Return the Turtleobject itself.
    
    No argument.
    
    Only reasonable use: as a function to return the 'anonymous turtle':
    
    Example:
    >>> pet = getturtle()
    >>> pet.fd(50)
    >>> pet
    <Turtle object at 0x0187D810>
    >>> turtles()
    [<Turtle object at 0x0187D810>]

None
=================================== goto ===================================
Help on function goto in turtle:

turtle.goto = goto(x, y=None)
    Move turtle to an absolute position.
    
    Aliases: setpos | setposition | goto:
    
    Arguments:
    x -- a number      or     a pair/vector of numbers
    y -- a number             None
    
    call: goto(x, y)         # two coordinates
    --or: goto((x, y))       # a pair (tuple) of coordinates
    --or: goto(vec)          # e.g. as returned by pos()
    
    Move turtle to an absolute position. If the pen is down,
    a line will be drawn. The turtle's orientation does not change.
    
    Example:
    >>> tp = pos()
    >>> tp
    (0.00, 0.00)
    >>> setpos(60,30)
    >>> pos()
    (60.00,30.00)
    >>> setpos((20,80))
    >>> pos()
    (20.00,80.00)
    >>> setpos(tp)
    >>> pos()
    (0.00,0.00)

None
=================================== heading ===================================
Help on function heading in turtle:

turtle.heading = heading()
    Return the turtle's current heading.
    
    No arguments.
    
    Example:
    >>> left(67)
    >>> heading()
    67.0

None
=================================== hideturtle ===================================
Help on function hideturtle in turtle:

turtle.hideturtle = hideturtle()
    Makes the turtle invisible.
    
    Aliases: hideturtle | ht
    
    No argument.
    
    It's a good idea to do this while you're in the
    middle of a complicated drawing, because hiding
    the turtle speeds up the drawing observably.
    
    Example:
    >>> hideturtle()

None
=================================== home ===================================
Help on function home in turtle:

turtle.home = home()
    Move turtle to the origin - coordinates (0,0).
    
    No arguments.
    
    Move turtle to the origin - coordinates (0,0) and set its
    heading to its start-orientation (which depends on mode).
    
    Example:
    >>> home()

None
=================================== ht ===================================
Help on function ht in turtle:

turtle.ht = ht()
    Makes the turtle invisible.
    
    Aliases: hideturtle | ht
    
    No argument.
    
    It's a good idea to do this while you're in the
    middle of a complicated drawing, because hiding
    the turtle speeds up the drawing observably.
    
    Example:
    >>> hideturtle()

None
=================================== inspect ===================================
Help on module inspect in turtle:

NAME
    inspect - Get useful information from live Python objects.

MODULE REFERENCE
    https://docs.python.org/3.9/library/inspect
    
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    This module encapsulates the interface provided by the internal special
    attributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.
    It also provides some help for examining source code and class layout.
    
    Here are some of the useful functions provided by this module:
    
        ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),
            isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),
            isroutine() - check object types
        getmembers() - get members of an object that satisfy a given condition
    
        getfile(), getsourcefile(), getsource() - find an object's source code
        getdoc(), getcomments() - get documentation on an object
        getmodule() - determine the module that an object came from
        getclasstree() - arrange classes so as to represent their hierarchy
    
        getargvalues(), getcallargs() - get info about function arguments
        getfullargspec() - same, with support for Python 3 features
        formatargvalues() - format an argument spec
        getouterframes(), getinnerframes() - get info about frames
        currentframe() - get the current stack frame
        stack(), trace() - get info about frames on the stack or in a traceback
    
        signature() - get a Signature object for the callable

CLASSES
    builtins.Exception(builtins.BaseException)
        ClassFoundException
        EndOfBlock
    builtins.object
        BlockFinder
        BoundArguments
        Parameter
        Signature
    builtins.tuple(builtins.object)
        ArgInfo
        ArgSpec
        Arguments
        Attribute
        ClosureVars
        FrameInfo
        FullArgSpec
        Traceback
    
    class ArgInfo(builtins.tuple)
     |  ArgInfo(args, varargs, keywords, locals)
     |  
     |  ArgInfo(args, varargs, keywords, locals)
     |  
     |  Method resolution order:
     |      ArgInfo
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |  
     |  _replace(self, /, **kwds)
     |      Return a new ArgInfo object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new ArgInfo object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, args, varargs, keywords, locals)
     |      Create new instance of ArgInfo(args, varargs, keywords, locals)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  args
     |      Alias for field number 0
     |  
     |  varargs
     |      Alias for field number 1
     |  
     |  keywords
     |      Alias for field number 2
     |  
     |  locals
     |      Alias for field number 3
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('args', 'varargs', 'keywords', 'locals')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
    
    class ArgSpec(builtins.tuple)
     |  ArgSpec(args, varargs, keywords, defaults)
     |  
     |  ArgSpec(args, varargs, keywords, defaults)
     |  
     |  Method resolution order:
     |      ArgSpec
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |  
     |  _replace(self, /, **kwds)
     |      Return a new ArgSpec object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new ArgSpec object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, args, varargs, keywords, defaults)
     |      Create new instance of ArgSpec(args, varargs, keywords, defaults)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  args
     |      Alias for field number 0
     |  
     |  varargs
     |      Alias for field number 1
     |  
     |  keywords
     |      Alias for field number 2
     |  
     |  defaults
     |      Alias for field number 3
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('args', 'varargs', 'keywords', 'defaults')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
    
    class Arguments(builtins.tuple)
     |  Arguments(args, varargs, varkw)
     |  
     |  Arguments(args, varargs, varkw)
     |  
     |  Method resolution order:
     |      Arguments
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |  
     |  _replace(self, /, **kwds)
     |      Return a new Arguments object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new Arguments object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, args, varargs, varkw)
     |      Create new instance of Arguments(args, varargs, varkw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  args
     |      Alias for field number 0
     |  
     |  varargs
     |      Alias for field number 1
     |  
     |  varkw
     |      Alias for field number 2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('args', 'varargs', 'varkw')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
    
    class Attribute(builtins.tuple)
     |  Attribute(name, kind, defining_class, object)
     |  
     |  Attribute(name, kind, defining_class, object)
     |  
     |  Method resolution order:
     |      Attribute
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |  
     |  _replace(self, /, **kwds)
     |      Return a new Attribute object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new Attribute object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, name, kind, defining_class, object)
     |      Create new instance of Attribute(name, kind, defining_class, object)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  name
     |      Alias for field number 0
     |  
     |  kind
     |      Alias for field number 1
     |  
     |  defining_class
     |      Alias for field number 2
     |  
     |  object
     |      Alias for field number 3
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('name', 'kind', 'defining_class', 'object')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
    
    class BlockFinder(builtins.object)
     |  Provide a tokeneater() method to detect the end of a code block.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  tokeneater(self, type, token, srowcol, erowcol, line)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BoundArguments(builtins.object)
     |  BoundArguments(signature, arguments)
     |  
     |  Result of `Signature.bind` call.  Holds the mapping of arguments
     |  to the function's parameters.
     |  
     |  Has the following public attributes:
     |  
     |  * arguments : dict
     |      An ordered mutable mapping of parameters' names to arguments' values.
     |      Does not contain arguments' default values.
     |  * signature : Signature
     |      The Signature object that created this instance.
     |  * args : tuple
     |      Tuple of positional arguments values.
     |  * kwargs : dict
     |      Dict of keyword arguments values.
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __getstate__(self)
     |  
     |  __init__(self, signature, arguments)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setstate__(self, state)
     |  
     |  apply_defaults(self)
     |      Set default values for missing arguments.
     |      
     |      For variable-positional arguments (*args) the default is an
     |      empty tuple.
     |      
     |      For variable-keyword arguments (**kwargs) the default is an
     |      empty dict.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  args
     |  
     |  kwargs
     |  
     |  signature
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  arguments
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
    
    class ClassFoundException(builtins.Exception)
     |  Method resolution order:
     |      ClassFoundException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class ClosureVars(builtins.tuple)
     |  ClosureVars(nonlocals, globals, builtins, unbound)
     |  
     |  ClosureVars(nonlocals, globals, builtins, unbound)
     |  
     |  Method resolution order:
     |      ClosureVars
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |  
     |  _replace(self, /, **kwds)
     |      Return a new ClosureVars object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new ClosureVars object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, nonlocals, globals, builtins, unbound)
     |      Create new instance of ClosureVars(nonlocals, globals, builtins, unbound)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  nonlocals
     |      Alias for field number 0
     |  
     |  globals
     |      Alias for field number 1
     |  
     |  builtins
     |      Alias for field number 2
     |  
     |  unbound
     |      Alias for field number 3
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('nonlocals', 'globals', 'builtins', 'unbound')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
    
    class EndOfBlock(builtins.Exception)
     |  Method resolution order:
     |      EndOfBlock
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class FrameInfo(builtins.tuple)
     |  FrameInfo(frame, filename, lineno, function, code_context, index)
     |  
     |  FrameInfo(frame, filename, lineno, function, code_context, index)
     |  
     |  Method resolution order:
     |      FrameInfo
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |  
     |  _replace(self, /, **kwds)
     |      Return a new FrameInfo object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new FrameInfo object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, frame, filename, lineno, function, code_context, index)
     |      Create new instance of FrameInfo(frame, filename, lineno, function, code_context, index)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  frame
     |      Alias for field number 0
     |  
     |  filename
     |      Alias for field number 1
     |  
     |  lineno
     |      Alias for field number 2
     |  
     |  function
     |      Alias for field number 3
     |  
     |  code_context
     |      Alias for field number 4
     |  
     |  index
     |      Alias for field number 5
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('frame', 'filename', 'lineno', 'function', 'code_context', ...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
    
    class FullArgSpec(builtins.tuple)
     |  FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)
     |  
     |  FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)
     |  
     |  Method resolution order:
     |      FullArgSpec
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |  
     |  _replace(self, /, **kwds)
     |      Return a new FullArgSpec object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new FullArgSpec object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)
     |      Create new instance of FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  args
     |      Alias for field number 0
     |  
     |  varargs
     |      Alias for field number 1
     |  
     |  varkw
     |      Alias for field number 2
     |  
     |  defaults
     |      Alias for field number 3
     |  
     |  kwonlyargs
     |      Alias for field number 4
     |  
     |  kwonlydefaults
     |      Alias for field number 5
     |  
     |  annotations
     |      Alias for field number 6
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('args', 'varargs', 'varkw', 'defaults', 'kwonlyargs', 'kwon...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
    
    class Parameter(builtins.object)
     |  Parameter(name, kind, *, default, annotation)
     |  
     |  Represents a parameter in a function signature.
     |  
     |  Has the following public attributes:
     |  
     |  * name : str
     |      The name of the parameter as a string.
     |  * default : object
     |      The default value for the parameter if specified.  If the
     |      parameter has no default value, this attribute is set to
     |      `Parameter.empty`.
     |  * annotation
     |      The annotation for the parameter if specified.  If the
     |      parameter has no annotation, this attribute is set to
     |      `Parameter.empty`.
     |  * kind : str
     |      Describes how argument values are bound to the parameter.
     |      Possible values: `Parameter.POSITIONAL_ONLY`,
     |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
     |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __init__(self, name, kind, *, default, annotation)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __reduce__(self)
     |      Helper for pickle.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setstate__(self, state)
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
     |      Creates a customized copy of the Parameter.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  annotation
     |  
     |  default
     |  
     |  kind
     |  
     |  name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
     |  
     |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
     |  
     |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
     |  
     |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
     |  
     |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
     |  
     |  empty = <class 'inspect._empty'>
     |      Marker object for Signature.empty and Parameter.empty.
    
    class Signature(builtins.object)
     |  Signature(parameters=None, *, return_annotation, __validate_parameters__=True)
     |  
     |  A Signature object represents the overall signature of a function.
     |  It stores a Parameter object for each parameter accepted by the
     |  function, as well as information specific to the function itself.
     |  
     |  A Signature object has the following public attributes and methods:
     |  
     |  * parameters : OrderedDict
     |      An ordered mapping of parameters' names to the corresponding
     |      Parameter objects (keyword-only arguments are in the same order
     |      as listed in `code.co_varnames`).
     |  * return_annotation : object
     |      The annotation for the return type of the function if specified.
     |      If the function has no annotation for its return type, this
     |      attribute is set to `Signature.empty`.
     |  * bind(*args, **kwargs) -> BoundArguments
     |      Creates a mapping from positional and keyword arguments to
     |      parameters.
     |  * bind_partial(*args, **kwargs) -> BoundArguments
     |      Creates a partial mapping from positional and keyword arguments
     |      to parameters (simulating 'functools.partial' behavior.)
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __init__(self, parameters=None, *, return_annotation, __validate_parameters__=True)
     |      Constructs Signature from the given list of Parameter
     |      objects and 'return_annotation'.  All arguments are optional.
     |  
     |  __reduce__(self)
     |      Helper for pickle.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setstate__(self, state)
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  bind(self, /, *args, **kwargs)
     |      Get a BoundArguments object, that maps the passed `args`
     |      and `kwargs` to the function's signature.  Raises `TypeError`
     |      if the passed arguments can not be bound.
     |  
     |  bind_partial(self, /, *args, **kwargs)
     |      Get a BoundArguments object, that partially maps the
     |      passed `args` and `kwargs` to the function's signature.
     |      Raises `TypeError` if the passed arguments can not be bound.
     |  
     |  replace(self, *, parameters=<class 'inspect._void'>, return_annotation=<class 'inspect._void'>)
     |      Creates a customized copy of the Signature.
     |      Pass 'parameters' and/or 'return_annotation' arguments
     |      to override them in the new copy.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  from_builtin(func) from builtins.type
     |      Constructs Signature for the given builtin function.
     |      
     |      Deprecated since Python 3.5, use `Signature.from_callable()`.
     |  
     |  from_callable(obj, *, follow_wrapped=True) from builtins.type
     |      Constructs Signature for the given callable object.
     |  
     |  from_function(func) from builtins.type
     |      Constructs Signature for the given python function.
     |      
     |      Deprecated since Python 3.5, use `Signature.from_callable()`.
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  parameters
     |  
     |  return_annotation
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  empty = <class 'inspect._empty'>
     |      Marker object for Signature.empty and Parameter.empty.
    
    class Traceback(builtins.tuple)
     |  Traceback(filename, lineno, function, code_context, index)
     |  
     |  Traceback(filename, lineno, function, code_context, index)
     |  
     |  Method resolution order:
     |      Traceback
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new dict which maps field names to their values.
     |  
     |  _replace(self, /, **kwds)
     |      Return a new Traceback object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new Traceback object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, filename, lineno, function, code_context, index)
     |      Create new instance of Traceback(filename, lineno, function, code_context, index)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  filename
     |      Alias for field number 0
     |  
     |  lineno
     |      Alias for field number 1
     |  
     |  function
     |      Alias for field number 2
     |  
     |  code_context
     |      Alias for field number 3
     |  
     |  index
     |      Alias for field number 4
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('filename', 'lineno', 'function', 'code_context', 'index')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585

FUNCTIONS
    classify_class_attrs(cls)
        Return list of attribute-descriptor tuples.
        
        For each name in dir(cls), the return list contains a 4-tuple
        with these elements:
        
            0. The name (a string).
        
            1. The kind of attribute this is, one of these strings:
                   'class method'    created via classmethod()
                   'static method'   created via staticmethod()
                   'property'        created via property()
                   'method'          any other flavor of method or descriptor
                   'data'            not a method
        
            2. The class which defined this attribute (a class).
        
            3. The object as obtained by calling getattr; if this fails, or if the
               resulting object does not live anywhere in the class' mro (including
               metaclasses) then the object is looked up in the defining class's
               dict (found by walking the mro).
        
        If one of the items in dir(cls) is stored in the metaclass it will now
        be discovered and not have None be listed as the class in which it was
        defined.  Any items whose home class cannot be discovered are skipped.
    
    cleandoc(doc)
        Clean up indentation from docstrings.
        
        Any whitespace that can be uniformly removed from the second line
        onwards is removed.
    
    currentframe()
        Return the frame of the caller or None if this is not possible.
    
    findsource(object)
        Return the entire source file and starting line number for an object.
        
        The argument may be a module, class, method, function, traceback, frame,
        or code object.  The source code is returned as a list of all the lines
        in the file and the line number indexes a line in that list.  An OSError
        is raised if the source code cannot be retrieved.
    
    formatannotation(annotation, base_module=None)
    
    formatannotationrelativeto(object)
    
    formatargspec(args, varargs=None, varkw=None, defaults=None, kwonlyargs=(), kwonlydefaults={}, annotations={}, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x102bfc310>, formatvarkw=<function <lambda> at 0x102bfc3a0>, formatvalue=<function <lambda> at 0x102bfc430>, formatreturns=<function <lambda> at 0x102bfc4c0>, formatannotation=<function formatannotation at 0x102bfc1f0>)
        Format an argument spec from the values returned by getfullargspec.
        
        The first seven arguments are (args, varargs, varkw, defaults,
        kwonlyargs, kwonlydefaults, annotations).  The other five arguments
        are the corresponding optional formatting functions that are called to
        turn names and values into strings.  The last argument is an optional
        function to format the sequence of arguments.
        
        Deprecated since Python 3.5: use the `signature` function and `Signature`
        objects.
    
    formatargvalues(args, varargs, varkw, locals, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x102bfc670>, formatvarkw=<function <lambda> at 0x102bfc700>, formatvalue=<function <lambda> at 0x102bfc790>)
        Format an argument spec from the 4 values returned by getargvalues.
        
        The first four arguments are (args, varargs, varkw, locals).  The
        next four arguments are the corresponding optional formatting functions
        that are called to turn names and values into strings.  The ninth
        argument is an optional function to format the sequence of arguments.
    
    getabsfile(object, _filename=None)
        Return an absolute path to the source or compiled file for an object.
        
        The idea is for each object to have a unique origin, so this routine
        normalizes the result as much as possible.
    
    getargs(co)
        Get information about the arguments accepted by a code object.
        
        Three things are returned: (args, varargs, varkw), where
        'args' is the list of argument names. Keyword-only arguments are
        appended. 'varargs' and 'varkw' are the names of the * and **
        arguments or None.
    
    getargspec(func)
        Get the names and default values of a function's parameters.
        
        A tuple of four things is returned: (args, varargs, keywords, defaults).
        'args' is a list of the argument names, including keyword-only argument names.
        'varargs' and 'keywords' are the names of the * and ** parameters or None.
        'defaults' is an n-tuple of the default values of the last n parameters.
        
        This function is deprecated, as it does not support annotations or
        keyword-only parameters and will raise ValueError if either is present
        on the supplied callable.
        
        For a more structured introspection API, use inspect.signature() instead.
        
        Alternatively, use getfullargspec() for an API with a similar namedtuple
        based interface, but full support for annotations and keyword-only
        parameters.
        
        Deprecated since Python 3.5, use `inspect.getfullargspec()`.
    
    getargvalues(frame)
        Get information about arguments passed into a particular frame.
        
        A tuple of four things is returned: (args, varargs, varkw, locals).
        'args' is a list of the argument names.
        'varargs' and 'varkw' are the names of the * and ** arguments or None.
        'locals' is the locals dictionary of the given frame.
    
    getattr_static(obj, attr, default=<object object at 0x1027e8c00>)
        Retrieve attributes without triggering dynamic lookup via the
        descriptor protocol,  __getattr__ or __getattribute__.
        
        Note: this function may not be able to retrieve all attributes
        that getattr can fetch (like dynamically created attributes)
        and may find attributes that getattr can't (like descriptors
        that raise AttributeError). It can also return descriptor objects
        instead of instance members in some cases. See the
        documentation for details.
    
    getblock(lines)
        Extract the block of code at the top of the given list of lines.
    
    getcallargs(func, /, *positional, **named)
        Get the mapping of arguments to values.
        
        A dict is returned, with keys the function argument names (including the
        names of the * and ** arguments, if any), and values the respective bound
        values from 'positional' and 'named'.
    
    getclasstree(classes, unique=False)
        Arrange the given list of classes into a hierarchy of nested lists.
        
        Where a nested list appears, it contains classes derived from the class
        whose entry immediately precedes the list.  Each entry is a 2-tuple
        containing a class and a tuple of its base classes.  If the 'unique'
        argument is true, exactly one entry appears in the returned structure
        for each class in the given list.  Otherwise, classes using multiple
        inheritance and their descendants will appear multiple times.
    
    getclosurevars(func)
        Get the mapping of free variables to their current values.
        
        Returns a named tuple of dicts mapping the current nonlocal, global
        and builtin references as seen by the body of the function. A final
        set of unbound names that could not be resolved is also provided.
    
    getcomments(object)
        Get lines of comments immediately preceding an object's source code.
        
        Returns None when source can't be found.
    
    getcoroutinelocals(coroutine)
        Get the mapping of coroutine local variables to their current values.
        
        A dict is returned, with the keys the local variable names and values the
        bound values.
    
    getcoroutinestate(coroutine)
        Get current state of a coroutine object.
        
        Possible states are:
          CORO_CREATED: Waiting to start execution.
          CORO_RUNNING: Currently being executed by the interpreter.
          CORO_SUSPENDED: Currently suspended at an await expression.
          CORO_CLOSED: Execution has completed.
    
    getdoc(object)
        Get the documentation string for an object.
        
        All tabs are expanded to spaces.  To clean up docstrings that are
        indented to line up with blocks of code, any whitespace than can be
        uniformly removed from the second line onwards is removed.
    
    getfile(object)
        Work out which source or compiled file an object was defined in.
    
    getframeinfo(frame, context=1)
        Get information about a frame or traceback object.
        
        A tuple of five things is returned: the filename, the line number of
        the current line, the function name, a list of lines of context from
        the source code, and the index of the current line within that list.
        The optional second argument specifies the number of lines of context
        to return, which are centered around the current line.
    
    getfullargspec(func)
        Get the names and default values of a callable object's parameters.
        
        A tuple of seven things is returned:
        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).
        'args' is a list of the parameter names.
        'varargs' and 'varkw' are the names of the * and ** parameters or None.
        'defaults' is an n-tuple of the default values of the last n parameters.
        'kwonlyargs' is a list of keyword-only parameter names.
        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.
        'annotations' is a dictionary mapping parameter names to annotations.
        
        Notable differences from inspect.signature():
          - the "self" parameter is always reported, even for bound methods
          - wrapper chains defined by __wrapped__ *not* unwrapped automatically
    
    getgeneratorlocals(generator)
        Get the mapping of generator local variables to their current values.
        
        A dict is returned, with the keys the local variable names and values the
        bound values.
    
    getgeneratorstate(generator)
        Get current state of a generator-iterator.
        
        Possible states are:
          GEN_CREATED: Waiting to start execution.
          GEN_RUNNING: Currently being executed by the interpreter.
          GEN_SUSPENDED: Currently suspended at a yield expression.
          GEN_CLOSED: Execution has completed.
    
    getinnerframes(tb, context=1)
        Get a list of records for a traceback's frame and all lower frames.
        
        Each record contains a frame object, filename, line number, function
        name, a list of lines of context, and index within the context.
    
    getlineno(frame)
        Get the line number from a frame object, allowing for optimization.
    
    getmembers(object, predicate=None)
        Return all members of an object as (name, value) pairs sorted by name.
        Optionally, only return members that satisfy a given predicate.
    
    getmodule(object, _filename=None)
        Return the module an object was defined in, or None if not found.
    
    getmodulename(path)
        Return the module name for a given file, or None.
    
    getmro(cls)
        Return tuple of base classes (including cls) in method resolution order.
    
    getouterframes(frame, context=1)
        Get a list of records for a frame and all higher (calling) frames.
        
        Each record contains a frame object, filename, line number, function
        name, a list of lines of context, and index within the context.
    
    getsource(object)
        Return the text of the source code for an object.
        
        The argument may be a module, class, method, function, traceback, frame,
        or code object.  The source code is returned as a single string.  An
        OSError is raised if the source code cannot be retrieved.
    
    getsourcefile(object)
        Return the filename that can be used to locate an object's source.
        Return None if no way can be identified to get the source.
    
    getsourcelines(object)
        Return a list of source lines and starting line number for an object.
        
        The argument may be a module, class, method, function, traceback, frame,
        or code object.  The source code is returned as a list of the lines
        corresponding to the object and the line number indicates where in the
        original source file the first line of code was found.  An OSError is
        raised if the source code cannot be retrieved.
    
    indentsize(line)
        Return the indent size, in spaces, at the start of a line of text.
    
    isabstract(object)
        Return true if the object is an abstract base class (ABC).
    
    isasyncgen(object)
        Return true if the object is an asynchronous generator.
    
    isasyncgenfunction(obj)
        Return true if the object is an asynchronous generator function.
        
        Asynchronous generator functions are defined with "async def"
        syntax and have "yield" expressions in their body.
    
    isawaitable(object)
        Return true if object can be passed to an ``await`` expression.
    
    isbuiltin(object)
        Return true if the object is a built-in function or method.
        
        Built-in functions and methods provide these attributes:
            __doc__         documentation string
            __name__        original name of this function or method
            __self__        instance to which a method is bound, or None
    
    isclass(object)
        Return true if the object is a class.
        
        Class objects provide these attributes:
            __doc__         documentation string
            __module__      name of module in which this class was defined
    
    iscode(object)
        Return true if the object is a code object.
        
        Code objects provide these attributes:
            co_argcount         number of arguments (not including *, ** args
                                or keyword only arguments)
            co_code             string of raw compiled bytecode
            co_cellvars         tuple of names of cell variables
            co_consts           tuple of constants used in the bytecode
            co_filename         name of file in which this code object was created
            co_firstlineno      number of first line in Python source code
            co_flags            bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg
                                | 16=nested | 32=generator | 64=nofree | 128=coroutine
                                | 256=iterable_coroutine | 512=async_generator
            co_freevars         tuple of names of free variables
            co_posonlyargcount  number of positional only arguments
            co_kwonlyargcount   number of keyword only arguments (not including ** arg)
            co_lnotab           encoded mapping of line numbers to bytecode indices
            co_name             name with which this code object was defined
            co_names            tuple of names other than arguments and function locals
            co_nlocals          number of local variables
            co_stacksize        virtual machine stack space required
            co_varnames         tuple of names of arguments and local variables
    
    iscoroutine(object)
        Return true if the object is a coroutine.
    
    iscoroutinefunction(obj)
        Return true if the object is a coroutine function.
        
        Coroutine functions are defined with "async def" syntax.
    
    isdatadescriptor(object)
        Return true if the object is a data descriptor.
        
        Data descriptors have a __set__ or a __delete__ attribute.  Examples are
        properties (defined in Python) and getsets and members (defined in C).
        Typically, data descriptors will also have __name__ and __doc__ attributes
        (properties, getsets, and members have both of these attributes), but this
        is not guaranteed.
    
    isframe(object)
        Return true if the object is a frame object.
        
        Frame objects provide these attributes:
            f_back          next outer frame object (this frame's caller)
            f_builtins      built-in namespace seen by this frame
            f_code          code object being executed in this frame
            f_globals       global namespace seen by this frame
            f_lasti         index of last attempted instruction in bytecode
            f_lineno        current line number in Python source code
            f_locals        local namespace seen by this frame
            f_trace         tracing function for this frame, or None
    
    isfunction(object)
        Return true if the object is a user-defined function.
        
        Function objects provide these attributes:
            __doc__         documentation string
            __name__        name with which this function was defined
            __code__        code object containing compiled function bytecode
            __defaults__    tuple of any default values for arguments
            __globals__     global namespace in which this function was defined
            __annotations__ dict of parameter annotations
            __kwdefaults__  dict of keyword only parameters with defaults
    
    isgenerator(object)
        Return true if the object is a generator.
        
        Generator objects provide these attributes:
            __iter__        defined to support iteration over container
            close           raises a new GeneratorExit exception inside the
                            generator to terminate the iteration
            gi_code         code object
            gi_frame        frame object or possibly None once the generator has
                            been exhausted
            gi_running      set to 1 when generator is executing, 0 otherwise
            next            return the next item from the container
            send            resumes the generator and "sends" a value that becomes
                            the result of the current yield-expression
            throw           used to raise an exception inside the generator
    
    isgeneratorfunction(obj)
        Return true if the object is a user-defined generator function.
        
        Generator function objects provide the same attributes as functions.
        See help(isfunction) for a list of attributes.
    
    isgetsetdescriptor(object)
        Return true if the object is a getset descriptor.
        
        getset descriptors are specialized descriptors defined in extension
        modules.
    
    ismemberdescriptor(object)
        Return true if the object is a member descriptor.
        
        Member descriptors are specialized descriptors defined in extension
        modules.
    
    ismethod(object)
        Return true if the object is an instance method.
        
        Instance method objects provide these attributes:
            __doc__         documentation string
            __name__        name with which this method was defined
            __func__        function object containing implementation of method
            __self__        instance to which this method is bound
    
    ismethoddescriptor(object)
        Return true if the object is a method descriptor.
        
        But not if ismethod() or isclass() or isfunction() are true.
        
        This is new in Python 2.2, and, for example, is true of int.__add__.
        An object passing this test has a __get__ attribute but not a __set__
        attribute, but beyond that the set of attributes varies.  __name__ is
        usually sensible, and __doc__ often is.
        
        Methods implemented via descriptors that also pass one of the other
        tests return false from the ismethoddescriptor() test, simply because
        the other tests promise more -- you can, e.g., count on having the
        __func__ attribute (etc) when an object passes ismethod().
    
    ismodule(object)
        Return true if the object is a module.
        
        Module objects provide these attributes:
            __cached__      pathname to byte compiled file
            __doc__         documentation string
            __file__        filename (missing for built-in modules)
    
    isroutine(object)
        Return true if the object is any kind of function or method.
    
    istraceback(object)
        Return true if the object is a traceback.
        
        Traceback objects provide these attributes:
            tb_frame        frame object at this level
            tb_lasti        index of last attempted instruction in bytecode
            tb_lineno       current line number in Python source code
            tb_next         next inner traceback object (called by this level)
    
    signature(obj, *, follow_wrapped=True)
        Get a signature object for the passed callable.
    
    stack(context=1)
        Return a list of records for the stack above the caller's frame.
    
    trace(context=1)
        Return a list of records for the stack below the current exception.
    
    unwrap(func, *, stop=None)
        Get the object wrapped by *func*.
        
        Follows the chain of :attr:`__wrapped__` attributes returning the last
        object in the chain.
        
        *stop* is an optional callback accepting an object in the wrapper chain
        as its sole argument that allows the unwrapping to be terminated early if
        the callback returns a true value. If the callback never returns a true
        value, the last object in the chain is returned as usual. For example,
        :func:`signature` uses this to stop unwrapping if any object in the
        chain has a ``__signature__`` attribute defined.
        
        :exc:`ValueError` is raised if a cycle is encountered.
    
    walktree(classes, children, parent)
        Recursive helper function for getclasstree().

DATA
    CORO_CLOSED = 'CORO_CLOSED'
    CORO_CREATED = 'CORO_CREATED'
    CORO_RUNNING = 'CORO_RUNNING'
    CORO_SUSPENDED = 'CORO_SUSPENDED'
    CO_ASYNC_GENERATOR = 512
    CO_COROUTINE = 128
    CO_GENERATOR = 32
    CO_ITERABLE_COROUTINE = 256
    CO_NESTED = 16
    CO_NEWLOCALS = 2
    CO_NOFREE = 64
    CO_OPTIMIZED = 1
    CO_VARARGS = 4
    CO_VARKEYWORDS = 8
    GEN_CLOSED = 'GEN_CLOSED'
    GEN_CREATED = 'GEN_CREATED'
    GEN_RUNNING = 'GEN_RUNNING'
    GEN_SUSPENDED = 'GEN_SUSPENDED'
    TPFLAGS_IS_ABSTRACT = 1048576
    k = 512
    mod_dict = {'ArgInfo': <class 'inspect.ArgInfo'>, 'ArgSpec': <class 'i...
    modulesbyfile = {}
    v = 'ASYNC_GENERATOR'

AUTHOR
    ('Ka-Ping Yee <ping@lfw.org>', 'Yury Selivanov <yselivanov@sprymix.com>')

FILE
    /Users/santosg/miniconda3/lib/python3.9/inspect.py


None
=================================== isdown ===================================
Help on function isdown in turtle:

turtle.isdown = isdown()
    Return True if pen is down, False if it's up.
    
    No argument.
    
    Example:
    >>> penup()
    >>> isdown()
    False
    >>> pendown()
    >>> isdown()
    True

None
=================================== isfile ===================================
Help on function isfile in turtle:

turtle.isfile = isfile(path)
    Test whether a path is a regular file

None
=================================== isvisible ===================================
Help on function isvisible in turtle:

turtle.isvisible = isvisible()
    Return True if the Turtle is shown, False if it's hidden.
    
    No argument.
    
    Example:
    >>> hideturtle()
    >>> print isvisible():
    False

None
=================================== join ===================================
Help on function join in turtle:

turtle.join = join(a, *p)
    Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator.

None
=================================== left ===================================
Help on function left in turtle:

turtle.left = left(angle)
    Turn turtle left by angle units.
    
    Aliases: left | lt
    
    Argument:
    angle -- a number (integer or float)
    
    Turn turtle left by angle units. (Units are by default degrees,
    but can be set via the degrees() and radians() functions.)
    Angle orientation depends on mode. (See this.)
    
    Example:
    >>> heading()
    22.0
    >>> left(45)
    >>> heading()
    67.0

None
=================================== listen ===================================
Help on function listen in turtle:

turtle.listen = listen(xdummy=None, ydummy=None)
    Set focus on TurtleScreen (in order to collect key-events)
    
    No arguments.
    Dummy arguments are provided in order
    to be able to pass listen to the onclick method.
    
    Example:
    >>> listen()

None
=================================== lt ===================================
Help on function lt in turtle:

turtle.lt = lt(angle)
    Turn turtle left by angle units.
    
    Aliases: left | lt
    
    Argument:
    angle -- a number (integer or float)
    
    Turn turtle left by angle units. (Units are by default degrees,
    but can be set via the degrees() and radians() functions.)
    Angle orientation depends on mode. (See this.)
    
    Example:
    >>> heading()
    22.0
    >>> left(45)
    >>> heading()
    67.0

None
=================================== mainloop ===================================
Help on function mainloop in turtle:

turtle.mainloop = mainloop()
    Starts event loop - calling Tkinter's mainloop function.
    
    No argument.
    
    Must be last statement in a turtle graphics program.
    Must NOT be used if a script is run from within IDLE in -n mode
    (No subprocess) - for interactive use of turtle graphics.
    
    Example:
    >>> mainloop()

None
=================================== math ===================================
Help on module math in turtle:

NAME
    math

MODULE REFERENCE
    https://docs.python.org/3.9/library/math
    
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    This module provides access to the mathematical functions
    defined by the C standard.

FUNCTIONS
    acos(x, /)
        Return the arc cosine (measured in radians) of x.
        
        The result is between 0 and pi.
    
    acosh(x, /)
        Return the inverse hyperbolic cosine of x.
    
    asin(x, /)
        Return the arc sine (measured in radians) of x.
        
        The result is between -pi/2 and pi/2.
    
    asinh(x, /)
        Return the inverse hyperbolic sine of x.
    
    atan(x, /)
        Return the arc tangent (measured in radians) of x.
        
        The result is between -pi/2 and pi/2.
    
    atan2(y, x, /)
        Return the arc tangent (measured in radians) of y/x.
        
        Unlike atan(y/x), the signs of both x and y are considered.
    
    atanh(x, /)
        Return the inverse hyperbolic tangent of x.
    
    ceil(x, /)
        Return the ceiling of x as an Integral.
        
        This is the smallest integer >= x.
    
    comb(n, k, /)
        Number of ways to choose k items from n items without repetition and without order.
        
        Evaluates to n! / (k! * (n - k)!) when k <= n and evaluates
        to zero when k > n.
        
        Also called the binomial coefficient because it is equivalent
        to the coefficient of k-th term in polynomial expansion of the
        expression (1 + x)**n.
        
        Raises TypeError if either of the arguments are not integers.
        Raises ValueError if either of the arguments are negative.
    
    copysign(x, y, /)
        Return a float with the magnitude (absolute value) of x but the sign of y.
        
        On platforms that support signed zeros, copysign(1.0, -0.0)
        returns -1.0.
    
    cos(x, /)
        Return the cosine of x (measured in radians).
    
    cosh(x, /)
        Return the hyperbolic cosine of x.
    
    degrees(x, /)
        Convert angle x from radians to degrees.
    
    dist(p, q, /)
        Return the Euclidean distance between two points p and q.
        
        The points should be specified as sequences (or iterables) of
        coordinates.  Both inputs must have the same dimension.
        
        Roughly equivalent to:
            sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))
    
    erf(x, /)
        Error function at x.
    
    erfc(x, /)
        Complementary error function at x.
    
    exp(x, /)
        Return e raised to the power of x.
    
    expm1(x, /)
        Return exp(x)-1.
        
        This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
    
    fabs(x, /)
        Return the absolute value of the float x.
    
    factorial(x, /)
        Find x!.
        
        Raise a ValueError if x is negative or non-integral.
    
    floor(x, /)
        Return the floor of x as an Integral.
        
        This is the largest integer <= x.
    
    fmod(x, y, /)
        Return fmod(x, y), according to platform C.
        
        x % y may differ.
    
    frexp(x, /)
        Return the mantissa and exponent of x, as pair (m, e).
        
        m is a float and e is an int, such that x = m * 2.**e.
        If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
    
    fsum(seq, /)
        Return an accurate floating point sum of values in the iterable seq.
        
        Assumes IEEE-754 floating point arithmetic.
    
    gamma(x, /)
        Gamma function at x.
    
    gcd(*integers)
        Greatest Common Divisor.
    
    hypot(...)
        hypot(*coordinates) -> value
        
        Multidimensional Euclidean distance from the origin to a point.
        
        Roughly equivalent to:
            sqrt(sum(x**2 for x in coordinates))
        
        For a two dimensional point (x, y), gives the hypotenuse
        using the Pythagorean theorem:  sqrt(x*x + y*y).
        
        For example, the hypotenuse of a 3/4/5 right triangle is:
        
            >>> hypot(3.0, 4.0)
            5.0
    
    isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
        Determine whether two floating point numbers are close in value.
        
          rel_tol
            maximum difference for being considered "close", relative to the
            magnitude of the input values
          abs_tol
            maximum difference for being considered "close", regardless of the
            magnitude of the input values
        
        Return True if a is close in value to b, and False otherwise.
        
        For the values to be considered close, the difference between them
        must be smaller than at least one of the tolerances.
        
        -inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
        is, NaN is not close to anything, even itself.  inf and -inf are
        only close to themselves.
    
    isfinite(x, /)
        Return True if x is neither an infinity nor a NaN, and False otherwise.
    
    isinf(x, /)
        Return True if x is a positive or negative infinity, and False otherwise.
    
    isnan(x, /)
        Return True if x is a NaN (not a number), and False otherwise.
    
    isqrt(n, /)
        Return the integer part of the square root of the input.
    
    lcm(*integers)
        Least Common Multiple.
    
    ldexp(x, i, /)
        Return x * (2**i).
        
        This is essentially the inverse of frexp().
    
    lgamma(x, /)
        Natural logarithm of absolute value of Gamma function at x.
    
    log(...)
        log(x, [base=math.e])
        Return the logarithm of x to the given base.
        
        If the base not specified, returns the natural logarithm (base e) of x.
    
    log10(x, /)
        Return the base 10 logarithm of x.
    
    log1p(x, /)
        Return the natural logarithm of 1+x (base e).
        
        The result is computed in a way which is accurate for x near zero.
    
    log2(x, /)
        Return the base 2 logarithm of x.
    
    modf(x, /)
        Return the fractional and integer parts of x.
        
        Both results carry the sign of x and are floats.
    
    nextafter(x, y, /)
        Return the next floating-point value after x towards y.
    
    perm(n, k=None, /)
        Number of ways to choose k items from n items without repetition and with order.
        
        Evaluates to n! / (n - k)! when k <= n and evaluates
        to zero when k > n.
        
        If k is not specified or is None, then k defaults to n
        and the function returns n!.
        
        Raises TypeError if either of the arguments are not integers.
        Raises ValueError if either of the arguments are negative.
    
    pow(x, y, /)
        Return x**y (x to the power of y).
    
    prod(iterable, /, *, start=1)
        Calculate the product of all the elements in the input iterable.
        
        The default start value for the product is 1.
        
        When the iterable is empty, return the start value.  This function is
        intended specifically for use with numeric values and may reject
        non-numeric types.
    
    radians(x, /)
        Convert angle x from degrees to radians.
    
    remainder(x, y, /)
        Difference between x and the closest integer multiple of y.
        
        Return x - n*y where n*y is the closest integer multiple of y.
        In the case where x is exactly halfway between two multiples of
        y, the nearest even value of n is used. The result is always exact.
    
    sin(x, /)
        Return the sine of x (measured in radians).
    
    sinh(x, /)
        Return the hyperbolic sine of x.
    
    sqrt(x, /)
        Return the square root of x.
    
    tan(x, /)
        Return the tangent of x (measured in radians).
    
    tanh(x, /)
        Return the hyperbolic tangent of x.
    
    trunc(x, /)
        Truncates the Real x to the nearest Integral toward 0.
        
        Uses the __trunc__ magic method.
    
    ulp(x, /)
        Return the value of the least significant bit of the float x.

DATA
    e = 2.718281828459045
    inf = inf
    nan = nan
    pi = 3.141592653589793
    tau = 6.283185307179586

FILE
    /Users/santosg/miniconda3/lib/python3.9/lib-dynload/math.cpython-39-darwin.so


None
=================================== mode ===================================
Help on function mode in turtle:

turtle.mode = mode(mode=None)
    Set turtle-mode ('standard', 'logo' or 'world') and perform reset.
    
    Optional argument:
    mode -- one of the strings 'standard', 'logo' or 'world'
    
    Mode 'standard' is compatible with turtle.py.
    Mode 'logo' is compatible with most Logo-Turtle-Graphics.
    Mode 'world' uses userdefined 'worldcoordinates'. *Attention*: in
    this mode angles appear distorted if x/y unit-ratio doesn't equal 1.
    If mode is not given, return the current mode.
    
         Mode      Initial turtle heading     positive angles
     ------------|-------------------------|-------------------
      'standard'    to the right (east)       counterclockwise
        'logo'        upward    (north)         clockwise
    
    Examples:
    >>> mode('logo')   # resets turtle heading to north
    >>> mode()
    'logo'

None
=================================== numinput ===================================
Help on function numinput in turtle:

turtle.numinput = numinput(title, prompt, default=None, minval=None, maxval=None)
    Pop up a dialog window for input of a number.
    
    Arguments: title is the title of the dialog window,
    prompt is a text mostly describing what numerical information to input.
    default: default value
    minval: minimum value for input
    maxval: maximum value for input
    
    The number input must be in the range minval .. maxval if these are
    given. If not, a hint is issued and the dialog remains open for
    correction. Return the number input.
    If the dialog is canceled,  return None.
    
    Example:
    >>> numinput("Poker", "Your stakes:", 1000, minval=10, maxval=10000)

None
=================================== onclick ===================================
Help on function onclick in turtle:

turtle.onclick = onclick(fun, btn=1, add=None)
    Bind fun to mouse-click event on this turtle on canvas.
    
    Arguments:
    fun --  a function with two arguments, to which will be assigned
            the coordinates of the clicked point on the canvas.
    btn --  number of the mouse-button defaults to 1 (left mouse button).
    add --  True or False. If True, new binding will be added, otherwise
            it will replace a former binding.
    
    Example for the anonymous turtle, i. e. the procedural way:
    
    >>> def turn(x, y):
    ...     left(360)
    ...
    >>> onclick(turn)  # Now clicking into the turtle will turn it.
    >>> onclick(None)  # event-binding will be removed

None
=================================== ondrag ===================================
Help on function ondrag in turtle:

turtle.ondrag = ondrag(fun, btn=1, add=None)
    Bind fun to mouse-move event on this turtle on canvas.
    
    Arguments:
    fun -- a function with two arguments, to which will be assigned
           the coordinates of the clicked point on the canvas.
    btn -- number of the mouse-button defaults to 1 (left mouse button).
    
    Every sequence of mouse-move-events on a turtle is preceded by a
    mouse-click event on that 
    
    Example:
    >>> ondrag(goto)
    
    Subsequently clicking and dragging a Turtle will move it
    across the screen thereby producing handdrawings (if pen is
    down).

None
=================================== onkey ===================================
Help on function onkey in turtle:

turtle.onkey = onkey(fun, key)
    Bind fun to key-release event of key.
    
    Arguments:
    fun -- a function with no arguments
    key -- a string: key (e.g. "a") or key-symbol (e.g. "space")
    
    In order to be able to register key-events, TurtleScreen
    must have focus. (See method listen.)
    
    Example:
    
    >>> def f():
    ...     fd(50)
    ...     lt(60)
    ...
    >>> onkey(f, "Up")
    >>> listen()
    
    Subsequently the turtle can be moved by repeatedly pressing
    the up-arrow key, consequently drawing a hexagon

None
=================================== onkeypress ===================================
Help on function onkeypress in turtle:

turtle.onkeypress = onkeypress(fun, key=None)
    Bind fun to key-press event of key if key is given,
    or to any key-press-event if no key is given.
    
    Arguments:
    fun -- a function with no arguments
    key -- a string: key (e.g. "a") or key-symbol (e.g. "space")
    
    In order to be able to register key-events, TurtleScreen
    must have focus. (See method listen.)
    
    Example (for a TurtleScreen instance named screen
    and a Turtle instance named turtle):
    
    >>> def f():
    ...     fd(50)
    ...     lt(60)
    ...
    >>> onkeypress(f, "Up")
    >>> listen()
    
    Subsequently the turtle can be moved by repeatedly pressing
    the up-arrow key, or by keeping pressed the up-arrow key.
    consequently drawing a hexagon.

None
=================================== onkeyrelease ===================================
Help on function onkeyrelease in turtle:

turtle.onkeyrelease = onkeyrelease(fun, key)
    Bind fun to key-release event of key.
    
    Arguments:
    fun -- a function with no arguments
    key -- a string: key (e.g. "a") or key-symbol (e.g. "space")
    
    In order to be able to register key-events, TurtleScreen
    must have focus. (See method listen.)
    
    Example:
    
    >>> def f():
    ...     fd(50)
    ...     lt(60)
    ...
    >>> onkey(f, "Up")
    >>> listen()
    
    Subsequently the turtle can be moved by repeatedly pressing
    the up-arrow key, consequently drawing a hexagon

None
=================================== onrelease ===================================
Help on function onrelease in turtle:

turtle.onrelease = onrelease(fun, btn=1, add=None)
    Bind fun to mouse-button-release event on this turtle on canvas.
    
    Arguments:
    fun -- a function with two arguments, to which will be assigned
            the coordinates of the clicked point on the canvas.
    btn --  number of the mouse-button defaults to 1 (left mouse button).
    
    Example (for a MyTurtle instance named joe):
    >>> class MyTurtle(Turtle):
    ...     def glow(self,x,y):
    ...             self.fillcolor("red")
    ...     def unglow(self,x,y):
    ...             self.fillcolor("")
    ...
    >>> joe = MyTurtle()
    >>> joe.onclick(joe.glow)
    >>> joe.onrelease(joe.unglow)
    
    Clicking on joe turns fillcolor red, unclicking turns it to
    transparent.

None
=================================== onscreenclick ===================================
Help on function onscreenclick in turtle:

turtle.onscreenclick = onscreenclick(fun, btn=1, add=None)
    Bind fun to mouse-click event on canvas.
    
    Arguments:
    fun -- a function with two arguments, the coordinates of the
           clicked point on the canvas.
    btn -- the number of the mouse-button, defaults to 1
    
    Example (for a TurtleScreen instance named screen)
    
    >>> onclick(goto)
    >>> # Subsequently clicking into the TurtleScreen will
    >>> # make the turtle move to the clicked point.
    >>> onclick(None)

None
=================================== ontimer ===================================
Help on function ontimer in turtle:

turtle.ontimer = ontimer(fun, t=0)
    Install a timer, which calls fun after t milliseconds.
    
    Arguments:
    fun -- a function with no arguments.
    t -- a number >= 0
    
    Example:
    
    >>> running = True
    >>> def f():
    ...     if running:
    ...             fd(50)
    ...             lt(60)
    ...             ontimer(f, 250)
    ...
    >>> f()   # makes the turtle marching around
    >>> running = False

None
=================================== pd ===================================
Help on function pd in turtle:

turtle.pd = pd()
    Pull the pen down -- drawing when moving.
    
    Aliases: pendown | pd | down
    
    No argument.
    
    Example:
    >>> pendown()

None
=================================== pen ===================================
Help on function pen in turtle:

turtle.pen = pen(pen=None, **pendict)
    Return or set the pen's attributes.
    
    Arguments:
        pen -- a dictionary with some or all of the below listed keys.
        **pendict -- one or more keyword-arguments with the below
                     listed keys as keywords.
    
    Return or set the pen's attributes in a 'pen-dictionary'
    with the following key/value pairs:
       "shown"      :   True/False
       "pendown"    :   True/False
       "pencolor"   :   color-string or color-tuple
       "fillcolor"  :   color-string or color-tuple
       "pensize"    :   positive number
       "speed"      :   number in range 0..10
       "resizemode" :   "auto" or "user" or "noresize"
       "stretchfactor": (positive number, positive number)
       "shearfactor":   number
       "outline"    :   positive number
       "tilt"       :   number
    
    This dictionary can be used as argument for a subsequent
    pen()-call to restore the former pen-state. Moreover one
    or more of these attributes can be provided as keyword-arguments.
    This can be used to set several pen attributes in one statement.
    
    
    Examples:
    >>> pen(fillcolor="black", pencolor="red", pensize=10)
    >>> pen()
    {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
    'pencolor': 'red', 'pendown': True, 'fillcolor': 'black',
    'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}
    >>> penstate=pen()
    >>> color("yellow","")
    >>> penup()
    >>> pen()
    {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
    'pencolor': 'yellow', 'pendown': False, 'fillcolor': '',
    'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}
    >>> p.pen(penstate, fillcolor="green")
    >>> p.pen()
    {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,
    'pencolor': 'red', 'pendown': True, 'fillcolor': 'green',
    'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}

None
=================================== pencolor ===================================
Help on function pencolor in turtle:

turtle.pencolor = pencolor(*args)
    Return or set the pencolor.
    
    Arguments:
    Four input formats are allowed:
      - pencolor()
        Return the current pencolor as color specification string,
        possibly in hex-number format (see example).
        May be used as input to another color/pencolor/fillcolor call.
      - pencolor(colorstring)
        s is a Tk color specification string, such as "red" or "yellow"
      - pencolor((r, g, b))
        *a tuple* of r, g, and b, which represent, an RGB color,
        and each of r, g, and b are in the range 0..colormode,
        where colormode is either 1.0 or 255
      - pencolor(r, g, b)
        r, g, and b represent an RGB color, and each of r, g, and b
        are in the range 0..colormode
    
    If turtleshape is a polygon, the outline of that polygon is drawn
    with the newly set pencolor.
    
    Example:
    >>> pencolor('brown')
    >>> tup = (0.2, 0.8, 0.55)
    >>> pencolor(tup)
    >>> pencolor()
    '#33cc8c'

None
=================================== pendown ===================================
Help on function pendown in turtle:

turtle.pendown = pendown()
    Pull the pen down -- drawing when moving.
    
    Aliases: pendown | pd | down
    
    No argument.
    
    Example:
    >>> pendown()

None
=================================== pensize ===================================
Help on function pensize in turtle:

turtle.pensize = pensize(width=None)
    Set or return the line thickness.
    
    Aliases:  pensize | width
    
    Argument:
    width -- positive number
    
    Set the line thickness to width or return it. If resizemode is set
    to "auto" and turtleshape is a polygon, that polygon is drawn with
    the same line thickness. If no argument is given, current pensize
    is returned.
    
    Example:
    >>> pensize()
    1
    >>> pensize(10)   # from here on lines of width 10 are drawn

None
=================================== penup ===================================
Help on function penup in turtle:

turtle.penup = penup()
    Pull the pen up -- no drawing when moving.
    
    Aliases: penup | pu | up
    
    No argument
    
    Example:
    >>> penup()

None
=================================== pos ===================================
Help on function pos in turtle:

turtle.pos = pos()
    Return the turtle's current location (x,y), as a Vec2D-vector.
    
    Aliases: pos | position
    
    No arguments.
    
    Example:
    >>> pos()
    (0.00, 240.00)

None
=================================== position ===================================
Help on function position in turtle:

turtle.position = position()
    Return the turtle's current location (x,y), as a Vec2D-vector.
    
    Aliases: pos | position
    
    No arguments.
    
    Example:
    >>> pos()
    (0.00, 240.00)

None
=================================== pu ===================================
Help on function pu in turtle:

turtle.pu = pu()
    Pull the pen up -- no drawing when moving.
    
    Aliases: penup | pu | up
    
    No argument
    
    Example:
    >>> penup()

None
=================================== radians ===================================
Help on function radians in turtle:

turtle.radians = radians()
    Set the angle measurement units to radians.
    
    No arguments.
    
    Example:
    >>> heading()
    90
    >>> radians()
    >>> heading()
    1.5707963267948966

None
=================================== read_docstrings ===================================
Help on function read_docstrings in turtle:

turtle.read_docstrings = read_docstrings(lang)
    Read in docstrings from lang-specific docstring dictionary.
    
    Transfer docstrings, translated to lang, from a dictionary-file
    to the methods of classes Screen and Turtle and - in revised form -
    to the corresponding functions.

None
=================================== readconfig ===================================
Help on function readconfig in turtle:

turtle.readconfig = readconfig(cfgdict)
    Read config-files, change configuration-dict accordingly.
    
    If there is a turtle.cfg file in the current working directory,
    read it from there. If this contains an importconfig-value,
    say 'myway', construct filename turtle_mayway.cfg else use
    turtle.cfg and read it from the import-directory, where
    turtle.py is located.
    Update configuration dictionary first according to config-file,
    in the import directory, then according to config-file in the
    current working directory.
    If no config-file is found, the default configuration is used.

None
=================================== register_shape ===================================
Help on function register_shape in turtle:

turtle.register_shape = register_shape(name, shape=None)
    Adds a turtle shape to TurtleScreen's shapelist.
    
    Arguments:
    (1) name is the name of a gif-file and shape is None.
        Installs the corresponding image shape.
        !! Image-shapes DO NOT rotate when turning the turtle,
        !! so they do not display the heading of the turtle!
    (2) name is an arbitrary string and shape is a tuple
        of pairs of coordinates. Installs the corresponding
        polygon shape
    (3) name is an arbitrary string and shape is a
        (compound) Shape object. Installs the corresponding
        compound shape.
    To use a shape, you have to issue the command shape(shapename).
    
    call: register_shape("turtle.gif")
    --or: register_shape("tri", ((0,0), (10,10), (-10,10)))
    
    Example:
    >>> register_shape("triangle", ((5,-3),(0,5),(-5,-3)))

None
=================================== reset ===================================
Help on function reset in turtle:

turtle.reset = reset()
    Delete the turtle's drawings and restore its default values.
    
    No argument.
    
    Delete the turtle's drawings from the screen, re-center the turtle
    and set variables to the default values.
    
    Example:
    >>> position()
    (0.00,-22.00)
    >>> heading()
    100.0
    >>> reset()
    >>> position()
    (0.00,0.00)
    >>> heading()
    0.0

None
=================================== resetscreen ===================================
Help on function resetscreen in turtle:

turtle.resetscreen = resetscreen()
    Reset all Turtles on the Screen to their initial state.
    
    No argument.
    
    Example:
    >>> reset()

None
=================================== resizemode ===================================
Help on function resizemode in turtle:

turtle.resizemode = resizemode(rmode=None)
    Set resizemode to one of the values: "auto", "user", "noresize".
    
    (Optional) Argument:
    rmode -- one of the strings "auto", "user", "noresize"
    
    Different resizemodes have the following effects:
      - "auto" adapts the appearance of the turtle
               corresponding to the value of pensize.
      - "user" adapts the appearance of the turtle according to the
               values of stretchfactor and outlinewidth (outline),
               which are set by shapesize()
      - "noresize" no adaption of the turtle's appearance takes place.
    If no argument is given, return current resizemode.
    resizemode("user") is called by a call of shapesize with arguments.
    
    
    Examples:
    >>> resizemode("noresize")
    >>> resizemode()
    'noresize'

None
=================================== right ===================================
Help on function right in turtle:

turtle.right = right(angle)
    Turn turtle right by angle units.
    
    Aliases: right | rt
    
    Argument:
    angle -- a number (integer or float)
    
    Turn turtle right by angle units. (Units are by default degrees,
    but can be set via the degrees() and radians() functions.)
    Angle orientation depends on mode. (See this.)
    
    Example:
    >>> heading()
    22.0
    >>> right(45)
    >>> heading()
    337.0

None
=================================== rt ===================================
Help on function rt in turtle:

turtle.rt = rt(angle)
    Turn turtle right by angle units.
    
    Aliases: right | rt
    
    Argument:
    angle -- a number (integer or float)
    
    Turn turtle right by angle units. (Units are by default degrees,
    but can be set via the degrees() and radians() functions.)
    Angle orientation depends on mode. (See this.)
    
    Example:
    >>> heading()
    22.0
    >>> right(45)
    >>> heading()
    337.0

None
=================================== screensize ===================================
Help on function screensize in turtle:

turtle.screensize = screensize(canvwidth=None, canvheight=None, bg=None)
    Resize the canvas the turtles are drawing on.
    
    Optional arguments:
    canvwidth -- positive integer, new width of canvas in pixels
    canvheight --  positive integer, new height of canvas in pixels
    bg -- colorstring or color-tuple, new backgroundcolor
    If no arguments are given, return current (canvaswidth, canvasheight)
    
    Do not alter the drawing window. To observe hidden parts of
    the canvas use the scrollbars. (Can make visible those parts
    of a drawing, which were outside the canvas before!)
    
    Example (for a Turtle instance named turtle):
    >>> turtle.screensize(2000,1500)
    >>> # e.g. to search for an erroneously escaped turtle ;-)

None
=================================== seth ===================================
Help on function seth in turtle:

turtle.seth = seth(to_angle)
    Set the orientation of the turtle to to_angle.
    
    Aliases:  setheading | seth
    
    Argument:
    to_angle -- a number (integer or float)
    
    Set the orientation of the turtle to to_angle.
    Here are some common directions in degrees:
    
     standard - mode:          logo-mode:
    -------------------|--------------------
       0 - east                0 - north
      90 - north              90 - east
     180 - west              180 - south
     270 - south             270 - west
    
    Example:
    >>> setheading(90)
    >>> heading()
    90

None
=================================== setheading ===================================
Help on function setheading in turtle:

turtle.setheading = setheading(to_angle)
    Set the orientation of the turtle to to_angle.
    
    Aliases:  setheading | seth
    
    Argument:
    to_angle -- a number (integer or float)
    
    Set the orientation of the turtle to to_angle.
    Here are some common directions in degrees:
    
     standard - mode:          logo-mode:
    -------------------|--------------------
       0 - east                0 - north
      90 - north              90 - east
     180 - west              180 - south
     270 - south             270 - west
    
    Example:
    >>> setheading(90)
    >>> heading()
    90

None
=================================== setpos ===================================
Help on function setpos in turtle:

turtle.setpos = setpos(x, y=None)
    Move turtle to an absolute position.
    
    Aliases: setpos | setposition | goto:
    
    Arguments:
    x -- a number      or     a pair/vector of numbers
    y -- a number             None
    
    call: goto(x, y)         # two coordinates
    --or: goto((x, y))       # a pair (tuple) of coordinates
    --or: goto(vec)          # e.g. as returned by pos()
    
    Move turtle to an absolute position. If the pen is down,
    a line will be drawn. The turtle's orientation does not change.
    
    Example:
    >>> tp = pos()
    >>> tp
    (0.00, 0.00)
    >>> setpos(60,30)
    >>> pos()
    (60.00,30.00)
    >>> setpos((20,80))
    >>> pos()
    (20.00,80.00)
    >>> setpos(tp)
    >>> pos()
    (0.00,0.00)

None
=================================== setposition ===================================
Help on function setposition in turtle:

turtle.setposition = setposition(x, y=None)
    Move turtle to an absolute position.
    
    Aliases: setpos | setposition | goto:
    
    Arguments:
    x -- a number      or     a pair/vector of numbers
    y -- a number             None
    
    call: goto(x, y)         # two coordinates
    --or: goto((x, y))       # a pair (tuple) of coordinates
    --or: goto(vec)          # e.g. as returned by pos()
    
    Move turtle to an absolute position. If the pen is down,
    a line will be drawn. The turtle's orientation does not change.
    
    Example:
    >>> tp = pos()
    >>> tp
    (0.00, 0.00)
    >>> setpos(60,30)
    >>> pos()
    (60.00,30.00)
    >>> setpos((20,80))
    >>> pos()
    (20.00,80.00)
    >>> setpos(tp)
    >>> pos()
    (0.00,0.00)

None
=================================== settiltangle ===================================
Help on function settiltangle in turtle:

turtle.settiltangle = settiltangle(angle)
    Rotate the turtleshape to point in the specified direction
    
    Argument: angle -- number
    
    Rotate the turtleshape to point in the direction specified by angle,
    regardless of its current tilt-angle. DO NOT change the turtle's
    heading (direction of movement).
    
    
    Examples:
    >>> shape("circle")
    >>> shapesize(5,2)
    >>> settiltangle(45)
    >>> stamp()
    >>> fd(50)
    >>> settiltangle(-45)
    >>> stamp()
    >>> fd(50)

None
=================================== setundobuffer ===================================
Help on function setundobuffer in turtle:

turtle.setundobuffer = setundobuffer(size)
    Set or disable undobuffer.
    
    Argument:
    size -- an integer or None
    
    If size is an integer an empty undobuffer of given size is installed.
    Size gives the maximum number of turtle-actions that can be undone
    by the undo() function.
    If size is None, no undobuffer is present.
    
    Example:
    >>> setundobuffer(42)

None
=================================== setup ===================================
Help on function setup in turtle:

turtle.setup = setup(width=0.5, height=0.75, startx=None, starty=None)
    Set the size and position of the main window.
    
    Arguments:
    width: as integer a size in pixels, as float a fraction of the 
      Default is 50% of 
    height: as integer the height in pixels, as float a fraction of the
       Default is 75% of 
    startx: if positive, starting position in pixels from the left
      edge of the screen, if negative from the right edge
      Default, startx=None is to center window horizontally.
    starty: if positive, starting position in pixels from the top
      edge of the screen, if negative from the bottom edge
      Default, starty=None is to center window vertically.
    
    Examples:
    >>> setup (width=200, height=200, startx=0, starty=0)
    
    sets window to 200x200 pixels, in upper left of screen
    
    >>> setup(width=.75, height=0.5, startx=None, starty=None)
    
    sets window to 75% of screen by 50% of screen and centers

None
=================================== setworldcoordinates ===================================
Help on function setworldcoordinates in turtle:

turtle.setworldcoordinates = setworldcoordinates(llx, lly, urx, ury)
    Set up a user defined coordinate-system.
    
    Arguments:
    llx -- a number, x-coordinate of lower left corner of canvas
    lly -- a number, y-coordinate of lower left corner of canvas
    urx -- a number, x-coordinate of upper right corner of canvas
    ury -- a number, y-coordinate of upper right corner of canvas
    
    Set up user coodinat-system and switch to mode 'world' if necessary.
    This performs a reset. If mode 'world' is already active,
    all drawings are redrawn according to the new coordinates.
    
    But ATTENTION: in user-defined coordinatesystems angles may appear
    distorted. (see Screen.mode())
    
    Example:
    >>> setworldcoordinates(-10,-0.5,50,1.5)
    >>> for _ in range(36):
    ...     left(10)
    ...     forward(0.5)

None
=================================== setx ===================================
Help on function setx in turtle:

turtle.setx = setx(x)
    Set the turtle's first coordinate to x
    
    Argument:
    x -- a number (integer or float)
    
    Set the turtle's first coordinate to x, leave second coordinate
    unchanged.
    
    Example:
    >>> position()
    (0.00, 240.00)
    >>> setx(10)
    >>> position()
    (10.00, 240.00)

None
=================================== sety ===================================
Help on function sety in turtle:

turtle.sety = sety(y)
    Set the turtle's second coordinate to y
    
    Argument:
    y -- a number (integer or float)
    
    Set the turtle's first coordinate to x, second coordinate remains
    unchanged.
    
    Example:
    >>> position()
    (0.00, 40.00)
    >>> sety(-10)
    >>> position()
    (0.00, -10.00)

None
=================================== shape ===================================
Help on function shape in turtle:

turtle.shape = shape(name=None)
    Set turtle shape to shape with given name / return current shapename.
    
    Optional argument:
    name -- a string, which is a valid shapename
    
    Set turtle shape to shape with given name or, if name is not given,
    return name of current shape.
    Shape with name must exist in the TurtleScreen's shape dictionary.
    Initially there are the following polygon shapes:
    'arrow', 'turtle', 'circle', 'square', 'triangle', 'classic'.
    To learn about how to deal with shapes see Screen-method register_shape.
    
    Example:
    >>> shape()
    'arrow'
    >>> shape("turtle")
    >>> shape()
    'turtle'

None
=================================== shapesize ===================================
Help on function shapesize in turtle:

turtle.shapesize = shapesize(stretch_wid=None, stretch_len=None, outline=None)
    Set/return turtle's stretchfactors/outline. Set resizemode to "user".
    
    Optional arguments:
       stretch_wid : positive number
       stretch_len : positive number
       outline  : positive number
    
    Return or set the pen's attributes x/y-stretchfactors and/or outline.
    Set resizemode to "user".
    If and only if resizemode is set to "user", the turtle will be displayed
    stretched according to its stretchfactors:
    stretch_wid is stretchfactor perpendicular to orientation
    stretch_len is stretchfactor in direction of turtles orientation.
    outline determines the width of the shapes's outline.
    
    Examples:
    >>> resizemode("user")
    >>> shapesize(5, 5, 12)
    >>> shapesize(outline=8)

None
=================================== shapetransform ===================================
Help on function shapetransform in turtle:

turtle.shapetransform = shapetransform(t11=None, t12=None, t21=None, t22=None)
    Set or return the current transformation matrix of the turtle shape.
    
    Optional arguments: t11, t12, t21, t22 -- numbers.
    
    If none of the matrix elements are given, return the transformation
    matrix.
    Otherwise set the given elements and transform the turtleshape
    according to the matrix consisting of first row t11, t12 and
    second row t21, 22.
    Modify stretchfactor, shearfactor and tiltangle according to the
    given matrix.
    
    Examples:
    >>> shape("square")
    >>> shapesize(4,2)
    >>> shearfactor(-0.5)
    >>> shapetransform()
    (4.0, -1.0, -0.0, 2.0)

None
=================================== shearfactor ===================================
Help on function shearfactor in turtle:

turtle.shearfactor = shearfactor(shear=None)
    Set or return the current shearfactor.
    
    Optional argument: shear -- number, tangent of the shear angle
    
    Shear the turtleshape according to the given shearfactor shear,
    which is the tangent of the shear angle. DO NOT change the
    turtle's heading (direction of movement).
    If shear is not given: return the current shearfactor, i. e. the
    tangent of the shear angle, by which lines parallel to the
    heading of the turtle are sheared.
    
    Examples:
    >>> shape("circle")
    >>> shapesize(5,2)
    >>> shearfactor(0.5)
    >>> shearfactor()
    >>> 0.5

None
=================================== showturtle ===================================
Help on function showturtle in turtle:

turtle.showturtle = showturtle()
    Makes the turtle visible.
    
    Aliases: showturtle | st
    
    No argument.
    
    Example:
    >>> hideturtle()
    >>> showturtle()

None
=================================== simpledialog ===================================
Help on module tkinter.simpledialog in turtle:

NAME
    tkinter.simpledialog - This modules handles dialog boxes.

MODULE REFERENCE
    https://docs.python.org/3.9/library/tkinter.simpledialog
    
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    It contains the following public symbols:
    
    SimpleDialog -- A simple but flexible modal dialog box
    
    Dialog -- a base class for dialogs
    
    askinteger -- get an integer from the user
    
    askfloat -- get a float from the user
    
    askstring -- get a string from the user

CLASSES
    builtins.object
        SimpleDialog
    tkinter.Toplevel(tkinter.BaseWidget, tkinter.Wm)
        Dialog
    
    class Dialog(tkinter.Toplevel)
     |  Dialog(parent, title=None)
     |  
     |  Class to open dialogs.
     |  
     |  This class is intended as a base class for custom dialogs
     |  
     |  Method resolution order:
     |      Dialog
     |      tkinter.Toplevel
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Wm
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, parent, title=None)
     |      Initialize a dialog.
     |      
     |      Arguments:
     |      
     |          parent -- a parent window (the application window)
     |      
     |          title -- the dialog title
     |  
     |  apply(self)
     |      process the data
     |      
     |      This method is called automatically to process the data, *after*
     |      the dialog is destroyed. By default, it does nothing.
     |  
     |  body(self, master)
     |      create dialog body.
     |      
     |      return widget that should have initial focus.
     |      This method should be overridden, and is called
     |      by the __init__ method.
     |  
     |  buttonbox(self)
     |      add standard button box.
     |      
     |      override if you do not want the standard buttons
     |  
     |  cancel(self, event=None)
     |  
     |  destroy(self)
     |      Destroy the window
     |  
     |  ok(self, event=None)
     |  
     |  validate(self)
     |      validate the data
     |      
     |      This method is called automatically to validate the data before the
     |      dialog is destroyed. By default, it always validates OK.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function once after given time.
     |      
     |      MS specifies the time in milliseconds. FUNC gives the
     |      function which shall be called. Additional parameters
     |      are given as parameters to the function call.  Return
     |      identifier to cancel scheduling with after_cancel.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process.
     |      
     |      Return an identifier to cancel the scheduling with
     |      after_cancel.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      
     |      SEQUENCE is a string of concatenated event
     |      patterns. An event pattern is of the form
     |      <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
     |      of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
     |      Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
     |      B3, Alt, Button4, B4, Double, Button5, B5 Triple,
     |      Mod1, M1. TYPE is one of Activate, Enter, Map,
     |      ButtonPress, Button, Expose, Motion, ButtonRelease
     |      FocusIn, MouseWheel, Circulate, FocusOut, Property,
     |      Colormap, Gravity Reparent, Configure, KeyPress, Key,
     |      Unmap, Deactivate, KeyRelease Visibility, Destroy,
     |      Leave and DETAIL is the button number for ButtonPress,
     |      ButtonRelease and DETAIL is the Keysym for KeyPress and
     |      KeyRelease. Examples are
     |      <Control-Button-1> for pressing Control and mouse button 1 or
     |      <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
     |      An event pattern can also be a virtual event of the form
     |      <<AString>> where AString can be arbitrary. This
     |      event can be generated by event_generate.
     |      If events are concatenated they must appear shortly
     |      after each other.
     |      
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC.
     |      An additional boolean parameter ADD specifies whether FUNC will
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty).
     |  
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |  
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getdouble(self, s)
     |  
     |  getint(self, s)
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. photo bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |      
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return True if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget.
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window manager name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return a tuple of integer RGB values in range(65536) for color in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen.
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=False)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if includeids is true is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Wm:
     |  
     |  aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |  
     |  attributes = wm_attributes(self, *args)
     |  
     |  client = wm_client(self, name=None)
     |  
     |  colormapwindows = wm_colormapwindows(self, *wlist)
     |  
     |  command = wm_command(self, value=None)
     |  
     |  deiconify = wm_deiconify(self)
     |  
     |  focusmodel = wm_focusmodel(self, model=None)
     |  
     |  forget = wm_forget(self, window)
     |  
     |  frame = wm_frame(self)
     |  
     |  geometry = wm_geometry(self, newGeometry=None)
     |  
     |  grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |  
     |  group = wm_group(self, pathName=None)
     |  
     |  iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)
     |  
     |  iconify = wm_iconify(self)
     |  
     |  iconmask = wm_iconmask(self, bitmap=None)
     |  
     |  iconname = wm_iconname(self, newName=None)
     |  
     |  iconphoto = wm_iconphoto(self, default=False, *args)
     |  
     |  iconposition = wm_iconposition(self, x=None, y=None)
     |  
     |  iconwindow = wm_iconwindow(self, pathName=None)
     |  
     |  manage = wm_manage(self, widget)
     |  
     |  maxsize = wm_maxsize(self, width=None, height=None)
     |  
     |  minsize = wm_minsize(self, width=None, height=None)
     |  
     |  overrideredirect = wm_overrideredirect(self, boolean=None)
     |  
     |  positionfrom = wm_positionfrom(self, who=None)
     |  
     |  protocol = wm_protocol(self, name=None, func=None)
     |  
     |  resizable = wm_resizable(self, width=None, height=None)
     |  
     |  sizefrom = wm_sizefrom(self, who=None)
     |  
     |  state = wm_state(self, newstate=None)
     |  
     |  title = wm_title(self, string=None)
     |  
     |  transient = wm_transient(self, master=None)
     |  
     |  withdraw = wm_withdraw(self)
     |  
     |  wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |  
     |  wm_attributes(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |      
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |      
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |      
     |      On Macintosh, XXXXX
     |      
     |      On Unix, there are currently no special attribute values.
     |  
     |  wm_client(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |  
     |  wm_colormapwindows(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |  
     |  wm_command(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |  
     |  wm_deiconify(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |  
     |  wm_focusmodel(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |  
     |  wm_forget(self, window)
     |      The window will be unmapped from the screen and will no longer
     |      be managed by wm. toplevel windows will be treated like frame
     |      windows once they are no longer managed by wm, however, the menu
     |      option configuration will be remembered and the menus will return
     |      once the widget is managed again.
     |  
     |  wm_frame(self)
     |      Return identifier for decorative frame of this widget if present.
     |  
     |  wm_geometry(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |  
     |  wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |  
     |  wm_group(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |  
     |  wm_iconbitmap(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |      
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendants that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |  
     |  wm_iconify(self)
     |      Display widget as icon.
     |  
     |  wm_iconmask(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |  
     |  wm_iconname(self, newName=None)
     |      Set the name of the icon for this widget. Return the name if
     |      None is given.
     |  
     |  wm_iconphoto(self, default=False, *args)
     |      Sets the titlebar icon for this window based on the named photo
     |      images passed through args. If default is True, this is applied to
     |      all future created toplevels as well.
     |      
     |      The data in the images is taken as a snapshot at the time of
     |      invocation. If the images are later changed, this is not reflected
     |      to the titlebar icons. Multiple images are accepted to allow
     |      different images sizes to be provided. The window manager may scale
     |      provided icons to an appropriate size.
     |      
     |      On Windows, the images are packed into a Windows icon structure.
     |      This will override an icon specified to wm_iconbitmap, and vice
     |      versa.
     |      
     |      On X, the images are arranged into the _NET_WM_ICON X property,
     |      which most modern window managers support. An icon specified by
     |      wm_iconbitmap may exist simultaneously.
     |      
     |      On Macintosh, this currently does nothing.
     |  
     |  wm_iconposition(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |  
     |  wm_iconwindow(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |  
     |  wm_manage(self, widget)
     |      The widget specified will become a stand alone top-level window.
     |      The window will be decorated with the window managers title bar,
     |      etc.
     |  
     |  wm_maxsize(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  wm_minsize(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  wm_overrideredirect(self, boolean=None)
     |      Instruct the window manager to ignore this widget
     |      if BOOLEAN is given with 1. Return the current value if None
     |      is given.
     |  
     |  wm_positionfrom(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  wm_protocol(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".
     |  
     |  wm_resizable(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |  
     |  wm_sizefrom(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  wm_state(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |  
     |  wm_title(self, string=None)
     |      Set the title of this widget.
     |  
     |  wm_transient(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |  
     |  wm_withdraw(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.
    
    class SimpleDialog(builtins.object)
     |  SimpleDialog(master, text='', buttons=[], default=None, cancel=None, title=None, class_=None)
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master, text='', buttons=[], default=None, cancel=None, title=None, class_=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  done(self, num)
     |  
     |  go(self)
     |  
     |  return_event(self, event)
     |  
     |  wm_delete_window(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    askfloat(title, prompt, **kw)
        get a float from the user
        
        Arguments:
        
            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class
        
        Return value is a float
    
    askinteger(title, prompt, **kw)
        get an integer from the user
        
        Arguments:
        
            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class
        
        Return value is an integer
    
    askstring(title, prompt, **kw)
        get a string from the user
        
        Arguments:
        
            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class
        
        Return value is a string

DATA
    ACTIVE = 'active'
    ALL = 'all'
    ANCHOR = 'anchor'
    ARC = 'arc'
    BASELINE = 'baseline'
    BEVEL = 'bevel'
    BOTH = 'both'
    BOTTOM = 'bottom'
    BROWSE = 'browse'
    BUTT = 'butt'
    CASCADE = 'cascade'
    CENTER = 'center'
    CHAR = 'char'
    CHECKBUTTON = 'checkbutton'
    CHORD = 'chord'
    COMMAND = 'command'
    CURRENT = 'current'
    DISABLED = 'disabled'
    DOTBOX = 'dotbox'
    E = 'e'
    END = 'end'
    EW = 'ew'
    EXCEPTION = 8
    EXTENDED = 'extended'
    FALSE = 0
    FIRST = 'first'
    FLAT = 'flat'
    GROOVE = 'groove'
    HIDDEN = 'hidden'
    HORIZONTAL = 'horizontal'
    INSERT = 'insert'
    INSIDE = 'inside'
    LAST = 'last'
    LEFT = 'left'
    MITER = 'miter'
    MOVETO = 'moveto'
    MULTIPLE = 'multiple'
    N = 'n'
    NE = 'ne'
    NO = 0
    NONE = 'none'
    NORMAL = 'normal'
    NS = 'ns'
    NSEW = 'nsew'
    NUMERIC = 'numeric'
    NW = 'nw'
    OFF = 0
    ON = 1
    OUTSIDE = 'outside'
    PAGES = 'pages'
    PIESLICE = 'pieslice'
    PROJECTING = 'projecting'
    RADIOBUTTON = 'radiobutton'
    RAISED = 'raised'
    READABLE = 2
    RIDGE = 'ridge'
    RIGHT = 'right'
    ROUND = 'round'
    S = 's'
    SCROLL = 'scroll'
    SE = 'se'
    SEL = 'sel'
    SEL_FIRST = 'sel.first'
    SEL_LAST = 'sel.last'
    SEPARATOR = 'separator'
    SINGLE = 'single'
    SOLID = 'solid'
    SUNKEN = 'sunken'
    SW = 'sw'
    TOP = 'top'
    TRUE = 1
    TclVersion = 8.6
    TkVersion = 8.6
    UNDERLINE = 'underline'
    UNITS = 'units'
    VERTICAL = 'vertical'
    W = 'w'
    WORD = 'word'
    WRITABLE = 4
    X = 'x'
    Y = 'y'
    YES = 1

FILE
    /Users/santosg/miniconda3/lib/python3.9/tkinter/simpledialog.py


None
=================================== speed ===================================
Help on function speed in turtle:

turtle.speed = speed(speed=None)
    Return or set the turtle's speed.
    
    Optional argument:
    speed -- an integer in the range 0..10 or a speedstring (see below)
    
    Set the turtle's speed to an integer value in the range 0 .. 10.
    If no argument is given: return current speed.
    
    If input is a number greater than 10 or smaller than 0.5,
    speed is set to 0.
    Speedstrings  are mapped to speedvalues in the following way:
        'fastest' :  0
        'fast'    :  10
        'normal'  :  6
        'slow'    :  3
        'slowest' :  1
    speeds from 1 to 10 enforce increasingly faster animation of
    line drawing and turtle turning.
    
    Attention:
    speed = 0 : *no* animation takes place. forward/back makes turtle jump
    and likewise left/right make the turtle turn instantly.
    
    Example:
    >>> speed(3)

None
=================================== split ===================================
Help on function split in turtle:

turtle.split = split(p)
    Split a pathname.  Returns tuple "(head, tail)" where "tail" is
    everything after the final slash.  Either part may be empty.

None
=================================== st ===================================
Help on function st in turtle:

turtle.st = st()
    Makes the turtle visible.
    
    Aliases: showturtle | st
    
    No argument.
    
    Example:
    >>> hideturtle()
    >>> showturtle()

None
=================================== stamp ===================================
Help on function stamp in turtle:

turtle.stamp = stamp()
    Stamp a copy of the turtleshape onto the canvas and return its id.
    
    No argument.
    
    Stamp a copy of the turtle shape onto the canvas at the current
    turtle position. Return a stamp_id for that stamp, which can be
    used to delete it by calling clearstamp(stamp_id).
    
    Example:
    >>> color("blue")
    >>> stamp()
    13
    >>> fd(50)

None
=================================== sys ===================================
Help on built-in module sys in turtle:

NAME
    sys

MODULE REFERENCE
    https://docs.python.org/3.9/library/sys
    
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

DESCRIPTION
    This module provides access to some objects used or maintained by the
    interpreter and to functions that interact strongly with the interpreter.
    
    Dynamic objects:
    
    argv -- command line arguments; argv[0] is the script pathname if known
    path -- module search path; path[0] is the script directory, else ''
    modules -- dictionary of loaded modules
    
    displayhook -- called to show results in an interactive session
    excepthook -- called to handle any uncaught exception other than SystemExit
      To customize printing in an interactive session or to install a custom
      top-level exception handler, assign other functions to replace these.
    
    stdin -- standard input file object; used by input()
    stdout -- standard output file object; used by print()
    stderr -- standard error object; used for error messages
      By assigning other file objects (or objects that behave like files)
      to these, it is possible to redirect all of the interpreter's I/O.
    
    last_type -- type of last uncaught exception
    last_value -- value of last uncaught exception
    last_traceback -- traceback of last uncaught exception
      These three are only available in an interactive session after a
      traceback has been printed.
    
    Static objects:
    
    builtin_module_names -- tuple of module names built into this interpreter
    copyright -- copyright notice pertaining to this interpreter
    exec_prefix -- prefix used to find the machine-specific Python library
    executable -- absolute path of the executable binary of the Python interpreter
    float_info -- a named tuple with information about the float implementation.
    float_repr_style -- string indicating the style of repr() output for floats
    hash_info -- a named tuple with information about the hash algorithm.
    hexversion -- version information encoded as a single integer
    implementation -- Python implementation information.
    int_info -- a named tuple with information about the int implementation.
    maxsize -- the largest supported length of containers.
    maxunicode -- the value of the largest Unicode code point
    platform -- platform identifier
    prefix -- prefix used to find the Python library
    thread_info -- a named tuple with information about the thread implementation.
    version -- the version of this interpreter as a string
    version_info -- version information as a named tuple
    __stdin__ -- the original stdin; don't touch!
    __stdout__ -- the original stdout; don't touch!
    __stderr__ -- the original stderr; don't touch!
    __displayhook__ -- the original displayhook; don't touch!
    __excepthook__ -- the original excepthook; don't touch!
    
    Functions:
    
    displayhook() -- print an object to the screen, and save it in builtins._
    excepthook() -- print an exception and its traceback to sys.stderr
    exc_info() -- return thread-safe information about the current exception
    exit() -- exit the interpreter by raising SystemExit
    getdlopenflags() -- returns flags to be used for dlopen() calls
    getprofile() -- get the global profiling function
    getrefcount() -- return the reference count for an object (plus one :-)
    getrecursionlimit() -- return the max recursion depth for the interpreter
    getsizeof() -- return the size of an object in bytes
    gettrace() -- get the global debug tracing function
    setdlopenflags() -- set the flags to be used for dlopen() calls
    setprofile() -- set the global profiling function
    setrecursionlimit() -- set the max recursion depth for the interpreter
    settrace() -- set the global debug tracing function

FUNCTIONS
    __breakpointhook__ = breakpointhook(...)
        breakpointhook(*args, **kws)
        
        This hook function is called by built-in breakpoint().
    
    __displayhook__ = displayhook(object, /)
        Print an object to sys.stdout and also save it in builtins._
    
    __excepthook__ = excepthook(exctype, value, traceback, /)
        Handle an exception by displaying it with a traceback on sys.stderr.
    
    __unraisablehook__ = unraisablehook(unraisable, /)
        Handle an unraisable exception.
        
        The unraisable argument has the following attributes:
        
        * exc_type: Exception type.
        * exc_value: Exception value, can be None.
        * exc_traceback: Exception traceback, can be None.
        * err_msg: Error message, can be None.
        * object: Object causing the exception, can be None.
    
    addaudithook(hook)
        Adds a new audit hook callback.
    
    audit(...)
        audit(event, *args)
        
        Passes the event to any audit hooks that are attached.
    
    breakpointhook(...)
        breakpointhook(*args, **kws)
        
        This hook function is called by built-in breakpoint().
    
    call_tracing(func, args, /)
        Call func(*args), while tracing is enabled.
        
        The tracing state is saved, and restored afterwards.  This is intended
        to be called from a debugger from a checkpoint, to recursively debug
        some other code.
    
    displayhook(object, /)
        Print an object to sys.stdout and also save it in builtins._
    
    exc_info()
        Return current exception information: (type, value, traceback).
        
        Return information about the most recent exception caught by an except
        clause in the current stack frame or in an older stack frame.
    
    excepthook(exctype, value, traceback, /)
        Handle an exception by displaying it with a traceback on sys.stderr.
    
    exit(status=None, /)
        Exit the interpreter by raising SystemExit(status).
        
        If the status is omitted or None, it defaults to zero (i.e., success).
        If the status is an integer, it will be used as the system exit status.
        If it is another kind of object, it will be printed and the system
        exit status will be one (i.e., failure).
    
    get_asyncgen_hooks()
        Return the installed asynchronous generators hooks.
        
        This returns a namedtuple of the form (firstiter, finalizer).
    
    get_coroutine_origin_tracking_depth()
        Check status of origin tracking for coroutine objects in this thread.
    
    get_int_max_str_digits()
        Set the maximum string digits limit for non-binary int<->str conversions.
    
    getallocatedblocks()
        Return the number of memory blocks currently allocated.
    
    getdefaultencoding()
        Return the current default encoding used by the Unicode implementation.
    
    getdlopenflags()
        Return the current value of the flags that are used for dlopen calls.
        
        The flag constants are defined in the os module.
    
    getfilesystemencodeerrors()
        Return the error mode used Unicode to OS filename conversion.
    
    getfilesystemencoding()
        Return the encoding used to convert Unicode filenames to OS filenames.
    
    getprofile()
        Return the profiling function set with sys.setprofile.
        
        See the profiler chapter in the library manual.
    
    getrecursionlimit()
        Return the current value of the recursion limit.
        
        The recursion limit is the maximum depth of the Python interpreter
        stack.  This limit prevents infinite recursion from causing an overflow
        of the C stack and crashing Python.
    
    getrefcount(object, /)
        Return the reference count of object.
        
        The count returned is generally one higher than you might expect,
        because it includes the (temporary) reference as an argument to
        getrefcount().
    
    getsizeof(...)
        getsizeof(object [, default]) -> int
        
        Return the size of object in bytes.
    
    getswitchinterval()
        Return the current thread switch interval; see sys.setswitchinterval().
    
    gettrace()
        Return the global debug tracing function set with sys.settrace.
        
        See the debugger chapter in the library manual.
    
    intern(string, /)
        ``Intern'' the given string.
        
        This enters the string in the (global) table of interned strings whose
        purpose is to speed up dictionary lookups. Return the string itself or
        the previously interned string object with the same value.
    
    is_finalizing()
        Return True if Python is exiting.
    
    set_asyncgen_hooks(...)
        set_asyncgen_hooks(* [, firstiter] [, finalizer])
        
        Set a finalizer for async generators objects.
    
    set_coroutine_origin_tracking_depth(depth)
        Enable or disable origin tracking for coroutine objects in this thread.
        
        Coroutine objects will track 'depth' frames of traceback information
        about where they came from, available in their cr_origin attribute.
        
        Set a depth of 0 to disable.
    
    set_int_max_str_digits(maxdigits)
        Set the maximum string digits limit for non-binary int<->str conversions.
    
    setdlopenflags(flags, /)
        Set the flags used by the interpreter for dlopen calls.
        
        This is used, for example, when the interpreter loads extension
        modules. Among other things, this will enable a lazy resolving of
        symbols when importing a module, if called as sys.setdlopenflags(0).
        To share symbols across extension modules, call as
        sys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag
        modules can be found in the os module (RTLD_xxx constants, e.g.
        os.RTLD_LAZY).
    
    setprofile(...)
        setprofile(function)
        
        Set the profiling function.  It will be called on each function call
        and return.  See the profiler chapter in the library manual.
    
    setrecursionlimit(limit, /)
        Set the maximum depth of the Python interpreter stack to n.
        
        This limit prevents infinite recursion from causing an overflow of the C
        stack and crashing Python.  The highest possible limit is platform-
        dependent.
    
    setswitchinterval(interval, /)
        Set the ideal thread switching delay inside the Python interpreter.
        
        The actual frequency of switching threads can be lower if the
        interpreter executes long sequences of uninterruptible code
        (this is implementation-specific and workload-dependent).
        
        The parameter must represent the desired switching delay in seconds
        A typical value is 0.005 (5 milliseconds).
    
    settrace(...)
        settrace(function)
        
        Set the global debug tracing function.  It will be called on each
        function call.  See the debugger chapter in the library manual.
    
    unraisablehook(unraisable, /)
        Handle an unraisable exception.
        
        The unraisable argument has the following attributes:
        
        * exc_type: Exception type.
        * exc_value: Exception value, can be None.
        * exc_traceback: Exception traceback, can be None.
        * err_msg: Error message, can be None.
        * object: Object causing the exception, can be None.

DATA
    __stderr__ = <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf...
    __stdin__ = <_io.TextIOWrapper name='<stdin>' mode='r' encoding='utf-8...
    __stdout__ = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf...
    abiflags = ''
    api_version = 1013
    argv = ['dir.py']
    base_exec_prefix = '/Users/santosg/miniconda3'
    base_prefix = '/Users/santosg/miniconda3'
    builtin_module_names = ('_abc', '_ast', '_codecs', '_collections', '_f...
    byteorder = 'little'
    copyright = 'Copyright (c) 2001-2022 Python Software Foundati...ematis...
    dont_write_bytecode = False
    exec_prefix = '/Users/santosg/miniconda3'
    executable = '/Users/santosg/miniconda3/bin/python'
    flags = sys.flags(debug=0, inspect=0, interactive=0, opt...v_mode=Fals...
    float_info = sys.float_info(max=1.7976931348623157e+308, max_...epsilo...
    float_repr_style = 'short'
    hash_info = sys.hash_info(width=64, modulus=2305843009213693...iphash2...
    hexversion = 50925808
    implementation = namespace(name='cpython', cache_tag='cpython-39'...ia...
    int_info = sys.int_info(bits_per_digit=30, sizeof_digit=4, ..._str_dig...
    maxsize = 9223372036854775807
    maxunicode = 1114111
    meta_path = [<_distutils_hack.DistutilsMetaFinder object>, <class '_fr...
    modules = {'__main__': <module '__main__' from '/Users/santosg/Python_...
    path = ['/Users/santosg/Python_Turtle', '/Users/santosg/miniconda3/lib...
    path_hooks = [<class 'zipimport.zipimporter'>, <function FileFinder.pa...
    path_importer_cache = {'/Users/santosg/.local/lib/python3.9/site-packa...
    platform = 'darwin'
    platlibdir = 'lib'
    prefix = '/Users/santosg/miniconda3'
    pycache_prefix = None
    stderr = <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>
    stdin = <_io.TextIOWrapper name='<stdin>' mode='r' encoding='utf-8'>
    stdout = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>
    thread_info = sys.thread_info(name='pthread', lock='mutex+cond', versi...
    version = '3.9.16 | packaged by conda-forge | (main, Feb  1 2023, 21:4...
    version_info = sys.version_info(major=3, minor=9, micro=16, releaselev...
    warnoptions = []

FILE
    (built-in)


None
=================================== textinput ===================================
Help on function textinput in turtle:

turtle.textinput = textinput(title, prompt)
    Pop up a dialog window for input of a string.
    
    Arguments: title is the title of the dialog window,
    prompt is a text mostly describing what information to input.
    
    Return the string input
    If the dialog is canceled, return None.
    
    Example:
    >>> textinput("NIM", "Name of first player:")

None
=================================== tilt ===================================
Help on function tilt in turtle:

turtle.tilt = tilt(angle)
    Rotate the turtleshape by angle.
    
    Argument:
    angle - a number
    
    Rotate the turtleshape by angle from its current tilt-angle,
    but do NOT change the turtle's heading (direction of movement).
    
    Examples:
    >>> shape("circle")
    >>> shapesize(5,2)
    >>> tilt(30)
    >>> fd(50)
    >>> tilt(30)
    >>> fd(50)

None
=================================== tiltangle ===================================
Help on function tiltangle in turtle:

turtle.tiltangle = tiltangle(angle=None)
    Set or return the current tilt-angle.
    
    Optional argument: angle -- number
    
    Rotate the turtleshape to point in the direction specified by angle,
    regardless of its current tilt-angle. DO NOT change the turtle's
    heading (direction of movement).
    If angle is not given: return the current tilt-angle, i. e. the angle
    between the orientation of the turtleshape and the heading of the
    turtle (its direction of movement).
    
    (Incorrectly marked as deprecated since Python 3.1, it is really
    settiltangle that is deprecated.)
    
    Examples:
    >>> shape("circle")
    >>> shapesize(5,2)
    >>> tilt(45)
    >>> tiltangle()

None
=================================== time ===================================
Help on built-in module time in turtle:

NAME
    time - This module provides various functions to manipulate time values.

DESCRIPTION
    There are two standard representations of time.  One is the number
    of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
    or a floating point number (to represent fractions of seconds).
    The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
    The actual value can be retrieved by calling gmtime(0).
    
    The other representation is a tuple of 9 integers giving local time.
    The tuple items are:
      year (including century, e.g. 1998)
      month (1-12)
      day (1-31)
      hours (0-23)
      minutes (0-59)
      seconds (0-59)
      weekday (0-6, Monday is 0)
      Julian day (day in the year, 1-366)
      DST (Daylight Savings Time) flag (-1, 0 or 1)
    If the DST flag is 0, the time is given in the regular time zone;
    if it is 1, the time is given in the DST time zone;
    if it is -1, mktime() should guess based on the date and time.

CLASSES
    builtins.tuple(builtins.object)
        struct_time
    
    class struct_time(builtins.tuple)
     |  struct_time(iterable=(), /)
     |  
     |  The time value as returned by gmtime(), localtime(), and strptime(), and
     |  accepted by asctime(), mktime() and strftime().  May be considered as a
     |  sequence of 9 integers.
     |  
     |  Note that several fields' values are not the same as those defined by
     |  the C language standard for struct tm.  For example, the value of the
     |  field tm_year is the actual year, not year - 1900.  See individual
     |  fields' descriptions for details.
     |  
     |  Method resolution order:
     |      struct_time
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  tm_gmtoff
     |      offset from UTC in seconds
     |  
     |  tm_hour
     |      hours, range [0, 23]
     |  
     |  tm_isdst
     |      1 if summer time is in effect, 0 if not, and -1 if unknown
     |  
     |  tm_mday
     |      day of month, range [1, 31]
     |  
     |  tm_min
     |      minutes, range [0, 59]
     |  
     |  tm_mon
     |      month of year, range [1, 12]
     |  
     |  tm_sec
     |      seconds, range [0, 61])
     |  
     |  tm_wday
     |      day of week, range [0, 6], Monday is 0
     |  
     |  tm_yday
     |      day of year, range [1, 366]
     |  
     |  tm_year
     |      year, for example, 1993
     |  
     |  tm_zone
     |      abbreviation of timezone name
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  n_fields = 11
     |  
     |  n_sequence_fields = 9
     |  
     |  n_unnamed_fields = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __getnewargs__(self, /)
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.tuple:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585

FUNCTIONS
    asctime(...)
        asctime([tuple]) -> string
        
        Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.
        When the time tuple is not present, current time as returned by localtime()
        is used.
    
    clock_getres(...)
        clock_getres(clk_id) -> floating point number
        
        Return the resolution (precision) of the specified clock clk_id.
    
    clock_gettime(...)
        clock_gettime(clk_id) -> float
        
        Return the time of the specified clock clk_id.
    
    clock_gettime_ns(...)
        clock_gettime_ns(clk_id) -> int
        
        Return the time of the specified clock clk_id as nanoseconds.
    
    clock_settime(...)
        clock_settime(clk_id, time)
        
        Set the time of the specified clock clk_id.
    
    clock_settime_ns(...)
        clock_settime_ns(clk_id, time)
        
        Set the time of the specified clock clk_id with nanoseconds.
    
    ctime(...)
        ctime(seconds) -> string
        
        Convert a time in seconds since the Epoch to a string in local time.
        This is equivalent to asctime(localtime(seconds)). When the time tuple is
        not present, current time as returned by localtime() is used.
    
    get_clock_info(...)
        get_clock_info(name: str) -> dict
        
        Get information of the specified clock.
    
    gmtime(...)
        gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
                               tm_sec, tm_wday, tm_yday, tm_isdst)
        
        Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.
        GMT).  When 'seconds' is not passed in, convert the current time instead.
        
        If the platform supports the tm_gmtoff and tm_zone, they are available as
        attributes only.
    
    localtime(...)
        localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                                  tm_sec,tm_wday,tm_yday,tm_isdst)
        
        Convert seconds since the Epoch to a time tuple expressing local time.
        When 'seconds' is not passed in, convert the current time instead.
    
    mktime(...)
        mktime(tuple) -> floating point number
        
        Convert a time tuple in local time to seconds since the Epoch.
        Note that mktime(gmtime(0)) will not generally return zero for most
        time zones; instead the returned value will either be equal to that
        of the timezone or altzone attributes on the time module.
    
    monotonic(...)
        monotonic() -> float
        
        Monotonic clock, cannot go backward.
    
    monotonic_ns(...)
        monotonic_ns() -> int
        
        Monotonic clock, cannot go backward, as nanoseconds.
    
    perf_counter(...)
        perf_counter() -> float
        
        Performance counter for benchmarking.
    
    perf_counter_ns(...)
        perf_counter_ns() -> int
        
        Performance counter for benchmarking as nanoseconds.
    
    process_time(...)
        process_time() -> float
        
        Process time for profiling: sum of the kernel and user-space CPU time.
    
    process_time_ns(...)
        process_time() -> int
        
        Process time for profiling as nanoseconds:
        sum of the kernel and user-space CPU time.
    
    sleep(...)
        sleep(seconds)
        
        Delay execution for a given number of seconds.  The argument may be
        a floating point number for subsecond precision.
    
    strftime(...)
        strftime(format[, tuple]) -> string
        
        Convert a time tuple to a string according to a format specification.
        See the library reference manual for formatting codes. When the time tuple
        is not present, current time as returned by localtime() is used.
        
        Commonly used format codes:
        
        %Y  Year with century as a decimal number.
        %m  Month as a decimal number [01,12].
        %d  Day of the month as a decimal number [01,31].
        %H  Hour (24-hour clock) as a decimal number [00,23].
        %M  Minute as a decimal number [00,59].
        %S  Second as a decimal number [00,61].
        %z  Time zone offset from UTC.
        %a  Locale's abbreviated weekday name.
        %A  Locale's full weekday name.
        %b  Locale's abbreviated month name.
        %B  Locale's full month name.
        %c  Locale's appropriate date and time representation.
        %I  Hour (12-hour clock) as a decimal number [01,12].
        %p  Locale's equivalent of either AM or PM.
        
        Other codes may be available on your platform.  See documentation for
        the C library strftime function.
    
    strptime(...)
        strptime(string, format) -> struct_time
        
        Parse a string to a time tuple according to a format specification.
        See the library reference manual for formatting codes (same as
        strftime()).
        
        Commonly used format codes:
        
        %Y  Year with century as a decimal number.
        %m  Month as a decimal number [01,12].
        %d  Day of the month as a decimal number [01,31].
        %H  Hour (24-hour clock) as a decimal number [00,23].
        %M  Minute as a decimal number [00,59].
        %S  Second as a decimal number [00,61].
        %z  Time zone offset from UTC.
        %a  Locale's abbreviated weekday name.
        %A  Locale's full weekday name.
        %b  Locale's abbreviated month name.
        %B  Locale's full month name.
        %c  Locale's appropriate date and time representation.
        %I  Hour (12-hour clock) as a decimal number [01,12].
        %p  Locale's equivalent of either AM or PM.
        
        Other codes may be available on your platform.  See documentation for
        the C library strftime function.
    
    thread_time(...)
        thread_time() -> float
        
        Thread time for profiling: sum of the kernel and user-space CPU time.
    
    thread_time_ns(...)
        thread_time() -> int
        
        Thread time for profiling as nanoseconds:
        sum of the kernel and user-space CPU time.
    
    time(...)
        time() -> floating point number
        
        Return the current time in seconds since the Epoch.
        Fractions of a second may be present if the system clock provides them.
    
    time_ns(...)
        time_ns() -> int
        
        Return the current time in nanoseconds since the Epoch.
    
    tzset(...)
        tzset()
        
        Initialize, or reinitialize, the local timezone to the value stored in
        os.environ['TZ']. The TZ environment variable should be specified in
        standard Unix timezone format as documented in the tzset man page
        (eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently
        fall back to UTC. If the TZ environment variable is not set, the local
        timezone is set to the systems best guess of wallclock time.
        Changing the TZ environment variable without calling tzset *may* change
        the local timezone used by methods such as localtime, but this behaviour
        should not be relied on.

DATA
    CLOCK_MONOTONIC = 6
    CLOCK_MONOTONIC_RAW = 4
    CLOCK_PROCESS_CPUTIME_ID = 12
    CLOCK_REALTIME = 0
    CLOCK_THREAD_CPUTIME_ID = 16
    CLOCK_UPTIME_RAW = 8
    altzone = 21600
    daylight = 0
    timezone = 21600
    tzname = ('CST', 'CST')

FILE
    (built-in)


None
=================================== title ===================================
Help on function title in turtle:

turtle.title = title(titlestring)
    Set title of turtle-window
    
    Argument:
    titlestring -- a string, to appear in the titlebar of the
                   turtle graphics window.
    
    This is a method of Screen-class. Not available for TurtleScreen-
    objects.
    
    Example:
    >>> title("Welcome to the turtle-zoo!")

None
=================================== towards ===================================
Help on function towards in turtle:

turtle.towards = towards(x, y=None)
    Return the angle of the line from the turtle's position to (x, y).
    
    Arguments:
    x -- a number   or  a pair/vector of numbers   or   a turtle instance
    y -- a number       None                            None
    
    call: distance(x, y)         # two coordinates
    --or: distance((x, y))       # a pair (tuple) of coordinates
    --or: distance(vec)          # e.g. as returned by pos()
    --or: distance(mypen)        # where mypen is another turtle
    
    Return the angle, between the line from turtle-position to position
    specified by x, y and the turtle's start orientation. (Depends on
    modes - "standard" or "logo")
    
    Example:
    >>> pos()
    (10.00, 10.00)
    >>> towards(0,0)
    225.0

None
=================================== tracer ===================================
Help on function tracer in turtle:

turtle.tracer = tracer(n=None, delay=None)
    Turns turtle animation on/off and set delay for update drawings.
    
    Optional arguments:
    n -- nonnegative  integer
    delay -- nonnegative  integer
    
    If n is given, only each n-th regular screen update is really performed.
    (Can be used to accelerate the drawing of complex graphics.)
    Second arguments sets delay value (see RawTurtle.delay())
    
    Example:
    >>> tracer(8, 25)
    >>> dist = 2
    >>> for i in range(200):
    ...     fd(dist)
    ...     rt(90)
    ...     dist += 2

None
=================================== turtles ===================================
Help on function turtles in turtle:

turtle.turtles = turtles()
    Return the list of turtles on the 
    
    Example:
    >>> turtles()
    [<turtle.Turtle object at 0x00E11FB0>]

None
=================================== turtlesize ===================================
Help on function turtlesize in turtle:

turtle.turtlesize = turtlesize(stretch_wid=None, stretch_len=None, outline=None)
    Set/return turtle's stretchfactors/outline. Set resizemode to "user".
    
    Optional arguments:
       stretch_wid : positive number
       stretch_len : positive number
       outline  : positive number
    
    Return or set the pen's attributes x/y-stretchfactors and/or outline.
    Set resizemode to "user".
    If and only if resizemode is set to "user", the turtle will be displayed
    stretched according to its stretchfactors:
    stretch_wid is stretchfactor perpendicular to orientation
    stretch_len is stretchfactor in direction of turtles orientation.
    outline determines the width of the shapes's outline.
    
    Examples:
    >>> resizemode("user")
    >>> shapesize(5, 5, 12)
    >>> shapesize(outline=8)

None
=================================== types ===================================
Help on module types in turtle:

NAME
    types - Define names for built-in types that aren't directly accessible as a builtin.

MODULE REFERENCE
    https://docs.python.org/3.9/library/types
    
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.

CLASSES
    builtins.object
        builtins.async_generator
        builtins.builtin_function_or_method
        builtins.cell
        builtins.classmethod_descriptor
        builtins.code
        builtins.coroutine
        builtins.frame
        builtins.function
        builtins.generator
        builtins.getset_descriptor
        builtins.mappingproxy
        builtins.member_descriptor
        builtins.method
        builtins.method-wrapper
        builtins.method_descriptor
        builtins.module
        builtins.traceback
        builtins.wrapper_descriptor
        DynamicClassAttribute
        GenericAlias
        SimpleNamespace
    
    AsyncGeneratorType = class async_generator(object)
     |  Methods defined here:
     |  
     |  __aiter__(self, /)
     |      Return an awaitable, that resolves in asynchronous iterator.
     |  
     |  __anext__(self, /)
     |      Return a value or raise StopAsyncIteration.
     |  
     |  __del__(...)
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  aclose(...)
     |      aclose() -> raise GeneratorExit inside generator.
     |  
     |  asend(...)
     |      asend(v) -> send 'v' in generator.
     |  
     |  athrow(...)
     |      athrow(typ[,val[,tb]]) -> raise exception in generator.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ag_await
     |      object being awaited on, or None
     |  
     |  ag_code
     |  
     |  ag_frame
     |  
     |  ag_running
    
    BuiltinFunctionType = class builtin_function_or_method(object)
     |  Built-in subclasses:
     |      builtin_method
     |  
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __self__
     |  
     |  __text_signature__
    
    BuiltinMethodType = class builtin_function_or_method(object)
     |  Built-in subclasses:
     |      builtin_method
     |  
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __self__
     |  
     |  __text_signature__
    
    CellType = class cell(object)
     |  Create a new cell object.
     |  
     |   contents
     |     the contents of the cell. If not specified, the cell will be empty,
     |     and 
     |  further attempts to access its cell_contents attribute will
     |     raise a ValueError.
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  cell_contents
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
    
    ClassMethodDescriptorType = class classmethod_descriptor(object)
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __get__(self, instance, owner, /)
     |      Return an attribute of instance, which is of type owner.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __objclass__
     |  
     |  __text_signature__
    
    CodeType = class code(object)
     |  code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,
     |        flags, codestring, constants, names, varnames, filename, name,
     |        firstlineno, lnotab[, freevars[, cellvars]])
     |  
     |  Create a code object.  Not for the faint of heart.
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __sizeof__(...)
     |      Size of object in memory, in bytes.
     |  
     |  replace(self, /, *, co_argcount=-1, co_posonlyargcount=-1, co_kwonlyargcount=-1, co_nlocals=-1, co_stacksize=-1, co_flags=-1, co_firstlineno=-1, co_code=None, co_consts=None, co_names=None, co_varnames=None, co_freevars=None, co_cellvars=None, co_filename=None, co_name=None, co_lnotab=None)
     |      Return a copy of the code object with new values for the specified fields.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  co_argcount
     |  
     |  co_cellvars
     |  
     |  co_code
     |  
     |  co_consts
     |  
     |  co_filename
     |  
     |  co_firstlineno
     |  
     |  co_flags
     |  
     |  co_freevars
     |  
     |  co_kwonlyargcount
     |  
     |  co_lnotab
     |  
     |  co_name
     |  
     |  co_names
     |  
     |  co_nlocals
     |  
     |  co_posonlyargcount
     |  
     |  co_stacksize
     |  
     |  co_varnames
    
    CoroutineType = class coroutine(object)
     |  Methods defined here:
     |  
     |  __await__(self, /)
     |      Return an iterator to be used in await expression.
     |  
     |  __del__(...)
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  close(...)
     |      close() -> raise GeneratorExit inside coroutine.
     |  
     |  send(...)
     |      send(arg) -> send 'arg' into coroutine,
     |      return next iterated value or raise StopIteration.
     |  
     |  throw(...)
     |      throw(value)
     |      throw(type[,value[,traceback]])
     |      
     |      Raise exception in coroutine, return next iterated value or raise
     |      StopIteration.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  cr_await
     |      object being awaited on, or None
     |  
     |  cr_code
     |  
     |  cr_frame
     |  
     |  cr_origin
     |  
     |  cr_running
    
    class DynamicClassAttribute(builtins.object)
     |  DynamicClassAttribute(fget=None, fset=None, fdel=None, doc=None)
     |  
     |  Route attribute access on a class to __getattr__.
     |  
     |  This is a descriptor, used to define attributes that act differently when
     |  accessed through an instance and through a class.  Instance access remains
     |  normal, but access to an attribute through a class will be routed to the
     |  class's __getattr__ method; this is done by raising AttributeError.
     |  
     |  This allows one to have properties active on an instance, and have virtual
     |  attributes on the class with the same name (see Enum for an example).
     |  
     |  Methods defined here:
     |  
     |  __delete__(self, instance)
     |  
     |  __get__(self, instance, ownerclass=None)
     |  
     |  __init__(self, fget=None, fset=None, fdel=None, doc=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __set__(self, instance, value)
     |  
     |  deleter(self, fdel)
     |  
     |  getter(self, fget)
     |  
     |  setter(self, fset)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    FrameType = class frame(object)
     |  Methods defined here:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __sizeof__(...)
     |      F.__sizeof__() -> size of F in memory, in bytes
     |  
     |  clear(...)
     |      F.clear(): clear most references held by the frame
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  f_back
     |  
     |  f_builtins
     |  
     |  f_code
     |  
     |  f_globals
     |  
     |  f_lasti
     |  
     |  f_lineno
     |  
     |  f_locals
     |  
     |  f_trace
     |  
     |  f_trace_lines
     |  
     |  f_trace_opcodes
    
    FunctionType = class function(object)
     |  FunctionType(code, globals, name=None, argdefs=None, closure=None)
     |  
     |  Create a function object.
     |  
     |  code
     |    a code object
     |  globals
     |    the globals dictionary
     |  name
     |    a string that overrides the name from the code object
     |  argdefs
     |    a tuple that specifies the default argument values
     |  closure
     |    a tuple that supplies the bindings for free variables
     |  
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __get__(self, instance, owner, /)
     |      Return an attribute of instance, which is of type owner.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __annotations__
     |  
     |  __closure__
     |  
     |  __code__
     |  
     |  __defaults__
     |  
     |  __dict__
     |  
     |  __globals__
     |  
     |  __kwdefaults__
    
    GeneratorType = class generator(object)
     |  Methods defined here:
     |  
     |  __del__(...)
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __next__(self, /)
     |      Implement next(self).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  close(...)
     |      close() -> raise GeneratorExit inside generator.
     |  
     |  send(...)
     |      send(arg) -> send 'arg' into generator,
     |      return next yielded value or raise StopIteration.
     |  
     |  throw(...)
     |      throw(value)
     |      throw(type[,value[,tb]])
     |      
     |      Raise exception in generator, return next yielded value or raise
     |      StopIteration.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  gi_code
     |  
     |  gi_frame
     |  
     |  gi_running
     |  
     |  gi_yieldfrom
     |      object being iterated by yield from, or None
    
    class GenericAlias(builtins.object)
     |  Represent a PEP 585 generic type
     |  
     |  E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).
     |  
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __dir__(...)
     |      Default dir() implementation.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __instancecheck__(...)
     |      Check if an object is an instance.
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mro_entries__(...)
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __subclasscheck__(...)
     |      Check if a class is a subclass.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __args__
     |  
     |  __origin__
     |  
     |  __parameters__
     |      Type variables in the GenericAlias.
    
    GetSetDescriptorType = class getset_descriptor(object)
     |  Methods defined here:
     |  
     |  __delete__(self, instance, /)
     |      Delete an attribute of instance.
     |  
     |  __get__(self, instance, owner, /)
     |      Return an attribute of instance, which is of type owner.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __set__(self, instance, value, /)
     |      Set an attribute of instance to value.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __objclass__
    
    LambdaType = class function(object)
     |  LambdaType(code, globals, name=None, argdefs=None, closure=None)
     |  
     |  Create a function object.
     |  
     |  code
     |    a code object
     |  globals
     |    the globals dictionary
     |  name
     |    a string that overrides the name from the code object
     |  argdefs
     |    a tuple that specifies the default argument values
     |  closure
     |    a tuple that supplies the bindings for free variables
     |  
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __get__(self, instance, owner, /)
     |      Return an attribute of instance, which is of type owner.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __annotations__
     |  
     |  __closure__
     |  
     |  __code__
     |  
     |  __defaults__
     |  
     |  __dict__
     |  
     |  __globals__
     |  
     |  __kwdefaults__
    
    MappingProxyType = class mappingproxy(object)
     |  Methods defined here:
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __ior__(self, value, /)
     |      Return self|=value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __or__(self, value, /)
     |      Return self|value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(...)
     |      D.__reversed__() -> reverse iterator
     |  
     |  __ror__(self, value, /)
     |      Return value|self.
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  get(...)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __class_getitem__(...) from builtins.type
     |      See PEP 585
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
    
    MemberDescriptorType = class member_descriptor(object)
     |  Methods defined here:
     |  
     |  __delete__(self, instance, /)
     |      Delete an attribute of instance.
     |  
     |  __get__(self, instance, owner, /)
     |      Return an attribute of instance, which is of type owner.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __set__(self, instance, value, /)
     |      Set an attribute of instance to value.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __objclass__
    
    MethodDescriptorType = class method_descriptor(object)
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __get__(self, instance, owner, /)
     |      Return an attribute of instance, which is of type owner.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __objclass__
     |  
     |  __text_signature__
    
    MethodType = class method(object)
     |  method(function, instance)
     |  
     |  Create a bound instance method object.
     |  
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __get__(self, instance, owner, /)
     |      Return an attribute of instance, which is of type owner.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __func__
     |      the function (or other callable) implementing a method
     |  
     |  __self__
     |      the instance to which a method is bound
    
    MethodWrapperType = class method-wrapper(object)
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __objclass__
     |  
     |  __self__
     |  
     |  __text_signature__
    
    ModuleType = class module(object)
     |  ModuleType(name, doc=None)
     |  
     |  Create a module object.
     |  
     |  The name must be a string; the optional doc argument can have any type.
     |  
     |  Methods defined here:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __dir__(...)
     |      __dir__() -> list
     |      specialized dir() implementation
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
    
    class SimpleNamespace(builtins.object)
     |  A simple attribute-based namespace.
     |  
     |  SimpleNamespace(**kwargs)
     |  
     |  Methods defined here:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __reduce__(...)
     |      Return state information for pickling
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
    
    TracebackType = class traceback(object)
     |  TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
     |  --
     |  
     |  Create a new traceback object.
     |  
     |  Methods defined here:
     |  
     |  __dir__(...)
     |      Default dir() implementation.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  tb_frame
     |  
     |  tb_lasti
     |  
     |  tb_lineno
     |  
     |  tb_next
    
    WrapperDescriptorType = class wrapper_descriptor(object)
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __get__(self, instance, owner, /)
     |      Return an attribute of instance, which is of type owner.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __objclass__
     |  
     |  __text_signature__

FUNCTIONS
    coroutine(func)
        Convert regular generator function to a coroutine.
    
    new_class(name, bases=(), kwds=None, exec_body=None)
        Create a class object dynamically using the appropriate metaclass.
    
    prepare_class(name, bases=(), kwds=None)
        Call the __prepare__ method of the appropriate metaclass.
        
        Returns (metaclass, namespace, kwds) as a 3-tuple
        
        *metaclass* is the appropriate metaclass
        *namespace* is the prepared class namespace
        *kwds* is an updated copy of the passed in kwds argument with any
        'metaclass' entry removed. If no kwds argument is passed in, this will
        be an empty dict.
    
    resolve_bases(bases)
        Resolve MRO entries dynamically as specified by PEP 560.

DATA
    __all__ = ['FunctionType', 'LambdaType', 'CodeType', 'MappingProxyType...

FILE
    /Users/santosg/miniconda3/lib/python3.9/types.py


None
=================================== undo ===================================
Help on function undo in turtle:

turtle.undo = undo()
    undo (repeatedly) the last turtle action.
    
    No argument.
    
    undo (repeatedly) the last turtle action.
    Number of available undo actions is determined by the size of
    the undobuffer.
    
    Example:
    >>> for i in range(4):
    ...     fd(50); lt(80)
    ...
    >>> for i in range(8):
    ...     undo()
    ...

None
=================================== undobufferentries ===================================
Help on function undobufferentries in turtle:

turtle.undobufferentries = undobufferentries()
    Return count of entries in the undobuffer.
    
    No argument.
    
    Example:
    >>> while undobufferentries():
    ...     undo()

None
=================================== up ===================================
Help on function up in turtle:

turtle.up = up()
    Pull the pen up -- no drawing when moving.
    
    Aliases: penup | pu | up
    
    No argument
    
    Example:
    >>> penup()

None
=================================== update ===================================
Help on function update in turtle:

turtle.update = update()
    Perform a TurtleScreen update.

None
=================================== width ===================================
Help on function width in turtle:

turtle.width = width(width=None)
    Set or return the line thickness.
    
    Aliases:  pensize | width
    
    Argument:
    width -- positive number
    
    Set the line thickness to width or return it. If resizemode is set
    to "auto" and turtleshape is a polygon, that polygon is drawn with
    the same line thickness. If no argument is given, current pensize
    is returned.
    
    Example:
    >>> pensize()
    1
    >>> pensize(10)   # from here on lines of width 10 are drawn

None
=================================== window_height ===================================
Help on function window_height in turtle:

turtle.window_height = window_height()
    Return the height of the turtle window.
    
    Example:
    >>> window_height()
    480

None
=================================== window_width ===================================
Help on function window_width in turtle:

turtle.window_width = window_width()
    Return the width of the turtle window.
    
    Example:
    >>> window_width()
    640

None
=================================== write ===================================
Help on function write in turtle:

turtle.write = write(arg, move=False, align='left', font=('Arial', 8, 'normal'))
    Write text at the current turtle position.
    
    Arguments:
    arg -- info, which is to be written to the TurtleScreen
    move (optional) -- True/False
    align (optional) -- one of the strings "left", "center" or right"
    font (optional) -- a triple (fontname, fontsize, fonttype)
    
    Write text - the string representation of arg - at the current
    turtle position according to align ("left", "center" or right")
    and with the given font.
    If move is True, the pen is moved to the bottom-right corner
    of the text. By default, move is False.
    
    Example:
    >>> write('Home = ', True, align="center")
    >>> write((0,0), True)

None
=================================== write_docstringdict ===================================
Help on function write_docstringdict in turtle:

turtle.write_docstringdict = write_docstringdict(filename='turtle_docstringdict')
    Create and write docstring-dictionary to file.
    
    Optional argument:
    filename -- a string, used as filename
                default value is turtle_docstringdict
    
    Has to be called explicitly, (not used by the turtle-graphics classes)
    The docstring dictionary will be written to the Python script <filname>.py
    It is intended to serve as a template for translation of the docstrings
    into different languages.

None
=================================== xcor ===================================
Help on function xcor in turtle:

turtle.xcor = xcor()
    Return the turtle's x coordinate.
    
    No arguments.
    
    Example:
    >>> reset()
    >>> left(60)
    >>> forward(100)
    >>> print xcor()
    50.0

None
=================================== ycor ===================================
Help on function ycor in turtle:

turtle.ycor = ycor()
    Return the turtle's y coordinate
    ---
    No arguments.
    
    Example:
    >>> reset()
    >>> left(60)
    >>> forward(100)
    >>> print ycor()
    86.6025403784

None
