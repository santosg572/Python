======================= bit_generator ===============================
Help on module numpy.random.bit_generator in numpy.random:

NAME
    numpy.random.bit_generator - BitGenerator base class and SeedSequence used to seed the BitGenerators.

DESCRIPTION
    SeedSequence is derived from Melissa E. O'Neill's C++11 `std::seed_seq`
    implementation, as it has a lot of nice properties that we want.
    
    https://gist.github.com/imneme/540829265469e673d045
    http://www.pcg-random.org/posts/developing-a-seed_seq-alternative.html
    
    The MIT License (MIT)
    
    Copyright (c) 2015 Melissa E. O'Neill
    Copyright (c) 2019 NumPy Developers
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

CLASSES
    builtins.object
        BitGenerator
        SeedSequence
    
    class BitGenerator(builtins.object)
     |  BitGenerator(seed=None)
     |  
     |  Base Class for generic BitGenerators, which provide a stream
     |  of random bits based on different algorithms. Must be overridden.
     |  
     |  Parameters
     |  ----------
     |  seed : {None, int, array_like[ints], SeedSequence}, optional
     |      A seed to initialize the `BitGenerator`. If None, then fresh,
     |      unpredictable entropy will be pulled from the OS. If an ``int`` or
     |      ``array_like[ints]`` is passed, then it will be passed to
     |      ~`numpy.random.SeedSequence` to derive the initial `BitGenerator` state.
     |      One may also pass in a `SeedSequence` instance.
     |  
     |  Attributes
     |  ----------
     |  lock : threading.Lock
     |      Lock instance that is shared so that the same BitGenerator can
     |      be used in multiple Generators without corrupting the state. Code that
     |      generates values from a bit generator should hold the bit generator's
     |      lock.
     |  
     |  See Also
     |  --------
     |  SeedSequence
     |  
     |  Methods defined here:
     |  
     |  __getstate__(...)
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __setstate__(...)
     |  
     |  random_raw(...)
     |      random_raw(self, size=None)
     |      
     |      Return randoms as generated by the underlying BitGenerator
     |      
     |      Parameters
     |      ----------
     |      size : int or tuple of ints, optional
     |          Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
     |          ``m * n * k`` samples are drawn.  Default is None, in which case a
     |          single value is returned.
     |      output : bool, optional
     |          Output values.  Used for performance testing since the generated
     |          values are not returned.
     |      
     |      Returns
     |      -------
     |      out : uint or ndarray
     |          Drawn samples.
     |      
     |      Notes
     |      -----
     |      This method directly exposes the raw underlying pseudo-random
     |      number generator. All values are returned as unsigned 64-bit
     |      values irrespective of the number of bits produced by the PRNG.
     |      
     |      See the class docstring for the number of bits returned.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  capsule
     |  
     |  cffi
     |      CFFI interface
     |      
     |      Returns
     |      -------
     |      interface : namedtuple
     |          Named tuple containing CFFI wrapper
     |      
     |          * state_address - Memory address of the state struct
     |          * state - pointer to the state struct
     |          * next_uint64 - function pointer to produce 64 bit integers
     |          * next_uint32 - function pointer to produce 32 bit integers
     |          * next_double - function pointer to produce doubles
     |          * bitgen - pointer to the bit generator struct
     |  
     |  ctypes
     |      ctypes interface
     |      
     |      Returns
     |      -------
     |      interface : namedtuple
     |          Named tuple containing ctypes wrapper
     |      
     |          * state_address - Memory address of the state struct
     |          * state - pointer to the state struct
     |          * next_uint64 - function pointer to produce 64 bit integers
     |          * next_uint32 - function pointer to produce 32 bit integers
     |          * next_double - function pointer to produce doubles
     |          * bitgen - pointer to the bit generator struct
     |  
     |  lock
     |  
     |  state
     |      Get or set the PRNG state
     |      
     |      The base BitGenerator.state must be overridden by a subclass
     |      
     |      Returns
     |      -------
     |      state : dict
     |          Dictionary containing the information required to describe the
     |          state of the PRNG
    
    class SeedSequence(builtins.object)
     |  SeedSequence(entropy=None, *, spawn_key=(), pool_size=4)
     |  
     |  SeedSequence mixes sources of entropy in a reproducible way to set the
     |  initial state for independent and very probably non-overlapping
     |  BitGenerators.
     |  
     |  Once the SeedSequence is instantiated, you can call the `generate_state`
     |  method to get an appropriately sized seed. Calling `spawn(n) <spawn>` will
     |  create ``n`` SeedSequences that can be used to seed independent
     |  BitGenerators, i.e. for different threads.
     |  
     |  Parameters
     |  ----------
     |  entropy : {None, int, sequence[int]}, optional
     |      The entropy for creating a `SeedSequence`.
     |  spawn_key : {(), sequence[int]}, optional
     |      A third source of entropy, used internally when calling
     |      `SeedSequence.spawn`
     |  pool_size : {int}, optional
     |      Size of the pooled entropy to store. Default is 4 to give a 128-bit
     |      entropy pool. 8 (for 256 bits) is another reasonable choice if working
     |      with larger PRNGs, but there is very little to be gained by selecting
     |      another value.
     |  n_children_spawned : {int}, optional
     |      The number of children already spawned. Only pass this if
     |      reconstructing a `SeedSequence` from a serialized form.
     |  
     |  Notes
     |  -----
     |  
     |  Best practice for achieving reproducible bit streams is to use
     |  the default ``None`` for the initial entropy, and then use
     |  `SeedSequence.entropy` to log/pickle the `entropy` for reproducibility:
     |  
     |  >>> sq1 = np.random.SeedSequence()
     |  >>> sq1.entropy
     |  243799254704924441050048792905230269161  # random
     |  >>> sq2 = np.random.SeedSequence(sq1.entropy)
     |  >>> np.all(sq1.generate_state(10) == sq2.generate_state(10))
     |  True
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __reduce__ = __reduce_cython__(...)
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setstate__ = __setstate_cython__(...)
     |  
     |  generate_state(...)
     |      generate_state(n_words, dtype=np.uint32)
     |      
     |      Return the requested number of words for PRNG seeding.
     |      
     |      A BitGenerator should call this method in its constructor with
     |      an appropriate `n_words` parameter to properly seed itself.
     |      
     |      Parameters
     |      ----------
     |      n_words : int
     |      dtype : np.uint32 or np.uint64, optional
     |          The size of each word. This should only be either `uint32` or
     |          `uint64`. Strings (`'uint32'`, `'uint64'`) are fine. Note that
     |          requesting `uint64` will draw twice as many bits as `uint32` for
     |          the same `n_words`. This is a convenience for `BitGenerator`s that
     |          express their states as `uint64` arrays.
     |      
     |      Returns
     |      -------
     |      state : uint32 or uint64 array, shape=(n_words,)
     |  
     |  spawn(...)
     |      spawn(n_children)
     |      
     |      Spawn a number of child `SeedSequence` s by extending the
     |      `spawn_key`.
     |      
     |      Parameters
     |      ----------
     |      n_children : int
     |      
     |      Returns
     |      -------
     |      seqs : list of `SeedSequence` s
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  entropy
     |  
     |  n_children_spawned
     |  
     |  pool
     |  
     |  pool_size
     |  
     |  spawn_key
     |  
     |  state
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __pyx_vtable__ = <capsule object NULL>

DATA
    __all__ = ['SeedSequence', 'BitGenerator']
    __test__ = {'_coerce_to_uint32_array (line 79)': ' Coerce an input to ...

FILE
    /Users/santosg/miniconda3/lib/python3.9/site-packages/numpy/random/bit_generator.cpython-39-darwin.so


None
