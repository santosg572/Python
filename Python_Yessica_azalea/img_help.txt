Successfully loaded: c6_cnb/sub-27an_thresh_zstat6.nii.gz
&&&&&&&&&&&&&&&&&&&&&&&&& ImageArrayProxy &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on class ArrayProxy in module nibabel.arrayproxy:

class ArrayProxy(ArrayLike)
 |  ArrayProxy(file_like, spec, *, mmap=True, order=None, keep_file_open=None)
 |  
 |  Class to act as proxy for the array that can be read from a file
 |  
 |  The array proxy allows us to freeze the passed fileobj and header such that
 |  it returns the expected data array.
 |  
 |  This implementation assumes a contiguous array in the file object, with one
 |  of the numpy dtypes, starting at a given file position ``offset`` with
 |  single ``slope`` and ``intercept`` scaling to produce output values.
 |  
 |  The class ``__init__`` requires a spec which defines how the data will be
 |  read and rescaled. The spec may be a tuple of length 2 - 5, containing the
 |  shape, storage dtype, offset, slope and intercept, or a ``header`` object
 |  with methods:
 |  
 |  * get_data_shape
 |  * get_data_dtype
 |  * get_data_offset
 |  * get_slope_inter
 |  
 |  A header should also have a 'copy' method.  This requirement will go away
 |  when the deprecated 'header' property goes away.
 |  
 |  This implementation allows us to deal with Analyze and its variants,
 |  including Nifti1, and with the MGH format.
 |  
 |  Other image types might need more specific classes to implement the API.
 |  See :mod:`nibabel.minc1`, :mod:`nibabel.ecat` and :mod:`nibabel.parrec` for
 |  examples.
 |  
 |  Method resolution order:
 |      ArrayProxy
 |      ArrayLike
 |      typing.Protocol
 |      typing.Generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __array__(self, dtype=None)
 |      Read data from file and apply scaling, casting to ``dtype``
 |      
 |      If ``dtype`` is unspecified, the dtype of the returned array is the
 |      narrowest dtype that can represent the data without overflow.
 |      Generally, it is the wider of the dtypes of the slopes or intercepts.
 |      
 |      The types of the scale factors will generally be determined by the
 |      parameter size in the image header, and so should be consistent for a
 |      given image format, but may vary across formats.
 |      
 |      Parameters
 |      ----------
 |      dtype : numpy dtype specifier, optional
 |          A numpy dtype specifier specifying the type of the returned array.
 |      
 |      Returns
 |      -------
 |      array
 |          Scaled image data with type `dtype`.
 |  
 |  __del__(self)
 |      If this ``ArrayProxy`` was created with ``keep_file_open=True``,
 |      the open file object is closed if necessary.
 |  
 |  __getitem__(self, slicer)
 |  
 |  __getstate__(self)
 |      Returns the state of this ``ArrayProxy`` during pickling.
 |  
 |  __init__(self, file_like, spec, *, mmap=True, order=None, keep_file_open=None)
 |      Initialize array proxy instance
 |      
 |      Parameters
 |      ----------
 |      file_like : object
 |          File-like object or filename. If file-like object, should implement
 |          at least ``read`` and ``seek``.
 |      spec : object or tuple
 |          Tuple must have length 2-5, with the following values:
 |      
 |          #. shape: tuple - tuple of ints describing shape of data;
 |          #. storage_dtype: dtype specifier - dtype of array inside proxied
 |             file, or input to ``numpy.dtype`` to specify array dtype;
 |          #. offset: int - offset, in bytes, of data array from start of file
 |             (default: 0);
 |          #. slope: float - scaling factor for resulting data (default: 1.0);
 |          #. inter: float - intercept for rescaled data (default: 0.0).
 |      
 |          OR
 |      
 |          Header object implementing ``get_data_shape``, ``get_data_dtype``,
 |          ``get_data_offset``, ``get_slope_inter``
 |      mmap : {True, False, 'c', 'r'}, optional, keyword only
 |          `mmap` controls the use of numpy memory mapping for reading data.
 |          If False, do not try numpy ``memmap`` for data array.  If one of
 |          {'c', 'r'}, try numpy memmap with ``mode=mmap``.  A `mmap` value of
 |          True gives the same behavior as ``mmap='c'``.  If `file_like`
 |          cannot be memory-mapped, ignore `mmap` value and read array from
 |          file.
 |      order : {None, 'F', 'C'}, optional, keyword only
 |          `order` controls the order of the data array layout. Fortran-style,
 |          column-major order may be indicated with 'F', and C-style, row-major
 |          order may be indicated with 'C'. None gives the default order, that
 |          comes from the `_default_order` class variable.
 |      keep_file_open : { None, True, False }, optional, keyword only
 |          `keep_file_open` controls whether a new file handle is created
 |          every time the image is accessed, or a single file handle is
 |          created and used for the lifetime of this ``ArrayProxy``. If
 |          ``True``, a single file handle is created and used. If ``False``,
 |          a new file handle is created every time the image is accessed.
 |          If ``file_like`` is an open file handle, this setting has no
 |          effect. The default value (``None``) will result in the value of
 |          ``KEEP_FILE_OPEN_DEFAULT`` being used.
 |  
 |  __setstate__(self, state)
 |      Sets the state of this ``ArrayProxy`` during unpickling.
 |  
 |  __subclasshook__ = _proto_hook(other)
 |      # Set (or override) the protocol subclass hook.
 |  
 |  copy(self) -> 'Self'
 |      Create a new ArrayProxy for the same file and parameters
 |      
 |      If the proxied file is an open file handle, the new ArrayProxy
 |      will share a lock with the old one.
 |  
 |  get_unscaled(self)
 |      Read data from file
 |      
 |      This is an optional part of the proxy API
 |  
 |  reshape(self, shape)
 |      Return an ArrayProxy with a new shape, without modifying data
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  dtype
 |  
 |  inter
 |  
 |  is_proxy
 |  
 |  ndim
 |  
 |  offset
 |  
 |  shape
 |  
 |  slope
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  __parameters__ = ()
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ArrayLike:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ArrayLike:
 |  
 |  __annotations__ = {'shape': 'tuple[int, ...]'}
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Protocol:
 |  
 |  __init_subclass__(*args, **kwargs) from typing._ProtocolMeta
 |      This method is called when a class is subclassed.
 |      
 |      The default implementation does nothing. It may be
 |      overridden to extend subclasses.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Generic:
 |  
 |  __class_getitem__(params) from typing._ProtocolMeta

None
&&&&&&&&&&&&&&&&&&&&&&&&& ImageSlicer &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on class SpatialFirstSlicer in module nibabel.spatialimages:

class SpatialFirstSlicer(typing.Generic)
 |  SpatialFirstSlicer(img: 'SpatialImgT')
 |  
 |  Slicing interface that returns a new image with an updated affine
 |  
 |  Checks that an image's first three axes are spatial
 |  
 |  Method resolution order:
 |      SpatialFirstSlicer
 |      typing.Generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getitem__(self, slicer: 'object') -> 'SpatialImgT'
 |  
 |  __init__(self, img: 'SpatialImgT')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  check_slicing(self, slicer: 'object', return_spatial: 'bool' = False) -> 'tuple[slice | int | None, ...]'
 |      Canonicalize slicers and check for scalar indices in spatial dims
 |      
 |      Parameters
 |      ----------
 |      slicer : object
 |          something that can be used to slice an array as in
 |          ``arr[sliceobj]``
 |      return_spatial : bool
 |          return only slices along spatial dimensions (x, y, z)
 |      
 |      Returns
 |      -------
 |      slicer : object
 |          Validated slicer object that will slice image's `dataobj`
 |          without collapsing spatial dimensions
 |  
 |  slice_affine(self, slicer: 'object') -> 'np.ndarray'
 |      Retrieve affine for current image, if sliced by a given index
 |      
 |      Applies scaling if down-sampling is applied, and adjusts the intercept
 |      to account for any cropping.
 |      
 |      Parameters
 |      ----------
 |      slicer : object
 |          something that can be used to slice an array as in
 |          ``arr[sliceobj]``
 |      
 |      Returns
 |      -------
 |      affine : (4,4) ndarray
 |          Affine with updated scale and intercept
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'img': 'SpatialImgT'}
 |  
 |  __orig_bases__ = (typing.Generic[~SpatialImgT],)
 |  
 |  __parameters__ = (~SpatialImgT,)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Generic:
 |  
 |  __class_getitem__(params) from builtins.type
 |  
 |  __init_subclass__(*args, **kwargs) from builtins.type
 |      This method is called when a class is subclassed.
 |      
 |      The default implementation does nothing. It may be
 |      overridden to extend subclasses.

None
&&&&&&&&&&&&&&&&&&&&&&&&& affine &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on ndarray object:

class ndarray(builtins.object)
 |  ndarray(shape, dtype=float, buffer=None, offset=0,
 |          strides=None, order=None)
 |  
 |  An array object represents a multidimensional, homogeneous array
 |  of fixed-size items.  An associated data-type object describes the
 |  format of each element in the array (its byte-order, how many bytes it
 |  occupies in memory, whether it is an integer, a floating point number,
 |  or something else, etc.)
 |  
 |  Arrays should be constructed using `array`, `zeros` or `empty` (refer
 |  to the See Also section below).  The parameters given here refer to
 |  a low-level method (`ndarray(...)`) for instantiating an array.
 |  
 |  For more information, refer to the `numpy` module and examine the
 |  methods and attributes of an array.
 |  
 |  Parameters
 |  ----------
 |  (for the __new__ method; see Notes below)
 |  
 |  shape : tuple of ints
 |      Shape of created array.
 |  dtype : data-type, optional
 |      Any object that can be interpreted as a numpy data type.
 |  buffer : object exposing buffer interface, optional
 |      Used to fill the array with data.
 |  offset : int, optional
 |      Offset of array data in buffer.
 |  strides : tuple of ints, optional
 |      Strides of data in memory.
 |  order : {'C', 'F'}, optional
 |      Row-major (C-style) or column-major (Fortran-style) order.
 |  
 |  Attributes
 |  ----------
 |  T : ndarray
 |      Transpose of the array.
 |  data : buffer
 |      The array's elements, in memory.
 |  dtype : dtype object
 |      Describes the format of the elements in the array.
 |  flags : dict
 |      Dictionary containing information related to memory use, e.g.,
 |      'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.
 |  flat : numpy.flatiter object
 |      Flattened version of the array as an iterator.  The iterator
 |      allows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for
 |      assignment examples; TODO).
 |  imag : ndarray
 |      Imaginary part of the array.
 |  real : ndarray
 |      Real part of the array.
 |  size : int
 |      Number of elements in the array.
 |  itemsize : int
 |      The memory use of each array element in bytes.
 |  nbytes : int
 |      The total number of bytes required to store the array data,
 |      i.e., ``itemsize * size``.
 |  ndim : int
 |      The array's number of dimensions.
 |  shape : tuple of ints
 |      Shape of the array.
 |  strides : tuple of ints
 |      The step-size required to move from one element to the next in
 |      memory. For example, a contiguous ``(3, 4)`` array of type
 |      ``int16`` in C-order has strides ``(8, 2)``.  This implies that
 |      to move from element to element in memory requires jumps of 2 bytes.
 |      To move from row-to-row, one needs to jump 8 bytes at a time
 |      (``2 * 4``).
 |  ctypes : ctypes object
 |      Class containing properties of the array needed for interaction
 |      with ctypes.
 |  base : ndarray
 |      If the array is a view into another array, that array is its `base`
 |      (unless that array is also a view).  The `base` array is where the
 |      array data is actually stored.
 |  
 |  See Also
 |  --------
 |  array : Construct an array.
 |  zeros : Create an array, each element of which is zero.
 |  empty : Create an array, but leave its allocated memory unchanged (i.e.,
 |          it contains "garbage").
 |  dtype : Create a data-type.
 |  numpy.typing.NDArray : An ndarray alias :term:`generic <generic type>`
 |                         w.r.t. its `dtype.type <numpy.dtype.type>`.
 |  
 |  Notes
 |  -----
 |  There are two modes of creating an array using ``__new__``:
 |  
 |  1. If `buffer` is None, then only `shape`, `dtype`, and `order`
 |     are used.
 |  2. If `buffer` is an object exposing the buffer interface, then
 |     all keywords are interpreted.
 |  
 |  No ``__init__`` method is needed because the array is fully initialized
 |  after the ``__new__`` method.
 |  
 |  Examples
 |  --------
 |  These examples illustrate the low-level `ndarray` constructor.  Refer
 |  to the `See Also` section above for easier ways of constructing an
 |  ndarray.
 |  
 |  First mode, `buffer` is None:
 |  
 |  >>> np.ndarray(shape=(2,2), dtype=float, order='F')
 |  array([[0.0e+000, 0.0e+000], # random
 |         [     nan, 2.5e-323]])
 |  
 |  Second mode:
 |  
 |  >>> np.ndarray((2,), buffer=np.array([1,2,3]),
 |  ...            offset=np.int_().itemsize,
 |  ...            dtype=int) # offset = 1*itemsize, i.e. skip first element
 |  array([2, 3])
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __array__(...)
 |      a.__array__([dtype], /) -> reference if type unchanged, copy otherwise.
 |      
 |      Returns either a new reference to self if dtype is not given or a new array
 |      of provided data type if dtype is different from the current dtype of the
 |      array.
 |  
 |  __array_finalize__(...)
 |      a.__array_finalize__(obj, /)
 |      
 |      Present so subclasses can call super. Does nothing.
 |  
 |  __array_function__(...)
 |  
 |  __array_prepare__(...)
 |      a.__array_prepare__(array[, context], /)
 |      
 |      Returns a view of `array` with the same type as self.
 |  
 |  __array_ufunc__(...)
 |  
 |  __array_wrap__(...)
 |      a.__array_wrap__(array[, context], /)
 |      
 |      Returns a view of `array` with the same type as self.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __complex__(...)
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __copy__(...)
 |      a.__copy__()
 |      
 |      Used if :func:`copy.copy` is called on an array. Returns a copy of the array.
 |      
 |      Equivalent to ``a.copy(order='K')``.
 |  
 |  __deepcopy__(...)
 |      a.__deepcopy__(memo, /) -> Deep copy of array.
 |      
 |      Used if :func:`copy.deepcopy` is called on an array.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __dlpack__(...)
 |      a.__dlpack__(*, stream=None)
 |      
 |      DLPack Protocol: Part of the Array API.
 |  
 |  __dlpack_device__(...)
 |      a.__dlpack_device__()
 |      
 |      DLPack Protocol: Part of the Array API.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(...)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Return self+=value.
 |  
 |  __iand__(self, value, /)
 |      Return self&=value.
 |  
 |  __ifloordiv__(self, value, /)
 |      Return self//=value.
 |  
 |  __ilshift__(self, value, /)
 |      Return self<<=value.
 |  
 |  __imatmul__(self, value, /)
 |      Return self@=value.
 |  
 |  __imod__(self, value, /)
 |      Return self%=value.
 |  
 |  __imul__(self, value, /)
 |      Return self*=value.
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __ior__(self, value, /)
 |      Return self|=value.
 |  
 |  __ipow__(self, value, /)
 |      Return self**=value.
 |  
 |  __irshift__(self, value, /)
 |      Return self>>=value.
 |  
 |  __isub__(self, value, /)
 |      Return self-=value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __itruediv__(self, value, /)
 |      Return self/=value.
 |  
 |  __ixor__(self, value, /)
 |      Return self^=value.
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __matmul__(self, value, /)
 |      Return self@value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __reduce__(...)
 |      a.__reduce__()
 |      
 |      For pickling.
 |  
 |  __reduce_ex__(...)
 |      Helper for pickle.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmatmul__(self, value, /)
 |      Return value@self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __setstate__(...)
 |      a.__setstate__(state, /)
 |      
 |      For unpickling.
 |      
 |      The `state` argument must be a sequence that contains the following
 |      elements:
 |      
 |      Parameters
 |      ----------
 |      version : int
 |          optional pickle version. If omitted defaults to 0.
 |      shape : tuple
 |      dtype : data-type
 |      isFortran : bool
 |      rawdata : string or list
 |          a binary string with the data (or a list if 'a' is an object array)
 |  
 |  __sizeof__(...)
 |      Size of object in memory, in bytes.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  all(...)
 |      a.all(axis=None, out=None, keepdims=False, *, where=True)
 |      
 |      Returns True if all elements evaluate to True.
 |      
 |      Refer to `numpy.all` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.all : equivalent function
 |  
 |  any(...)
 |      a.any(axis=None, out=None, keepdims=False, *, where=True)
 |      
 |      Returns True if any of the elements of `a` evaluate to True.
 |      
 |      Refer to `numpy.any` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.any : equivalent function
 |  
 |  argmax(...)
 |      a.argmax(axis=None, out=None, *, keepdims=False)
 |      
 |      Return indices of the maximum values along the given axis.
 |      
 |      Refer to `numpy.argmax` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.argmax : equivalent function
 |  
 |  argmin(...)
 |      a.argmin(axis=None, out=None, *, keepdims=False)
 |      
 |      Return indices of the minimum values along the given axis.
 |      
 |      Refer to `numpy.argmin` for detailed documentation.
 |      
 |      See Also
 |      --------
 |      numpy.argmin : equivalent function
 |  
 |  argpartition(...)
 |      a.argpartition(kth, axis=-1, kind='introselect', order=None)
 |      
 |      Returns the indices that would partition this array.
 |      
 |      Refer to `numpy.argpartition` for full documentation.
 |      
 |      .. versionadded:: 1.8.0
 |      
 |      See Also
 |      --------
 |      numpy.argpartition : equivalent function
 |  
 |  argsort(...)
 |      a.argsort(axis=-1, kind=None, order=None)
 |      
 |      Returns the indices that would sort this array.
 |      
 |      Refer to `numpy.argsort` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.argsort : equivalent function
 |  
 |  astype(...)
 |      a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
 |      
 |      Copy of the array, cast to a specified type.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or dtype
 |          Typecode or data-type to which the array is cast.
 |      order : {'C', 'F', 'A', 'K'}, optional
 |          Controls the memory layout order of the result.
 |          'C' means C order, 'F' means Fortran order, 'A'
 |          means 'F' order if all the arrays are Fortran contiguous,
 |          'C' order otherwise, and 'K' means as close to the
 |          order the array elements appear in memory as possible.
 |          Default is 'K'.
 |      casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional
 |          Controls what kind of data casting may occur. Defaults to 'unsafe'
 |          for backwards compatibility.
 |      
 |            * 'no' means the data types should not be cast at all.
 |            * 'equiv' means only byte-order changes are allowed.
 |            * 'safe' means only casts which can preserve values are allowed.
 |            * 'same_kind' means only safe casts or casts within a kind,
 |              like float64 to float32, are allowed.
 |            * 'unsafe' means any data conversions may be done.
 |      subok : bool, optional
 |          If True, then sub-classes will be passed-through (default), otherwise
 |          the returned array will be forced to be a base-class array.
 |      copy : bool, optional
 |          By default, astype always returns a newly allocated array. If this
 |          is set to false, and the `dtype`, `order`, and `subok`
 |          requirements are satisfied, the input array is returned instead
 |          of a copy.
 |      
 |      Returns
 |      -------
 |      arr_t : ndarray
 |          Unless `copy` is False and the other conditions for returning the input
 |          array are satisfied (see description for `copy` input parameter), `arr_t`
 |          is a new array of the same shape as the input array, with dtype, order
 |          given by `dtype`, `order`.
 |      
 |      Notes
 |      -----
 |      .. versionchanged:: 1.17.0
 |         Casting between a simple data type and a structured one is possible only
 |         for "unsafe" casting.  Casting to multiple fields is allowed, but
 |         casting from multiple fields is not.
 |      
 |      .. versionchanged:: 1.9.0
 |         Casting from numeric to string types in 'safe' casting mode requires
 |         that the string dtype length is long enough to store the max
 |         integer/float value converted.
 |      
 |      Raises
 |      ------
 |      ComplexWarning
 |          When casting from complex to float or int. To avoid this,
 |          one should use ``a.real.astype(t)``.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([1, 2, 2.5])
 |      >>> x
 |      array([1. ,  2. ,  2.5])
 |      
 |      >>> x.astype(int)
 |      array([1, 2, 2])
 |  
 |  byteswap(...)
 |      a.byteswap(inplace=False)
 |      
 |      Swap the bytes of the array elements
 |      
 |      Toggle between low-endian and big-endian data representation by
 |      returning a byteswapped array, optionally swapped in-place.
 |      Arrays of byte-strings are not swapped. The real and imaginary
 |      parts of a complex number are swapped individually.
 |      
 |      Parameters
 |      ----------
 |      inplace : bool, optional
 |          If ``True``, swap bytes in-place, default is ``False``.
 |      
 |      Returns
 |      -------
 |      out : ndarray
 |          The byteswapped array. If `inplace` is ``True``, this is
 |          a view to self.
 |      
 |      Examples
 |      --------
 |      >>> A = np.array([1, 256, 8755], dtype=np.int16)
 |      >>> list(map(hex, A))
 |      ['0x1', '0x100', '0x2233']
 |      >>> A.byteswap(inplace=True)
 |      array([  256,     1, 13090], dtype=int16)
 |      >>> list(map(hex, A))
 |      ['0x100', '0x1', '0x3322']
 |      
 |      Arrays of byte-strings are not swapped
 |      
 |      >>> A = np.array([b'ceg', b'fac'])
 |      >>> A.byteswap()
 |      array([b'ceg', b'fac'], dtype='|S3')
 |      
 |      ``A.newbyteorder().byteswap()`` produces an array with the same values
 |        but different representation in memory
 |      
 |      >>> A = np.array([1, 2, 3])
 |      >>> A.view(np.uint8)
 |      array([1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
 |             0, 0], dtype=uint8)
 |      >>> A.newbyteorder().byteswap(inplace=True)
 |      array([1, 2, 3])
 |      >>> A.view(np.uint8)
 |      array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
 |             0, 3], dtype=uint8)
 |  
 |  choose(...)
 |      a.choose(choices, out=None, mode='raise')
 |      
 |      Use an index array to construct a new array from a set of choices.
 |      
 |      Refer to `numpy.choose` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.choose : equivalent function
 |  
 |  clip(...)
 |      a.clip(min=None, max=None, out=None, **kwargs)
 |      
 |      Return an array whose values are limited to ``[min, max]``.
 |      One of max or min must be given.
 |      
 |      Refer to `numpy.clip` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.clip : equivalent function
 |  
 |  compress(...)
 |      a.compress(condition, axis=None, out=None)
 |      
 |      Return selected slices of this array along given axis.
 |      
 |      Refer to `numpy.compress` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.compress : equivalent function
 |  
 |  conj(...)
 |      a.conj()
 |      
 |      Complex-conjugate all elements.
 |      
 |      Refer to `numpy.conjugate` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.conjugate : equivalent function
 |  
 |  conjugate(...)
 |      a.conjugate()
 |      
 |      Return the complex conjugate, element-wise.
 |      
 |      Refer to `numpy.conjugate` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.conjugate : equivalent function
 |  
 |  copy(...)
 |      a.copy(order='C')
 |      
 |      Return a copy of the array.
 |      
 |      Parameters
 |      ----------
 |      order : {'C', 'F', 'A', 'K'}, optional
 |          Controls the memory layout of the copy. 'C' means C-order,
 |          'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,
 |          'C' otherwise. 'K' means match the layout of `a` as closely
 |          as possible. (Note that this function and :func:`numpy.copy` are very
 |          similar but have different default values for their order=
 |          arguments, and this function always passes sub-classes through.)
 |      
 |      See also
 |      --------
 |      numpy.copy : Similar function with different default behavior
 |      numpy.copyto
 |      
 |      Notes
 |      -----
 |      This function is the preferred method for creating an array copy.  The
 |      function :func:`numpy.copy` is similar, but it defaults to using order 'K',
 |      and will not pass sub-classes through by default.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([[1,2,3],[4,5,6]], order='F')
 |      
 |      >>> y = x.copy()
 |      
 |      >>> x.fill(0)
 |      
 |      >>> x
 |      array([[0, 0, 0],
 |             [0, 0, 0]])
 |      
 |      >>> y
 |      array([[1, 2, 3],
 |             [4, 5, 6]])
 |      
 |      >>> y.flags['C_CONTIGUOUS']
 |      True
 |  
 |  cumprod(...)
 |      a.cumprod(axis=None, dtype=None, out=None)
 |      
 |      Return the cumulative product of the elements along the given axis.
 |      
 |      Refer to `numpy.cumprod` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.cumprod : equivalent function
 |  
 |  cumsum(...)
 |      a.cumsum(axis=None, dtype=None, out=None)
 |      
 |      Return the cumulative sum of the elements along the given axis.
 |      
 |      Refer to `numpy.cumsum` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.cumsum : equivalent function
 |  
 |  diagonal(...)
 |      a.diagonal(offset=0, axis1=0, axis2=1)
 |      
 |      Return specified diagonals. In NumPy 1.9 the returned array is a
 |      read-only view instead of a copy as in previous NumPy versions.  In
 |      a future version the read-only restriction will be removed.
 |      
 |      Refer to :func:`numpy.diagonal` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.diagonal : equivalent function
 |  
 |  dot(...)
 |  
 |  dump(...)
 |      a.dump(file)
 |      
 |      Dump a pickle of the array to the specified file.
 |      The array can be read back with pickle.load or numpy.load.
 |      
 |      Parameters
 |      ----------
 |      file : str or Path
 |          A string naming the dump file.
 |      
 |          .. versionchanged:: 1.17.0
 |              `pathlib.Path` objects are now accepted.
 |  
 |  dumps(...)
 |      a.dumps()
 |      
 |      Returns the pickle of the array as a string.
 |      pickle.loads will convert the string back to an array.
 |      
 |      Parameters
 |      ----------
 |      None
 |  
 |  fill(...)
 |      a.fill(value)
 |      
 |      Fill the array with a scalar value.
 |      
 |      Parameters
 |      ----------
 |      value : scalar
 |          All elements of `a` will be assigned this value.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([1, 2])
 |      >>> a.fill(0)
 |      >>> a
 |      array([0, 0])
 |      >>> a = np.empty(2)
 |      >>> a.fill(1)
 |      >>> a
 |      array([1.,  1.])
 |  
 |  flatten(...)
 |      a.flatten(order='C')
 |      
 |      Return a copy of the array collapsed into one dimension.
 |      
 |      Parameters
 |      ----------
 |      order : {'C', 'F', 'A', 'K'}, optional
 |          'C' means to flatten in row-major (C-style) order.
 |          'F' means to flatten in column-major (Fortran-
 |          style) order. 'A' means to flatten in column-major
 |          order if `a` is Fortran *contiguous* in memory,
 |          row-major order otherwise. 'K' means to flatten
 |          `a` in the order the elements occur in memory.
 |          The default is 'C'.
 |      
 |      Returns
 |      -------
 |      y : ndarray
 |          A copy of the input array, flattened to one dimension.
 |      
 |      See Also
 |      --------
 |      ravel : Return a flattened array.
 |      flat : A 1-D flat iterator over the array.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([[1,2], [3,4]])
 |      >>> a.flatten()
 |      array([1, 2, 3, 4])
 |      >>> a.flatten('F')
 |      array([1, 3, 2, 4])
 |  
 |  getfield(...)
 |      a.getfield(dtype, offset=0)
 |      
 |      Returns a field of the given array as a certain type.
 |      
 |      A field is a view of the array data with a given data-type. The values in
 |      the view are determined by the given type and the offset into the current
 |      array in bytes. The offset needs to be such that the view dtype fits in the
 |      array dtype; for example an array of dtype complex128 has 16-byte elements.
 |      If taking a view with a 32-bit integer (4 bytes), the offset needs to be
 |      between 0 and 12 bytes.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or dtype
 |          The data type of the view. The dtype size of the view can not be larger
 |          than that of the array itself.
 |      offset : int
 |          Number of bytes to skip before beginning the element view.
 |      
 |      Examples
 |      --------
 |      >>> x = np.diag([1.+1.j]*2)
 |      >>> x[1, 1] = 2 + 4.j
 |      >>> x
 |      array([[1.+1.j,  0.+0.j],
 |             [0.+0.j,  2.+4.j]])
 |      >>> x.getfield(np.float64)
 |      array([[1.,  0.],
 |             [0.,  2.]])
 |      
 |      By choosing an offset of 8 bytes we can select the complex part of the
 |      array for our view:
 |      
 |      >>> x.getfield(np.float64, offset=8)
 |      array([[1.,  0.],
 |             [0.,  4.]])
 |  
 |  item(...)
 |      a.item(*args)
 |      
 |      Copy an element of an array to a standard Python scalar and return it.
 |      
 |      Parameters
 |      ----------
 |      \*args : Arguments (variable number and type)
 |      
 |          * none: in this case, the method only works for arrays
 |            with one element (`a.size == 1`), which element is
 |            copied into a standard Python scalar object and returned.
 |      
 |          * int_type: this argument is interpreted as a flat index into
 |            the array, specifying which element to copy and return.
 |      
 |          * tuple of int_types: functions as does a single int_type argument,
 |            except that the argument is interpreted as an nd-index into the
 |            array.
 |      
 |      Returns
 |      -------
 |      z : Standard Python scalar object
 |          A copy of the specified element of the array as a suitable
 |          Python scalar
 |      
 |      Notes
 |      -----
 |      When the data type of `a` is longdouble or clongdouble, item() returns
 |      a scalar array object because there is no available Python scalar that
 |      would not lose information. Void arrays return a buffer object for item(),
 |      unless fields are defined, in which case a tuple is returned.
 |      
 |      `item` is very similar to a[args], except, instead of an array scalar,
 |      a standard Python scalar is returned. This can be useful for speeding up
 |      access to elements of the array and doing arithmetic on elements of the
 |      array using Python's optimized math.
 |      
 |      Examples
 |      --------
 |      >>> np.random.seed(123)
 |      >>> x = np.random.randint(9, size=(3, 3))
 |      >>> x
 |      array([[2, 2, 6],
 |             [1, 3, 6],
 |             [1, 0, 1]])
 |      >>> x.item(3)
 |      1
 |      >>> x.item(7)
 |      0
 |      >>> x.item((0, 1))
 |      2
 |      >>> x.item((2, 2))
 |      1
 |  
 |  itemset(...)
 |      a.itemset(*args)
 |      
 |      Insert scalar into an array (scalar is cast to array's dtype, if possible)
 |      
 |      There must be at least 1 argument, and define the last argument
 |      as *item*.  Then, ``a.itemset(*args)`` is equivalent to but faster
 |      than ``a[args] = item``.  The item should be a scalar value and `args`
 |      must select a single item in the array `a`.
 |      
 |      Parameters
 |      ----------
 |      \*args : Arguments
 |          If one argument: a scalar, only used in case `a` is of size 1.
 |          If two arguments: the last argument is the value to be set
 |          and must be a scalar, the first argument specifies a single array
 |          element location. It is either an int or a tuple.
 |      
 |      Notes
 |      -----
 |      Compared to indexing syntax, `itemset` provides some speed increase
 |      for placing a scalar into a particular location in an `ndarray`,
 |      if you must do this.  However, generally this is discouraged:
 |      among other problems, it complicates the appearance of the code.
 |      Also, when using `itemset` (and `item`) inside a loop, be sure
 |      to assign the methods to a local variable to avoid the attribute
 |      look-up at each loop iteration.
 |      
 |      Examples
 |      --------
 |      >>> np.random.seed(123)
 |      >>> x = np.random.randint(9, size=(3, 3))
 |      >>> x
 |      array([[2, 2, 6],
 |             [1, 3, 6],
 |             [1, 0, 1]])
 |      >>> x.itemset(4, 0)
 |      >>> x.itemset((2, 2), 9)
 |      >>> x
 |      array([[2, 2, 6],
 |             [1, 0, 6],
 |             [1, 0, 9]])
 |  
 |  max(...)
 |      a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)
 |      
 |      Return the maximum along a given axis.
 |      
 |      Refer to `numpy.amax` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.amax : equivalent function
 |  
 |  mean(...)
 |      a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)
 |      
 |      Returns the average of the array elements along given axis.
 |      
 |      Refer to `numpy.mean` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.mean : equivalent function
 |  
 |  min(...)
 |      a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)
 |      
 |      Return the minimum along a given axis.
 |      
 |      Refer to `numpy.amin` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.amin : equivalent function
 |  
 |  newbyteorder(...)
 |      arr.newbyteorder(new_order='S', /)
 |      
 |      Return the array with the same data viewed with a different byte order.
 |      
 |      Equivalent to::
 |      
 |          arr.view(arr.dtype.newbytorder(new_order))
 |      
 |      Changes are also made in all fields and sub-arrays of the array data
 |      type.
 |      
 |      
 |      
 |      Parameters
 |      ----------
 |      new_order : string, optional
 |          Byte order to force; a value from the byte order specifications
 |          below. `new_order` codes can be any of:
 |      
 |          * 'S' - swap dtype from current to opposite endian
 |          * {'<', 'little'} - little endian
 |          * {'>', 'big'} - big endian
 |          * {'=', 'native'} - native order, equivalent to `sys.byteorder`
 |          * {'|', 'I'} - ignore (no change to byte order)
 |      
 |          The default value ('S') results in swapping the current
 |          byte order.
 |      
 |      
 |      Returns
 |      -------
 |      new_arr : array
 |          New array object with the dtype reflecting given change to the
 |          byte order.
 |  
 |  nonzero(...)
 |      a.nonzero()
 |      
 |      Return the indices of the elements that are non-zero.
 |      
 |      Refer to `numpy.nonzero` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.nonzero : equivalent function
 |  
 |  partition(...)
 |      a.partition(kth, axis=-1, kind='introselect', order=None)
 |      
 |      Rearranges the elements in the array in such a way that the value of the
 |      element in kth position is in the position it would be in a sorted array.
 |      All elements smaller than the kth element are moved before this element and
 |      all equal or greater are moved behind it. The ordering of the elements in
 |      the two partitions is undefined.
 |      
 |      .. versionadded:: 1.8.0
 |      
 |      Parameters
 |      ----------
 |      kth : int or sequence of ints
 |          Element index to partition by. The kth element value will be in its
 |          final sorted position and all smaller elements will be moved before it
 |          and all equal or greater elements behind it.
 |          The order of all elements in the partitions is undefined.
 |          If provided with a sequence of kth it will partition all elements
 |          indexed by kth of them into their sorted position at once.
 |      
 |          .. deprecated:: 1.22.0
 |              Passing booleans as index is deprecated.
 |      axis : int, optional
 |          Axis along which to sort. Default is -1, which means sort along the
 |          last axis.
 |      kind : {'introselect'}, optional
 |          Selection algorithm. Default is 'introselect'.
 |      order : str or list of str, optional
 |          When `a` is an array with fields defined, this argument specifies
 |          which fields to compare first, second, etc. A single field can
 |          be specified as a string, and not all fields need to be specified,
 |          but unspecified fields will still be used, in the order in which
 |          they come up in the dtype, to break ties.
 |      
 |      See Also
 |      --------
 |      numpy.partition : Return a partitioned copy of an array.
 |      argpartition : Indirect partition.
 |      sort : Full sort.
 |      
 |      Notes
 |      -----
 |      See ``np.partition`` for notes on the different algorithms.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([3, 4, 2, 1])
 |      >>> a.partition(3)
 |      >>> a
 |      array([2, 1, 3, 4])
 |      
 |      >>> a.partition((1, 3))
 |      >>> a
 |      array([1, 2, 3, 4])
 |  
 |  prod(...)
 |      a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)
 |      
 |      Return the product of the array elements over the given axis
 |      
 |      Refer to `numpy.prod` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.prod : equivalent function
 |  
 |  ptp(...)
 |      a.ptp(axis=None, out=None, keepdims=False)
 |      
 |      Peak to peak (maximum - minimum) value along a given axis.
 |      
 |      Refer to `numpy.ptp` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.ptp : equivalent function
 |  
 |  put(...)
 |      a.put(indices, values, mode='raise')
 |      
 |      Set ``a.flat[n] = values[n]`` for all `n` in indices.
 |      
 |      Refer to `numpy.put` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.put : equivalent function
 |  
 |  ravel(...)
 |      a.ravel([order])
 |      
 |      Return a flattened array.
 |      
 |      Refer to `numpy.ravel` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.ravel : equivalent function
 |      
 |      ndarray.flat : a flat iterator on the array.
 |  
 |  repeat(...)
 |      a.repeat(repeats, axis=None)
 |      
 |      Repeat elements of an array.
 |      
 |      Refer to `numpy.repeat` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.repeat : equivalent function
 |  
 |  reshape(...)
 |      a.reshape(shape, order='C')
 |      
 |      Returns an array containing the same data with a new shape.
 |      
 |      Refer to `numpy.reshape` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.reshape : equivalent function
 |      
 |      Notes
 |      -----
 |      Unlike the free function `numpy.reshape`, this method on `ndarray` allows
 |      the elements of the shape parameter to be passed in as separate arguments.
 |      For example, ``a.reshape(10, 11)`` is equivalent to
 |      ``a.reshape((10, 11))``.
 |  
 |  resize(...)
 |      a.resize(new_shape, refcheck=True)
 |      
 |      Change shape and size of array in-place.
 |      
 |      Parameters
 |      ----------
 |      new_shape : tuple of ints, or `n` ints
 |          Shape of resized array.
 |      refcheck : bool, optional
 |          If False, reference count will not be checked. Default is True.
 |      
 |      Returns
 |      -------
 |      None
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If `a` does not own its own data or references or views to it exist,
 |          and the data memory must be changed.
 |          PyPy only: will always raise if the data memory must be changed, since
 |          there is no reliable way to determine if references or views to it
 |          exist.
 |      
 |      SystemError
 |          If the `order` keyword argument is specified. This behaviour is a
 |          bug in NumPy.
 |      
 |      See Also
 |      --------
 |      resize : Return a new array with the specified shape.
 |      
 |      Notes
 |      -----
 |      This reallocates space for the data area if necessary.
 |      
 |      Only contiguous arrays (data elements consecutive in memory) can be
 |      resized.
 |      
 |      The purpose of the reference count check is to make sure you
 |      do not use this array as a buffer for another Python object and then
 |      reallocate the memory. However, reference counts can increase in
 |      other ways so if you are sure that you have not shared the memory
 |      for this array with another Python object, then you may safely set
 |      `refcheck` to False.
 |      
 |      Examples
 |      --------
 |      Shrinking an array: array is flattened (in the order that the data are
 |      stored in memory), resized, and reshaped:
 |      
 |      >>> a = np.array([[0, 1], [2, 3]], order='C')
 |      >>> a.resize((2, 1))
 |      >>> a
 |      array([[0],
 |             [1]])
 |      
 |      >>> a = np.array([[0, 1], [2, 3]], order='F')
 |      >>> a.resize((2, 1))
 |      >>> a
 |      array([[0],
 |             [2]])
 |      
 |      Enlarging an array: as above, but missing entries are filled with zeros:
 |      
 |      >>> b = np.array([[0, 1], [2, 3]])
 |      >>> b.resize(2, 3) # new_shape parameter doesn't have to be a tuple
 |      >>> b
 |      array([[0, 1, 2],
 |             [3, 0, 0]])
 |      
 |      Referencing an array prevents resizing...
 |      
 |      >>> c = a
 |      >>> a.resize((1, 1))
 |      Traceback (most recent call last):
 |      ...
 |      ValueError: cannot resize an array that references or is referenced ...
 |      
 |      Unless `refcheck` is False:
 |      
 |      >>> a.resize((1, 1), refcheck=False)
 |      >>> a
 |      array([[0]])
 |      >>> c
 |      array([[0]])
 |  
 |  round(...)
 |      a.round(decimals=0, out=None)
 |      
 |      Return `a` with each element rounded to the given number of decimals.
 |      
 |      Refer to `numpy.around` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.around : equivalent function
 |  
 |  searchsorted(...)
 |      a.searchsorted(v, side='left', sorter=None)
 |      
 |      Find indices where elements of v should be inserted in a to maintain order.
 |      
 |      For full documentation, see `numpy.searchsorted`
 |      
 |      See Also
 |      --------
 |      numpy.searchsorted : equivalent function
 |  
 |  setfield(...)
 |      a.setfield(val, dtype, offset=0)
 |      
 |      Put a value into a specified place in a field defined by a data-type.
 |      
 |      Place `val` into `a`'s field defined by `dtype` and beginning `offset`
 |      bytes into the field.
 |      
 |      Parameters
 |      ----------
 |      val : object
 |          Value to be placed in field.
 |      dtype : dtype object
 |          Data-type of the field in which to place `val`.
 |      offset : int, optional
 |          The number of bytes into the field at which to place `val`.
 |      
 |      Returns
 |      -------
 |      None
 |      
 |      See Also
 |      --------
 |      getfield
 |      
 |      Examples
 |      --------
 |      >>> x = np.eye(3)
 |      >>> x.getfield(np.float64)
 |      array([[1.,  0.,  0.],
 |             [0.,  1.,  0.],
 |             [0.,  0.,  1.]])
 |      >>> x.setfield(3, np.int32)
 |      >>> x.getfield(np.int32)
 |      array([[3, 3, 3],
 |             [3, 3, 3],
 |             [3, 3, 3]], dtype=int32)
 |      >>> x
 |      array([[1.0e+000, 1.5e-323, 1.5e-323],
 |             [1.5e-323, 1.0e+000, 1.5e-323],
 |             [1.5e-323, 1.5e-323, 1.0e+000]])
 |      >>> x.setfield(np.eye(3), np.int32)
 |      >>> x
 |      array([[1.,  0.,  0.],
 |             [0.,  1.,  0.],
 |             [0.,  0.,  1.]])
 |  
 |  setflags(...)
 |      a.setflags(write=None, align=None, uic=None)
 |      
 |      Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY,
 |      respectively.
 |      
 |      These Boolean-valued flags affect how numpy interprets the memory
 |      area used by `a` (see Notes below). The ALIGNED flag can only
 |      be set to True if the data is actually aligned according to the type.
 |      The WRITEBACKIFCOPY and flag can never be set
 |      to True. The flag WRITEABLE can only be set to True if the array owns its
 |      own memory, or the ultimate owner of the memory exposes a writeable buffer
 |      interface, or is a string. (The exception for string is made so that
 |      unpickling can be done without copying memory.)
 |      
 |      Parameters
 |      ----------
 |      write : bool, optional
 |          Describes whether or not `a` can be written to.
 |      align : bool, optional
 |          Describes whether or not `a` is aligned properly for its type.
 |      uic : bool, optional
 |          Describes whether or not `a` is a copy of another "base" array.
 |      
 |      Notes
 |      -----
 |      Array flags provide information about how the memory area used
 |      for the array is to be interpreted. There are 7 Boolean flags
 |      in use, only four of which can be changed by the user:
 |      WRITEBACKIFCOPY, WRITEABLE, and ALIGNED.
 |      
 |      WRITEABLE (W) the data area can be written to;
 |      
 |      ALIGNED (A) the data and strides are aligned appropriately for the hardware
 |      (as determined by the compiler);
 |      
 |      WRITEBACKIFCOPY (X) this array is a copy of some other array (referenced
 |      by .base). When the C-API function PyArray_ResolveWritebackIfCopy is
 |      called, the base array will be updated with the contents of this array.
 |      
 |      All flags can be accessed using the single (upper case) letter as well
 |      as the full name.
 |      
 |      Examples
 |      --------
 |      >>> y = np.array([[3, 1, 7],
 |      ...               [2, 0, 0],
 |      ...               [8, 5, 9]])
 |      >>> y
 |      array([[3, 1, 7],
 |             [2, 0, 0],
 |             [8, 5, 9]])
 |      >>> y.flags
 |        C_CONTIGUOUS : True
 |        F_CONTIGUOUS : False
 |        OWNDATA : True
 |        WRITEABLE : True
 |        ALIGNED : True
 |        WRITEBACKIFCOPY : False
 |      >>> y.setflags(write=0, align=0)
 |      >>> y.flags
 |        C_CONTIGUOUS : True
 |        F_CONTIGUOUS : False
 |        OWNDATA : True
 |        WRITEABLE : False
 |        ALIGNED : False
 |        WRITEBACKIFCOPY : False
 |      >>> y.setflags(uic=1)
 |      Traceback (most recent call last):
 |        File "<stdin>", line 1, in <module>
 |      ValueError: cannot set WRITEBACKIFCOPY flag to True
 |  
 |  sort(...)
 |      a.sort(axis=-1, kind=None, order=None)
 |      
 |      Sort an array in-place. Refer to `numpy.sort` for full documentation.
 |      
 |      Parameters
 |      ----------
 |      axis : int, optional
 |          Axis along which to sort. Default is -1, which means sort along the
 |          last axis.
 |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, optional
 |          Sorting algorithm. The default is 'quicksort'. Note that both 'stable'
 |          and 'mergesort' use timsort under the covers and, in general, the
 |          actual implementation will vary with datatype. The 'mergesort' option
 |          is retained for backwards compatibility.
 |      
 |          .. versionchanged:: 1.15.0
 |             The 'stable' option was added.
 |      
 |      order : str or list of str, optional
 |          When `a` is an array with fields defined, this argument specifies
 |          which fields to compare first, second, etc.  A single field can
 |          be specified as a string, and not all fields need be specified,
 |          but unspecified fields will still be used, in the order in which
 |          they come up in the dtype, to break ties.
 |      
 |      See Also
 |      --------
 |      numpy.sort : Return a sorted copy of an array.
 |      numpy.argsort : Indirect sort.
 |      numpy.lexsort : Indirect stable sort on multiple keys.
 |      numpy.searchsorted : Find elements in sorted array.
 |      numpy.partition: Partial sort.
 |      
 |      Notes
 |      -----
 |      See `numpy.sort` for notes on the different sorting algorithms.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([[1,4], [3,1]])
 |      >>> a.sort(axis=1)
 |      >>> a
 |      array([[1, 4],
 |             [1, 3]])
 |      >>> a.sort(axis=0)
 |      >>> a
 |      array([[1, 3],
 |             [1, 4]])
 |      
 |      Use the `order` keyword to specify a field to use when sorting a
 |      structured array:
 |      
 |      >>> a = np.array([('a', 2), ('c', 1)], dtype=[('x', 'S1'), ('y', int)])
 |      >>> a.sort(order='y')
 |      >>> a
 |      array([(b'c', 1), (b'a', 2)],
 |            dtype=[('x', 'S1'), ('y', '<i8')])
 |  
 |  squeeze(...)
 |      a.squeeze(axis=None)
 |      
 |      Remove axes of length one from `a`.
 |      
 |      Refer to `numpy.squeeze` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.squeeze : equivalent function
 |  
 |  std(...)
 |      a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)
 |      
 |      Returns the standard deviation of the array elements along given axis.
 |      
 |      Refer to `numpy.std` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.std : equivalent function
 |  
 |  sum(...)
 |      a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)
 |      
 |      Return the sum of the array elements over the given axis.
 |      
 |      Refer to `numpy.sum` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.sum : equivalent function
 |  
 |  swapaxes(...)
 |      a.swapaxes(axis1, axis2)
 |      
 |      Return a view of the array with `axis1` and `axis2` interchanged.
 |      
 |      Refer to `numpy.swapaxes` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.swapaxes : equivalent function
 |  
 |  take(...)
 |      a.take(indices, axis=None, out=None, mode='raise')
 |      
 |      Return an array formed from the elements of `a` at the given indices.
 |      
 |      Refer to `numpy.take` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.take : equivalent function
 |  
 |  tobytes(...)
 |      a.tobytes(order='C')
 |      
 |      Construct Python bytes containing the raw data bytes in the array.
 |      
 |      Constructs Python bytes showing a copy of the raw contents of
 |      data memory. The bytes object is produced in C-order by default.
 |      This behavior is controlled by the ``order`` parameter.
 |      
 |      .. versionadded:: 1.9.0
 |      
 |      Parameters
 |      ----------
 |      order : {'C', 'F', 'A'}, optional
 |          Controls the memory layout of the bytes object. 'C' means C-order,
 |          'F' means F-order, 'A' (short for *Any*) means 'F' if `a` is
 |          Fortran contiguous, 'C' otherwise. Default is 'C'.
 |      
 |      Returns
 |      -------
 |      s : bytes
 |          Python bytes exhibiting a copy of `a`'s raw data.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([[0, 1], [2, 3]], dtype='<u2')
 |      >>> x.tobytes()
 |      b'\x00\x00\x01\x00\x02\x00\x03\x00'
 |      >>> x.tobytes('C') == x.tobytes()
 |      True
 |      >>> x.tobytes('F')
 |      b'\x00\x00\x02\x00\x01\x00\x03\x00'
 |  
 |  tofile(...)
 |      a.tofile(fid, sep="", format="%s")
 |      
 |      Write array to a file as text or binary (default).
 |      
 |      Data is always written in 'C' order, independent of the order of `a`.
 |      The data produced by this method can be recovered using the function
 |      fromfile().
 |      
 |      Parameters
 |      ----------
 |      fid : file or str or Path
 |          An open file object, or a string containing a filename.
 |      
 |          .. versionchanged:: 1.17.0
 |              `pathlib.Path` objects are now accepted.
 |      
 |      sep : str
 |          Separator between array items for text output.
 |          If "" (empty), a binary file is written, equivalent to
 |          ``file.write(a.tobytes())``.
 |      format : str
 |          Format string for text file output.
 |          Each entry in the array is formatted to text by first converting
 |          it to the closest Python type, and then using "format" % item.
 |      
 |      Notes
 |      -----
 |      This is a convenience function for quick storage of array data.
 |      Information on endianness and precision is lost, so this method is not a
 |      good choice for files intended to archive data or transport data between
 |      machines with different endianness. Some of these problems can be overcome
 |      by outputting the data as text files, at the expense of speed and file
 |      size.
 |      
 |      When fid is a file object, array contents are directly written to the
 |      file, bypassing the file object's ``write`` method. As a result, tofile
 |      cannot be used with files objects supporting compression (e.g., GzipFile)
 |      or file-like objects that do not support ``fileno()`` (e.g., BytesIO).
 |  
 |  tolist(...)
 |      a.tolist()
 |      
 |      Return the array as an ``a.ndim``-levels deep nested list of Python scalars.
 |      
 |      Return a copy of the array data as a (nested) Python list.
 |      Data items are converted to the nearest compatible builtin Python type, via
 |      the `~numpy.ndarray.item` function.
 |      
 |      If ``a.ndim`` is 0, then since the depth of the nested list is 0, it will
 |      not be a list at all, but a simple Python scalar.
 |      
 |      Parameters
 |      ----------
 |      none
 |      
 |      Returns
 |      -------
 |      y : object, or list of object, or list of list of object, or ...
 |          The possibly nested list of array elements.
 |      
 |      Notes
 |      -----
 |      The array may be recreated via ``a = np.array(a.tolist())``, although this
 |      may sometimes lose precision.
 |      
 |      Examples
 |      --------
 |      For a 1D array, ``a.tolist()`` is almost the same as ``list(a)``,
 |      except that ``tolist`` changes numpy scalars to Python scalars:
 |      
 |      >>> a = np.uint32([1, 2])
 |      >>> a_list = list(a)
 |      >>> a_list
 |      [1, 2]
 |      >>> type(a_list[0])
 |      <class 'numpy.uint32'>
 |      >>> a_tolist = a.tolist()
 |      >>> a_tolist
 |      [1, 2]
 |      >>> type(a_tolist[0])
 |      <class 'int'>
 |      
 |      Additionally, for a 2D array, ``tolist`` applies recursively:
 |      
 |      >>> a = np.array([[1, 2], [3, 4]])
 |      >>> list(a)
 |      [array([1, 2]), array([3, 4])]
 |      >>> a.tolist()
 |      [[1, 2], [3, 4]]
 |      
 |      The base case for this recursion is a 0D array:
 |      
 |      >>> a = np.array(1)
 |      >>> list(a)
 |      Traceback (most recent call last):
 |        ...
 |      TypeError: iteration over a 0-d array
 |      >>> a.tolist()
 |      1
 |  
 |  tostring(...)
 |      a.tostring(order='C')
 |      
 |      A compatibility alias for `tobytes`, with exactly the same behavior.
 |      
 |      Despite its name, it returns `bytes` not `str`\ s.
 |      
 |      .. deprecated:: 1.19.0
 |  
 |  trace(...)
 |      a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
 |      
 |      Return the sum along diagonals of the array.
 |      
 |      Refer to `numpy.trace` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.trace : equivalent function
 |  
 |  transpose(...)
 |      a.transpose(*axes)
 |      
 |      Returns a view of the array with axes transposed.
 |      
 |      For a 1-D array this has no effect, as a transposed vector is simply the
 |      same vector. To convert a 1-D array into a 2D column vector, an additional
 |      dimension must be added. `np.atleast2d(a).T` achieves this, as does
 |      `a[:, np.newaxis]`.
 |      For a 2-D array, this is a standard matrix transpose.
 |      For an n-D array, if axes are given, their order indicates how the
 |      axes are permuted (see Examples). If axes are not provided and
 |      ``a.shape = (i[0], i[1], ... i[n-2], i[n-1])``, then
 |      ``a.transpose().shape = (i[n-1], i[n-2], ... i[1], i[0])``.
 |      
 |      Parameters
 |      ----------
 |      axes : None, tuple of ints, or `n` ints
 |      
 |       * None or no argument: reverses the order of the axes.
 |      
 |       * tuple of ints: `i` in the `j`-th place in the tuple means `a`'s
 |         `i`-th axis becomes `a.transpose()`'s `j`-th axis.
 |      
 |       * `n` ints: same as an n-tuple of the same ints (this form is
 |         intended simply as a "convenience" alternative to the tuple form)
 |      
 |      Returns
 |      -------
 |      out : ndarray
 |          View of `a`, with axes suitably permuted.
 |      
 |      See Also
 |      --------
 |      transpose : Equivalent function
 |      ndarray.T : Array property returning the array transposed.
 |      ndarray.reshape : Give a new shape to an array without changing its data.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([[1, 2], [3, 4]])
 |      >>> a
 |      array([[1, 2],
 |             [3, 4]])
 |      >>> a.transpose()
 |      array([[1, 3],
 |             [2, 4]])
 |      >>> a.transpose((1, 0))
 |      array([[1, 3],
 |             [2, 4]])
 |      >>> a.transpose(1, 0)
 |      array([[1, 3],
 |             [2, 4]])
 |  
 |  var(...)
 |      a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)
 |      
 |      Returns the variance of the array elements, along given axis.
 |      
 |      Refer to `numpy.var` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.var : equivalent function
 |  
 |  view(...)
 |      a.view([dtype][, type])
 |      
 |      New view of array with the same data.
 |      
 |      .. note::
 |          Passing None for ``dtype`` is different from omitting the parameter,
 |          since the former invokes ``dtype(None)`` which is an alias for
 |          ``dtype('float_')``.
 |      
 |      Parameters
 |      ----------
 |      dtype : data-type or ndarray sub-class, optional
 |          Data-type descriptor of the returned view, e.g., float32 or int16.
 |          Omitting it results in the view having the same data-type as `a`.
 |          This argument can also be specified as an ndarray sub-class, which
 |          then specifies the type of the returned object (this is equivalent to
 |          setting the ``type`` parameter).
 |      type : Python type, optional
 |          Type of the returned view, e.g., ndarray or matrix.  Again, omission
 |          of the parameter results in type preservation.
 |      
 |      Notes
 |      -----
 |      ``a.view()`` is used two different ways:
 |      
 |      ``a.view(some_dtype)`` or ``a.view(dtype=some_dtype)`` constructs a view
 |      of the array's memory with a different data-type.  This can cause a
 |      reinterpretation of the bytes of memory.
 |      
 |      ``a.view(ndarray_subclass)`` or ``a.view(type=ndarray_subclass)`` just
 |      returns an instance of `ndarray_subclass` that looks at the same array
 |      (same shape, dtype, etc.)  This does not cause a reinterpretation of the
 |      memory.
 |      
 |      For ``a.view(some_dtype)``, if ``some_dtype`` has a different number of
 |      bytes per entry than the previous dtype (for example, converting a regular
 |      array to a structured array), then the last axis of ``a`` must be
 |      contiguous. This axis will be resized in the result.
 |      
 |      .. versionchanged:: 1.23.0
 |         Only the last axis needs to be contiguous. Previously, the entire array
 |         had to be C-contiguous.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])
 |      
 |      Viewing array data using a different type and dtype:
 |      
 |      >>> y = x.view(dtype=np.int16, type=np.matrix)
 |      >>> y
 |      matrix([[513]], dtype=int16)
 |      >>> print(type(y))
 |      <class 'numpy.matrix'>
 |      
 |      Creating a view on a structured array so it can be used in calculations
 |      
 |      >>> x = np.array([(1, 2),(3,4)], dtype=[('a', np.int8), ('b', np.int8)])
 |      >>> xv = x.view(dtype=np.int8).reshape(-1,2)
 |      >>> xv
 |      array([[1, 2],
 |             [3, 4]], dtype=int8)
 |      >>> xv.mean(0)
 |      array([2.,  3.])
 |      
 |      Making changes to the view changes the underlying array
 |      
 |      >>> xv[0,1] = 20
 |      >>> x
 |      array([(1, 20), (3,  4)], dtype=[('a', 'i1'), ('b', 'i1')])
 |      
 |      Using a view to convert an array to a recarray:
 |      
 |      >>> z = x.view(np.recarray)
 |      >>> z.a
 |      array([1, 3], dtype=int8)
 |      
 |      Views share data:
 |      
 |      >>> x[0] = (9, 10)
 |      >>> z[0]
 |      (9, 10)
 |      
 |      Views that change the dtype size (bytes per entry) should normally be
 |      avoided on arrays defined by slices, transposes, fortran-ordering, etc.:
 |      
 |      >>> x = np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int16)
 |      >>> y = x[:, ::2]
 |      >>> y
 |      array([[1, 3],
 |             [4, 6]], dtype=int16)
 |      >>> y.view(dtype=[('width', np.int16), ('length', np.int16)])
 |      Traceback (most recent call last):
 |          ...
 |      ValueError: To change to a dtype of a different size, the last axis must be contiguous
 |      >>> z = y.copy()
 |      >>> z.view(dtype=[('width', np.int16), ('length', np.int16)])
 |      array([[(1, 3)],
 |             [(4, 6)]], dtype=[('width', '<i2'), ('length', '<i2')])
 |      
 |      However, views that change dtype are totally fine for arrays with a
 |      contiguous last axis, even if the rest of the axes are not C-contiguous:
 |      
 |      >>> x = np.arange(2 * 3 * 4, dtype=np.int8).reshape(2, 3, 4)
 |      >>> x.transpose(1, 0, 2).view(np.int16)
 |      array([[[ 256,  770],
 |              [3340, 3854]],
 |      <BLANKLINE>
 |             [[1284, 1798],
 |              [4368, 4882]],
 |      <BLANKLINE>
 |             [[2312, 2826],
 |              [5396, 5910]]], dtype=int16)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      a.__class_getitem__(item, /)
 |      
 |      Return a parametrized wrapper around the `~numpy.ndarray` type.
 |      
 |      .. versionadded:: 1.22
 |      
 |      Returns
 |      -------
 |      alias : types.GenericAlias
 |          A parametrized `~numpy.ndarray` type.
 |      
 |      Examples
 |      --------
 |      >>> from typing import Any
 |      >>> import numpy as np
 |      
 |      >>> np.ndarray[Any, np.dtype[Any]]
 |      numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]
 |      
 |      Notes
 |      -----
 |      This method is only available for python 3.9 and later.
 |      
 |      See Also
 |      --------
 |      :pep:`585` : Type hinting generics in standard collections.
 |      numpy.typing.NDArray : An ndarray alias :term:`generic <generic type>`
 |                          w.r.t. its `dtype.type <numpy.dtype.type>`.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  T
 |      The transposed array.
 |      
 |      Same as ``self.transpose()``.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([[1.,2.],[3.,4.]])
 |      >>> x
 |      array([[ 1.,  2.],
 |             [ 3.,  4.]])
 |      >>> x.T
 |      array([[ 1.,  3.],
 |             [ 2.,  4.]])
 |      >>> x = np.array([1.,2.,3.,4.])
 |      >>> x
 |      array([ 1.,  2.,  3.,  4.])
 |      >>> x.T
 |      array([ 1.,  2.,  3.,  4.])
 |      
 |      See Also
 |      --------
 |      transpose
 |  
 |  __array_interface__
 |      Array protocol: Python side.
 |  
 |  __array_priority__
 |      Array priority.
 |  
 |  __array_struct__
 |      Array protocol: C-struct side.
 |  
 |  base
 |      Base object if memory is from some other object.
 |      
 |      Examples
 |      --------
 |      The base of an array that owns its memory is None:
 |      
 |      >>> x = np.array([1,2,3,4])
 |      >>> x.base is None
 |      True
 |      
 |      Slicing creates a view, whose memory is shared with x:
 |      
 |      >>> y = x[2:]
 |      >>> y.base is x
 |      True
 |  
 |  ctypes
 |      An object to simplify the interaction of the array with the ctypes
 |      module.
 |      
 |      This attribute creates an object that makes it easier to use arrays
 |      when calling shared libraries with the ctypes module. The returned
 |      object has, among others, data, shape, and strides attributes (see
 |      Notes below) which themselves return ctypes objects that can be used
 |      as arguments to a shared library.
 |      
 |      Parameters
 |      ----------
 |      None
 |      
 |      Returns
 |      -------
 |      c : Python object
 |          Possessing attributes data, shape, strides, etc.
 |      
 |      See Also
 |      --------
 |      numpy.ctypeslib
 |      
 |      Notes
 |      -----
 |      Below are the public attributes of this object which were documented
 |      in "Guide to NumPy" (we have omitted undocumented public attributes,
 |      as well as documented private attributes):
 |      
 |      .. autoattribute:: numpy.core._internal._ctypes.data
 |          :noindex:
 |      
 |      .. autoattribute:: numpy.core._internal._ctypes.shape
 |          :noindex:
 |      
 |      .. autoattribute:: numpy.core._internal._ctypes.strides
 |          :noindex:
 |      
 |      .. automethod:: numpy.core._internal._ctypes.data_as
 |          :noindex:
 |      
 |      .. automethod:: numpy.core._internal._ctypes.shape_as
 |          :noindex:
 |      
 |      .. automethod:: numpy.core._internal._ctypes.strides_as
 |          :noindex:
 |      
 |      If the ctypes module is not available, then the ctypes attribute
 |      of array objects still returns something useful, but ctypes objects
 |      are not returned and errors may be raised instead. In particular,
 |      the object will still have the ``as_parameter`` attribute which will
 |      return an integer equal to the data attribute.
 |      
 |      Examples
 |      --------
 |      >>> import ctypes
 |      >>> x = np.array([[0, 1], [2, 3]], dtype=np.int32)
 |      >>> x
 |      array([[0, 1],
 |             [2, 3]], dtype=int32)
 |      >>> x.ctypes.data
 |      31962608 # may vary
 |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32))
 |      <__main__.LP_c_uint object at 0x7ff2fc1fc200> # may vary
 |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32)).contents
 |      c_uint(0)
 |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint64)).contents
 |      c_ulong(4294967296)
 |      >>> x.ctypes.shape
 |      <numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1fce60> # may vary
 |      >>> x.ctypes.strides
 |      <numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1ff320> # may vary
 |  
 |  data
 |      Python buffer object pointing to the start of the array's data.
 |  
 |  dtype
 |      Data-type of the array's elements.
 |      
 |      .. warning::
 |      
 |          Setting ``arr.dtype`` is discouraged and may be deprecated in the
 |          future.  Setting will replace the ``dtype`` without modifying the
 |          memory (see also `ndarray.view` and `ndarray.astype`).
 |      
 |      Parameters
 |      ----------
 |      None
 |      
 |      Returns
 |      -------
 |      d : numpy dtype object
 |      
 |      See Also
 |      --------
 |      ndarray.astype : Cast the values contained in the array to a new data-type.
 |      ndarray.view : Create a view of the same data but a different data-type.
 |      numpy.dtype
 |      
 |      Examples
 |      --------
 |      >>> x
 |      array([[0, 1],
 |             [2, 3]])
 |      >>> x.dtype
 |      dtype('int32')
 |      >>> type(x.dtype)
 |      <type 'numpy.dtype'>
 |  
 |  flags
 |      Information about the memory layout of the array.
 |      
 |      Attributes
 |      ----------
 |      C_CONTIGUOUS (C)
 |          The data is in a single, C-style contiguous segment.
 |      F_CONTIGUOUS (F)
 |          The data is in a single, Fortran-style contiguous segment.
 |      OWNDATA (O)
 |          The array owns the memory it uses or borrows it from another object.
 |      WRITEABLE (W)
 |          The data area can be written to.  Setting this to False locks
 |          the data, making it read-only.  A view (slice, etc.) inherits WRITEABLE
 |          from its base array at creation time, but a view of a writeable
 |          array may be subsequently locked while the base array remains writeable.
 |          (The opposite is not true, in that a view of a locked array may not
 |          be made writeable.  However, currently, locking a base object does not
 |          lock any views that already reference it, so under that circumstance it
 |          is possible to alter the contents of a locked array via a previously
 |          created writeable view onto it.)  Attempting to change a non-writeable
 |          array raises a RuntimeError exception.
 |      ALIGNED (A)
 |          The data and all elements are aligned appropriately for the hardware.
 |      WRITEBACKIFCOPY (X)
 |          This array is a copy of some other array. The C-API function
 |          PyArray_ResolveWritebackIfCopy must be called before deallocating
 |          to the base array will be updated with the contents of this array.
 |      FNC
 |          F_CONTIGUOUS and not C_CONTIGUOUS.
 |      FORC
 |          F_CONTIGUOUS or C_CONTIGUOUS (one-segment test).
 |      BEHAVED (B)
 |          ALIGNED and WRITEABLE.
 |      CARRAY (CA)
 |          BEHAVED and C_CONTIGUOUS.
 |      FARRAY (FA)
 |          BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS.
 |      
 |      Notes
 |      -----
 |      The `flags` object can be accessed dictionary-like (as in ``a.flags['WRITEABLE']``),
 |      or by using lowercased attribute names (as in ``a.flags.writeable``). Short flag
 |      names are only supported in dictionary access.
 |      
 |      Only the WRITEBACKIFCOPY, WRITEABLE, and ALIGNED flags can be
 |      changed by the user, via direct assignment to the attribute or dictionary
 |      entry, or by calling `ndarray.setflags`.
 |      
 |      The array flags cannot be set arbitrarily:
 |      
 |      - WRITEBACKIFCOPY can only be set ``False``.
 |      - ALIGNED can only be set ``True`` if the data is truly aligned.
 |      - WRITEABLE can only be set ``True`` if the array owns its own memory
 |        or the ultimate owner of the memory exposes a writeable buffer
 |        interface or is a string.
 |      
 |      Arrays can be both C-style and Fortran-style contiguous simultaneously.
 |      This is clear for 1-dimensional arrays, but can also be true for higher
 |      dimensional arrays.
 |      
 |      Even for contiguous arrays a stride for a given dimension
 |      ``arr.strides[dim]`` may be *arbitrary* if ``arr.shape[dim] == 1``
 |      or the array has no elements.
 |      It does *not* generally hold that ``self.strides[-1] == self.itemsize``
 |      for C-style contiguous arrays or ``self.strides[0] == self.itemsize`` for
 |      Fortran-style contiguous arrays is true.
 |  
 |  flat
 |      A 1-D iterator over the array.
 |      
 |      This is a `numpy.flatiter` instance, which acts similarly to, but is not
 |      a subclass of, Python's built-in iterator object.
 |      
 |      See Also
 |      --------
 |      flatten : Return a copy of the array collapsed into one dimension.
 |      
 |      flatiter
 |      
 |      Examples
 |      --------
 |      >>> x = np.arange(1, 7).reshape(2, 3)
 |      >>> x
 |      array([[1, 2, 3],
 |             [4, 5, 6]])
 |      >>> x.flat[3]
 |      4
 |      >>> x.T
 |      array([[1, 4],
 |             [2, 5],
 |             [3, 6]])
 |      >>> x.T.flat[3]
 |      5
 |      >>> type(x.flat)
 |      <class 'numpy.flatiter'>
 |      
 |      An assignment example:
 |      
 |      >>> x.flat = 3; x
 |      array([[3, 3, 3],
 |             [3, 3, 3]])
 |      >>> x.flat[[1,4]] = 1; x
 |      array([[3, 1, 3],
 |             [3, 1, 3]])
 |  
 |  imag
 |      The imaginary part of the array.
 |      
 |      Examples
 |      --------
 |      >>> x = np.sqrt([1+0j, 0+1j])
 |      >>> x.imag
 |      array([ 0.        ,  0.70710678])
 |      >>> x.imag.dtype
 |      dtype('float64')
 |  
 |  itemsize
 |      Length of one array element in bytes.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([1,2,3], dtype=np.float64)
 |      >>> x.itemsize
 |      8
 |      >>> x = np.array([1,2,3], dtype=np.complex128)
 |      >>> x.itemsize
 |      16
 |  
 |  nbytes
 |      Total bytes consumed by the elements of the array.
 |      
 |      Notes
 |      -----
 |      Does not include memory consumed by non-element attributes of the
 |      array object.
 |      
 |      Examples
 |      --------
 |      >>> x = np.zeros((3,5,2), dtype=np.complex128)
 |      >>> x.nbytes
 |      480
 |      >>> np.prod(x.shape) * x.itemsize
 |      480
 |  
 |  ndim
 |      Number of array dimensions.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([1, 2, 3])
 |      >>> x.ndim
 |      1
 |      >>> y = np.zeros((2, 3, 4))
 |      >>> y.ndim
 |      3
 |  
 |  real
 |      The real part of the array.
 |      
 |      Examples
 |      --------
 |      >>> x = np.sqrt([1+0j, 0+1j])
 |      >>> x.real
 |      array([ 1.        ,  0.70710678])
 |      >>> x.real.dtype
 |      dtype('float64')
 |      
 |      See Also
 |      --------
 |      numpy.real : equivalent function
 |  
 |  shape
 |      Tuple of array dimensions.
 |      
 |      The shape property is usually used to get the current shape of an array,
 |      but may also be used to reshape the array in-place by assigning a tuple of
 |      array dimensions to it.  As with `numpy.reshape`, one of the new shape
 |      dimensions can be -1, in which case its value is inferred from the size of
 |      the array and the remaining dimensions. Reshaping an array in-place will
 |      fail if a copy is required.
 |      
 |      .. warning::
 |      
 |          Setting ``arr.shape`` is discouraged and may be deprecated in the
 |          future.  Using `ndarray.reshape` is the preferred approach.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([1, 2, 3, 4])
 |      >>> x.shape
 |      (4,)
 |      >>> y = np.zeros((2, 3, 4))
 |      >>> y.shape
 |      (2, 3, 4)
 |      >>> y.shape = (3, 8)
 |      >>> y
 |      array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
 |             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
 |             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
 |      >>> y.shape = (3, 6)
 |      Traceback (most recent call last):
 |        File "<stdin>", line 1, in <module>
 |      ValueError: total size of new array must be unchanged
 |      >>> np.zeros((4,2))[::2].shape = (-1,)
 |      Traceback (most recent call last):
 |        File "<stdin>", line 1, in <module>
 |      AttributeError: Incompatible shape for in-place modification. Use
 |      `.reshape()` to make a copy with the desired shape.
 |      
 |      See Also
 |      --------
 |      numpy.shape : Equivalent getter function.
 |      numpy.reshape : Function similar to setting ``shape``.
 |      ndarray.reshape : Method similar to setting ``shape``.
 |  
 |  size
 |      Number of elements in the array.
 |      
 |      Equal to ``np.prod(a.shape)``, i.e., the product of the array's
 |      dimensions.
 |      
 |      Notes
 |      -----
 |      `a.size` returns a standard arbitrary precision Python integer. This
 |      may not be the case with other methods of obtaining the same value
 |      (like the suggested ``np.prod(a.shape)``, which returns an instance
 |      of ``np.int_``), and may be relevant if the value is used further in
 |      calculations that may overflow a fixed size integer type.
 |      
 |      Examples
 |      --------
 |      >>> x = np.zeros((3, 5, 2), dtype=np.complex128)
 |      >>> x.size
 |      30
 |      >>> np.prod(x.shape)
 |      30
 |  
 |  strides
 |      Tuple of bytes to step in each dimension when traversing an array.
 |      
 |      The byte offset of element ``(i[0], i[1], ..., i[n])`` in an array `a`
 |      is::
 |      
 |          offset = sum(np.array(i) * a.strides)
 |      
 |      A more detailed explanation of strides can be found in the
 |      "ndarray.rst" file in the NumPy reference guide.
 |      
 |      .. warning::
 |      
 |          Setting ``arr.strides`` is discouraged and may be deprecated in the
 |          future.  `numpy.lib.stride_tricks.as_strided` should be preferred
 |          to create a new view of the same data in a safer way.
 |      
 |      Notes
 |      -----
 |      Imagine an array of 32-bit integers (each 4 bytes)::
 |      
 |        x = np.array([[0, 1, 2, 3, 4],
 |                      [5, 6, 7, 8, 9]], dtype=np.int32)
 |      
 |      This array is stored in memory as 40 bytes, one after the other
 |      (known as a contiguous block of memory).  The strides of an array tell
 |      us how many bytes we have to skip in memory to move to the next position
 |      along a certain axis.  For example, we have to skip 4 bytes (1 value) to
 |      move to the next column, but 20 bytes (5 values) to get to the same
 |      position in the next row.  As such, the strides for the array `x` will be
 |      ``(20, 4)``.
 |      
 |      See Also
 |      --------
 |      numpy.lib.stride_tricks.as_strided
 |      
 |      Examples
 |      --------
 |      >>> y = np.reshape(np.arange(2*3*4), (2,3,4))
 |      >>> y
 |      array([[[ 0,  1,  2,  3],
 |              [ 4,  5,  6,  7],
 |              [ 8,  9, 10, 11]],
 |             [[12, 13, 14, 15],
 |              [16, 17, 18, 19],
 |              [20, 21, 22, 23]]])
 |      >>> y.strides
 |      (48, 16, 4)
 |      >>> y[1,1,1]
 |      17
 |      >>> offset=sum(y.strides * np.array((1,1,1)))
 |      >>> offset/y.itemsize
 |      17
 |      
 |      >>> x = np.reshape(np.arange(5*6*7*8), (5,6,7,8)).transpose(2,3,1,0)
 |      >>> x.strides
 |      (32, 4, 224, 1344)
 |      >>> i = np.array([3,5,2,2])
 |      >>> offset = sum(i * x.strides)
 |      >>> x[3,5,2,2]
 |      813
 |      >>> offset / x.itemsize
 |      813
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

None
&&&&&&&&&&&&&&&&&&&&&&&&& as_reoriented &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method as_reoriented in module nibabel.nifti1:

as_reoriented(ornt) method of nibabel.nifti1.Nifti1Image instance
    Apply an orientation change and return a new image
    
    If ornt is identity transform, return the original image, unchanged
    
    Parameters
    ----------
    ornt : (n,2) orientation array
       orientation transform. ``ornt[N,1]` is flip of axis N of the
       array implied by `shape`, where 1 means no flip and -1 means
       flip.  For example, if ``N==0`` and ``ornt[0,1] == -1``, and
       there's an array ``arr`` of shape `shape`, the flip would
       correspond to the effect of ``np.flipud(arr)``.  ``ornt[:,0]`` is
       the transpose that needs to be done to the implied array, as in
       ``arr.transpose(ornt[:,0])``

None
&&&&&&&&&&&&&&&&&&&&&&&&& dataobj &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on ArrayProxy in module nibabel.arrayproxy object:

class ArrayProxy(ArrayLike)
 |  ArrayProxy(file_like, spec, *, mmap=True, order=None, keep_file_open=None)
 |  
 |  Class to act as proxy for the array that can be read from a file
 |  
 |  The array proxy allows us to freeze the passed fileobj and header such that
 |  it returns the expected data array.
 |  
 |  This implementation assumes a contiguous array in the file object, with one
 |  of the numpy dtypes, starting at a given file position ``offset`` with
 |  single ``slope`` and ``intercept`` scaling to produce output values.
 |  
 |  The class ``__init__`` requires a spec which defines how the data will be
 |  read and rescaled. The spec may be a tuple of length 2 - 5, containing the
 |  shape, storage dtype, offset, slope and intercept, or a ``header`` object
 |  with methods:
 |  
 |  * get_data_shape
 |  * get_data_dtype
 |  * get_data_offset
 |  * get_slope_inter
 |  
 |  A header should also have a 'copy' method.  This requirement will go away
 |  when the deprecated 'header' property goes away.
 |  
 |  This implementation allows us to deal with Analyze and its variants,
 |  including Nifti1, and with the MGH format.
 |  
 |  Other image types might need more specific classes to implement the API.
 |  See :mod:`nibabel.minc1`, :mod:`nibabel.ecat` and :mod:`nibabel.parrec` for
 |  examples.
 |  
 |  Method resolution order:
 |      ArrayProxy
 |      ArrayLike
 |      typing.Protocol
 |      typing.Generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __array__(self, dtype=None)
 |      Read data from file and apply scaling, casting to ``dtype``
 |      
 |      If ``dtype`` is unspecified, the dtype of the returned array is the
 |      narrowest dtype that can represent the data without overflow.
 |      Generally, it is the wider of the dtypes of the slopes or intercepts.
 |      
 |      The types of the scale factors will generally be determined by the
 |      parameter size in the image header, and so should be consistent for a
 |      given image format, but may vary across formats.
 |      
 |      Parameters
 |      ----------
 |      dtype : numpy dtype specifier, optional
 |          A numpy dtype specifier specifying the type of the returned array.
 |      
 |      Returns
 |      -------
 |      array
 |          Scaled image data with type `dtype`.
 |  
 |  __del__(self)
 |      If this ``ArrayProxy`` was created with ``keep_file_open=True``,
 |      the open file object is closed if necessary.
 |  
 |  __getitem__(self, slicer)
 |  
 |  __getstate__(self)
 |      Returns the state of this ``ArrayProxy`` during pickling.
 |  
 |  __init__(self, file_like, spec, *, mmap=True, order=None, keep_file_open=None)
 |      Initialize array proxy instance
 |      
 |      Parameters
 |      ----------
 |      file_like : object
 |          File-like object or filename. If file-like object, should implement
 |          at least ``read`` and ``seek``.
 |      spec : object or tuple
 |          Tuple must have length 2-5, with the following values:
 |      
 |          #. shape: tuple - tuple of ints describing shape of data;
 |          #. storage_dtype: dtype specifier - dtype of array inside proxied
 |             file, or input to ``numpy.dtype`` to specify array dtype;
 |          #. offset: int - offset, in bytes, of data array from start of file
 |             (default: 0);
 |          #. slope: float - scaling factor for resulting data (default: 1.0);
 |          #. inter: float - intercept for rescaled data (default: 0.0).
 |      
 |          OR
 |      
 |          Header object implementing ``get_data_shape``, ``get_data_dtype``,
 |          ``get_data_offset``, ``get_slope_inter``
 |      mmap : {True, False, 'c', 'r'}, optional, keyword only
 |          `mmap` controls the use of numpy memory mapping for reading data.
 |          If False, do not try numpy ``memmap`` for data array.  If one of
 |          {'c', 'r'}, try numpy memmap with ``mode=mmap``.  A `mmap` value of
 |          True gives the same behavior as ``mmap='c'``.  If `file_like`
 |          cannot be memory-mapped, ignore `mmap` value and read array from
 |          file.
 |      order : {None, 'F', 'C'}, optional, keyword only
 |          `order` controls the order of the data array layout. Fortran-style,
 |          column-major order may be indicated with 'F', and C-style, row-major
 |          order may be indicated with 'C'. None gives the default order, that
 |          comes from the `_default_order` class variable.
 |      keep_file_open : { None, True, False }, optional, keyword only
 |          `keep_file_open` controls whether a new file handle is created
 |          every time the image is accessed, or a single file handle is
 |          created and used for the lifetime of this ``ArrayProxy``. If
 |          ``True``, a single file handle is created and used. If ``False``,
 |          a new file handle is created every time the image is accessed.
 |          If ``file_like`` is an open file handle, this setting has no
 |          effect. The default value (``None``) will result in the value of
 |          ``KEEP_FILE_OPEN_DEFAULT`` being used.
 |  
 |  __setstate__(self, state)
 |      Sets the state of this ``ArrayProxy`` during unpickling.
 |  
 |  __subclasshook__ = _proto_hook(other)
 |      # Set (or override) the protocol subclass hook.
 |  
 |  copy(self) -> 'Self'
 |      Create a new ArrayProxy for the same file and parameters
 |      
 |      If the proxied file is an open file handle, the new ArrayProxy
 |      will share a lock with the old one.
 |  
 |  get_unscaled(self)
 |      Read data from file
 |      
 |      This is an optional part of the proxy API
 |  
 |  reshape(self, shape)
 |      Return an ArrayProxy with a new shape, without modifying data
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  dtype
 |  
 |  inter
 |  
 |  is_proxy
 |  
 |  ndim
 |  
 |  offset
 |  
 |  shape
 |  
 |  slope
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  __parameters__ = ()
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ArrayLike:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ArrayLike:
 |  
 |  __annotations__ = {'shape': 'tuple[int, ...]'}
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Protocol:
 |  
 |  __init_subclass__(*args, **kwargs) from typing._ProtocolMeta
 |      This method is called when a class is subclassed.
 |      
 |      The default implementation does nothing. It may be
 |      overridden to extend subclasses.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Generic:
 |  
 |  __class_getitem__(params) from typing._ProtocolMeta

None
&&&&&&&&&&&&&&&&&&&&&&&&& extra &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on dict object:

class dict(object)
 |  dict() -> new empty dictionary
 |  dict(mapping) -> new dictionary initialized from a mapping object's
 |      (key, value) pairs
 |  dict(iterable) -> new dictionary initialized as if via:
 |      d = {}
 |      for k, v in iterable:
 |          d[k] = v
 |  dict(**kwargs) -> new dictionary initialized with the name=value pairs
 |      in the keyword argument list.  For example:  dict(one=1, two=2)
 |  
 |  Built-in subclasses:
 |      StgDict
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, key, /)
 |      True if the dictionary has the specified key, else False.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ior__(self, value, /)
 |      Return self|=value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(self, /)
 |      Return a reverse iterator over the dict keys.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      D.__sizeof__() -> size of D in memory, in bytes
 |  
 |  clear(...)
 |      D.clear() -> None.  Remove all items from D.
 |  
 |  copy(...)
 |      D.copy() -> a shallow copy of D
 |  
 |  get(self, key, default=None, /)
 |      Return the value for key if key is in the dictionary, else default.
 |  
 |  items(...)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(...)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  pop(...)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |      
 |      If key is not found, default is returned if given, otherwise KeyError is raised
 |  
 |  popitem(self, /)
 |      Remove and return a (key, value) pair as a 2-tuple.
 |      
 |      Pairs are returned in LIFO (last-in, first-out) order.
 |      Raises KeyError if the dict is empty.
 |  
 |  setdefault(self, key, default=None, /)
 |      Insert key with a value of default if key is not in the dictionary.
 |      
 |      Return the value for key if key is in the dictionary, else default.
 |  
 |  update(...)
 |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |  
 |  values(...)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  fromkeys(iterable, value=None, /) from builtins.type
 |      Create a new dictionary with keys from iterable and values set to value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

None
&&&&&&&&&&&&&&&&&&&&&&&&& file_map &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on dict object:

class dict(object)
 |  dict() -> new empty dictionary
 |  dict(mapping) -> new dictionary initialized from a mapping object's
 |      (key, value) pairs
 |  dict(iterable) -> new dictionary initialized as if via:
 |      d = {}
 |      for k, v in iterable:
 |          d[k] = v
 |  dict(**kwargs) -> new dictionary initialized with the name=value pairs
 |      in the keyword argument list.  For example:  dict(one=1, two=2)
 |  
 |  Built-in subclasses:
 |      StgDict
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, key, /)
 |      True if the dictionary has the specified key, else False.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ior__(self, value, /)
 |      Return self|=value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(self, /)
 |      Return a reverse iterator over the dict keys.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      D.__sizeof__() -> size of D in memory, in bytes
 |  
 |  clear(...)
 |      D.clear() -> None.  Remove all items from D.
 |  
 |  copy(...)
 |      D.copy() -> a shallow copy of D
 |  
 |  get(self, key, default=None, /)
 |      Return the value for key if key is in the dictionary, else default.
 |  
 |  items(...)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(...)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  pop(...)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |      
 |      If key is not found, default is returned if given, otherwise KeyError is raised
 |  
 |  popitem(self, /)
 |      Remove and return a (key, value) pair as a 2-tuple.
 |      
 |      Pairs are returned in LIFO (last-in, first-out) order.
 |      Raises KeyError if the dict is empty.
 |  
 |  setdefault(self, key, default=None, /)
 |      Insert key with a value of default if key is not in the dictionary.
 |      
 |      Return the value for key if key is in the dictionary, else default.
 |  
 |  update(...)
 |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |  
 |  values(...)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  fromkeys(iterable, value=None, /) from builtins.type
 |      Create a new dictionary with keys from iterable and values set to value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

None
&&&&&&&&&&&&&&&&&&&&&&&&& files_types &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on tuple object:

class tuple(object)
 |  tuple(iterable=(), /)
 |  
 |  Built-in immutable sequence.
 |  
 |  If no argument is given, the constructor returns an empty tuple.
 |  If iterable is specified the tuple is initialized from iterable's items.
 |  
 |  If the argument is a tuple, the return value is the same object.
 |  
 |  Built-in subclasses:
 |      asyncgen_hooks
 |      UnraisableHookArgs
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.

None
&&&&&&&&&&&&&&&&&&&&&&&&& filespec_to_file_map &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method filespec_to_file_map in module nibabel.filebasedimages:

filespec_to_file_map(filespec: 'FileSpec') -> 'FileMap' method of builtins.type instance
    Make `file_map` for this class from filename `filespec`
    
    Class method
    
    Parameters
    ----------
    filespec : str or os.PathLike
        Filename that might be for this image file type.
    
    Returns
    -------
    file_map : dict
        `file_map` dict with (key, value) pairs of (``file_type``,
        FileHolder instance), where ``file_type`` is a string giving the
        type of the contained file.
    
    Raises
    ------
    ImageFileError
        if `filespec` is not recognizable as being a filename for this
        image type.

None
&&&&&&&&&&&&&&&&&&&&&&&&& from_bytes &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_bytes in module nibabel.filebasedimages:

from_bytes(bytestring: 'bytes') -> 'StreamImgT' method of builtins.type instance
    Construct image from a byte string
    
    Class method
    
    Parameters
    ----------
    bytestring : bytes
        Byte string containing the on-disk representation of an image

None
&&&&&&&&&&&&&&&&&&&&&&&&& from_file_map &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_file_map in module nibabel.analyze:

from_file_map(file_map, *, mmap=True, keep_file_open=None) method of builtins.type instance
    Class method to create image from mapping in ``file_map``
    
    Parameters
    ----------
    file_map : dict
        Mapping with (kay, value) pairs of (``file_type``, FileHolder
        instance giving file-likes for each file needed for this image
        type.
    mmap : {True, False, 'c', 'r'}, optional, keyword only
        `mmap` controls the use of numpy memory mapping for reading image
        array data.  If False, do not try numpy ``memmap`` for data array.
        If one of {'c', 'r'}, try numpy memmap with ``mode=mmap``.  A
        `mmap` value of True gives the same behavior as ``mmap='c'``.  If
        image data file cannot be memory-mapped, ignore `mmap` value and
        read array from file.
    keep_file_open : { None, True, False }, optional, keyword only
        `keep_file_open` controls whether a new file handle is created
        every time the image is accessed, or a single file handle is
        created and used for the lifetime of this ``ArrayProxy``. If
        ``True``, a single file handle is created and used. If ``False``,
        a new file handle is created every time the image is accessed.
        If ``file_map`` refers to an open file handle, this setting has no
        effect. The default value (``None``) will result in the value of
        ``nibabel.arrayproxy.KEEP_FILE_OPEN_DEFAULT`` being used.
    
    Returns
    -------
    img : AnalyzeImage instance

None
&&&&&&&&&&&&&&&&&&&&&&&&& from_filename &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_filename in module nibabel.dataobj_images:

from_filename(filename: 'FileSpec', *, mmap: "bool | ty.Literal['c', 'r']" = True, keep_file_open: 'bool | None' = None) -> 'ArrayImgT' method of builtins.type instance
    Class method to create image from filename `filename`
    
    Parameters
    ----------
    filename : str
        Filename of image to load
    mmap : {True, False, 'c', 'r'}, optional, keyword only
        `mmap` controls the use of numpy memory mapping for reading image
        array data.  If False, do not try numpy ``memmap`` for data array.
        If one of {'c', 'r'}, try numpy memmap with ``mode=mmap``.  A
        `mmap` value of True gives the same behavior as ``mmap='c'``.  If
        image data file cannot be memory-mapped, ignore `mmap` value and
        read array from file.
    keep_file_open : { None, True, False }, optional, keyword only
        `keep_file_open` controls whether a new file handle is created
        every time the image is accessed, or a single file handle is
        created and used for the lifetime of this ``ArrayProxy``. If
        ``True``, a single file handle is created and used. If ``False``,
        a new file handle is created every time the image is accessed.
        The default value (``None``) will result in the value of
        ``nibabel.arrayproxy.KEEP_FILE_OPEN_DEFAULT`` being used.
    
    Returns
    -------
    img : DataobjImage instance

None
&&&&&&&&&&&&&&&&&&&&&&&&& from_image &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_image in module nibabel.spatialimages:

from_image(img: 'SpatialImage | FileBasedImage') -> 'SpatialImgT' method of builtins.type instance
    Class method to create new instance of own class from `img`
    
    Parameters
    ----------
    img : ``spatialimage`` instance
       In fact, an object with the API of ``spatialimage`` -
       specifically ``dataobj``, ``affine``, ``header`` and ``extra``.
    
    Returns
    -------
    cimg : ``spatialimage`` instance
       Image, of our own class

None
&&&&&&&&&&&&&&&&&&&&&&&&& from_stream &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_stream in module nibabel.filebasedimages:

from_stream(io_obj: 'io.IOBase') -> 'StreamImgT' method of builtins.type instance
    Load image from readable IO stream
    
    Convert to BytesIO to enable seeking, if input stream is not seekable
    
    Parameters
    ----------
    io_obj : IOBase object
        Readable stream

None
&&&&&&&&&&&&&&&&&&&&&&&&& from_url &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_url in module nibabel.filebasedimages:

from_url(url: 'str | request.Request', timeout: 'float' = 5) -> 'StreamImgT' method of builtins.type instance
    Retrieve and load an image from a URL
    
    Class method
    
    Parameters
    ----------
    url : str or urllib.request.Request object
        URL of file to retrieve
    timeout : float, optional
        Time (in seconds) to wait for a response

None
&&&&&&&&&&&&&&&&&&&&&&&&& get_data &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method get_data in module nibabel.dataobj_images:

get_data(caching='fill') method of nibabel.nifti1.Nifti1Image instance
    Return image data from image with any necessary scaling applied
    
    get_data() is deprecated in favor of get_fdata(), which has a more predictable return type. To obtain get_data() behavior going forward, use numpy.asanyarray(img.dataobj).
    
    * deprecated from version: 3.0
    * Raises <class 'nibabel.deprecator.ExpiredDeprecationError'> as of version: 5.0

None
&&&&&&&&&&&&&&&&&&&&&&&&& get_data_dtype &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method get_data_dtype in module nibabel.nifti1:

get_data_dtype(finalize=False) method of nibabel.nifti1.Nifti1Image instance
    Get numpy dtype for data
    
    If ``set_data_dtype()`` has been called with an alias
    and ``finalize`` is ``False``, return the alias.
    If ``finalize`` is ``True``, determine the appropriate dtype
    from the image data object and set the final dtype in the
    header before returning it.

None
&&&&&&&&&&&&&&&&&&&&&&&&& get_fdata &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method get_fdata in module nibabel.dataobj_images:

get_fdata(caching: "ty.Literal['fill', 'unchanged']" = 'fill', dtype: 'npt.DTypeLike' = <class 'numpy.float64'>) -> 'np.ndarray[ty.Any, np.dtype[np.floating]]' method of nibabel.nifti1.Nifti1Image instance
    Return floating point image data with necessary scaling applied
    
    The image ``dataobj`` property can be an array proxy or an array.  An
    array proxy is an object that knows how to load the image data from
    disk.  An image with an array proxy ``dataobj`` is a *proxy image*; an
    image with an array in ``dataobj`` is an *array image*.
    
    The default behavior for ``get_fdata()`` on a proxy image is to read
    the data from the proxy, and store in an internal cache.  Future calls
    to ``get_fdata`` will return the cached array.  This is the behavior
    selected with `caching` == "fill".
    
    Once the data has been cached and returned from an array proxy, if you
    modify the returned array, you will also modify the cached array
    (because they are the same array).  Regardless of the `caching` flag,
    this is always true of an array image.
    
    Parameters
    ----------
    caching : {'fill', 'unchanged'}, optional
        See the Notes section for a detailed explanation.  This argument
        specifies whether the image object should fill in an internal
        cached reference to the returned image data array. "fill" specifies
        that the image should fill an internal cached reference if
        currently empty.  Future calls to ``get_fdata`` will return this
        cached reference.  You might prefer "fill" to save the image object
        from having to reload the array data from disk on each call to
        ``get_fdata``.  "unchanged" means that the image should not fill in
        the internal cached reference if the cache is currently empty.  You
        might prefer "unchanged" to "fill" if you want to make sure that
        the call to ``get_fdata`` does not create an extra (cached)
        reference to the returned array.  In this case it is easier for
        Python to free the memory from the returned array.
    dtype : numpy dtype specifier
        A numpy dtype specifier specifying a floating point type.  Data is
        returned as this floating point type.  Default is ``np.float64``.
    
    Returns
    -------
    fdata : array
        Array of image data of data type `dtype`.
    
    See also
    --------
    uncache: empty the array data cache
    
    Notes
    -----
    All images have a property ``dataobj`` that represents the image array
    data.  Images that have been loaded from files usually do not load the
    array data from file immediately, in order to reduce image load time
    and memory use.  For these images, ``dataobj`` is an *array proxy*; an
    object that knows how to load the image array data from file.
    
    By default (`caching` == "fill"), when you call ``get_fdata`` on a
    proxy image, we load the array data from disk, store (cache) an
    internal reference to this array data, and return the array.  The next
    time you call ``get_fdata``, you will get the cached reference to the
    array, so we don't have to load the array data from disk again.
    
    Array images have a ``dataobj`` property that already refers to an
    array in memory, so there is no benefit to caching, and the `caching`
    keywords have no effect.
    
    For proxy images, you may not want to fill the cache after reading the
    data from disk because the cache will hold onto the array memory until
    the image object is deleted, or you use the image ``uncache`` method.
    If you don't want to fill the cache, then always use
    ``get_fdata(caching='unchanged')``; in this case ``get_fdata`` will not
    fill the cache (store the reference to the array) if the cache is empty
    (no reference to the array).  If the cache is full, "unchanged" leaves
    the cache full and returns the cached array reference.
    
    The cache can effect the behavior of the image, because if the cache is
    full, or you have an array image, then modifying the returned array
    will modify the result of future calls to ``get_fdata()``.  For example
    you might do this:
    
    >>> import os
    >>> import nibabel as nib
    >>> from nibabel.testing import data_path
    >>> img_fname = os.path.join(data_path, 'example4d.nii.gz')
    
    >>> img = nib.load(img_fname) # This is a proxy image
    >>> nib.is_proxy(img.dataobj)
    True
    
    The array is not yet cached by a call to "get_fdata", so:
    
    >>> img.in_memory
    False
    
    After we call ``get_fdata`` using the default `caching` == 'fill', the
    cache contains a reference to the returned array ``data``:
    
    >>> data = img.get_fdata()
    >>> img.in_memory
    True
    
    We modify an element in the returned data array:
    
    >>> data[0, 0, 0, 0]
    0.0
    >>> data[0, 0, 0, 0] = 99
    >>> data[0, 0, 0, 0]
    99.0
    
    The next time we call 'get_fdata', the method returns the cached
    reference to the (modified) array:
    
    >>> data_again = img.get_fdata()
    >>> data_again is data
    True
    >>> data_again[0, 0, 0, 0]
    99.0
    
    If you had *initially* used `caching` == 'unchanged' then the returned
    ``data`` array would have been loaded from file, but not cached, and:
    
    >>> img = nib.load(img_fname)  # a proxy image again
    >>> data = img.get_fdata(caching='unchanged')
    >>> img.in_memory
    False
    >>> data[0, 0, 0] = 99
    >>> data_again = img.get_fdata(caching='unchanged')
    >>> data_again is data
    False
    >>> data_again[0, 0, 0, 0]
    0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&& get_filename &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method get_filename in module nibabel.filebasedimages:

get_filename() -> 'str | None' method of nibabel.nifti1.Nifti1Image instance
    Fetch the image filename
    
    Parameters
    ----------
    None
    
    Returns
    -------
    fname : None or str
       Returns None if there is no filename, or a filename string.
       If an image may have several filenames associated with it (e.g.
       Analyze ``.img, .hdr`` pair) then we return the more characteristic
       filename (the ``.img`` filename in the case of Analyze')

None
&&&&&&&&&&&&&&&&&&&&&&&&& get_qform &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method get_qform in module nibabel.nifti1:

get_qform(coded=False) method of nibabel.nifti1.Nifti1Image instance
    Return 4x4 affine matrix from qform parameters in header
    
    Parameters
    ----------
    coded : bool, optional
        If True, return {affine or None}, and qform code.  If False, just
        return affine.  {affine or None} means, return None if qform code
        == 0, and affine otherwise.
    
    Returns
    -------
    affine : None or (4,4) ndarray
        If `coded` is False, always return affine reconstructed from qform
        quaternion.  If `coded` is True, return None if qform code is 0,
        else return the affine.
    code : int
        Qform code. Only returned if `coded` is True.
    
    See also
    --------
    set_qform
    get_sform

None
&&&&&&&&&&&&&&&&&&&&&&&&& get_sform &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method get_sform in module nibabel.nifti1:

get_sform(coded=False) method of nibabel.nifti1.Nifti1Image instance
    Return 4x4 affine matrix from sform parameters in header
    
    Parameters
    ----------
    coded : bool, optional
        If True, return {affine or None}, and sform code.  If False, just
        return affine.  {affine or None} means, return None if sform code
        == 0, and affine otherwise.
    
    Returns
    -------
    affine : None or (4,4) ndarray
        If `coded` is False, always return affine from sform fields. If
        `coded` is True, return None if sform code is 0, else return the
        affine.
    code : int
        Sform code. Only returned if `coded` is True.
    
    See also
    --------
    set_sform
    get_qform

None
&&&&&&&&&&&&&&&&&&&&&&&&& header &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Nifti1Header in module nibabel.nifti1 object:

class Nifti1Header(nibabel.spm99analyze.SpmAnalyzeHeader)
 |  Nifti1Header(binaryblock=None, endianness=None, check=True, extensions=())
 |  
 |  Class for NIfTI1 header
 |  
 |  The NIfTI1 header has many more coded fields than the simpler Analyze
 |  variants.  NIfTI1 headers also have extensions.
 |  
 |  Nifti allows the header to be a separate file, as part of a nifti image /
 |  header pair, or to precede the data in a single file.  The object needs to
 |  know which type it is, in order to manage the voxel offset pointing to the
 |  data, extension reading, and writing the correct magic string.
 |  
 |  This class handles the header-preceding-data case.
 |  
 |  Method resolution order:
 |      Nifti1Header
 |      nibabel.spm99analyze.SpmAnalyzeHeader
 |      nibabel.analyze.AnalyzeHeader
 |      nibabel.wrapstruct.LabeledWrapStruct
 |      nibabel.wrapstruct.WrapStruct
 |      nibabel.spatialimages.SpatialHeader
 |      nibabel.filebasedimages.FileBasedHeader
 |      nibabel.spatialimages.SpatialProtocol
 |      typing.Protocol
 |      typing.Generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, binaryblock=None, endianness=None, check=True, extensions=())
 |      Initialize header from binary data block and extensions
 |  
 |  __subclasshook__ = _proto_hook(other)
 |      # Set (or override) the protocol subclass hook.
 |  
 |  copy(self)
 |      Return copy of header
 |      
 |      Take reference to extensions as well as copy of header contents
 |  
 |  get_best_affine(self)
 |      Select best of available transforms
 |  
 |  get_data_shape(self)
 |      Get shape of data
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.get_data_shape()
 |      (0,)
 |      >>> hdr.set_data_shape((1,2,3))
 |      >>> hdr.get_data_shape()
 |      (1, 2, 3)
 |      
 |      Expanding number of dimensions gets default zooms
 |      
 |      >>> hdr.get_zooms()
 |      (1.0, 1.0, 1.0)
 |      
 |      Notes
 |      -----
 |      Applies freesurfer hack for large vectors described in `issue 100`_ and
 |      `save_nifti.m <save77_>`_.
 |      
 |      Allows for freesurfer hack for 7th order icosahedron surface described
 |      in `issue 309`_, load_nifti.m_, and `save_nifti.m <save50_>`_.
 |  
 |  get_dim_info(self)
 |      Gets NIfTI MRI slice etc dimension information
 |      
 |      Returns
 |      -------
 |      freq : {None,0,1,2}
 |         Which data array axis is frequency encode direction
 |      phase : {None,0,1,2}
 |         Which data array axis is phase encode direction
 |      slice : {None,0,1,2}
 |         Which data array axis is slice encode direction
 |      
 |      where ``data array`` is the array returned by ``get_data``
 |      
 |      Because NIfTI1 files are natively Fortran indexed:
 |        0 is fastest changing in file
 |        1 is medium changing in file
 |        2 is slowest changing in file
 |      
 |      ``None`` means the axis appears not to be specified.
 |      
 |      Examples
 |      --------
 |      See set_dim_info function
 |  
 |  get_intent(self, code_repr='label')
 |      Get intent code, parameters and name
 |      
 |      Parameters
 |      ----------
 |      code_repr : string
 |         string giving output form of intent code representation.
 |         Default is 'label'; use 'code' for integer representation.
 |      
 |      Returns
 |      -------
 |      code : string or integer
 |          intent code, or string describing code
 |      parameters : tuple
 |          parameters for the intent
 |      name : string
 |          intent name
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_intent('t test', (10,), name='some score')
 |      >>> hdr.get_intent()
 |      ('t test', (10.0,), 'some score')
 |      >>> hdr.get_intent('code')
 |      (3, (10.0,), 'some score')
 |  
 |  get_n_slices(self)
 |      Return the number of slices
 |  
 |  get_qform(self, coded=False)
 |      Return 4x4 affine matrix from qform parameters in header
 |      
 |      Parameters
 |      ----------
 |      coded : bool, optional
 |          If True, return {affine or None}, and qform code.  If False, just
 |          return affine.  {affine or None} means, return None if qform code
 |          == 0, and affine otherwise.
 |      
 |      Returns
 |      -------
 |      affine : None or (4,4) ndarray
 |          If `coded` is False, always return affine reconstructed from qform
 |          quaternion.  If `coded` is True, return None if qform code is 0,
 |          else return the affine.
 |      code : int
 |          Qform code. Only returned if `coded` is True.
 |  
 |  get_qform_quaternion(self)
 |      Compute quaternion from b, c, d of quaternion
 |      
 |      Fills a value by assuming this is a unit quaternion
 |  
 |  get_sform(self, coded=False)
 |      Return 4x4 affine matrix from sform parameters in header
 |      
 |      Parameters
 |      ----------
 |      coded : bool, optional
 |          If True, return {affine or None}, and sform code.  If False, just
 |          return affine.  {affine or None} means, return None if sform code
 |          == 0, and affine otherwise.
 |      
 |      Returns
 |      -------
 |      affine : None or (4,4) ndarray
 |          If `coded` is False, always return affine from sform fields. If
 |          `coded` is True, return None if sform code is 0, else return the
 |          affine.
 |      code : int
 |          Sform code. Only returned if `coded` is True.
 |  
 |  get_slice_duration(self)
 |      Get slice duration
 |      
 |      Returns
 |      -------
 |      slice_duration : float
 |          time to acquire one slice
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_dim_info(slice=2)
 |      >>> hdr.set_slice_duration(0.3)
 |      >>> print("%0.1f" % hdr.get_slice_duration())
 |      0.3
 |      
 |      Notes
 |      -----
 |      The NIfTI1 spec appears to require the slice dimension to be
 |      defined for slice_duration to have meaning.
 |  
 |  get_slice_times(self)
 |      Get slice times from slice timing information
 |      
 |      Returns
 |      -------
 |      slice_times : tuple
 |          Times of acquisition of slices, where 0 is the beginning of
 |          the acquisition, ordered by position in file.  nifti allows
 |          slices at the top and bottom of the volume to be excluded from
 |          the standard slice timing specification, and calls these
 |          "padding slices".  We give padding slices ``None`` as a time
 |          of acquisition
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_dim_info(slice=2)
 |      >>> hdr.set_data_shape((1, 1, 7))
 |      >>> hdr.set_slice_duration(0.1)
 |      >>> hdr['slice_code'] = slice_order_codes['sequential increasing']
 |      >>> slice_times = hdr.get_slice_times()
 |      >>> np.allclose(slice_times, [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6])
 |      True
 |  
 |  get_slope_inter(self)
 |      Get data scaling (slope) and DC offset (intercept) from header data
 |      
 |      Returns
 |      -------
 |      slope : None or float
 |         scaling (slope).  None if there is no valid scaling from these
 |         fields
 |      inter : None or float
 |         offset (intercept). None if there is no valid scaling or if offset
 |         is not finite.
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.get_slope_inter()
 |      (1.0, 0.0)
 |      >>> hdr['scl_slope'] = 0
 |      >>> hdr.get_slope_inter()
 |      (None, None)
 |      >>> hdr['scl_slope'] = np.nan
 |      >>> hdr.get_slope_inter()
 |      (None, None)
 |      >>> hdr['scl_slope'] = 1
 |      >>> hdr['scl_inter'] = 1
 |      >>> hdr.get_slope_inter()
 |      (1.0, 1.0)
 |      >>> hdr['scl_inter'] = np.inf
 |      >>> hdr.get_slope_inter() #doctest: +IGNORE_EXCEPTION_DETAIL
 |      Traceback (most recent call last):
 |          ...
 |      HeaderDataError: Valid slope but invalid intercept inf
 |  
 |  get_xyzt_units(self)
 |  
 |  set_data_dtype(self, datatype)
 |      Set numpy dtype for data from code or dtype or type
 |      
 |      Using :py:class:`int` or ``"int"`` is disallowed, as these types
 |      will be interpreted as ``np.int64``, which is almost never desired.
 |      ``np.int64`` is permitted for those intent on making poor choices.
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_data_dtype(np.uint8)
 |      >>> hdr.get_data_dtype()
 |      dtype('uint8')
 |      >>> hdr.set_data_dtype(np.dtype(np.uint8))
 |      >>> hdr.get_data_dtype()
 |      dtype('uint8')
 |      >>> hdr.set_data_dtype('implausible')
 |      Traceback (most recent call last):
 |         ...
 |      nibabel.spatialimages.HeaderDataError: data dtype "implausible" not recognized
 |      >>> hdr.set_data_dtype('none')
 |      Traceback (most recent call last):
 |         ...
 |      nibabel.spatialimages.HeaderDataError: data dtype "none" known but not supported
 |      >>> hdr.set_data_dtype(np.void)
 |      Traceback (most recent call last):
 |         ...
 |      nibabel.spatialimages.HeaderDataError: data dtype "<class 'numpy.void'>" known
 |      but not supported
 |      >>> hdr.set_data_dtype('int')
 |      Traceback (most recent call last):
 |         ...
 |      ValueError: Invalid data type 'int'. Specify a sized integer, e.g., 'uint8' or numpy.int16.
 |      >>> hdr.set_data_dtype(int)
 |      Traceback (most recent call last):
 |         ...
 |      ValueError: Invalid data type <class 'int'>. Specify a sized integer, e.g., 'uint8' or
 |      numpy.int16.
 |      >>> hdr.set_data_dtype('int64')
 |      >>> hdr.get_data_dtype() == np.dtype('int64')
 |      True
 |  
 |  set_data_shape(self, shape)
 |      Set shape of data  # noqa
 |      
 |      If ``ndims == len(shape)`` then we set zooms for dimensions higher than
 |      ``ndims`` to 1.0
 |      
 |      Nifti1 images can have up to seven dimensions. For FreeSurfer-variant
 |      Nifti surface files, the first dimension is assumed to correspond to
 |      vertices/nodes on a surface, and dimensions two and three are
 |      constrained to have depth of 1. Dimensions 4-7 are constrained only by
 |      type bounds.
 |      
 |      Parameters
 |      ----------
 |      shape : sequence
 |         sequence of integers specifying data array shape
 |      
 |      Notes
 |      -----
 |      Applies freesurfer hack for large vectors described in `issue 100`_ and
 |      `save_nifti.m <save77_>`_.
 |      
 |      Allows for freesurfer hack for 7th order icosahedron surface described
 |      in `issue 309`_, load_nifti.m_, and `save_nifti.m <save50_>`_.
 |      
 |      The Nifti1 `standard header`_ allows for the following "point set"
 |      definition of a surface, not currently implemented in nibabel.
 |      
 |      ::
 |      
 |        To signify that the vector value at each voxel is really a
 |        spatial coordinate (e.g., the vertices or nodes of a surface mesh):
 |          - dataset must have a 5th dimension
 |          - intent_code must be NIFTI_INTENT_POINTSET
 |          - dim[0] = 5
 |          - dim[1] = number of points
 |          - dim[2] = dim[3] = dim[4] = 1
 |          - dim[5] must be the dimensionality of space (e.g., 3 => 3D space).
 |          - intent_name may describe the object these points come from
 |            (e.g., "pial", "gray/white" , "EEG", "MEG").
 |      
 |      .. _issue 100: https://github.com/nipy/nibabel/issues/100
 |      .. _issue 309: https://github.com/nipy/nibabel/issues/309
 |      .. _save77:
 |          https://github.com/fieldtrip/fieldtrip/blob/428798b/external/freesurfer/save_nifti.m#L77-L82
 |      .. _save50:
 |          https://github.com/fieldtrip/fieldtrip/blob/428798b/external/freesurfer/save_nifti.m#L50-L56
 |      .. _load_nifti.m:
 |          https://github.com/fieldtrip/fieldtrip/blob/428798b/external/freesurfer/load_nifti.m#L86-L89
 |      .. _standard header: http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h
 |  
 |  set_dim_info(self, freq=None, phase=None, slice=None)
 |      Sets nifti MRI slice etc dimension information
 |      
 |      Parameters
 |      ----------
 |      freq : {None, 0, 1, 2}
 |          axis of data array referring to frequency encoding
 |      phase : {None, 0, 1, 2}
 |          axis of data array referring to phase encoding
 |      slice : {None, 0, 1, 2}
 |          axis of data array referring to slice encoding
 |      
 |      ``None`` means the axis is not specified.
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_dim_info(1, 2, 0)
 |      >>> hdr.get_dim_info()
 |      (1, 2, 0)
 |      >>> hdr.set_dim_info(freq=1, phase=2, slice=0)
 |      >>> hdr.get_dim_info()
 |      (1, 2, 0)
 |      >>> hdr.set_dim_info()
 |      >>> hdr.get_dim_info()
 |      (None, None, None)
 |      >>> hdr.set_dim_info(freq=1, phase=None, slice=0)
 |      >>> hdr.get_dim_info()
 |      (1, None, 0)
 |      
 |      Notes
 |      -----
 |      This is stored in one byte in the header
 |  
 |  set_intent(self, code, params=(), name='', allow_unknown=False)
 |      Set the intent code, parameters and name
 |      
 |      If parameters are not specified, assumed to be all zero. Each
 |      intent code has a set number of parameters associated. If you
 |      specify any parameters, then it will need to be the correct number
 |      (e.g the "f test" intent requires 2).  However, parameters can
 |      also be set in the file data, so we also allow not setting any
 |      parameters (empty parameter tuple).
 |      
 |      Parameters
 |      ----------
 |      code : integer or string
 |          code specifying nifti intent
 |      params : list, tuple of scalars
 |          parameters relating to intent (see intent_codes)
 |          defaults to ().  Unspecified parameters are set to 0.0
 |      name : string
 |          intent name (description). Defaults to ''
 |      allow_unknown : {False, True}, optional
 |          Allow unknown integer intent codes. If False (the default),
 |          a KeyError is raised on attempts to set the intent
 |          to an unknown code.
 |      
 |      Returns
 |      -------
 |      None
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_intent(0)  # no intent
 |      >>> hdr.set_intent('z score')
 |      >>> hdr.get_intent()
 |      ('z score', (), '')
 |      >>> hdr.get_intent('code')
 |      (5, (), '')
 |      >>> hdr.set_intent('t test', (10,), name='some score')
 |      >>> hdr.get_intent()
 |      ('t test', (10.0,), 'some score')
 |      >>> hdr.set_intent('f test', (2, 10), name='another score')
 |      >>> hdr.get_intent()
 |      ('f test', (2.0, 10.0), 'another score')
 |      >>> hdr.set_intent('f test')
 |      >>> hdr.get_intent()
 |      ('f test', (0.0, 0.0), '')
 |      >>> hdr.set_intent(9999, allow_unknown=True) # unknown code
 |      >>> hdr.get_intent()
 |      ('unknown code 9999', (), '')
 |  
 |  set_qform(self, affine, code=None, strip_shears=True)
 |      Set qform header values from 4x4 affine
 |      
 |      Parameters
 |      ----------
 |      affine : None or 4x4 array
 |          affine transform to write into sform. If None, only set code.
 |      code : None, string or integer, optional
 |          String or integer giving meaning of transform in *affine*.
 |          The default is None.  If code is None, then:
 |      
 |          * If affine is None, `code`-> 0
 |          * If affine not None and existing qform code in header == 0,
 |            `code`-> 2 (aligned)
 |          * If affine not None and existing qform code in header != 0,
 |            `code`-> existing qform code in header
 |      
 |      strip_shears : bool, optional
 |          Whether to strip shears in `affine`.  If True, shears will be
 |          silently stripped. If False, the presence of shears will raise a
 |          ``HeaderDataError``
 |      
 |      Notes
 |      -----
 |      The qform transform only encodes translations, rotations and
 |      zooms. If there are shear components to the `affine` transform, and
 |      `strip_shears` is True (the default), the written qform gives the
 |      closest approximation where the rotation matrix is orthogonal. This is
 |      to allow quaternion representation. The orthogonal representation
 |      enforces orthogonal axes.
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> int(hdr['qform_code'])  # gives 0 - unknown
 |      0
 |      >>> affine = np.diag([1,2,3,1])
 |      >>> np.all(hdr.get_qform() == affine)
 |      False
 |      >>> hdr.set_qform(affine)
 |      >>> np.all(hdr.get_qform() == affine)
 |      True
 |      >>> int(hdr['qform_code'])  # gives 2 - aligned
 |      2
 |      >>> hdr.set_qform(affine, code='talairach')
 |      >>> int(hdr['qform_code'])
 |      3
 |      >>> hdr.set_qform(affine, code=None)
 |      >>> int(hdr['qform_code'])
 |      3
 |      >>> hdr.set_qform(affine, code='scanner')
 |      >>> int(hdr['qform_code'])
 |      1
 |      >>> hdr.set_qform(None)
 |      >>> int(hdr['qform_code'])
 |      0
 |  
 |  set_sform(self, affine, code=None)
 |      Set sform transform from 4x4 affine
 |      
 |      Parameters
 |      ----------
 |      affine : None or 4x4 array
 |          affine transform to write into sform.  If None, only set `code`
 |      code : None, string or integer, optional
 |          String or integer giving meaning of transform in *affine*.
 |          The default is None.  If code is None, then:
 |      
 |          * If affine is None, `code`-> 0
 |          * If affine not None and existing sform code in header == 0,
 |            `code`-> 2 (aligned)
 |          * If affine not None and existing sform code in header != 0,
 |            `code`-> existing sform code in header
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> int(hdr['sform_code'])  # gives 0 - unknown
 |      0
 |      >>> affine = np.diag([1,2,3,1])
 |      >>> np.all(hdr.get_sform() == affine)
 |      False
 |      >>> hdr.set_sform(affine)
 |      >>> np.all(hdr.get_sform() == affine)
 |      True
 |      >>> int(hdr['sform_code'])  # gives 2 - aligned
 |      2
 |      >>> hdr.set_sform(affine, code='talairach')
 |      >>> int(hdr['sform_code'])
 |      3
 |      >>> hdr.set_sform(affine, code=None)
 |      >>> int(hdr['sform_code'])
 |      3
 |      >>> hdr.set_sform(affine, code='scanner')
 |      >>> int(hdr['sform_code'])
 |      1
 |      >>> hdr.set_sform(None)
 |      >>> int(hdr['sform_code'])
 |      0
 |  
 |  set_slice_duration(self, duration)
 |      Set slice duration
 |      
 |      Parameters
 |      ----------
 |      duration : scalar
 |          time to acquire one slice
 |      
 |      Examples
 |      --------
 |      See ``get_slice_duration``
 |  
 |  set_slice_times(self, slice_times)
 |      Set slice times into *hdr*
 |      
 |      Parameters
 |      ----------
 |      slice_times : tuple
 |          tuple of slice times, one value per slice
 |          tuple can include None to indicate no slice time for that slice
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_dim_info(slice=2)
 |      >>> hdr.set_data_shape([1, 1, 7])
 |      >>> hdr.set_slice_duration(0.1)
 |      >>> times = [None, 0.2, 0.4, 0.1, 0.3, 0.0, None]
 |      >>> hdr.set_slice_times(times)
 |      >>> hdr.get_value_label('slice_code')
 |      'alternating decreasing'
 |      >>> int(hdr['slice_start'])
 |      1
 |      >>> int(hdr['slice_end'])
 |      5
 |  
 |  set_slope_inter(self, slope, inter=None)
 |      Set slope and / or intercept into header
 |      
 |      Set slope and intercept for image data, such that, if the image
 |      data is ``arr``, then the scaled image data will be ``(arr *
 |      slope) + inter``
 |      
 |      (`slope`, `inter`) of (NaN, NaN) is a signal to a containing image to
 |      set `slope`, `inter` automatically on write.
 |      
 |      Parameters
 |      ----------
 |      slope : None or float
 |         If None, implies `slope`  of NaN. If `slope` is None or NaN then
 |         `inter` should be None or NaN.  Values of 0, Inf or -Inf raise
 |         HeaderDataError
 |      inter : None or float, optional
 |         Intercept. If None, implies `inter` of NaN. If `slope` is None or
 |         NaN then `inter` should be None or NaN.  Values of Inf or -Inf raise
 |         HeaderDataError
 |  
 |  set_xyzt_units(self, xyz=None, t=None)
 |  
 |  write_to(self, fileobj)
 |      Write structure to fileobj
 |      
 |      Write starts at fileobj current file position.
 |      
 |      Parameters
 |      ----------
 |      fileobj : file-like object
 |         Should implement ``write`` method
 |      
 |      Returns
 |      -------
 |      None
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> from io import BytesIO
 |      >>> str_io = BytesIO()
 |      >>> wstr.write_to(str_io)
 |      >>> wstr.binaryblock == str_io.getvalue()
 |      True
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  default_structarr(endianness=None) from typing._ProtocolMeta
 |      Create empty header binary block with given endianness
 |  
 |  from_fileobj(fileobj, endianness=None, check=True) from typing._ProtocolMeta
 |      Return read structure with given or guessed endiancode
 |      
 |      Parameters
 |      ----------
 |      fileobj : file-like object
 |         Needs to implement ``read`` method
 |      endianness : None or endian code, optional
 |         Code specifying endianness of read data
 |      
 |      Returns
 |      -------
 |      wstr : WrapStruct object
 |         WrapStruct object initialized from data in fileobj
 |  
 |  from_header(header=None, check=True) from typing._ProtocolMeta
 |      Class method to create header from another header
 |      
 |      Extend Analyze header copy by copying extensions from other Nifti
 |      types.
 |      
 |      Parameters
 |      ----------
 |      header : ``Header`` instance or mapping
 |         a header of this class, or another class of header for
 |         conversion to this type
 |      check : {True, False}
 |         whether to check header for integrity
 |      
 |      Returns
 |      -------
 |      hdr : header instance
 |         fresh header instance of our own class
 |  
 |  may_contain_header(binaryblock) from typing._ProtocolMeta
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  __parameters__ = ()
 |  
 |  exts_klass = <class 'nibabel.nifti1.Nifti1Extensions'>
 |      Simple extension collection, implemented as a list-subclass.
 |  
 |  
 |  has_data_intercept = True
 |  
 |  has_data_slope = True
 |  
 |  is_single = True
 |  
 |  pair_magic = b'ni1'
 |  
 |  pair_vox_offset = 0
 |  
 |  quaternion_threshold = 3.5762786865234375e-07
 |  
 |  single_magic = b'n+1'
 |  
 |  single_vox_offset = 352
 |  
 |  template_dtype = dtype([('sizeof_hdr', '<i4'), ('data_type', 'S10... (...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from nibabel.analyze.AnalyzeHeader:
 |  
 |  as_analyze_map(self)
 |      Return header as mapping for conversion to Analyze types
 |      
 |      Collect data from custom header type to fill in fields for Analyze and
 |      derived header types (such as Nifti1 and Nifti2).
 |      
 |      When Analyze types convert another header type to their own type, they
 |      call this this method to check if there are other Analyze / Nifti
 |      fields that the source header would like to set.
 |      
 |      Returns
 |      -------
 |      analyze_map : mapping
 |          Object that can be used as a mapping thus::
 |      
 |              for key in analyze_map:
 |                  value = analyze_map[key]
 |      
 |          where ``key`` is the name of a field that can be set in an Analyze
 |          header type, such as Nifti1, and ``value`` is a value for the
 |          field.  For example, `analyze_map` might be a something like
 |          ``dict(regular='y', slice_duration=0.3)`` where ``regular`` is a
 |          field present in both Analyze and Nifti1, and ``slice_duration`` is
 |          a field restricted to Nifti1 and Nifti2.  If a particular Analyze
 |          header type does not recognize the field name, it will throw away
 |          the value without error.  See :meth:`Analyze.from_header`.
 |      
 |      Notes
 |      -----
 |      You can also return a Nifti header with the relevant fields set.
 |      
 |      Your header still needs methods ``get_data_dtype``, ``get_data_shape``
 |      and ``get_zooms``, for the conversion, and these get called *after*
 |      using the analyze map, so the methods will override values set in the
 |      map.
 |  
 |  data_from_fileobj(self, fileobj)
 |      Read scaled data array from `fileobj`
 |      
 |      Use this routine to get the scaled image data from an image file
 |      `fileobj`, given a header `self`.  "Scaled" means, with any header
 |      scaling factors applied to the raw data in the file.  Use
 |      `raw_data_from_fileobj` to get the raw data.
 |      
 |      Parameters
 |      ----------
 |      fileobj : file-like
 |         Must be open, and implement ``read`` and ``seek`` methods
 |      
 |      Returns
 |      -------
 |      arr : ndarray
 |         scaled data array
 |      
 |      Notes
 |      -----
 |      We use the header to get any scale or intercept values to apply to the
 |      data.  Raw Analyze files don't have scale factors or intercepts, but
 |      this routine also works with formats based on Analyze, that do have
 |      scaling, such as SPM analyze formats and NIfTI.
 |  
 |  data_to_fileobj(self, data, fileobj, rescale=True)
 |      Write `data` to `fileobj`, maybe rescaling data, modifying `self`
 |      
 |      In writing the data, we match the header to the written data, by
 |      setting the header scaling factors, iff `rescale` is True.  Thus we
 |      modify `self` in the process of writing the data.
 |      
 |      Parameters
 |      ----------
 |      data : array-like
 |         data to write; should match header defined shape
 |      fileobj : file-like object
 |         Object with file interface, implementing ``write`` and
 |         ``seek``
 |      rescale : {True, False}, optional
 |          Whether to try and rescale data to match output dtype specified by
 |          header. If True and scaling needed and header cannot scale, then
 |          raise ``HeaderTypeError``.
 |      
 |      Examples
 |      --------
 |      >>> from nibabel.analyze import AnalyzeHeader
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr.set_data_shape((1, 2, 3))
 |      >>> hdr.set_data_dtype(np.float64)
 |      >>> from io import BytesIO
 |      >>> str_io = BytesIO()
 |      >>> data = np.arange(6).reshape(1,2,3)
 |      >>> hdr.data_to_fileobj(data, str_io)
 |      >>> data.astype(np.float64).tobytes('F') == str_io.getvalue()
 |      True
 |  
 |  get_base_affine(self)
 |      Get affine from basic (shared) header fields
 |      
 |      Note that we get the translations from the center of the
 |      image.
 |      
 |      Examples
 |      --------
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr.set_data_shape((3, 5, 7))
 |      >>> hdr.set_zooms((3, 2, 1))
 |      >>> hdr.default_x_flip
 |      True
 |      >>> hdr.get_base_affine() # from center of image
 |      array([[-3.,  0.,  0.,  3.],
 |             [ 0.,  2.,  0., -4.],
 |             [ 0.,  0.,  1., -3.],
 |             [ 0.,  0.,  0.,  1.]])
 |  
 |  get_data_dtype(self)
 |      Get numpy dtype for data
 |      
 |      For examples see ``set_data_dtype``
 |  
 |  get_data_offset(self)
 |      Return offset into data file to read data
 |      
 |      Examples
 |      --------
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr.get_data_offset()
 |      0
 |      >>> hdr['vox_offset'] = 12
 |      >>> hdr.get_data_offset()
 |      12
 |  
 |  get_zooms(self)
 |      Get zooms from header
 |      
 |      Returns
 |      -------
 |      z : tuple
 |         tuple of header zoom values
 |      
 |      Examples
 |      --------
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr.get_zooms()
 |      (1.0,)
 |      >>> hdr.set_data_shape((1,2))
 |      >>> hdr.get_zooms()
 |      (1.0, 1.0)
 |      >>> hdr.set_zooms((3, 4))
 |      >>> hdr.get_zooms()
 |      (3.0, 4.0)
 |  
 |  raw_data_from_fileobj(self, fileobj)
 |      Read unscaled data array from `fileobj`
 |      
 |      Parameters
 |      ----------
 |      fileobj : file-like
 |         Must be open, and implement ``read`` and ``seek`` methods
 |      
 |      Returns
 |      -------
 |      arr : ndarray
 |         unscaled data array
 |  
 |  set_data_offset(self, offset)
 |      Set offset into data file to read data
 |  
 |  set_zooms(self, zooms)
 |      Set zooms into header fields
 |      
 |      See docstring for ``get_zooms`` for examples
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from nibabel.analyze.AnalyzeHeader:
 |  
 |  guessed_endian(hdr) from typing._ProtocolMeta
 |      Guess intended endianness from mapping-like ``hdr``
 |      
 |      Parameters
 |      ----------
 |      hdr : mapping-like
 |         hdr for which to guess endianness
 |      
 |      Returns
 |      -------
 |      endianness : {'<', '>'}
 |         Guessed endianness of header
 |      
 |      Examples
 |      --------
 |      Zeros header, no information, guess native
 |      
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr_data = np.zeros((), dtype=header_dtype)
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      
 |      A valid native header is guessed native
 |      
 |      >>> hdr_data = hdr.structarr.copy()
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      
 |      And, when swapped, is guessed as swapped
 |      
 |      >>> sw_hdr_data = hdr_data.byteswap(swapped_code)
 |      >>> AnalyzeHeader.guessed_endian(sw_hdr_data) == swapped_code
 |      True
 |      
 |      The algorithm is as follows:
 |      
 |      First, look at the first value in the ``dim`` field; this
 |      should be between 0 and 7.  If it is between 1 and 7, then
 |      this must be a native endian header.
 |      
 |      >>> hdr_data = np.zeros((), dtype=header_dtype) # blank binary data
 |      >>> hdr_data['dim'][0] = 1
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      >>> hdr_data['dim'][0] = 6
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      >>> hdr_data['dim'][0] = -1
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == swapped_code
 |      True
 |      
 |      If the first ``dim`` value is zeros, we need a tie breaker.
 |      In that case we check the ``sizeof_hdr`` field.  This should
 |      be 348.  If it looks like the byteswapped value of 348,
 |      assumed swapped.  Otherwise assume native.
 |      
 |      >>> hdr_data = np.zeros((), dtype=header_dtype) # blank binary data
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      >>> hdr_data['sizeof_hdr'] = 1543569408
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == swapped_code
 |      True
 |      >>> hdr_data['sizeof_hdr'] = -1
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      
 |      This is overridden by the ``dim[0]`` value though:
 |      
 |      >>> hdr_data['sizeof_hdr'] = 1543569408
 |      >>> hdr_data['dim'][0] = 1
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from nibabel.analyze.AnalyzeHeader:
 |  
 |  default_x_flip = True
 |  
 |  sizeof_hdr = 348
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from nibabel.wrapstruct.LabeledWrapStruct:
 |  
 |  __str__(self)
 |      Return string representation for printing
 |  
 |  get_value_label(self, fieldname)
 |      Returns label for coded field
 |      
 |      A coded field is an int field containing codes that stand for
 |      discrete values that also have string labels.
 |      
 |      Parameters
 |      ----------
 |      fieldname : str
 |         name of header field to get label for
 |      
 |      Returns
 |      -------
 |      label : str
 |         label for code value in header field `fieldname`
 |      
 |      Raises
 |      ------
 |      ValueError
 |          if field is not coded.
 |      
 |      Examples
 |      --------
 |      >>> from nibabel.volumeutils import Recoder
 |      >>> recoder = Recoder(((1, 'one'), (2, 'two')), ('code', 'label'))
 |      >>> class C(LabeledWrapStruct):
 |      ...     template_dtype = np.dtype([('datatype', 'i2')])
 |      ...     _field_recoders = dict(datatype = recoder)
 |      >>> hdr  = C()
 |      >>> hdr.get_value_label('datatype')
 |      '<unknown code 0>'
 |      >>> hdr['datatype'] = 2
 |      >>> hdr.get_value_label('datatype')
 |      'two'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from nibabel.wrapstruct.LabeledWrapStruct:
 |  
 |  __annotations__ = {'_field_recoders': 'dict[str, Recoder]'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  __eq__(self, other)
 |      equality between two structures defined by binaryblock
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> wstr2 = WrapStruct()
 |      >>> wstr == wstr2
 |      True
 |      >>> wstr3 = WrapStruct(endianness=swapped_code)
 |      >>> wstr == wstr3
 |      True
 |  
 |  __getitem__(self, item)
 |      Return values from structure data
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> wstr['integer'] == 0
 |      True
 |  
 |  __iter__(self)
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __setitem__(self, item, value)
 |      Set values in structured data
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> wstr['integer'] = 3
 |      >>> wstr['integer']
 |      array(3, dtype=int16)
 |  
 |  as_byteswapped(self, endianness=None)
 |      return new byteswapped object with given ``endianness``
 |      
 |      Guaranteed to make a copy even if endianness is the same as
 |      the current endianness.
 |      
 |      Parameters
 |      ----------
 |      endianness : None or string, optional
 |         endian code to which to swap.  None means swap from current
 |         endianness, and is the default
 |      
 |      Returns
 |      -------
 |      wstr : ``WrapStruct``
 |         ``WrapStruct`` object with given endianness
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> wstr.endianness == native_code
 |      True
 |      >>> bs_wstr = wstr.as_byteswapped()
 |      >>> bs_wstr.endianness == swapped_code
 |      True
 |      >>> bs_wstr = wstr.as_byteswapped(swapped_code)
 |      >>> bs_wstr.endianness == swapped_code
 |      True
 |      >>> bs_wstr is wstr
 |      False
 |      >>> bs_wstr == wstr
 |      True
 |      
 |      If you write to the resulting byteswapped data, it does not
 |      change the original.
 |      
 |      >>> bs_wstr['integer'] = 3
 |      >>> bs_wstr == wstr
 |      False
 |      
 |      If you swap to the same endianness, it returns a copy
 |      
 |      >>> nbs_wstr = wstr.as_byteswapped(native_code)
 |      >>> nbs_wstr.endianness == native_code
 |      True
 |      >>> nbs_wstr is wstr
 |      False
 |  
 |  check_fix(self, logger=None, error_level=None)
 |      Check structured data with checks
 |      
 |      Parameters
 |      ----------
 |      logger : None or logging.Logger
 |      error_level : None or int
 |          Level of error severity at which to raise error.  Any error of
 |          severity >= `error_level` will cause an exception.
 |  
 |  get(self, k, d=None)
 |      Return value for the key k if present or d otherwise
 |  
 |  items(self)
 |      Return items from structured data
 |  
 |  keys(self)
 |      Return keys from structured data
 |  
 |  values(self)
 |      Return values from structured data
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  diagnose_binaryblock(binaryblock, endianness=None) from typing._ProtocolMeta
 |      Run checks over binary data, return string
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  binaryblock
 |      binary block of data as string
 |      
 |      Returns
 |      -------
 |      binaryblock : string
 |          string giving binary data block
 |      
 |      Examples
 |      --------
 |      >>> # Make default empty structure
 |      >>> wstr = WrapStruct()
 |      >>> len(wstr.binaryblock)
 |      2
 |  
 |  endianness
 |      endian code of binary data
 |      
 |      The endianness code gives the current byte order
 |      interpretation of the binary data.
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> code = wstr.endianness
 |      >>> code == native_code
 |      True
 |      
 |      Notes
 |      -----
 |      Endianness gives endian interpretation of binary data. It is
 |      read only because the only common use case is to set the
 |      endianness on initialization, or occasionally byteswapping the
 |      data - but this is done via the as_byteswapped method
 |  
 |  structarr
 |      Structured data, with data fields
 |      
 |      Examples
 |      --------
 |      >>> wstr1 = WrapStruct() # with default data
 |      >>> an_int = wstr1.structarr['integer']
 |      >>> wstr1.structarr = None
 |      Traceback (most recent call last):
 |         ...
 |      AttributeError: ...
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  __hash__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from nibabel.spatialimages.SpatialHeader:
 |  
 |  data_layout = 'F'
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Protocol:
 |  
 |  __init_subclass__(*args, **kwargs) from typing._ProtocolMeta
 |      This method is called when a class is subclassed.
 |      
 |      The default implementation does nothing. It may be
 |      overridden to extend subclasses.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Generic:
 |  
 |  __class_getitem__(params) from typing._ProtocolMeta

None
&&&&&&&&&&&&&&&&&&&&&&&&& header_class &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on class Nifti1Header in module nibabel.nifti1:

class Nifti1Header(nibabel.spm99analyze.SpmAnalyzeHeader)
 |  Nifti1Header(binaryblock=None, endianness=None, check=True, extensions=())
 |  
 |  Class for NIfTI1 header
 |  
 |  The NIfTI1 header has many more coded fields than the simpler Analyze
 |  variants.  NIfTI1 headers also have extensions.
 |  
 |  Nifti allows the header to be a separate file, as part of a nifti image /
 |  header pair, or to precede the data in a single file.  The object needs to
 |  know which type it is, in order to manage the voxel offset pointing to the
 |  data, extension reading, and writing the correct magic string.
 |  
 |  This class handles the header-preceding-data case.
 |  
 |  Method resolution order:
 |      Nifti1Header
 |      nibabel.spm99analyze.SpmAnalyzeHeader
 |      nibabel.analyze.AnalyzeHeader
 |      nibabel.wrapstruct.LabeledWrapStruct
 |      nibabel.wrapstruct.WrapStruct
 |      nibabel.spatialimages.SpatialHeader
 |      nibabel.filebasedimages.FileBasedHeader
 |      nibabel.spatialimages.SpatialProtocol
 |      typing.Protocol
 |      typing.Generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, binaryblock=None, endianness=None, check=True, extensions=())
 |      Initialize header from binary data block and extensions
 |  
 |  __subclasshook__ = _proto_hook(other)
 |      # Set (or override) the protocol subclass hook.
 |  
 |  copy(self)
 |      Return copy of header
 |      
 |      Take reference to extensions as well as copy of header contents
 |  
 |  get_best_affine(self)
 |      Select best of available transforms
 |  
 |  get_data_shape(self)
 |      Get shape of data
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.get_data_shape()
 |      (0,)
 |      >>> hdr.set_data_shape((1,2,3))
 |      >>> hdr.get_data_shape()
 |      (1, 2, 3)
 |      
 |      Expanding number of dimensions gets default zooms
 |      
 |      >>> hdr.get_zooms()
 |      (1.0, 1.0, 1.0)
 |      
 |      Notes
 |      -----
 |      Applies freesurfer hack for large vectors described in `issue 100`_ and
 |      `save_nifti.m <save77_>`_.
 |      
 |      Allows for freesurfer hack for 7th order icosahedron surface described
 |      in `issue 309`_, load_nifti.m_, and `save_nifti.m <save50_>`_.
 |  
 |  get_dim_info(self)
 |      Gets NIfTI MRI slice etc dimension information
 |      
 |      Returns
 |      -------
 |      freq : {None,0,1,2}
 |         Which data array axis is frequency encode direction
 |      phase : {None,0,1,2}
 |         Which data array axis is phase encode direction
 |      slice : {None,0,1,2}
 |         Which data array axis is slice encode direction
 |      
 |      where ``data array`` is the array returned by ``get_data``
 |      
 |      Because NIfTI1 files are natively Fortran indexed:
 |        0 is fastest changing in file
 |        1 is medium changing in file
 |        2 is slowest changing in file
 |      
 |      ``None`` means the axis appears not to be specified.
 |      
 |      Examples
 |      --------
 |      See set_dim_info function
 |  
 |  get_intent(self, code_repr='label')
 |      Get intent code, parameters and name
 |      
 |      Parameters
 |      ----------
 |      code_repr : string
 |         string giving output form of intent code representation.
 |         Default is 'label'; use 'code' for integer representation.
 |      
 |      Returns
 |      -------
 |      code : string or integer
 |          intent code, or string describing code
 |      parameters : tuple
 |          parameters for the intent
 |      name : string
 |          intent name
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_intent('t test', (10,), name='some score')
 |      >>> hdr.get_intent()
 |      ('t test', (10.0,), 'some score')
 |      >>> hdr.get_intent('code')
 |      (3, (10.0,), 'some score')
 |  
 |  get_n_slices(self)
 |      Return the number of slices
 |  
 |  get_qform(self, coded=False)
 |      Return 4x4 affine matrix from qform parameters in header
 |      
 |      Parameters
 |      ----------
 |      coded : bool, optional
 |          If True, return {affine or None}, and qform code.  If False, just
 |          return affine.  {affine or None} means, return None if qform code
 |          == 0, and affine otherwise.
 |      
 |      Returns
 |      -------
 |      affine : None or (4,4) ndarray
 |          If `coded` is False, always return affine reconstructed from qform
 |          quaternion.  If `coded` is True, return None if qform code is 0,
 |          else return the affine.
 |      code : int
 |          Qform code. Only returned if `coded` is True.
 |  
 |  get_qform_quaternion(self)
 |      Compute quaternion from b, c, d of quaternion
 |      
 |      Fills a value by assuming this is a unit quaternion
 |  
 |  get_sform(self, coded=False)
 |      Return 4x4 affine matrix from sform parameters in header
 |      
 |      Parameters
 |      ----------
 |      coded : bool, optional
 |          If True, return {affine or None}, and sform code.  If False, just
 |          return affine.  {affine or None} means, return None if sform code
 |          == 0, and affine otherwise.
 |      
 |      Returns
 |      -------
 |      affine : None or (4,4) ndarray
 |          If `coded` is False, always return affine from sform fields. If
 |          `coded` is True, return None if sform code is 0, else return the
 |          affine.
 |      code : int
 |          Sform code. Only returned if `coded` is True.
 |  
 |  get_slice_duration(self)
 |      Get slice duration
 |      
 |      Returns
 |      -------
 |      slice_duration : float
 |          time to acquire one slice
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_dim_info(slice=2)
 |      >>> hdr.set_slice_duration(0.3)
 |      >>> print("%0.1f" % hdr.get_slice_duration())
 |      0.3
 |      
 |      Notes
 |      -----
 |      The NIfTI1 spec appears to require the slice dimension to be
 |      defined for slice_duration to have meaning.
 |  
 |  get_slice_times(self)
 |      Get slice times from slice timing information
 |      
 |      Returns
 |      -------
 |      slice_times : tuple
 |          Times of acquisition of slices, where 0 is the beginning of
 |          the acquisition, ordered by position in file.  nifti allows
 |          slices at the top and bottom of the volume to be excluded from
 |          the standard slice timing specification, and calls these
 |          "padding slices".  We give padding slices ``None`` as a time
 |          of acquisition
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_dim_info(slice=2)
 |      >>> hdr.set_data_shape((1, 1, 7))
 |      >>> hdr.set_slice_duration(0.1)
 |      >>> hdr['slice_code'] = slice_order_codes['sequential increasing']
 |      >>> slice_times = hdr.get_slice_times()
 |      >>> np.allclose(slice_times, [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6])
 |      True
 |  
 |  get_slope_inter(self)
 |      Get data scaling (slope) and DC offset (intercept) from header data
 |      
 |      Returns
 |      -------
 |      slope : None or float
 |         scaling (slope).  None if there is no valid scaling from these
 |         fields
 |      inter : None or float
 |         offset (intercept). None if there is no valid scaling or if offset
 |         is not finite.
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.get_slope_inter()
 |      (1.0, 0.0)
 |      >>> hdr['scl_slope'] = 0
 |      >>> hdr.get_slope_inter()
 |      (None, None)
 |      >>> hdr['scl_slope'] = np.nan
 |      >>> hdr.get_slope_inter()
 |      (None, None)
 |      >>> hdr['scl_slope'] = 1
 |      >>> hdr['scl_inter'] = 1
 |      >>> hdr.get_slope_inter()
 |      (1.0, 1.0)
 |      >>> hdr['scl_inter'] = np.inf
 |      >>> hdr.get_slope_inter() #doctest: +IGNORE_EXCEPTION_DETAIL
 |      Traceback (most recent call last):
 |          ...
 |      HeaderDataError: Valid slope but invalid intercept inf
 |  
 |  get_xyzt_units(self)
 |  
 |  set_data_dtype(self, datatype)
 |      Set numpy dtype for data from code or dtype or type
 |      
 |      Using :py:class:`int` or ``"int"`` is disallowed, as these types
 |      will be interpreted as ``np.int64``, which is almost never desired.
 |      ``np.int64`` is permitted for those intent on making poor choices.
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_data_dtype(np.uint8)
 |      >>> hdr.get_data_dtype()
 |      dtype('uint8')
 |      >>> hdr.set_data_dtype(np.dtype(np.uint8))
 |      >>> hdr.get_data_dtype()
 |      dtype('uint8')
 |      >>> hdr.set_data_dtype('implausible')
 |      Traceback (most recent call last):
 |         ...
 |      nibabel.spatialimages.HeaderDataError: data dtype "implausible" not recognized
 |      >>> hdr.set_data_dtype('none')
 |      Traceback (most recent call last):
 |         ...
 |      nibabel.spatialimages.HeaderDataError: data dtype "none" known but not supported
 |      >>> hdr.set_data_dtype(np.void)
 |      Traceback (most recent call last):
 |         ...
 |      nibabel.spatialimages.HeaderDataError: data dtype "<class 'numpy.void'>" known
 |      but not supported
 |      >>> hdr.set_data_dtype('int')
 |      Traceback (most recent call last):
 |         ...
 |      ValueError: Invalid data type 'int'. Specify a sized integer, e.g., 'uint8' or numpy.int16.
 |      >>> hdr.set_data_dtype(int)
 |      Traceback (most recent call last):
 |         ...
 |      ValueError: Invalid data type <class 'int'>. Specify a sized integer, e.g., 'uint8' or
 |      numpy.int16.
 |      >>> hdr.set_data_dtype('int64')
 |      >>> hdr.get_data_dtype() == np.dtype('int64')
 |      True
 |  
 |  set_data_shape(self, shape)
 |      Set shape of data  # noqa
 |      
 |      If ``ndims == len(shape)`` then we set zooms for dimensions higher than
 |      ``ndims`` to 1.0
 |      
 |      Nifti1 images can have up to seven dimensions. For FreeSurfer-variant
 |      Nifti surface files, the first dimension is assumed to correspond to
 |      vertices/nodes on a surface, and dimensions two and three are
 |      constrained to have depth of 1. Dimensions 4-7 are constrained only by
 |      type bounds.
 |      
 |      Parameters
 |      ----------
 |      shape : sequence
 |         sequence of integers specifying data array shape
 |      
 |      Notes
 |      -----
 |      Applies freesurfer hack for large vectors described in `issue 100`_ and
 |      `save_nifti.m <save77_>`_.
 |      
 |      Allows for freesurfer hack for 7th order icosahedron surface described
 |      in `issue 309`_, load_nifti.m_, and `save_nifti.m <save50_>`_.
 |      
 |      The Nifti1 `standard header`_ allows for the following "point set"
 |      definition of a surface, not currently implemented in nibabel.
 |      
 |      ::
 |      
 |        To signify that the vector value at each voxel is really a
 |        spatial coordinate (e.g., the vertices or nodes of a surface mesh):
 |          - dataset must have a 5th dimension
 |          - intent_code must be NIFTI_INTENT_POINTSET
 |          - dim[0] = 5
 |          - dim[1] = number of points
 |          - dim[2] = dim[3] = dim[4] = 1
 |          - dim[5] must be the dimensionality of space (e.g., 3 => 3D space).
 |          - intent_name may describe the object these points come from
 |            (e.g., "pial", "gray/white" , "EEG", "MEG").
 |      
 |      .. _issue 100: https://github.com/nipy/nibabel/issues/100
 |      .. _issue 309: https://github.com/nipy/nibabel/issues/309
 |      .. _save77:
 |          https://github.com/fieldtrip/fieldtrip/blob/428798b/external/freesurfer/save_nifti.m#L77-L82
 |      .. _save50:
 |          https://github.com/fieldtrip/fieldtrip/blob/428798b/external/freesurfer/save_nifti.m#L50-L56
 |      .. _load_nifti.m:
 |          https://github.com/fieldtrip/fieldtrip/blob/428798b/external/freesurfer/load_nifti.m#L86-L89
 |      .. _standard header: http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h
 |  
 |  set_dim_info(self, freq=None, phase=None, slice=None)
 |      Sets nifti MRI slice etc dimension information
 |      
 |      Parameters
 |      ----------
 |      freq : {None, 0, 1, 2}
 |          axis of data array referring to frequency encoding
 |      phase : {None, 0, 1, 2}
 |          axis of data array referring to phase encoding
 |      slice : {None, 0, 1, 2}
 |          axis of data array referring to slice encoding
 |      
 |      ``None`` means the axis is not specified.
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_dim_info(1, 2, 0)
 |      >>> hdr.get_dim_info()
 |      (1, 2, 0)
 |      >>> hdr.set_dim_info(freq=1, phase=2, slice=0)
 |      >>> hdr.get_dim_info()
 |      (1, 2, 0)
 |      >>> hdr.set_dim_info()
 |      >>> hdr.get_dim_info()
 |      (None, None, None)
 |      >>> hdr.set_dim_info(freq=1, phase=None, slice=0)
 |      >>> hdr.get_dim_info()
 |      (1, None, 0)
 |      
 |      Notes
 |      -----
 |      This is stored in one byte in the header
 |  
 |  set_intent(self, code, params=(), name='', allow_unknown=False)
 |      Set the intent code, parameters and name
 |      
 |      If parameters are not specified, assumed to be all zero. Each
 |      intent code has a set number of parameters associated. If you
 |      specify any parameters, then it will need to be the correct number
 |      (e.g the "f test" intent requires 2).  However, parameters can
 |      also be set in the file data, so we also allow not setting any
 |      parameters (empty parameter tuple).
 |      
 |      Parameters
 |      ----------
 |      code : integer or string
 |          code specifying nifti intent
 |      params : list, tuple of scalars
 |          parameters relating to intent (see intent_codes)
 |          defaults to ().  Unspecified parameters are set to 0.0
 |      name : string
 |          intent name (description). Defaults to ''
 |      allow_unknown : {False, True}, optional
 |          Allow unknown integer intent codes. If False (the default),
 |          a KeyError is raised on attempts to set the intent
 |          to an unknown code.
 |      
 |      Returns
 |      -------
 |      None
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_intent(0)  # no intent
 |      >>> hdr.set_intent('z score')
 |      >>> hdr.get_intent()
 |      ('z score', (), '')
 |      >>> hdr.get_intent('code')
 |      (5, (), '')
 |      >>> hdr.set_intent('t test', (10,), name='some score')
 |      >>> hdr.get_intent()
 |      ('t test', (10.0,), 'some score')
 |      >>> hdr.set_intent('f test', (2, 10), name='another score')
 |      >>> hdr.get_intent()
 |      ('f test', (2.0, 10.0), 'another score')
 |      >>> hdr.set_intent('f test')
 |      >>> hdr.get_intent()
 |      ('f test', (0.0, 0.0), '')
 |      >>> hdr.set_intent(9999, allow_unknown=True) # unknown code
 |      >>> hdr.get_intent()
 |      ('unknown code 9999', (), '')
 |  
 |  set_qform(self, affine, code=None, strip_shears=True)
 |      Set qform header values from 4x4 affine
 |      
 |      Parameters
 |      ----------
 |      affine : None or 4x4 array
 |          affine transform to write into sform. If None, only set code.
 |      code : None, string or integer, optional
 |          String or integer giving meaning of transform in *affine*.
 |          The default is None.  If code is None, then:
 |      
 |          * If affine is None, `code`-> 0
 |          * If affine not None and existing qform code in header == 0,
 |            `code`-> 2 (aligned)
 |          * If affine not None and existing qform code in header != 0,
 |            `code`-> existing qform code in header
 |      
 |      strip_shears : bool, optional
 |          Whether to strip shears in `affine`.  If True, shears will be
 |          silently stripped. If False, the presence of shears will raise a
 |          ``HeaderDataError``
 |      
 |      Notes
 |      -----
 |      The qform transform only encodes translations, rotations and
 |      zooms. If there are shear components to the `affine` transform, and
 |      `strip_shears` is True (the default), the written qform gives the
 |      closest approximation where the rotation matrix is orthogonal. This is
 |      to allow quaternion representation. The orthogonal representation
 |      enforces orthogonal axes.
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> int(hdr['qform_code'])  # gives 0 - unknown
 |      0
 |      >>> affine = np.diag([1,2,3,1])
 |      >>> np.all(hdr.get_qform() == affine)
 |      False
 |      >>> hdr.set_qform(affine)
 |      >>> np.all(hdr.get_qform() == affine)
 |      True
 |      >>> int(hdr['qform_code'])  # gives 2 - aligned
 |      2
 |      >>> hdr.set_qform(affine, code='talairach')
 |      >>> int(hdr['qform_code'])
 |      3
 |      >>> hdr.set_qform(affine, code=None)
 |      >>> int(hdr['qform_code'])
 |      3
 |      >>> hdr.set_qform(affine, code='scanner')
 |      >>> int(hdr['qform_code'])
 |      1
 |      >>> hdr.set_qform(None)
 |      >>> int(hdr['qform_code'])
 |      0
 |  
 |  set_sform(self, affine, code=None)
 |      Set sform transform from 4x4 affine
 |      
 |      Parameters
 |      ----------
 |      affine : None or 4x4 array
 |          affine transform to write into sform.  If None, only set `code`
 |      code : None, string or integer, optional
 |          String or integer giving meaning of transform in *affine*.
 |          The default is None.  If code is None, then:
 |      
 |          * If affine is None, `code`-> 0
 |          * If affine not None and existing sform code in header == 0,
 |            `code`-> 2 (aligned)
 |          * If affine not None and existing sform code in header != 0,
 |            `code`-> existing sform code in header
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> int(hdr['sform_code'])  # gives 0 - unknown
 |      0
 |      >>> affine = np.diag([1,2,3,1])
 |      >>> np.all(hdr.get_sform() == affine)
 |      False
 |      >>> hdr.set_sform(affine)
 |      >>> np.all(hdr.get_sform() == affine)
 |      True
 |      >>> int(hdr['sform_code'])  # gives 2 - aligned
 |      2
 |      >>> hdr.set_sform(affine, code='talairach')
 |      >>> int(hdr['sform_code'])
 |      3
 |      >>> hdr.set_sform(affine, code=None)
 |      >>> int(hdr['sform_code'])
 |      3
 |      >>> hdr.set_sform(affine, code='scanner')
 |      >>> int(hdr['sform_code'])
 |      1
 |      >>> hdr.set_sform(None)
 |      >>> int(hdr['sform_code'])
 |      0
 |  
 |  set_slice_duration(self, duration)
 |      Set slice duration
 |      
 |      Parameters
 |      ----------
 |      duration : scalar
 |          time to acquire one slice
 |      
 |      Examples
 |      --------
 |      See ``get_slice_duration``
 |  
 |  set_slice_times(self, slice_times)
 |      Set slice times into *hdr*
 |      
 |      Parameters
 |      ----------
 |      slice_times : tuple
 |          tuple of slice times, one value per slice
 |          tuple can include None to indicate no slice time for that slice
 |      
 |      Examples
 |      --------
 |      >>> hdr = Nifti1Header()
 |      >>> hdr.set_dim_info(slice=2)
 |      >>> hdr.set_data_shape([1, 1, 7])
 |      >>> hdr.set_slice_duration(0.1)
 |      >>> times = [None, 0.2, 0.4, 0.1, 0.3, 0.0, None]
 |      >>> hdr.set_slice_times(times)
 |      >>> hdr.get_value_label('slice_code')
 |      'alternating decreasing'
 |      >>> int(hdr['slice_start'])
 |      1
 |      >>> int(hdr['slice_end'])
 |      5
 |  
 |  set_slope_inter(self, slope, inter=None)
 |      Set slope and / or intercept into header
 |      
 |      Set slope and intercept for image data, such that, if the image
 |      data is ``arr``, then the scaled image data will be ``(arr *
 |      slope) + inter``
 |      
 |      (`slope`, `inter`) of (NaN, NaN) is a signal to a containing image to
 |      set `slope`, `inter` automatically on write.
 |      
 |      Parameters
 |      ----------
 |      slope : None or float
 |         If None, implies `slope`  of NaN. If `slope` is None or NaN then
 |         `inter` should be None or NaN.  Values of 0, Inf or -Inf raise
 |         HeaderDataError
 |      inter : None or float, optional
 |         Intercept. If None, implies `inter` of NaN. If `slope` is None or
 |         NaN then `inter` should be None or NaN.  Values of Inf or -Inf raise
 |         HeaderDataError
 |  
 |  set_xyzt_units(self, xyz=None, t=None)
 |  
 |  write_to(self, fileobj)
 |      Write structure to fileobj
 |      
 |      Write starts at fileobj current file position.
 |      
 |      Parameters
 |      ----------
 |      fileobj : file-like object
 |         Should implement ``write`` method
 |      
 |      Returns
 |      -------
 |      None
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> from io import BytesIO
 |      >>> str_io = BytesIO()
 |      >>> wstr.write_to(str_io)
 |      >>> wstr.binaryblock == str_io.getvalue()
 |      True
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  default_structarr(endianness=None) from typing._ProtocolMeta
 |      Create empty header binary block with given endianness
 |  
 |  from_fileobj(fileobj, endianness=None, check=True) from typing._ProtocolMeta
 |      Return read structure with given or guessed endiancode
 |      
 |      Parameters
 |      ----------
 |      fileobj : file-like object
 |         Needs to implement ``read`` method
 |      endianness : None or endian code, optional
 |         Code specifying endianness of read data
 |      
 |      Returns
 |      -------
 |      wstr : WrapStruct object
 |         WrapStruct object initialized from data in fileobj
 |  
 |  from_header(header=None, check=True) from typing._ProtocolMeta
 |      Class method to create header from another header
 |      
 |      Extend Analyze header copy by copying extensions from other Nifti
 |      types.
 |      
 |      Parameters
 |      ----------
 |      header : ``Header`` instance or mapping
 |         a header of this class, or another class of header for
 |         conversion to this type
 |      check : {True, False}
 |         whether to check header for integrity
 |      
 |      Returns
 |      -------
 |      hdr : header instance
 |         fresh header instance of our own class
 |  
 |  may_contain_header(binaryblock) from typing._ProtocolMeta
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  __parameters__ = ()
 |  
 |  exts_klass = <class 'nibabel.nifti1.Nifti1Extensions'>
 |      Simple extension collection, implemented as a list-subclass.
 |  
 |  
 |  has_data_intercept = True
 |  
 |  has_data_slope = True
 |  
 |  is_single = True
 |  
 |  pair_magic = b'ni1'
 |  
 |  pair_vox_offset = 0
 |  
 |  quaternion_threshold = 3.5762786865234375e-07
 |  
 |  single_magic = b'n+1'
 |  
 |  single_vox_offset = 352
 |  
 |  template_dtype = dtype([('sizeof_hdr', '<i4'), ('data_type', 'S10... (...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from nibabel.analyze.AnalyzeHeader:
 |  
 |  as_analyze_map(self)
 |      Return header as mapping for conversion to Analyze types
 |      
 |      Collect data from custom header type to fill in fields for Analyze and
 |      derived header types (such as Nifti1 and Nifti2).
 |      
 |      When Analyze types convert another header type to their own type, they
 |      call this this method to check if there are other Analyze / Nifti
 |      fields that the source header would like to set.
 |      
 |      Returns
 |      -------
 |      analyze_map : mapping
 |          Object that can be used as a mapping thus::
 |      
 |              for key in analyze_map:
 |                  value = analyze_map[key]
 |      
 |          where ``key`` is the name of a field that can be set in an Analyze
 |          header type, such as Nifti1, and ``value`` is a value for the
 |          field.  For example, `analyze_map` might be a something like
 |          ``dict(regular='y', slice_duration=0.3)`` where ``regular`` is a
 |          field present in both Analyze and Nifti1, and ``slice_duration`` is
 |          a field restricted to Nifti1 and Nifti2.  If a particular Analyze
 |          header type does not recognize the field name, it will throw away
 |          the value without error.  See :meth:`Analyze.from_header`.
 |      
 |      Notes
 |      -----
 |      You can also return a Nifti header with the relevant fields set.
 |      
 |      Your header still needs methods ``get_data_dtype``, ``get_data_shape``
 |      and ``get_zooms``, for the conversion, and these get called *after*
 |      using the analyze map, so the methods will override values set in the
 |      map.
 |  
 |  data_from_fileobj(self, fileobj)
 |      Read scaled data array from `fileobj`
 |      
 |      Use this routine to get the scaled image data from an image file
 |      `fileobj`, given a header `self`.  "Scaled" means, with any header
 |      scaling factors applied to the raw data in the file.  Use
 |      `raw_data_from_fileobj` to get the raw data.
 |      
 |      Parameters
 |      ----------
 |      fileobj : file-like
 |         Must be open, and implement ``read`` and ``seek`` methods
 |      
 |      Returns
 |      -------
 |      arr : ndarray
 |         scaled data array
 |      
 |      Notes
 |      -----
 |      We use the header to get any scale or intercept values to apply to the
 |      data.  Raw Analyze files don't have scale factors or intercepts, but
 |      this routine also works with formats based on Analyze, that do have
 |      scaling, such as SPM analyze formats and NIfTI.
 |  
 |  data_to_fileobj(self, data, fileobj, rescale=True)
 |      Write `data` to `fileobj`, maybe rescaling data, modifying `self`
 |      
 |      In writing the data, we match the header to the written data, by
 |      setting the header scaling factors, iff `rescale` is True.  Thus we
 |      modify `self` in the process of writing the data.
 |      
 |      Parameters
 |      ----------
 |      data : array-like
 |         data to write; should match header defined shape
 |      fileobj : file-like object
 |         Object with file interface, implementing ``write`` and
 |         ``seek``
 |      rescale : {True, False}, optional
 |          Whether to try and rescale data to match output dtype specified by
 |          header. If True and scaling needed and header cannot scale, then
 |          raise ``HeaderTypeError``.
 |      
 |      Examples
 |      --------
 |      >>> from nibabel.analyze import AnalyzeHeader
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr.set_data_shape((1, 2, 3))
 |      >>> hdr.set_data_dtype(np.float64)
 |      >>> from io import BytesIO
 |      >>> str_io = BytesIO()
 |      >>> data = np.arange(6).reshape(1,2,3)
 |      >>> hdr.data_to_fileobj(data, str_io)
 |      >>> data.astype(np.float64).tobytes('F') == str_io.getvalue()
 |      True
 |  
 |  get_base_affine(self)
 |      Get affine from basic (shared) header fields
 |      
 |      Note that we get the translations from the center of the
 |      image.
 |      
 |      Examples
 |      --------
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr.set_data_shape((3, 5, 7))
 |      >>> hdr.set_zooms((3, 2, 1))
 |      >>> hdr.default_x_flip
 |      True
 |      >>> hdr.get_base_affine() # from center of image
 |      array([[-3.,  0.,  0.,  3.],
 |             [ 0.,  2.,  0., -4.],
 |             [ 0.,  0.,  1., -3.],
 |             [ 0.,  0.,  0.,  1.]])
 |  
 |  get_data_dtype(self)
 |      Get numpy dtype for data
 |      
 |      For examples see ``set_data_dtype``
 |  
 |  get_data_offset(self)
 |      Return offset into data file to read data
 |      
 |      Examples
 |      --------
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr.get_data_offset()
 |      0
 |      >>> hdr['vox_offset'] = 12
 |      >>> hdr.get_data_offset()
 |      12
 |  
 |  get_zooms(self)
 |      Get zooms from header
 |      
 |      Returns
 |      -------
 |      z : tuple
 |         tuple of header zoom values
 |      
 |      Examples
 |      --------
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr.get_zooms()
 |      (1.0,)
 |      >>> hdr.set_data_shape((1,2))
 |      >>> hdr.get_zooms()
 |      (1.0, 1.0)
 |      >>> hdr.set_zooms((3, 4))
 |      >>> hdr.get_zooms()
 |      (3.0, 4.0)
 |  
 |  raw_data_from_fileobj(self, fileobj)
 |      Read unscaled data array from `fileobj`
 |      
 |      Parameters
 |      ----------
 |      fileobj : file-like
 |         Must be open, and implement ``read`` and ``seek`` methods
 |      
 |      Returns
 |      -------
 |      arr : ndarray
 |         unscaled data array
 |  
 |  set_data_offset(self, offset)
 |      Set offset into data file to read data
 |  
 |  set_zooms(self, zooms)
 |      Set zooms into header fields
 |      
 |      See docstring for ``get_zooms`` for examples
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from nibabel.analyze.AnalyzeHeader:
 |  
 |  guessed_endian(hdr) from typing._ProtocolMeta
 |      Guess intended endianness from mapping-like ``hdr``
 |      
 |      Parameters
 |      ----------
 |      hdr : mapping-like
 |         hdr for which to guess endianness
 |      
 |      Returns
 |      -------
 |      endianness : {'<', '>'}
 |         Guessed endianness of header
 |      
 |      Examples
 |      --------
 |      Zeros header, no information, guess native
 |      
 |      >>> hdr = AnalyzeHeader()
 |      >>> hdr_data = np.zeros((), dtype=header_dtype)
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      
 |      A valid native header is guessed native
 |      
 |      >>> hdr_data = hdr.structarr.copy()
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      
 |      And, when swapped, is guessed as swapped
 |      
 |      >>> sw_hdr_data = hdr_data.byteswap(swapped_code)
 |      >>> AnalyzeHeader.guessed_endian(sw_hdr_data) == swapped_code
 |      True
 |      
 |      The algorithm is as follows:
 |      
 |      First, look at the first value in the ``dim`` field; this
 |      should be between 0 and 7.  If it is between 1 and 7, then
 |      this must be a native endian header.
 |      
 |      >>> hdr_data = np.zeros((), dtype=header_dtype) # blank binary data
 |      >>> hdr_data['dim'][0] = 1
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      >>> hdr_data['dim'][0] = 6
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      >>> hdr_data['dim'][0] = -1
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == swapped_code
 |      True
 |      
 |      If the first ``dim`` value is zeros, we need a tie breaker.
 |      In that case we check the ``sizeof_hdr`` field.  This should
 |      be 348.  If it looks like the byteswapped value of 348,
 |      assumed swapped.  Otherwise assume native.
 |      
 |      >>> hdr_data = np.zeros((), dtype=header_dtype) # blank binary data
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      >>> hdr_data['sizeof_hdr'] = 1543569408
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == swapped_code
 |      True
 |      >>> hdr_data['sizeof_hdr'] = -1
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |      
 |      This is overridden by the ``dim[0]`` value though:
 |      
 |      >>> hdr_data['sizeof_hdr'] = 1543569408
 |      >>> hdr_data['dim'][0] = 1
 |      >>> AnalyzeHeader.guessed_endian(hdr_data) == native_code
 |      True
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from nibabel.analyze.AnalyzeHeader:
 |  
 |  default_x_flip = True
 |  
 |  sizeof_hdr = 348
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from nibabel.wrapstruct.LabeledWrapStruct:
 |  
 |  __str__(self)
 |      Return string representation for printing
 |  
 |  get_value_label(self, fieldname)
 |      Returns label for coded field
 |      
 |      A coded field is an int field containing codes that stand for
 |      discrete values that also have string labels.
 |      
 |      Parameters
 |      ----------
 |      fieldname : str
 |         name of header field to get label for
 |      
 |      Returns
 |      -------
 |      label : str
 |         label for code value in header field `fieldname`
 |      
 |      Raises
 |      ------
 |      ValueError
 |          if field is not coded.
 |      
 |      Examples
 |      --------
 |      >>> from nibabel.volumeutils import Recoder
 |      >>> recoder = Recoder(((1, 'one'), (2, 'two')), ('code', 'label'))
 |      >>> class C(LabeledWrapStruct):
 |      ...     template_dtype = np.dtype([('datatype', 'i2')])
 |      ...     _field_recoders = dict(datatype = recoder)
 |      >>> hdr  = C()
 |      >>> hdr.get_value_label('datatype')
 |      '<unknown code 0>'
 |      >>> hdr['datatype'] = 2
 |      >>> hdr.get_value_label('datatype')
 |      'two'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from nibabel.wrapstruct.LabeledWrapStruct:
 |  
 |  __annotations__ = {'_field_recoders': 'dict[str, Recoder]'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  __eq__(self, other)
 |      equality between two structures defined by binaryblock
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> wstr2 = WrapStruct()
 |      >>> wstr == wstr2
 |      True
 |      >>> wstr3 = WrapStruct(endianness=swapped_code)
 |      >>> wstr == wstr3
 |      True
 |  
 |  __getitem__(self, item)
 |      Return values from structure data
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> wstr['integer'] == 0
 |      True
 |  
 |  __iter__(self)
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __setitem__(self, item, value)
 |      Set values in structured data
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> wstr['integer'] = 3
 |      >>> wstr['integer']
 |      array(3, dtype=int16)
 |  
 |  as_byteswapped(self, endianness=None)
 |      return new byteswapped object with given ``endianness``
 |      
 |      Guaranteed to make a copy even if endianness is the same as
 |      the current endianness.
 |      
 |      Parameters
 |      ----------
 |      endianness : None or string, optional
 |         endian code to which to swap.  None means swap from current
 |         endianness, and is the default
 |      
 |      Returns
 |      -------
 |      wstr : ``WrapStruct``
 |         ``WrapStruct`` object with given endianness
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> wstr.endianness == native_code
 |      True
 |      >>> bs_wstr = wstr.as_byteswapped()
 |      >>> bs_wstr.endianness == swapped_code
 |      True
 |      >>> bs_wstr = wstr.as_byteswapped(swapped_code)
 |      >>> bs_wstr.endianness == swapped_code
 |      True
 |      >>> bs_wstr is wstr
 |      False
 |      >>> bs_wstr == wstr
 |      True
 |      
 |      If you write to the resulting byteswapped data, it does not
 |      change the original.
 |      
 |      >>> bs_wstr['integer'] = 3
 |      >>> bs_wstr == wstr
 |      False
 |      
 |      If you swap to the same endianness, it returns a copy
 |      
 |      >>> nbs_wstr = wstr.as_byteswapped(native_code)
 |      >>> nbs_wstr.endianness == native_code
 |      True
 |      >>> nbs_wstr is wstr
 |      False
 |  
 |  check_fix(self, logger=None, error_level=None)
 |      Check structured data with checks
 |      
 |      Parameters
 |      ----------
 |      logger : None or logging.Logger
 |      error_level : None or int
 |          Level of error severity at which to raise error.  Any error of
 |          severity >= `error_level` will cause an exception.
 |  
 |  get(self, k, d=None)
 |      Return value for the key k if present or d otherwise
 |  
 |  items(self)
 |      Return items from structured data
 |  
 |  keys(self)
 |      Return keys from structured data
 |  
 |  values(self)
 |      Return values from structured data
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  diagnose_binaryblock(binaryblock, endianness=None) from typing._ProtocolMeta
 |      Run checks over binary data, return string
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  binaryblock
 |      binary block of data as string
 |      
 |      Returns
 |      -------
 |      binaryblock : string
 |          string giving binary data block
 |      
 |      Examples
 |      --------
 |      >>> # Make default empty structure
 |      >>> wstr = WrapStruct()
 |      >>> len(wstr.binaryblock)
 |      2
 |  
 |  endianness
 |      endian code of binary data
 |      
 |      The endianness code gives the current byte order
 |      interpretation of the binary data.
 |      
 |      Examples
 |      --------
 |      >>> wstr = WrapStruct()
 |      >>> code = wstr.endianness
 |      >>> code == native_code
 |      True
 |      
 |      Notes
 |      -----
 |      Endianness gives endian interpretation of binary data. It is
 |      read only because the only common use case is to set the
 |      endianness on initialization, or occasionally byteswapping the
 |      data - but this is done via the as_byteswapped method
 |  
 |  structarr
 |      Structured data, with data fields
 |      
 |      Examples
 |      --------
 |      >>> wstr1 = WrapStruct() # with default data
 |      >>> an_int = wstr1.structarr['integer']
 |      >>> wstr1.structarr = None
 |      Traceback (most recent call last):
 |         ...
 |      AttributeError: ...
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from nibabel.wrapstruct.WrapStruct:
 |  
 |  __hash__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from nibabel.spatialimages.SpatialHeader:
 |  
 |  data_layout = 'F'
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Protocol:
 |  
 |  __init_subclass__(*args, **kwargs) from typing._ProtocolMeta
 |      This method is called when a class is subclassed.
 |      
 |      The default implementation does nothing. It may be
 |      overridden to extend subclasses.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Generic:
 |  
 |  __class_getitem__(params) from typing._ProtocolMeta

None
&&&&&&&&&&&&&&&&&&&&&&&&& in_memory &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on bool object:

class bool(int)
 |  bool(x) -> bool
 |  
 |  Returns True when the argument x is true, False otherwise.
 |  The builtins True and False are the only two instances of the class bool.
 |  The class bool is a subclass of the class int, and cannot be subclassed.
 |  
 |  Method resolution order:
 |      bool
 |      int
 |      object
 |  
 |  Methods defined here:
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from int:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original int
 |      and with a positive denominator.
 |      
 |      >>> (10).as_integer_ratio()
 |      (10, 1)
 |      >>> (-10).as_integer_ratio()
 |      (-10, 1)
 |      >>> (0).as_integer_ratio()
 |      (0, 1)
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Determines whether two's complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from int:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Indicates whether two's complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from int:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number

None
&&&&&&&&&&&&&&&&&&&&&&&&& instance_to_filename &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method instance_to_filename in module nibabel.filebasedimages:

instance_to_filename(img: 'FileBasedImage', filename: 'FileSpec') -> 'None' method of builtins.type instance
    Save `img` in our own format, to name implied by `filename`
    
    This is a class method
    
    Parameters
    ----------
    img : ``any FileBasedImage`` instance
    
    filename : str
       Filename, implying name to which to save image.

None
&&&&&&&&&&&&&&&&&&&&&&&&& load &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_filename in module nibabel.dataobj_images:

from_filename(filename: 'FileSpec', *, mmap: "bool | ty.Literal['c', 'r']" = True, keep_file_open: 'bool | None' = None) -> 'ArrayImgT' method of builtins.type instance
    Class method to create image from filename `filename`
    
    Parameters
    ----------
    filename : str
        Filename of image to load
    mmap : {True, False, 'c', 'r'}, optional, keyword only
        `mmap` controls the use of numpy memory mapping for reading image
        array data.  If False, do not try numpy ``memmap`` for data array.
        If one of {'c', 'r'}, try numpy memmap with ``mode=mmap``.  A
        `mmap` value of True gives the same behavior as ``mmap='c'``.  If
        image data file cannot be memory-mapped, ignore `mmap` value and
        read array from file.
    keep_file_open : { None, True, False }, optional, keyword only
        `keep_file_open` controls whether a new file handle is created
        every time the image is accessed, or a single file handle is
        created and used for the lifetime of this ``ArrayProxy``. If
        ``True``, a single file handle is created and used. If ``False``,
        a new file handle is created every time the image is accessed.
        The default value (``None``) will result in the value of
        ``nibabel.arrayproxy.KEEP_FILE_OPEN_DEFAULT`` being used.
    
    Returns
    -------
    img : DataobjImage instance

None
&&&&&&&&&&&&&&&&&&&&&&&&& make_file_map &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method make_file_map in module nibabel.filebasedimages:

make_file_map(mapping: 'ty.Mapping[str, str | io.IOBase] | None' = None) -> 'FileMap' method of builtins.type instance
    Class method to make files holder for this image type
    
    Parameters
    ----------
    mapping : None or mapping, optional
       mapping with keys corresponding to image file types (such as
       'image', 'header' etc, depending on image class) and values
       that are filenames or file-like.  Default is None
    
    Returns
    -------
    file_map : dict
       dict with string keys given by first entry in tuples in
       sequence klass.files_types, and values of type FileHolder,
       where FileHolder objects have default values, other than
       those given by `mapping`

None
&&&&&&&&&&&&&&&&&&&&&&&&& makeable &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on bool object:

class bool(int)
 |  bool(x) -> bool
 |  
 |  Returns True when the argument x is true, False otherwise.
 |  The builtins True and False are the only two instances of the class bool.
 |  The class bool is a subclass of the class int, and cannot be subclassed.
 |  
 |  Method resolution order:
 |      bool
 |      int
 |      object
 |  
 |  Methods defined here:
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from int:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original int
 |      and with a positive denominator.
 |      
 |      >>> (10).as_integer_ratio()
 |      (10, 1)
 |      >>> (-10).as_integer_ratio()
 |      (-10, 1)
 |      >>> (0).as_integer_ratio()
 |      (0, 1)
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Determines whether two's complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from int:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Indicates whether two's complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from int:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number

None
&&&&&&&&&&&&&&&&&&&&&&&&& ndim &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on int object:

class int(object)
 |  int([x]) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Built-in subclasses:
 |      bool
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original int
 |      and with a positive denominator.
 |      
 |      >>> (10).as_integer_ratio()
 |      (10, 1)
 |      >>> (-10).as_integer_ratio()
 |      (-10, 1)
 |      >>> (0).as_integer_ratio()
 |      (0, 1)
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Determines whether two's complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Indicates whether two's complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number

None
&&&&&&&&&&&&&&&&&&&&&&&&& orthoview &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method orthoview in module nibabel.spatialimages:

orthoview() -> 'OrthoSlicer3D' method of nibabel.nifti1.Nifti1Image instance
    Plot the image using OrthoSlicer3D
    
    Returns
    -------
    viewer : instance of OrthoSlicer3D
        The viewer.
    
    Notes
    -----
    This requires matplotlib. If a non-interactive backend is used,
    consider using viewer.show() (equivalently plt.show()) to show
    the figure.

None
&&&&&&&&&&&&&&&&&&&&&&&&& path_maybe_image &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method path_maybe_image in module nibabel.filebasedimages:

path_maybe_image(filename: 'FileSpec', sniff: 'FileSniff | None' = None, sniff_max: 'int' = 1024) -> 'tuple[bool, FileSniff | None]' method of builtins.type instance
    Return True if `filename` may be image matching this class
    
    Parameters
    ----------
    filename : str or os.PathLike
        Filename for an image, or an image header (metadata) file.
        If `filename` points to an image data file, and the image type has
        a separate "header" file, we work out the name of the header file,
        and read from that instead of `filename`.
    sniff : None or (bytes, filename), optional
        Bytes content read from a previous call to this method, on another
        class, with metadata filename.  This allows us to read metadata
        bytes once from the image or header, and pass this read set of
        bytes to other image classes, therefore saving a repeat read of the
        metadata.  `filename` is used to validate that metadata would be
        read from the same file, re-reading if not.  None forces this
        method to read the metadata.
    sniff_max : int, optional
        The maximum number of bytes to read from the metadata.  If the
        metadata file is long enough, we read this many bytes from the
        file, otherwise we read to the end of the file.  Longer values
        sniff more of the metadata / image file, making it more likely that
        the returned sniff will be useful for later calls to
        ``path_maybe_image`` for other image classes.
    
    Returns
    -------
    maybe_image : bool
        True if `filename` may be valid for an image of this class.
    sniff : None or (bytes, filename)
        Read bytes content from found metadata.  May be None if the file
        does not appear to have useful metadata.

None
&&&&&&&&&&&&&&&&&&&&&&&&& rw &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on bool object:

class bool(int)
 |  bool(x) -> bool
 |  
 |  Returns True when the argument x is true, False otherwise.
 |  The builtins True and False are the only two instances of the class bool.
 |  The class bool is a subclass of the class int, and cannot be subclassed.
 |  
 |  Method resolution order:
 |      bool
 |      int
 |      object
 |  
 |  Methods defined here:
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from int:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original int
 |      and with a positive denominator.
 |      
 |      >>> (10).as_integer_ratio()
 |      (10, 1)
 |      >>> (-10).as_integer_ratio()
 |      (-10, 1)
 |      >>> (0).as_integer_ratio()
 |      (0, 1)
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Determines whether two's complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from int:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Indicates whether two's complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from int:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number

None
&&&&&&&&&&&&&&&&&&&&&&&&& set_data_dtype &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_data_dtype in module nibabel.nifti1:

set_data_dtype(datatype) method of nibabel.nifti1.Nifti1Image instance
    Set numpy dtype for data from code, dtype, type or alias
    
    Using :py:class:`int` or ``"int"`` is disallowed, as these types
    will be interpreted as ``np.int64``, which is almost never desired.
    ``np.int64`` is permitted for those intent on making poor choices.
    
    The following aliases are defined to allow for flexible specification:
    
      * ``'mask'`` - Alias for ``uint8``
      * ``'compat'`` - The nearest Analyze-compatible datatype
        (``uint8``, ``int16``, ``int32``, ``float32``)
      * ``'smallest'`` - The smallest Analyze-compatible integer
        (``uint8``, ``int16``, ``int32``)
    
    Dynamic aliases are resolved when ``get_data_dtype()`` is called
    with a ``finalize=True`` flag. Until then, these aliases are not
    written to the header and will not persist to new images.
    
    Examples
    --------
    >>> ints = np.arange(24, dtype='i4').reshape((2,3,4))
    
    >>> img = Nifti1Image(ints, np.eye(4))
    >>> img.set_data_dtype(np.uint8)
    >>> img.get_data_dtype()
    dtype('uint8')
    >>> img.set_data_dtype('mask')
    >>> img.get_data_dtype()
    dtype('uint8')
    >>> img.set_data_dtype('compat')
    >>> img.get_data_dtype()
    'compat'
    >>> img.get_data_dtype(finalize=True)
    dtype('<i4')
    >>> img.get_data_dtype()
    dtype('<i4')
    >>> img.set_data_dtype('smallest')
    >>> img.get_data_dtype()
    'smallest'
    >>> img.get_data_dtype(finalize=True)
    dtype('uint8')
    >>> img.get_data_dtype()
    dtype('uint8')
    
    Note that floating point values will not be coerced to ``int``
    
    >>> floats = np.arange(24, dtype='f4').reshape((2,3,4))
    >>> img = Nifti1Image(floats, np.eye(4))
    >>> img.set_data_dtype('smallest')
    >>> img.get_data_dtype(finalize=True)
    Traceback (most recent call last):
       ...
    ValueError: Cannot automatically cast array (of type float32) to an integer
    type with fewer than 64 bits. Please set_data_dtype() to an explicit data type.
    
    >>> arr = np.arange(1000, 1024, dtype='i4').reshape((2,3,4))
    >>> img = Nifti1Image(arr, np.eye(4))
    >>> img.set_data_dtype('smallest')
    >>> img.set_data_dtype('implausible')
    Traceback (most recent call last):
       ...
    nibabel.spatialimages.HeaderDataError: data dtype "implausible" not recognized
    >>> img.set_data_dtype('none')
    Traceback (most recent call last):
       ...
    nibabel.spatialimages.HeaderDataError: data dtype "none" known but not supported
    >>> img.set_data_dtype(np.void)
    Traceback (most recent call last):
       ...
    nibabel.spatialimages.HeaderDataError: data dtype "<class 'numpy.void'>" known
    but not supported
    >>> img.set_data_dtype('int')
    Traceback (most recent call last):
       ...
    ValueError: Invalid data type 'int'. Specify a sized integer, e.g., 'uint8' or numpy.int16.
    >>> img.set_data_dtype(int)
    Traceback (most recent call last):
       ...
    ValueError: Invalid data type <class 'int'>. Specify a sized integer, e.g., 'uint8' or
    numpy.int16.
    >>> img.set_data_dtype('int64')
    >>> img.get_data_dtype() == np.dtype('int64')
    True

None
&&&&&&&&&&&&&&&&&&&&&&&&& set_filename &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_filename in module nibabel.filebasedimages:

set_filename(filename: 'str') -> 'None' method of nibabel.nifti1.Nifti1Image instance
    Sets the files in the object from a given filename
    
    The different image formats may check whether the filename has
    an extension characteristic of the format, and raise an error if
    not.
    
    Parameters
    ----------
    filename : str or os.PathLike
       If the image format only has one file associated with it,
       this will be the only filename set into the image
       ``.file_map`` attribute. Otherwise, the image instance will
       try and guess the other filenames from this given filename.

None
&&&&&&&&&&&&&&&&&&&&&&&&& set_qform &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_qform in module nibabel.nifti1:

set_qform(affine, code=None, strip_shears=True, **kwargs) method of nibabel.nifti1.Nifti1Image instance
    Set qform header values from 4x4 affine
    
    Parameters
    ----------
    affine : None or 4x4 array
        affine transform to write into sform. If None, only set code.
    code : None, string or integer
        String or integer giving meaning of transform in *affine*.
        The default is None.  If code is None, then:
    
        * If affine is None, `code`-> 0
        * If affine not None and existing qform code in header == 0,
          `code`-> 2 (aligned)
        * If affine not None and existing qform code in header != 0,
          `code`-> existing qform code in header
    
    strip_shears : bool, optional
        Whether to strip shears in `affine`.  If True, shears will be
        silently stripped. If False, the presence of shears will raise a
        ``HeaderDataError``
    update_affine : bool, optional
        Whether to update the image affine from the header best affine
        after setting the qform. Must be keyword argument (because of
        different position in `set_qform`). Default is True
    
    See also
    --------
    get_qform
    set_sform
    
    Examples
    --------
    >>> data = np.arange(24, dtype='f4').reshape((2,3,4))
    >>> aff = np.diag([2, 3, 4, 1])
    >>> img = Nifti1Pair(data, aff)
    >>> img.get_qform()
    array([[2., 0., 0., 0.],
           [0., 3., 0., 0.],
           [0., 0., 4., 0.],
           [0., 0., 0., 1.]])
    >>> img.get_qform(coded=True)
    (None, 0)
    >>> aff2 = np.diag([3, 4, 5, 1])
    >>> img.set_qform(aff2, 'talairach')
    >>> qaff, code = img.get_qform(coded=True)
    >>> np.all(qaff == aff2)
    True
    >>> int(code)
    3

None
&&&&&&&&&&&&&&&&&&&&&&&&& set_sform &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_sform in module nibabel.nifti1:

set_sform(affine, code=None, **kwargs) method of nibabel.nifti1.Nifti1Image instance
    Set sform transform from 4x4 affine
    
    Parameters
    ----------
    affine : None or 4x4 array
        affine transform to write into sform.  If None, only set `code`
    code : None, string or integer
        String or integer giving meaning of transform in *affine*.
        The default is None.  If code is None, then:
    
        * If affine is None, `code`-> 0
        * If affine not None and existing sform code in header == 0,
          `code`-> 2 (aligned)
        * If affine not None and existing sform code in header != 0,
          `code`-> existing sform code in header
    
    update_affine : bool, optional
        Whether to update the image affine from the header best affine
        after setting the qform.  Must be keyword argument (because of
        different position in `set_qform`). Default is True
    
    See also
    --------
    get_sform
    set_qform
    
    Examples
    --------
    >>> data = np.arange(24, dtype='f4').reshape((2,3,4))
    >>> aff = np.diag([2, 3, 4, 1])
    >>> img = Nifti1Pair(data, aff)
    >>> img.get_sform()
    array([[2., 0., 0., 0.],
           [0., 3., 0., 0.],
           [0., 0., 4., 0.],
           [0., 0., 0., 1.]])
    >>> saff, code = img.get_sform(coded=True)
    >>> saff
    array([[2., 0., 0., 0.],
           [0., 3., 0., 0.],
           [0., 0., 4., 0.],
           [0., 0., 0., 1.]])
    >>> int(code)
    2
    >>> aff2 = np.diag([3, 4, 5, 1])
    >>> img.set_sform(aff2, 'talairach')
    >>> saff, code = img.get_sform(coded=True)
    >>> np.all(saff == aff2)
    True
    >>> int(code)
    3

None
&&&&&&&&&&&&&&&&&&&&&&&&& shape &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on tuple object:

class tuple(object)
 |  tuple(iterable=(), /)
 |  
 |  Built-in immutable sequence.
 |  
 |  If no argument is given, the constructor returns an empty tuple.
 |  If iterable is specified the tuple is initialized from iterable's items.
 |  
 |  If the argument is a tuple, the return value is the same object.
 |  
 |  Built-in subclasses:
 |      asyncgen_hooks
 |      UnraisableHookArgs
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.

None
&&&&&&&&&&&&&&&&&&&&&&&&& slicer &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on SpatialFirstSlicer in module nibabel.spatialimages object:

class SpatialFirstSlicer(typing.Generic)
 |  SpatialFirstSlicer(img: 'SpatialImgT')
 |  
 |  Slicing interface that returns a new image with an updated affine
 |  
 |  Checks that an image's first three axes are spatial
 |  
 |  Method resolution order:
 |      SpatialFirstSlicer
 |      typing.Generic
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getitem__(self, slicer: 'object') -> 'SpatialImgT'
 |  
 |  __init__(self, img: 'SpatialImgT')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  check_slicing(self, slicer: 'object', return_spatial: 'bool' = False) -> 'tuple[slice | int | None, ...]'
 |      Canonicalize slicers and check for scalar indices in spatial dims
 |      
 |      Parameters
 |      ----------
 |      slicer : object
 |          something that can be used to slice an array as in
 |          ``arr[sliceobj]``
 |      return_spatial : bool
 |          return only slices along spatial dimensions (x, y, z)
 |      
 |      Returns
 |      -------
 |      slicer : object
 |          Validated slicer object that will slice image's `dataobj`
 |          without collapsing spatial dimensions
 |  
 |  slice_affine(self, slicer: 'object') -> 'np.ndarray'
 |      Retrieve affine for current image, if sliced by a given index
 |      
 |      Applies scaling if down-sampling is applied, and adjusts the intercept
 |      to account for any cropping.
 |      
 |      Parameters
 |      ----------
 |      slicer : object
 |          something that can be used to slice an array as in
 |          ``arr[sliceobj]``
 |      
 |      Returns
 |      -------
 |      affine : (4,4) ndarray
 |          Affine with updated scale and intercept
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'img': 'SpatialImgT'}
 |  
 |  __orig_bases__ = (typing.Generic[~SpatialImgT],)
 |  
 |  __parameters__ = (~SpatialImgT,)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Generic:
 |  
 |  __class_getitem__(params) from builtins.type
 |  
 |  __init_subclass__(*args, **kwargs) from builtins.type
 |      This method is called when a class is subclassed.
 |      
 |      The default implementation does nothing. It may be
 |      overridden to extend subclasses.

None
&&&&&&&&&&&&&&&&&&&&&&&&& to_bytes &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_bytes in module nibabel.filebasedimages:

to_bytes(**kwargs) -> 'bytes' method of nibabel.nifti1.Nifti1Image instance
    Return a ``bytes`` object with the contents of the file that would
    be written if the image were saved.
    
    Parameters
    ----------
    \*\*kwargs : keyword arguments
        Keyword arguments that may be passed to ``img.to_file_map()``
    
    Returns
    -------
    bytes
        Serialized image

None
&&&&&&&&&&&&&&&&&&&&&&&&& to_file_map &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_file_map in module nibabel.nifti1:

to_file_map(file_map=None, dtype=None) method of nibabel.nifti1.Nifti1Image instance
    Write image to `file_map` or contained ``self.file_map``
    
    Parameters
    ----------
    file_map : None or mapping, optional
       files mapping.  If None (default) use object's ``file_map``
       attribute instead
    dtype : dtype-like, optional
       The on-disk data type to coerce the data array.

None
&&&&&&&&&&&&&&&&&&&&&&&&& to_filename &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_filename in module nibabel.filebasedimages:

to_filename(filename: 'FileSpec', **kwargs) -> 'None' method of nibabel.nifti1.Nifti1Image instance
    Write image to files implied by filename string
    
    Parameters
    ----------
    filename : str or os.PathLike
       filename to which to save image.  We will parse `filename`
       with ``filespec_to_file_map`` to work out names for image,
       header etc.
    \*\*kwargs : keyword arguments
       Keyword arguments to format-specific save
    
    Returns
    -------
    None

None
&&&&&&&&&&&&&&&&&&&&&&&&& to_stream &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_stream in module nibabel.filebasedimages:

to_stream(io_obj: 'io.IOBase', **kwargs) -> 'None' method of nibabel.nifti1.Nifti1Image instance
    Save image to writable IO stream
    
    Parameters
    ----------
    io_obj : IOBase object
        Writable stream
    \*\*kwargs : keyword arguments
        Keyword arguments that may be passed to ``img.to_file_map()``

None
&&&&&&&&&&&&&&&&&&&&&&&&& uncache &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method uncache in module nibabel.dataobj_images:

uncache() -> 'None' method of nibabel.nifti1.Nifti1Image instance
    Delete any cached read of data from proxied data
    
    Remember there are two types of images:
    
    * *array images* where the data ``img.dataobj`` is an array
    * *proxy images* where the data ``img.dataobj`` is a proxy object
    
    If you call ``img.get_fdata()`` on a proxy image, the result of reading
    from the proxy gets cached inside the image object, and this cache is
    what gets returned from the next call to ``img.get_fdata()``.  If you
    modify the returned data, as in::
    
        data = img.get_fdata()
        data[:] = 42
    
    then the next call to ``img.get_fdata()`` returns the modified array,
    whether the image is an array image or a proxy image::
    
        assert np.all(img.get_fdata() == 42)
    
    When you uncache an array image, this has no effect on the return of
    ``img.get_fdata()``, but when you uncache a proxy image, the result of
    ``img.get_fdata()`` returns to its original value.

None
&&&&&&&&&&&&&&&&&&&&&&&&& update_header &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method update_header in module nibabel.nifti1:

update_header() method of nibabel.nifti1.Nifti1Image instance
    Harmonize header with image data and affine

None
&&&&&&&&&&&&&&&&&&&&&&&&& valid_exts &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on tuple object:

class tuple(object)
 |  tuple(iterable=(), /)
 |  
 |  Built-in immutable sequence.
 |  
 |  If no argument is given, the constructor returns an empty tuple.
 |  If iterable is specified the tuple is initialized from iterable's items.
 |  
 |  If the argument is a tuple, the return value is the same object.
 |  
 |  Built-in subclasses:
 |      asyncgen_hooks
 |      UnraisableHookArgs
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.

None
