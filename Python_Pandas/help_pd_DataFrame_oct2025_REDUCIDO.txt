&&&&&&&&&&&&&&&&&&&&&&&&&&& T &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on DataFrame in module pandas.core.frame object:

class DataFrame(pandas.core.generic.NDFrame, pandas.core.arraylike.OpsMixin)
 |  DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'
 |  
 |  Two-dimensional, size-mutable, potentially heterogeneous tabular data.
 |  
 |  Data structure also contains labeled axes (rows and columns).
 |  Arithmetic operations align on both row and column labels. Can be
 |  thought of as a dict-like container for Series objects. The primary
 |  pandas data structure.
&&&&&&&&&&&&&&&&&&&&&&&&&&& abs &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method abs in module pandas.core.generic:

abs() -> 'Self' method of pandas.core.frame.DataFrame instance
    Return a Series/DataFrame with absolute numeric value of each element.
    
    This function only applies to elements that are all numeric.
    
    Returns
    -------
    abs
        Series/DataFrame containing the absolute value of each element.
&&&&&&&&&&&&&&&&&&&&&&&&&&& add &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method add in module pandas.core.frame:

add(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Addition of dataframe and other, element-wise (binary operator `add`).
    
    Equivalent to ``dataframe + other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `radd`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& add_prefix &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method add_prefix in module pandas.core.generic:

add_prefix(prefix: 'str', axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Prefix labels with string `prefix`.
    
    For Series, the row labels are prefixed.
    For DataFrame, the column labels are prefixed.
    
    Parameters
    ----------
    prefix : str
&&&&&&&&&&&&&&&&&&&&&&&&&&& add_suffix &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method add_suffix in module pandas.core.generic:

add_suffix(suffix: 'str', axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Suffix labels with string `suffix`.
    
    For Series, the row labels are suffixed.
    For DataFrame, the column labels are suffixed.
    
    Parameters
    ----------
    suffix : str
&&&&&&&&&&&&&&&&&&&&&&&&&&& agg &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method aggregate in module pandas.core.frame:

aggregate(func=None, axis: 'Axis' = 0, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Aggregate using one or more operations over the specified axis.
    
    Parameters
    ----------
    func : function, str, list or dict
        Function to use for aggregating the data. If a function, must either
        work when passed a DataFrame or when passed to DataFrame.apply.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& aggregate &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method aggregate in module pandas.core.frame:

aggregate(func=None, axis: 'Axis' = 0, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Aggregate using one or more operations over the specified axis.
    
    Parameters
    ----------
    func : function, str, list or dict
        Function to use for aggregating the data. If a function, must either
        work when passed a DataFrame or when passed to DataFrame.apply.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& align &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method align in module pandas.core.generic:

align(other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, fill_axis: 'Axis | lib.NoDefault' = <no_default>, broadcast_axis: 'Axis | None | lib.NoDefault' = <no_default>) -> 'tuple[Self, NDFrameT]' method of pandas.core.frame.DataFrame instance
    Align two objects on their axes with the specified join method.
    
    Join method is specified for each axis Index.
    
    Parameters
    ----------
    other : DataFrame or Series
    join : {'outer', 'inner', 'left', 'right'}, default 'outer'
&&&&&&&&&&&&&&&&&&&&&&&&&&& all &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method all in module pandas.core.frame:

all(axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'Series | bool' method of pandas.core.frame.DataFrame instance
    Return whether all elements are True, potentially over an axis.
    
    Returns True unless there at least one element within a series or
    along a Dataframe axis that is False or equivalent (e.g. zero or
    empty).
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& any &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method any in module pandas.core.frame:

any(*, axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'Series | bool' method of pandas.core.frame.DataFrame instance
    Return whether any element is True, potentially over an axis.
    
    Returns False unless there is at least one element within a series or
    along a Dataframe axis that is True or equivalent (e.g. non-zero or
    non-empty).
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& apply &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method apply in module pandas.core.frame:

apply(func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type: "Literal['expand', 'reduce', 'broadcast'] | None" = None, args=(), by_row: "Literal[False, 'compat']" = 'compat', engine: "Literal['python', 'numba']" = 'python', engine_kwargs: 'dict[str, bool] | None' = None, **kwargs) method of pandas.core.frame.DataFrame instance
    Apply a function along an axis of the DataFrame.
    
    Objects passed to the function are Series objects whose index is
    either the DataFrame's index (``axis=0``) or the DataFrame's columns
    (``axis=1``). By default (``result_type=None``), the final return type
    is inferred from the return type of the applied function. Otherwise,
    it depends on the `result_type` argument.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& applymap &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method applymap in module pandas.core.frame:

applymap(func: 'PythonFuncType', na_action: 'NaAction | None' = None, **kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Apply a function to a Dataframe elementwise.
    
    .. deprecated:: 2.1.0
    
       DataFrame.applymap has been deprecated. Use DataFrame.map instead.
    
    This method applies a function that accepts and returns a scalar
    to every element of a DataFrame.
&&&&&&&&&&&&&&&&&&&&&&&&&&& asfreq &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method asfreq in module pandas.core.generic:

asfreq(freq: 'Frequency', method: 'FillnaOptions | None' = None, how: "Literal['start', 'end'] | None" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Convert time series to specified frequency.
    
    Returns the original data conformed to a new index with the specified
    frequency.
    
    If the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index
    is the result of transforming the original index with
    :meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index
&&&&&&&&&&&&&&&&&&&&&&&&&&& asof &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method asof in module pandas.core.generic:

asof(where, subset=None) method of pandas.core.frame.DataFrame instance
    Return the last row(s) without any NaNs before `where`.
    
    The last row (for each element in `where`, if list) without any
    NaN is taken.
    In case of a :class:`~pandas.DataFrame`, the last row without NaN
    considering only the subset of columns (if not `None`)
    
    If there is no good value, NaN is returned for a Series or
&&&&&&&&&&&&&&&&&&&&&&&&&&& assign &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method assign in module pandas.core.frame:

assign(**kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Assign new columns to a DataFrame.
    
    Returns a new object with all original columns in addition to new ones.
    Existing columns that are re-assigned will be overwritten.
    
    Parameters
    ----------
    **kwargs : dict of {str: callable or Series}
&&&&&&&&&&&&&&&&&&&&&&&&&&& astype &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method astype in module pandas.core.generic:

astype(dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -> 'Self' method of pandas.core.frame.DataFrame instance
    Cast a pandas object to a specified dtype ``dtype``.
    
    Parameters
    ----------
    dtype : str, data type, Series or Mapping of column name -> data type
        Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to
        cast entire pandas object to the same type. Alternatively, use a
        mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is
&&&&&&&&&&&&&&&&&&&&&&&&&&& at &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on _AtIndexer in module pandas.core.indexing object:

class _AtIndexer(_ScalarAccessIndexer)
 |  Access a single value for a row/column label pair.
 |  
 |  Similar to ``loc``, in that both provide label-based lookups. Use
 |  ``at`` if you only need to get or set a single value in a DataFrame
 |  or Series.
 |  
 |  Raises
 |  ------
&&&&&&&&&&&&&&&&&&&&&&&&&&& at_time &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method at_time in module pandas.core.generic:

at_time(time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Select values at particular time of day (e.g., 9:30AM).
    
    Parameters
    ----------
    time : datetime.time or str
        The values to select.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        For `Series` this parameter is unused and defaults to 0.
&&&&&&&&&&&&&&&&&&&&&&&&&&& attrs &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on dict object:

class dict(object)
 |  dict() -> new empty dictionary
 |  dict(mapping) -> new dictionary initialized from a mapping object's
 |      (key, value) pairs
 |  dict(iterable) -> new dictionary initialized as if via:
 |      d = {}
 |      for k, v in iterable:
 |          d[k] = v
 |  dict(**kwargs) -> new dictionary initialized with the name=value pairs
&&&&&&&&&&&&&&&&&&&&&&&&&&& axes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on list object:

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
&&&&&&&&&&&&&&&&&&&&&&&&&&& backfill &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method backfill in module pandas.core.generic:

backfill(*, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values by using the next valid observation to fill the gap.
    
    .. deprecated:: 2.0
    
        Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.
    
    Returns
    -------
&&&&&&&&&&&&&&&&&&&&&&&&&&& between_time &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method between_time in module pandas.core.generic:

between_time(start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Select values between particular times of the day (e.g., 9:00-9:30 AM).
    
    By setting ``start_time`` to be later than ``end_time``,
    you can get the times that are *not* between the two times.
    
    Parameters
    ----------
    start_time : datetime.time or str
&&&&&&&&&&&&&&&&&&&&&&&&&&& bfill &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method bfill in module pandas.core.generic:

bfill(*, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values by using the next valid observation to fill the gap.
    
    Parameters
    ----------
    axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
        Axis along which to fill missing values. For `Series`
        this parameter is unused and defaults to 0.
    inplace : bool, default False
&&&&&&&&&&&&&&&&&&&&&&&&&&& bool &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method bool in module pandas.core.generic:

bool() -> 'bool_t' method of pandas.core.frame.DataFrame instance
    Return the bool of a single element Series or DataFrame.
    
    .. deprecated:: 2.1.0
    
       bool is deprecated and will be removed in future version of pandas.
       For ``Series`` use ``pandas.Series.item``.
    
    This must be a boolean scalar value, either True or False. It will raise a
&&&&&&&&&&&&&&&&&&&&&&&&&&& boxplot &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method boxplot_frame in module pandas.plotting._core:

boxplot_frame(column=None, by=None, ax=None, fontsize: 'int | None' = None, rot: 'int' = 0, grid: 'bool' = True, figsize: 'tuple[float, float] | None' = None, layout=None, return_type=None, backend=None, **kwargs) method of pandas.core.frame.DataFrame instance
    Make a box plot from DataFrame columns.
    
    Make a box-and-whisker plot from DataFrame columns, optionally grouped
    by some other columns. A box plot is a method for graphically depicting
    groups of numerical data through their quartiles.
    The box extends from the Q1 to Q3 quartile values of the data,
    with a line at the median (Q2). The whiskers extend from the edges
    of box to show the range of the data. By default, they extend no more than
&&&&&&&&&&&&&&&&&&&&&&&&&&& clip &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method clip in module pandas.core.generic:

clip(lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Trim values at input threshold(s).
    
    Assigns values outside boundary to boundary values. Thresholds
    can be singular values or array like, and in the latter case
    the clipping is performed element-wise in the specified axis.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& columns &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Index in module pandas.core.indexes.base object:

class Index(pandas.core.base.IndexOpsMixin, pandas.core.base.PandasObject)
 |  Index(data=None, dtype=None, copy: 'bool' = False, name=None, tupleize_cols: 'bool' = True) -> 'Self'
 |  
 |  Immutable sequence used for indexing and alignment.
 |  
 |  The basic object storing axis labels for all pandas objects.
 |  
 |  .. versionchanged:: 2.0.0
 |  
&&&&&&&&&&&&&&&&&&&&&&&&&&& combine &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method combine in module pandas.core.frame:

combine(other: 'DataFrame', func: 'Callable[[Series, Series], Series | Hashable]', fill_value=None, overwrite: 'bool' = True) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Perform column-wise combine with another DataFrame.
    
    Combines a DataFrame with `other` DataFrame using `func`
    to element-wise combine columns. The row and column indexes of the
    resulting DataFrame will be the union of the two.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& combine_first &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method combine_first in module pandas.core.frame:

combine_first(other: 'DataFrame') -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Update null elements with value in the same location in `other`.
    
    Combine two DataFrame objects by filling null values in one DataFrame
    with non-null values from other DataFrame. The row and column indexes
    of the resulting DataFrame will be the union of the two. The resulting
    dataframe contains the 'first' dataframe values and overrides the
    second one values where both first.loc[index, col] and
    second.loc[index, col] are not missing values, upon calling
&&&&&&&&&&&&&&&&&&&&&&&&&&& compare &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method compare in module pandas.core.frame:

compare(other: 'DataFrame', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Compare to another DataFrame and show the differences.
    
    Parameters
    ----------
    other : DataFrame
        Object to compare with.
    
    align_axis : {0 or 'index', 1 or 'columns'}, default 1
&&&&&&&&&&&&&&&&&&&&&&&&&&& convert_dtypes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method convert_dtypes in module pandas.core.generic:

convert_dtypes(infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -> 'Self' method of pandas.core.frame.DataFrame instance
    Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.
    
    Parameters
    ----------
    infer_objects : bool, default True
        Whether object dtypes should be converted to the best possible types.
    convert_string : bool, default True
        Whether object dtypes should be converted to ``StringDtype()``.
&&&&&&&&&&&&&&&&&&&&&&&&&&& copy &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method copy in module pandas.core.generic:

copy(deep: 'bool_t | None' = True) -> 'Self' method of pandas.core.frame.DataFrame instance
    Make a copy of this object's indices and data.
    
    When ``deep=True`` (default), a new object will be created with a
    copy of the calling object's data and indices. Modifications to
    the data or indices of the copy will not be reflected in the
    original object (see notes below).
    
    When ``deep=False``, a new object will be created without copying
&&&&&&&&&&&&&&&&&&&&&&&&&&& corr &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method corr in module pandas.core.frame:

corr(method: 'CorrelationMethod' = 'pearson', min_periods: 'int' = 1, numeric_only: 'bool' = False) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Compute pairwise correlation of columns, excluding NA/null values.
    
    Parameters
    ----------
    method : {'pearson', 'kendall', 'spearman'} or callable
        Method of correlation:
    
        * pearson : standard correlation coefficient
&&&&&&&&&&&&&&&&&&&&&&&&&&& corrwith &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method corrwith in module pandas.core.frame:

corrwith(other: 'DataFrame | Series', axis: 'Axis' = 0, drop: 'bool' = False, method: 'CorrelationMethod' = 'pearson', numeric_only: 'bool' = False) -> 'Series' method of pandas.core.frame.DataFrame instance
    Compute pairwise correlation.
    
    Pairwise correlation is computed between rows or columns of
    DataFrame with rows or columns of Series or DataFrame. DataFrames
    are first aligned along both axes before computing the
    correlations.
    
    Parameters
&&&&&&&&&&&&&&&&&&&&&&&&&&& count &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method count in module pandas.core.frame:

count(axis: 'Axis' = 0, numeric_only: 'bool' = False) method of pandas.core.frame.DataFrame instance
    Count non-NA cells for each column or row.
    
    The values `None`, `NaN`, `NaT`, ``pandas.NA`` are considered NA.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        If 0 or 'index' counts are generated for each column.
&&&&&&&&&&&&&&&&&&&&&&&&&&& cov &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cov in module pandas.core.frame:

cov(min_periods: 'int | None' = None, ddof: 'int | None' = 1, numeric_only: 'bool' = False) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Compute pairwise covariance of columns, excluding NA/null values.
    
    Compute the pairwise covariance among the series of a DataFrame.
    The returned data frame is the `covariance matrix
    <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns
    of the DataFrame.
    
    Both NA and null values are automatically excluded from the
&&&&&&&&&&&&&&&&&&&&&&&&&&& cummax &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cummax in module pandas.core.frame:

cummax(axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Return cumulative maximum over a DataFrame or Series axis.
    
    Returns a DataFrame or Series of the same size containing the cumulative
    maximum.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& cummin &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cummin in module pandas.core.frame:

cummin(axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Return cumulative minimum over a DataFrame or Series axis.
    
    Returns a DataFrame or Series of the same size containing the cumulative
    minimum.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& cumprod &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cumprod in module pandas.core.frame:

cumprod(axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Return cumulative product over a DataFrame or Series axis.
    
    Returns a DataFrame or Series of the same size containing the cumulative
    product.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& cumsum &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cumsum in module pandas.core.frame:

cumsum(axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Return cumulative sum over a DataFrame or Series axis.
    
    Returns a DataFrame or Series of the same size containing the cumulative
    sum.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& describe &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method describe in module pandas.core.generic:

describe(percentiles=None, include=None, exclude=None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Generate descriptive statistics.
    
    Descriptive statistics include those that summarize the central
    tendency, dispersion and shape of a
    dataset's distribution, excluding ``NaN`` values.
    
    Analyzes both numeric and object series, as well
    as ``DataFrame`` column sets of mixed data types. The output
&&&&&&&&&&&&&&&&&&&&&&&&&&& diff &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method diff in module pandas.core.frame:

diff(periods: 'int' = 1, axis: 'Axis' = 0) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    First discrete difference of element.
    
    Calculates the difference of a DataFrame element compared with another
    element in the DataFrame (default is element in previous row).
    
    Parameters
    ----------
    periods : int, default 1
&&&&&&&&&&&&&&&&&&&&&&&&&&& div &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method truediv in module pandas.core.frame:

truediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `truediv`).
    
    Equivalent to ``dataframe / other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rtruediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& divide &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method truediv in module pandas.core.frame:

truediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `truediv`).
    
    Equivalent to ``dataframe / other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rtruediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& dot &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method dot in module pandas.core.frame:

dot(other: 'AnyArrayLike | DataFrame') -> 'DataFrame | Series' method of pandas.core.frame.DataFrame instance
    Compute the matrix multiplication between the DataFrame and other.
    
    This method computes the matrix product between the DataFrame and the
    values of an other Series, DataFrame or a numpy array.
    
    It can also be called using ``self @ other``.
    
    Parameters
&&&&&&&&&&&&&&&&&&&&&&&&&&& drop &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method drop in module pandas.core.frame:

drop(labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Drop specified labels from rows or columns.
    
    Remove rows or columns by specifying label names and corresponding
    axis, or by directly specifying index or column names. When using a
    multi-index, labels on different levels can be removed by specifying
    the level. See the :ref:`user guide <advanced.shown_levels>`
    for more information about the now unused levels.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& drop_duplicates &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method drop_duplicates in module pandas.core.frame:

drop_duplicates(subset: 'Hashable | Sequence[Hashable] | None' = None, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Return DataFrame with duplicate rows removed.
    
    Considering certain columns is optional. Indexes, including time indexes
    are ignored.
    
    Parameters
    ----------
    subset : column label or sequence of labels, optional
&&&&&&&&&&&&&&&&&&&&&&&&&&& droplevel &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method droplevel in module pandas.core.generic:

droplevel(level: 'IndexLabel', axis: 'Axis' = 0) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return Series/DataFrame with requested index / column level(s) removed.
    
    Parameters
    ----------
    level : int, str, or list-like
        If a string is given, must be the name of a level
        If list-like, elements must be names or positional indexes
        of levels.
&&&&&&&&&&&&&&&&&&&&&&&&&&& dropna &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method dropna in module pandas.core.frame:

dropna(*, axis: 'Axis' = 0, how: 'AnyAll | lib.NoDefault' = <no_default>, thresh: 'int | lib.NoDefault' = <no_default>, subset: 'IndexLabel | None' = None, inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Remove missing values.
    
    See the :ref:`User Guide <missing_data>` for more on which values are
    considered missing, and how to work with missing data.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& dtypes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Series in module pandas.core.series object:

class Series(pandas.core.base.IndexOpsMixin, pandas.core.generic.NDFrame)
 |  Series(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'
 |  
 |  One-dimensional ndarray with axis labels (including time series).
 |  
 |  Labels need not be unique but must be a hashable type. The object
 |  supports both integer- and label-based indexing and provides a host of
 |  methods for performing operations involving the index. Statistical
 |  methods from ndarray have been overridden to automatically exclude
&&&&&&&&&&&&&&&&&&&&&&&&&&& duplicated &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method duplicated in module pandas.core.frame:

duplicated(subset: 'Hashable | Sequence[Hashable] | None' = None, keep: 'DropKeep' = 'first') -> 'Series' method of pandas.core.frame.DataFrame instance
    Return boolean Series denoting duplicate rows.
    
    Considering certain columns is optional.
    
    Parameters
    ----------
    subset : column label or sequence of labels, optional
        Only consider certain columns for identifying duplicates, by
&&&&&&&&&&&&&&&&&&&&&&&&&&& empty &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on bool object:

class bool(int)
 |  bool(x) -> bool
 |  
 |  Returns True when the argument x is true, False otherwise.
 |  The builtins True and False are the only two instances of the class bool.
 |  The class bool is a subclass of the class int, and cannot be subclassed.
 |  
 |  Method resolution order:
 |      bool
&&&&&&&&&&&&&&&&&&&&&&&&&&& eq &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method eq in module pandas.core.frame:

eq(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Equal to of dataframe and other, element-wise (binary operator `eq`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& equals &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method equals in module pandas.core.generic:

equals(other: 'object') -> 'bool_t' method of pandas.core.frame.DataFrame instance
    Test whether two objects contain the same elements.
    
    This function allows two Series or DataFrames to be compared against
    each other to see if they have the same shape and elements. NaNs in
    the same location are considered equal.
    
    The row/column index do not need to have the same type, as long
    as the values are considered equal. Corresponding columns and
&&&&&&&&&&&&&&&&&&&&&&&&&&& eval &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method eval in module pandas.core.frame:

eval(expr: 'str', *, inplace: 'bool' = False, **kwargs) -> 'Any | None' method of pandas.core.frame.DataFrame instance
    Evaluate a string describing operations on DataFrame columns.
    
    Operates on columns only, not specific rows or elements.  This allows
    `eval` to run arbitrary code, which can make you vulnerable to code
    injection if you pass user input to this function.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& ewm &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method ewm in module pandas.core.generic:

ewm(com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = <no_default>, times: 'np.ndarray | DataFrame | Series | None' = None, method: "Literal['single', 'table']" = 'single') -> 'ExponentialMovingWindow' method of pandas.core.frame.DataFrame instance
    Provide exponentially weighted (EW) calculations.
    
    Exactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be
    provided if ``times`` is not provided. If ``times`` is provided,
    ``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& expanding &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method expanding in module pandas.core.generic:

expanding(min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = <no_default>, method: "Literal['single', 'table']" = 'single') -> 'Expanding' method of pandas.core.frame.DataFrame instance
    Provide expanding window calculations.
    
    Parameters
    ----------
    min_periods : int, default 1
        Minimum number of observations in window required to have a value;
        otherwise, result is ``np.nan``.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& explode &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method explode in module pandas.core.frame:

explode(column: 'IndexLabel', ignore_index: 'bool' = False) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Transform each element of a list-like to a row, replicating index values.
    
    Parameters
    ----------
    column : IndexLabel
        Column(s) to explode.
        For multiple columns, specify a non-empty list with each element
        be str or tuple, and all specified columns their list-like data
&&&&&&&&&&&&&&&&&&&&&&&&&&& ffill &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method ffill in module pandas.core.generic:

ffill(*, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values by propagating the last valid observation to next valid.
    
    Parameters
    ----------
    axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
        Axis along which to fill missing values. For `Series`
        this parameter is unused and defaults to 0.
    inplace : bool, default False
&&&&&&&&&&&&&&&&&&&&&&&&&&& fillna &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method fillna in module pandas.core.generic:

fillna(value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values using the specified method.
    
    Parameters
    ----------
    value : scalar, dict, Series, or DataFrame
        Value to use to fill holes (e.g. 0), alternately a
        dict/Series/DataFrame of values specifying which value to use for
        each index (for a Series) or column (for a DataFrame).  Values not
&&&&&&&&&&&&&&&&&&&&&&&&&&& filter &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method filter in module pandas.core.generic:

filter(items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Subset the dataframe rows or columns according to the specified index labels.
    
    Note that this routine does not filter a dataframe on its
    contents. The filter is applied to the labels of the index.
    
    Parameters
    ----------
    items : list-like
&&&&&&&&&&&&&&&&&&&&&&&&&&& first &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method first in module pandas.core.generic:

first(offset) -> 'Self' method of pandas.core.frame.DataFrame instance
    Select initial periods of time series data based on a date offset.
    
    .. deprecated:: 2.1
        :meth:`.first` is deprecated and will be removed in a future version.
        Please create a mask and filter using `.loc` instead.
    
    For a DataFrame with a sorted DatetimeIndex, this function can
    select the first few rows based on a date offset.
&&&&&&&&&&&&&&&&&&&&&&&&&&& first_valid_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method first_valid_index in module pandas.core.generic:

first_valid_index() -> 'Hashable | None' method of pandas.core.frame.DataFrame instance
    Return index for first non-NA value or None, if no non-NA value is found.
    
    Returns
    -------
    type of index
    
    Examples
    --------
&&&&&&&&&&&&&&&&&&&&&&&&&&& flags &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Flags in module pandas.core.flags object:

class Flags(builtins.object)
 |  Flags(obj: 'NDFrame', *, allows_duplicate_labels: 'bool') -> 'None'
 |  
 |  Flags that apply to pandas objects.
 |  
 |  Parameters
 |  ----------
 |  obj : Series or DataFrame
 |      The object these flags are associated with.
&&&&&&&&&&&&&&&&&&&&&&&&&&& floordiv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method floordiv in module pandas.core.frame:

floordiv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Integer division of dataframe and other, element-wise (binary operator `floordiv`).
    
    Equivalent to ``dataframe // other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rfloordiv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& from_dict &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_dict in module pandas.core.frame:

from_dict(data: 'dict', orient: 'FromDictOrient' = 'columns', dtype: 'Dtype | None' = None, columns: 'Axes | None' = None) -> 'DataFrame' method of builtins.type instance
    Construct DataFrame from dict of array-like or dicts.
    
    Creates DataFrame object from dictionary by columns or by index
    allowing dtype specification.
    
    Parameters
    ----------
    data : dict
&&&&&&&&&&&&&&&&&&&&&&&&&&& from_records &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_records in module pandas.core.frame:

from_records(data, index=None, exclude=None, columns=None, coerce_float: 'bool' = False, nrows: 'int | None' = None) -> 'DataFrame' method of builtins.type instance
    Convert structured or record ndarray to DataFrame.
    
    Creates a DataFrame object from a structured ndarray, sequence of
    tuples or dicts, or DataFrame.
    
    Parameters
    ----------
    data : structured ndarray, sequence of tuples or dicts, or DataFrame
&&&&&&&&&&&&&&&&&&&&&&&&&&& ge &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method ge in module pandas.core.frame:

ge(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Greater than or equal to of dataframe and other, element-wise (binary operator `ge`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& get &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method get in module pandas.core.generic:

get(key, default=None) method of pandas.core.frame.DataFrame instance
    Get item from object for given key (ex: DataFrame column).
    
    Returns default value if not found.
    
    Parameters
    ----------
    key : object
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& groupby &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method groupby in module pandas.core.frame:

groupby(by=None, axis: 'Axis | lib.NoDefault' = <no_default>, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = <no_default>, dropna: 'bool' = True) -> 'DataFrameGroupBy' method of pandas.core.frame.DataFrame instance
    Group DataFrame using a mapper or by a Series of columns.
    
    A groupby operation involves some combination of splitting the
    object, applying a function, and combining the results. This can be
    used to group large amounts of data and compute operations on these
    groups.
    
    Parameters
&&&&&&&&&&&&&&&&&&&&&&&&&&& gt &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method gt in module pandas.core.frame:

gt(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Greater than of dataframe and other, element-wise (binary operator `gt`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& head &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method head in module pandas.core.generic:

head(n: 'int' = 5) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return the first `n` rows.
    
    This function returns the first `n` rows for the object based
    on position. It is useful for quickly testing if your object
    has the right type of data in it.
    
    For negative values of `n`, this function returns all rows except
    the last `|n|` rows, equivalent to ``df[:n]``.
&&&&&&&&&&&&&&&&&&&&&&&&&&& hist &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method hist_frame in module pandas.plotting._core:

hist_frame(column: 'IndexLabel | None' = None, by=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, ax=None, sharex: 'bool' = False, sharey: 'bool' = False, figsize: 'tuple[int, int] | None' = None, layout: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Make a histogram of the DataFrame's columns.
    
    A `histogram`_ is a representation of the distribution of data.
    This function calls :meth:`matplotlib.pyplot.hist`, on each series in
    the DataFrame, resulting in one histogram per column.
    
    .. _histogram: https://en.wikipedia.org/wiki/Histogram
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& iat &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on _iAtIndexer in module pandas.core.indexing object:

class _iAtIndexer(_ScalarAccessIndexer)
 |  Access a single value for a row/column pair by integer position.
 |  
 |  Similar to ``iloc``, in that both provide integer-based lookups. Use
 |  ``iat`` if you only need to get or set a single value in a DataFrame
 |  or Series.
 |  
 |  Raises
 |  ------
&&&&&&&&&&&&&&&&&&&&&&&&&&& idxmax &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method idxmax in module pandas.core.frame:

idxmax(axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -> 'Series' method of pandas.core.frame.DataFrame instance
    Return index of first occurrence of maximum over requested axis.
    
    NA/null values are excluded.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
&&&&&&&&&&&&&&&&&&&&&&&&&&& idxmin &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method idxmin in module pandas.core.frame:

idxmin(axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -> 'Series' method of pandas.core.frame.DataFrame instance
    Return index of first occurrence of minimum over requested axis.
    
    NA/null values are excluded.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
&&&&&&&&&&&&&&&&&&&&&&&&&&& iloc &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on _iLocIndexer in module pandas.core.indexing object:

class _iLocIndexer(_LocationIndexer)
 |  Purely integer-location based indexing for selection by position.
 |  
 |  .. deprecated:: 2.2.0
 |  
 |     Returning a tuple from a callable is deprecated.
 |  
 |  ``.iloc[]`` is primarily integer position based (from ``0`` to
 |  ``length-1`` of the axis), but may also be used with a boolean
&&&&&&&&&&&&&&&&&&&&&&&&&&& index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on RangeIndex in module pandas.core.indexes.range object:

class RangeIndex(pandas.core.indexes.base.Index)
 |  RangeIndex(start=None, stop=None, step=None, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None) -> 'Self'
 |  
 |  Immutable Index implementing a monotonic integer range.
 |  
 |  RangeIndex is a memory-saving special case of an Index limited to representing
 |  monotonic ranges with a 64-bit dtype. Using RangeIndex may in some instances
 |  improve computing speed.
 |  
&&&&&&&&&&&&&&&&&&&&&&&&&&& infer_objects &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method infer_objects in module pandas.core.generic:

infer_objects(copy: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Attempt to infer better dtypes for object columns.
    
    Attempts soft conversion of object-dtyped
    columns, leaving non-object and unconvertible
    columns unchanged. The inference rules are the
    same as during normal Series/DataFrame construction.
    
    Parameters
&&&&&&&&&&&&&&&&&&&&&&&&&&& info &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method info in module pandas.core.frame:

info(verbose: 'bool | None' = None, buf: 'WriteBuffer[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool | None' = None) -> 'None' method of pandas.core.frame.DataFrame instance
    Print a concise summary of a DataFrame.
    
    This method prints information about a DataFrame including
    the index dtype and columns, non-null values and memory usage.
    
    Parameters
    ----------
    verbose : bool, optional
&&&&&&&&&&&&&&&&&&&&&&&&&&& insert &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method insert in module pandas.core.frame:

insert(loc: 'int', column: 'Hashable', value: 'Scalar | AnyArrayLike', allow_duplicates: 'bool | lib.NoDefault' = <no_default>) -> 'None' method of pandas.core.frame.DataFrame instance
    Insert column into DataFrame at specified location.
    
    Raises a ValueError if `column` is already contained in the DataFrame,
    unless `allow_duplicates` is set to True.
    
    Parameters
    ----------
    loc : int
&&&&&&&&&&&&&&&&&&&&&&&&&&& interpolate &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method interpolate in module pandas.core.generic:

interpolate(method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: "Literal['forward', 'backward', 'both'] | None" = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: "Literal['infer'] | None | lib.NoDefault" = <no_default>, **kwargs) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NaN values using an interpolation method.
    
    Please note that only ``method='linear'`` is supported for
    DataFrame/Series with a MultiIndex.
    
    Parameters
    ----------
    method : str, default 'linear'
&&&&&&&&&&&&&&&&&&&&&&&&&&& isetitem &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method isetitem in module pandas.core.frame:

isetitem(loc, value) -> 'None' method of pandas.core.frame.DataFrame instance
    Set the given value in the column with position `loc`.
    
    This is a positional analogue to ``__setitem__``.
    
    Parameters
    ----------
    loc : int or sequence of ints
        Index position for the column.
&&&&&&&&&&&&&&&&&&&&&&&&&&& isin &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method isin in module pandas.core.frame:

isin(values: 'Series | DataFrame | Sequence | Mapping') -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Whether each element in the DataFrame is contained in values.
    
    Parameters
    ----------
    values : iterable, Series, DataFrame or dict
        The result will only be true at a location if all the
        labels match. If `values` is a Series, that's the index. If
        `values` is a dict, the keys must be the column names,
&&&&&&&&&&&&&&&&&&&&&&&&&&& isna &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method isna in module pandas.core.frame:

isna() -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Detect missing values.
    
    Return a boolean same-sized object indicating if the values are NA.
    NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
    values.
    Everything else gets mapped to False values. Characters such as empty
    strings ``''`` or :attr:`numpy.inf` are not considered NA values
    (unless you set ``pandas.options.mode.use_inf_as_na = True``).
&&&&&&&&&&&&&&&&&&&&&&&&&&& isnull &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method isnull in module pandas.core.frame:

isnull() -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    DataFrame.isnull is an alias for DataFrame.isna.
    
    Detect missing values.
    
    Return a boolean same-sized object indicating if the values are NA.
    NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
    values.
    Everything else gets mapped to False values. Characters such as empty
&&&&&&&&&&&&&&&&&&&&&&&&&&& items &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method items in module pandas.core.frame:

items() -> 'Iterable[tuple[Hashable, Series]]' method of pandas.core.frame.DataFrame instance
    Iterate over (column name, Series) pairs.
    
    Iterates over the DataFrame columns, returning a tuple with
    the column name and the content as a Series.
    
    Yields
    ------
    label : object
&&&&&&&&&&&&&&&&&&&&&&&&&&& iterrows &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method iterrows in module pandas.core.frame:

iterrows() -> 'Iterable[tuple[Hashable, Series]]' method of pandas.core.frame.DataFrame instance
    Iterate over DataFrame rows as (index, Series) pairs.
    
    Yields
    ------
    index : label or tuple of label
        The index of the row. A tuple for a `MultiIndex`.
    data : Series
        The data of the row as a Series.
&&&&&&&&&&&&&&&&&&&&&&&&&&& itertuples &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method itertuples in module pandas.core.frame:

itertuples(index: 'bool' = True, name: 'str | None' = 'Pandas') -> 'Iterable[tuple[Any, ...]]' method of pandas.core.frame.DataFrame instance
    Iterate over DataFrame rows as namedtuples.
    
    Parameters
    ----------
    index : bool, default True
        If True, return the index as the first element of the tuple.
    name : str or None, default "Pandas"
        The name of the returned namedtuples or None to return regular
&&&&&&&&&&&&&&&&&&&&&&&&&&& join &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method join in module pandas.core.frame:

join(other: 'DataFrame | Series | Iterable[DataFrame | Series]', on: 'IndexLabel | None' = None, how: 'MergeHow' = 'left', lsuffix: 'str' = '', rsuffix: 'str' = '', sort: 'bool' = False, validate: 'JoinValidate | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Join columns of another DataFrame.
    
    Join columns with `other` DataFrame either on index or on a key
    column. Efficiently join multiple DataFrame objects by index at once by
    passing a list.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& keys &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method keys in module pandas.core.generic:

keys() -> 'Index' method of pandas.core.frame.DataFrame instance
    Get the 'info axis' (see Indexing for more).
    
    This is index for Series, columns for DataFrame.
    
    Returns
    -------
    Index
        Info axis.
&&&&&&&&&&&&&&&&&&&&&&&&&&& kurt &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method kurt in module pandas.core.frame:

kurt(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased kurtosis over requested axis.
    
    Kurtosis obtained using Fisher's definition of
    kurtosis (kurtosis of normal == 0.0). Normalized by N-1.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
&&&&&&&&&&&&&&&&&&&&&&&&&&& kurtosis &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method kurt in module pandas.core.frame:

kurt(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased kurtosis over requested axis.
    
    Kurtosis obtained using Fisher's definition of
    kurtosis (kurtosis of normal == 0.0). Normalized by N-1.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
&&&&&&&&&&&&&&&&&&&&&&&&&&& last &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method last in module pandas.core.generic:

last(offset) -> 'Self' method of pandas.core.frame.DataFrame instance
    Select final periods of time series data based on a date offset.
    
    .. deprecated:: 2.1
        :meth:`.last` is deprecated and will be removed in a future version.
        Please create a mask and filter using `.loc` instead.
    
    For a DataFrame with a sorted DatetimeIndex, this function
    selects the last few rows based on a date offset.
&&&&&&&&&&&&&&&&&&&&&&&&&&& last_valid_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method last_valid_index in module pandas.core.generic:

last_valid_index() -> 'Hashable | None' method of pandas.core.frame.DataFrame instance
    Return index for last non-NA value or None, if no non-NA value is found.
    
    Returns
    -------
    type of index
    
    Examples
    --------
&&&&&&&&&&&&&&&&&&&&&&&&&&& le &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method le in module pandas.core.frame:

le(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Less than or equal to of dataframe and other, element-wise (binary operator `le`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& loc &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on _LocIndexer in module pandas.core.indexing object:

class _LocIndexer(_LocationIndexer)
 |  Access a group of rows and columns by label(s) or a boolean array.
 |  
 |  ``.loc[]`` is primarily label based, but may also be used with a
 |  boolean array.
 |  
 |  Allowed inputs are:
 |  
 |  - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is
&&&&&&&&&&&&&&&&&&&&&&&&&&& lt &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method lt in module pandas.core.frame:

lt(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Less than of dataframe and other, element-wise (binary operator `lt`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& map &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method map in module pandas.core.frame:

map(func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Apply a function to a Dataframe elementwise.
    
    .. versionadded:: 2.1.0
    
       DataFrame.applymap was deprecated and renamed to DataFrame.map.
    
    This method applies a function that accepts and returns a scalar
    to every element of a DataFrame.
&&&&&&&&&&&&&&&&&&&&&&&&&&& mask &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mask in module pandas.core.generic:

mask(cond, other=<no_default>, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Replace values where the condition is True.
    
    Parameters
    ----------
    cond : bool Series/DataFrame, array-like, or callable
        Where `cond` is False, keep the original value. Where
        True, replace with corresponding value from `other`.
        If `cond` is callable, it is computed on the Series/DataFrame and
&&&&&&&&&&&&&&&&&&&&&&&&&&& max &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method max in module pandas.core.frame:

max(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the maximum of the values over the requested axis.
    
    If you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
&&&&&&&&&&&&&&&&&&&&&&&&&&& mean &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mean in module pandas.core.frame:

mean(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the mean of the values over the requested axis.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& median &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method median in module pandas.core.frame:

median(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the median of the values over the requested axis.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& melt &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method melt in module pandas.core.frame:

melt(id_vars=None, value_vars=None, var_name=None, value_name: 'Hashable' = 'value', col_level: 'Level | None' = None, ignore_index: 'bool' = True) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.
    
    This function is useful to massage a DataFrame into a format where one
    or more columns are identifier variables (`id_vars`), while all other
    columns, considered measured variables (`value_vars`), are "unpivoted" to
    the row axis, leaving just two non-identifier columns, 'variable' and
    'value'.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& memory_usage &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method memory_usage in module pandas.core.frame:

memory_usage(index: 'bool' = True, deep: 'bool' = False) -> 'Series' method of pandas.core.frame.DataFrame instance
    Return the memory usage of each column in bytes.
    
    The memory usage can optionally include the contribution of
    the index and elements of `object` dtype.
    
    This value is displayed in `DataFrame.info` by default. This can be
    suppressed by setting ``pandas.options.display.memory_usage`` to False.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& merge &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method merge in module pandas.core.frame:

merge(right: 'DataFrame | Series', how: 'MergeHow' = 'inner', on: 'IndexLabel | AnyArrayLike | None' = None, left_on: 'IndexLabel | AnyArrayLike | None' = None, right_on: 'IndexLabel | AnyArrayLike | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), copy: 'bool | None' = None, indicator: 'str | bool' = False, validate: 'MergeValidate | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Merge DataFrame or named Series objects with a database-style join.
    
    A named Series object is treated as a DataFrame with a single named column.
    
    The join is done on columns or indexes. If joining columns on
    columns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes
    on indexes or indexes on a column or columns, the index will be passed on.
    When performing a cross merge, no column specifications to merge on are
&&&&&&&&&&&&&&&&&&&&&&&&&&& min &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method min in module pandas.core.frame:

min(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the minimum of the values over the requested axis.
    
    If you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
&&&&&&&&&&&&&&&&&&&&&&&&&&& mod &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mod in module pandas.core.frame:

mod(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Modulo of dataframe and other, element-wise (binary operator `mod`).
    
    Equivalent to ``dataframe % other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rmod`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& mode &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mode in module pandas.core.frame:

mode(axis: 'Axis' = 0, numeric_only: 'bool' = False, dropna: 'bool' = True) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get the mode(s) of each element along the selected axis.
    
    The mode of a set of values is the value that appears most often.
    It can be multiple values.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& mul &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mul in module pandas.core.frame:

mul(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Multiplication of dataframe and other, element-wise (binary operator `mul`).
    
    Equivalent to ``dataframe * other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rmul`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& multiply &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mul in module pandas.core.frame:

mul(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Multiplication of dataframe and other, element-wise (binary operator `mul`).
    
    Equivalent to ``dataframe * other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rmul`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& ndim &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on int object:

class int(object)
 |  int([x]) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
&&&&&&&&&&&&&&&&&&&&&&&&&&& ne &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method ne in module pandas.core.frame:

ne(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Not equal to of dataframe and other, element-wise (binary operator `ne`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& nlargest &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method nlargest in module pandas.core.frame:

nlargest(n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Return the first `n` rows ordered by `columns` in descending order.
    
    Return the first `n` rows with the largest values in `columns`, in
    descending order. The columns that are not specified are returned as
    well, but not used for ordering.
    
    This method is equivalent to
    ``df.sort_values(columns, ascending=False).head(n)``, but more
&&&&&&&&&&&&&&&&&&&&&&&&&&& nombres &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Series in module pandas.core.series object:

class Series(pandas.core.base.IndexOpsMixin, pandas.core.generic.NDFrame)
 |  Series(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'
 |  
 |  One-dimensional ndarray with axis labels (including time series).
 |  
 |  Labels need not be unique but must be a hashable type. The object
 |  supports both integer- and label-based indexing and provides a host of
 |  methods for performing operations involving the index. Statistical
 |  methods from ndarray have been overridden to automatically exclude
&&&&&&&&&&&&&&&&&&&&&&&&&&& notna &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method notna in module pandas.core.frame:

notna() -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Detect existing (non-missing) values.
    
    Return a boolean same-sized object indicating if the values are not NA.
    Non-missing values get mapped to True. Characters such as empty
    strings ``''`` or :attr:`numpy.inf` are not considered NA values
    (unless you set ``pandas.options.mode.use_inf_as_na = True``).
    NA values, such as None or :attr:`numpy.NaN`, get mapped to False
    values.
&&&&&&&&&&&&&&&&&&&&&&&&&&& notnull &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method notnull in module pandas.core.frame:

notnull() -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    DataFrame.notnull is an alias for DataFrame.notna.
    
    Detect existing (non-missing) values.
    
    Return a boolean same-sized object indicating if the values are not NA.
    Non-missing values get mapped to True. Characters such as empty
    strings ``''`` or :attr:`numpy.inf` are not considered NA values
    (unless you set ``pandas.options.mode.use_inf_as_na = True``).
&&&&&&&&&&&&&&&&&&&&&&&&&&& nsmallest &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method nsmallest in module pandas.core.frame:

nsmallest(n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Return the first `n` rows ordered by `columns` in ascending order.
    
    Return the first `n` rows with the smallest values in `columns`, in
    ascending order. The columns that are not specified are returned as
    well, but not used for ordering.
    
    This method is equivalent to
    ``df.sort_values(columns, ascending=True).head(n)``, but more
&&&&&&&&&&&&&&&&&&&&&&&&&&& nunique &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method nunique in module pandas.core.frame:

nunique(axis: 'Axis' = 0, dropna: 'bool' = True) -> 'Series' method of pandas.core.frame.DataFrame instance
    Count number of distinct elements in specified axis.
    
    Return Series with number of distinct elements. Can ignore NaN
    values.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& pad &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pad in module pandas.core.generic:

pad(*, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values by propagating the last valid observation to next valid.
    
    .. deprecated:: 2.0
    
        Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.
    
    Returns
    -------
&&&&&&&&&&&&&&&&&&&&&&&&&&& pct_change &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pct_change in module pandas.core.generic:

pct_change(periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, freq=None, **kwargs) -> 'Self' method of pandas.core.frame.DataFrame instance
    Fractional change between the current and a prior element.
    
    Computes the fractional change from the immediately previous row by
    default. This is useful in comparing the fraction of change in a time
    series of elements.
    
    .. note::
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& pipe &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pipe in module pandas.core.generic:

pipe(func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -> 'T' method of pandas.core.frame.DataFrame instance
    Apply chainable functions that expect Series or DataFrames.
    
    Parameters
    ----------
    func : function
        Function to apply to the Series/DataFrame.
        ``args``, and ``kwargs`` are passed into ``func``.
        Alternatively a ``(callable, data_keyword)`` tuple where
&&&&&&&&&&&&&&&&&&&&&&&&&&& pivot &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pivot in module pandas.core.frame:

pivot(*, columns, index=<no_default>, values=<no_default>) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Return reshaped DataFrame organized by given index / column values.
    
    Reshape data (produce a "pivot" table) based on column values. Uses
    unique values from specified `index` / `columns` to form axes of the
    resulting DataFrame. This function does not support data
    aggregation, multiple values will result in a MultiIndex in the
    columns. See the :ref:`User Guide <reshaping>` for more on reshaping.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& pivot_table &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pivot_table in module pandas.core.frame:

pivot_table(values=None, index=None, columns=None, aggfunc: 'AggFuncType' = 'mean', fill_value=None, margins: 'bool' = False, dropna: 'bool' = True, margins_name: 'Level' = 'All', observed: 'bool | lib.NoDefault' = <no_default>, sort: 'bool' = True) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Create a spreadsheet-style pivot table as a DataFrame.
    
    The levels in the pivot table will be stored in MultiIndex objects
    (hierarchical indexes) on the index and columns of the result DataFrame.
    
    Parameters
    ----------
    values : list-like or scalar, optional
&&&&&&&&&&&&&&&&&&&&&&&&&&& plot &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on PlotAccessor in module pandas.plotting._core object:

class PlotAccessor(pandas.core.base.PandasObject)
 |  PlotAccessor(data: 'Series | DataFrame') -> 'None'
 |  
 |  Make plots of Series or DataFrame.
 |  
 |  Uses the backend specified by the
 |  option ``plotting.backend``. By default, matplotlib is used.
 |  
 |  Parameters
&&&&&&&&&&&&&&&&&&&&&&&&&&& pop &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pop in module pandas.core.frame:

pop(item: 'Hashable') -> 'Series' method of pandas.core.frame.DataFrame instance
    Return item and drop from frame. Raise KeyError if not found.
    
    Parameters
    ----------
    item : label
        Label of column to be popped.
    
    Returns
&&&&&&&&&&&&&&&&&&&&&&&&&&& pow &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pow in module pandas.core.frame:

pow(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Exponential power of dataframe and other, element-wise (binary operator `pow`).
    
    Equivalent to ``dataframe ** other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rpow`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& prod &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method prod in module pandas.core.frame:

prod(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the product of the values over the requested axis.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& product &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method prod in module pandas.core.frame:

prod(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the product of the values over the requested axis.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& quantile &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method quantile in module pandas.core.frame:

quantile(q: 'float | AnyArrayLike | Sequence[float]' = 0.5, axis: 'Axis' = 0, numeric_only: 'bool' = False, interpolation: 'QuantileInterpolation' = 'linear', method: "Literal['single', 'table']" = 'single') -> 'Series | DataFrame' method of pandas.core.frame.DataFrame instance
    Return values at the given quantile over requested axis.
    
    Parameters
    ----------
    q : float or array-like, default 0.5 (50% quantile)
        Value between 0 <= q <= 1, the quantile(s) to compute.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
&&&&&&&&&&&&&&&&&&&&&&&&&&& query &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method query in module pandas.core.frame:

query(expr: 'str', *, inplace: 'bool' = False, **kwargs) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Query the columns of a DataFrame with a boolean expression.
    
    Parameters
    ----------
    expr : str
        The query string to evaluate.
    
        You can refer to variables
&&&&&&&&&&&&&&&&&&&&&&&&&&& radd &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method radd in module pandas.core.frame:

radd(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Addition of dataframe and other, element-wise (binary operator `radd`).
    
    Equivalent to ``other + dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `add`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& rank &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rank in module pandas.core.generic:

rank(axis: 'Axis' = 0, method: "Literal['average', 'min', 'max', 'first', 'dense']" = 'average', numeric_only: 'bool_t' = False, na_option: "Literal['keep', 'top', 'bottom']" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -> 'Self' method of pandas.core.frame.DataFrame instance
    Compute numerical data ranks (1 through n) along axis.
    
    By default, equal values are assigned a rank that is the average of the
    ranks of those values.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& rdiv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rtruediv in module pandas.core.frame:

rtruediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).
    
    Equivalent to ``other / dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `truediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& reindex &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method reindex in module pandas.core.frame:

reindex(labels=None, *, index=None, columns=None, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = nan, limit: 'int | None' = None, tolerance=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Conform DataFrame to new index with optional filling logic.
    
    Places NA/NaN in locations having no value in the previous index. A new object
    is produced unless the new index is equivalent to the current one and
    ``copy=False``.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& reindex_like &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method reindex_like in module pandas.core.generic:

reindex_like(other, method: "Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return an object with matching indices as other object.
    
    Conform the object to the same index on all axes. Optional
    filling logic, placing NaN in locations having no value
    in the previous index. A new object is produced unless the
    new index is equivalent to the current one and copy=False.
    
    Parameters
&&&&&&&&&&&&&&&&&&&&&&&&&&& rename &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rename in module pandas.core.frame:

rename(mapper: 'Renamer | None' = None, *, index: 'Renamer | None' = None, columns: 'Renamer | None' = None, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Rename columns or index labels.
    
    Function / dict values must be unique (1-to-1). Labels not contained in
    a dict / Series will be left as-is. Extra labels listed don't throw an
    error.
    
    See the :ref:`user guide <basics.rename>` for more.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& rename_axis &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rename_axis in module pandas.core.generic:

rename_axis(mapper: 'IndexLabel | lib.NoDefault' = <no_default>, *, index=<no_default>, columns=<no_default>, axis: 'Axis' = 0, copy: 'bool_t | None' = None, inplace: 'bool_t' = False) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Set the name of the axis for the index or columns.
    
    Parameters
    ----------
    mapper : scalar, list-like, optional
        Value to set the axis name attribute.
    index, columns : scalar, list-like, dict-like or function, optional
        A scalar, list-like, dict-like or functions transformations to
&&&&&&&&&&&&&&&&&&&&&&&&&&& reorder_levels &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method reorder_levels in module pandas.core.frame:

reorder_levels(order: 'Sequence[int | str]', axis: 'Axis' = 0) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Rearrange index levels using input order. May not drop or duplicate levels.
    
    Parameters
    ----------
    order : list of int or list of str
        List representing new level order. Reference level by number
        (position) or by key (label).
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& replace &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method replace in module pandas.core.generic:

replace(to_replace=None, value=<no_default>, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: "Literal['pad', 'ffill', 'bfill'] | lib.NoDefault" = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Replace values given in `to_replace` with `value`.
    
    Values of the Series/DataFrame are replaced with other values dynamically.
    This differs from updating with ``.loc`` or ``.iloc``, which require
    you to specify a location to update with some value.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& resample &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method resample in module pandas.core.generic:

resample(rule, axis: 'Axis | lib.NoDefault' = <no_default>, closed: "Literal['right', 'left'] | None" = None, label: "Literal['right', 'left'] | None" = None, convention: "Literal['start', 'end', 's', 'e']" = 'start', kind: "Literal['timestamp', 'period'] | None | lib.NoDefault" = <no_default>, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -> 'Resampler' method of pandas.core.frame.DataFrame instance
    Resample time-series data.
    
    Convenience method for frequency conversion and resampling of time series.
    The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,
    or `TimedeltaIndex`), or the caller must pass the label of a datetime-like
    series/index to the ``on``/``level`` keyword parameter.
    
    Parameters
&&&&&&&&&&&&&&&&&&&&&&&&&&& reset_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method reset_index in module pandas.core.frame:

reset_index(level: 'IndexLabel | None' = None, *, drop: 'bool' = False, inplace: 'bool' = False, col_level: 'Hashable' = 0, col_fill: 'Hashable' = '', allow_duplicates: 'bool | lib.NoDefault' = <no_default>, names: 'Hashable | Sequence[Hashable] | None' = None) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Reset the index, or a level of it.
    
    Reset the index of the DataFrame, and use the default one instead.
    If the DataFrame has a MultiIndex, this method can remove one or more
    levels.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& rfloordiv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rfloordiv in module pandas.core.frame:

rfloordiv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Integer division of dataframe and other, element-wise (binary operator `rfloordiv`).
    
    Equivalent to ``other // dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `floordiv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& rmod &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rmod in module pandas.core.frame:

rmod(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Modulo of dataframe and other, element-wise (binary operator `rmod`).
    
    Equivalent to ``other % dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `mod`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& rmul &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rmul in module pandas.core.frame:

rmul(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Multiplication of dataframe and other, element-wise (binary operator `rmul`).
    
    Equivalent to ``other * dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `mul`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& rolling &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rolling in module pandas.core.generic:

rolling(window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = <no_default>, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -> 'Window | Rolling' method of pandas.core.frame.DataFrame instance
    Provide rolling window calculations.
    
    Parameters
    ----------
    window : int, timedelta, str, offset, or BaseIndexer subclass
        Size of the moving window.
    
        If an integer, the fixed number of observations used for
&&&&&&&&&&&&&&&&&&&&&&&&&&& round &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method round in module pandas.core.frame:

round(decimals: 'int | dict[IndexLabel, int] | Series' = 0, *args, **kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Round a DataFrame to a variable number of decimal places.
    
    Parameters
    ----------
    decimals : int, dict, Series
        Number of decimal places to round each column to. If an int is
        given, round each column to the same number of places.
        Otherwise dict and Series round to variable numbers of places.
&&&&&&&&&&&&&&&&&&&&&&&&&&& rpow &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rpow in module pandas.core.frame:

rpow(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Exponential power of dataframe and other, element-wise (binary operator `rpow`).
    
    Equivalent to ``other ** dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `pow`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& rsub &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rsub in module pandas.core.frame:

rsub(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Subtraction of dataframe and other, element-wise (binary operator `rsub`).
    
    Equivalent to ``other - dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `sub`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& rtruediv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rtruediv in module pandas.core.frame:

rtruediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).
    
    Equivalent to ``other / dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `truediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& sample &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sample in module pandas.core.generic:

sample(n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return a random sample of items from an axis of object.
    
    You can use `random_state` for reproducibility.
    
    Parameters
    ----------
    n : int, optional
        Number of items from axis to return. Cannot be used with `frac`.
&&&&&&&&&&&&&&&&&&&&&&&&&&& select_dtypes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method select_dtypes in module pandas.core.frame:

select_dtypes(include=None, exclude=None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return a subset of the DataFrame's columns based on the column dtypes.
    
    Parameters
    ----------
    include, exclude : scalar or list-like
        A selection of dtypes or strings to be included/excluded. At least
        one of these parameters must be supplied.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& sem &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sem in module pandas.core.frame:

sem(axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased standard error of the mean over requested axis.
    
    Normalized by N-1 by default. This can be changed using the ddof argument
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        For `Series` this parameter is unused and defaults to 0.
&&&&&&&&&&&&&&&&&&&&&&&&&&& set_axis &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_axis in module pandas.core.frame:

set_axis(labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Assign desired index to given axis.
    
    Indexes for column or row labels can be changed by assigning
    a list-like or Index.
    
    Parameters
    ----------
    labels : list-like, Index
&&&&&&&&&&&&&&&&&&&&&&&&&&& set_flags &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_flags in module pandas.core.generic:

set_flags(*, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return a new object with updated flags.
    
    Parameters
    ----------
    copy : bool, default False
        Specify if a copy of the object should be made.
    
        .. note::
&&&&&&&&&&&&&&&&&&&&&&&&&&& set_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_index in module pandas.core.frame:

set_index(keys, *, drop: 'bool' = True, append: 'bool' = False, inplace: 'bool' = False, verify_integrity: 'bool' = False) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Set the DataFrame index using existing columns.
    
    Set the DataFrame index (row labels) using one or more existing
    columns or arrays (of the correct length). The index can replace the
    existing index or expand on it.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& shape &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on tuple object:

class tuple(object)
 |  tuple(iterable=(), /)
 |  
 |  Built-in immutable sequence.
 |  
 |  If no argument is given, the constructor returns an empty tuple.
 |  If iterable is specified the tuple is initialized from iterable's items.
 |  
 |  If the argument is a tuple, the return value is the same object.
&&&&&&&&&&&&&&&&&&&&&&&&&&& shift &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method shift in module pandas.core.frame:

shift(periods: 'int | Sequence[int]' = 1, freq: 'Frequency | None' = None, axis: 'Axis' = 0, fill_value: 'Hashable' = <no_default>, suffix: 'str | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Shift index by desired number of periods with an optional time `freq`.
    
    When `freq` is not passed, shift the index without realigning the data.
    If `freq` is passed (in this case, the index must be date or datetime,
    or it will raise a `NotImplementedError`), the index will be
    increased using the periods and the `freq`. `freq` can be inferred
    when specified as "infer" as long as either freq or inferred_freq
    attribute is set in the index.
&&&&&&&&&&&&&&&&&&&&&&&&&&& size &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on int object:

class int(object)
 |  int([x]) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
&&&&&&&&&&&&&&&&&&&&&&&&&&& skew &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method skew in module pandas.core.frame:

skew(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased skew over requested axis.
    
    Normalized by N-1.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
&&&&&&&&&&&&&&&&&&&&&&&&&&& sort_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sort_index in module pandas.core.frame:

sort_index(*, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Sort object by labels (along an axis).
    
    Returns a new DataFrame sorted by label if `inplace` argument is
    ``False``, otherwise updates the original DataFrame and returns None.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& sort_values &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sort_values in module pandas.core.frame:

sort_values(by: 'IndexLabel', *, axis: 'Axis' = 0, ascending: 'bool | list[bool] | tuple[bool, ...]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'str' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Sort by the values along either axis.
    
    Parameters
    ----------
    by : str or list of str
        Name or list of names to sort by.
    
        - if `axis` is 0 or `'index'` then `by` may contain index
&&&&&&&&&&&&&&&&&&&&&&&&&&& squeeze &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method squeeze in module pandas.core.generic:

squeeze(axis: 'Axis | None' = None) method of pandas.core.frame.DataFrame instance
    Squeeze 1 dimensional axis objects into scalars.
    
    Series or DataFrames with a single element are squeezed to a scalar.
    DataFrames with a single column or a single row are squeezed to a
    Series. Otherwise the object is unchanged.
    
    This method is most useful when you don't know if your
    object is a Series or DataFrame, but you do know it has just a single
&&&&&&&&&&&&&&&&&&&&&&&&&&& stack &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method stack in module pandas.core.frame:

stack(level: 'IndexLabel' = -1, dropna: 'bool | lib.NoDefault' = <no_default>, sort: 'bool | lib.NoDefault' = <no_default>, future_stack: 'bool' = False) method of pandas.core.frame.DataFrame instance
    Stack the prescribed level(s) from columns to index.
    
    Return a reshaped DataFrame or Series having a multi-level
    index with one or more new inner-most levels compared to the current
    DataFrame. The new inner-most levels are created by pivoting the
    columns of the current dataframe:
    
      - if the columns have a single level, the output is a Series;
&&&&&&&&&&&&&&&&&&&&&&&&&&& std &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method std in module pandas.core.frame:

std(axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return sample standard deviation over requested axis.
    
    Normalized by N-1 by default. This can be changed using the ddof argument.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        For `Series` this parameter is unused and defaults to 0.
&&&&&&&&&&&&&&&&&&&&&&&&&&& style &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Styler in module pandas.io.formats.style object:

class Styler(pandas.io.formats.style_render.StylerRenderer)
 |  Styler(data: 'DataFrame | Series', precision: 'int | None' = None, table_styles: 'CSSStyles | None' = None, uuid: 'str | None' = None, caption: 'str | tuple | list | None' = None, table_attributes: 'str | None' = None, cell_ids: 'bool' = True, na_rep: 'str | None' = None, uuid_len: 'int' = 5, decimal: 'str | None' = None, thousands: 'str | None' = None, escape: 'str | None' = None, formatter: 'ExtFormatter | None' = None) -> 'None'
 |  
 |  Helps style a DataFrame or Series according to the data with HTML and CSS.
 |  
 |  Parameters
 |  ----------
 |  data : Series or DataFrame
 |      Data to be styled - either a Series or DataFrame.
&&&&&&&&&&&&&&&&&&&&&&&&&&& sub &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sub in module pandas.core.frame:

sub(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Subtraction of dataframe and other, element-wise (binary operator `sub`).
    
    Equivalent to ``dataframe - other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rsub`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& subtract &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sub in module pandas.core.frame:

sub(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Subtraction of dataframe and other, element-wise (binary operator `sub`).
    
    Equivalent to ``dataframe - other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rsub`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& sum &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sum in module pandas.core.frame:

sum(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the sum of the values over the requested axis.
    
    This is equivalent to the method ``numpy.sum``.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
&&&&&&&&&&&&&&&&&&&&&&&&&&& swapaxes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method swapaxes in module pandas.core.generic:

swapaxes(axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Interchange axes and swap values axes appropriately.
    
    .. deprecated:: 2.1.0
        ``swapaxes`` is deprecated and will be removed.
        Please use ``transpose`` instead.
    
    Returns
    -------
&&&&&&&&&&&&&&&&&&&&&&&&&&& swaplevel &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method swaplevel in module pandas.core.frame:

swaplevel(i: 'Axis' = -2, j: 'Axis' = -1, axis: 'Axis' = 0) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Swap levels i and j in a :class:`MultiIndex`.
    
    Default is to swap the two innermost levels of the index.
    
    Parameters
    ----------
    i, j : int or str
        Levels of the indices to be swapped. Can pass level name as string.
&&&&&&&&&&&&&&&&&&&&&&&&&&& tail &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method tail in module pandas.core.generic:

tail(n: 'int' = 5) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return the last `n` rows.
    
    This function returns last `n` rows from the object based on
    position. It is useful for quickly verifying data, for example,
    after sorting or appending rows.
    
    For negative values of `n`, this function returns all rows except
    the first `|n|` rows, equivalent to ``df[|n|:]``.
&&&&&&&&&&&&&&&&&&&&&&&&&&& take &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method take in module pandas.core.generic:

take(indices, axis: 'Axis' = 0, **kwargs) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return the elements in the given *positional* indices along an axis.
    
    This means that we are not indexing according to actual values in
    the index attribute of the object. We are indexing according to the
    actual position of the element in the object.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_clipboard &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_clipboard in module pandas.core.generic:

to_clipboard(*, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -> 'None' method of pandas.core.frame.DataFrame instance
    Copy object to the system clipboard.
    
    Write a text representation of object to the system clipboard.
    This can be pasted into Excel, for example.
    
    Parameters
    ----------
    excel : bool, default True
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_csv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_csv in module pandas.core.generic:

to_csv(path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Write object to a comma-separated values (csv) file.
    
    Parameters
    ----------
    path_or_buf : str, path object, file-like object, or None, default None
        String, path object (implementing os.PathLike[str]), or file-like
        object implementing a write() function. If None, the result is
        returned as a string. If a non-binary file object is passed, it should
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_dict &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_dict in module pandas.core.frame:

to_dict(orient: "Literal['dict', 'list', 'series', 'split', 'tight', 'records', 'index']" = 'dict', *, into: 'type[MutableMappingT] | MutableMappingT' = <class 'dict'>, index: 'bool' = True) -> 'MutableMappingT | list[MutableMappingT]' method of pandas.core.frame.DataFrame instance
    Convert the DataFrame to a dictionary.
    
    The type of the key-value pairs can be customized with the parameters
    (see below).
    
    Parameters
    ----------
    orient : str {'dict', 'list', 'series', 'split', 'tight', 'records', 'index'}
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_excel &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_excel in module pandas.core.generic:

to_excel(excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: "Literal['openpyxl', 'xlsxwriter'] | None" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'None' method of pandas.core.frame.DataFrame instance
    Write object to an Excel sheet.
    
    To write a single object to an Excel .xlsx file it is only necessary to
    specify a target file name. To write to multiple sheets it is necessary to
    create an `ExcelWriter` object with a target file name, and specify a sheet
    in the file to write to.
    
    Multiple sheets may be written to by specifying unique `sheet_name`.
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_feather &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_feather in module pandas.core.frame:

to_feather(path: 'FilePath | WriteBuffer[bytes]', **kwargs) -> 'None' method of pandas.core.frame.DataFrame instance
    Write a DataFrame to the binary Feather format.
    
    Parameters
    ----------
    path : str, path object, file-like object
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a binary ``write()`` function. If a string or a path,
        it will be used as Root Directory path when writing a partitioned dataset.
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_gbq &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_gbq in module pandas.core.frame:

to_gbq(destination_table: 'str', *, project_id: 'str | None' = None, chunksize: 'int | None' = None, reauth: 'bool' = False, if_exists: 'ToGbqIfexist' = 'fail', auth_local_webserver: 'bool' = True, table_schema: 'list[dict[str, str]] | None' = None, location: 'str | None' = None, progress_bar: 'bool' = True, credentials=None) -> 'None' method of pandas.core.frame.DataFrame instance
    Write a DataFrame to a Google BigQuery table.
    
    .. deprecated:: 2.2.0
    
       Please use ``pandas_gbq.to_gbq`` instead.
    
    This function requires the `pandas-gbq package
    <https://pandas-gbq.readthedocs.io>`__.
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_hdf &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_hdf in module pandas.core.generic:

to_hdf(path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: "Literal['a', 'w', 'r+']" = 'a', complevel: 'int | None' = None, complib: "Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None" = None, append: 'bool_t' = False, format: "Literal['fixed', 'table'] | None" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -> 'None' method of pandas.core.frame.DataFrame instance
    Write the contained data to an HDF5 file using HDFStore.
    
    Hierarchical Data Format (HDF) is self-describing, allowing an
    application to interpret the structure and contents of a file with
    no outside information. One HDF file can hold a mix of related objects
    which can be accessed as a group or as individual objects.
    
    In order to add another DataFrame or Series to an existing HDF file
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_html &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_html in module pandas.core.frame:

to_html(buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'ColspaceArgType | None' = None, header: 'bool' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool | str' = False, decimal: 'str' = '.', bold_rows: 'bool' = True, classes: 'str | list | tuple | None' = None, escape: 'bool' = True, notebook: 'bool' = False, border: 'int | bool | None' = None, table_id: 'str | None' = None, render_links: 'bool' = False, encoding: 'str | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Render a DataFrame as an HTML table.
    
    Parameters
    ----------
    buf : str, Path or StringIO-like, optional, default None
        Buffer to write to. If None, the output is returned as a string.
    columns : array-like, optional, default None
        The subset of columns to write. Writes all columns by default.
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_json &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_json in module pandas.core.generic:

to_json(path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: "Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: "Literal['a', 'w']" = 'w') -> 'str | None' method of pandas.core.frame.DataFrame instance
    Convert the object to a JSON string.
    
    Note NaN's and None will be converted to null and datetime objects
    will be converted to UNIX timestamps.
    
    Parameters
    ----------
    path_or_buf : str, path object, file-like object, or None, default None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_latex &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_latex in module pandas.core.generic:

to_latex(buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Render object to a LaTeX tabular, longtable, or nested table.
    
    Requires ``\usepackage{{booktabs}}``.  The output can be copy/pasted
    into a main LaTeX document or read from an external file
    with ``\input{{table.tex}}``.
    
    .. versionchanged:: 2.0.0
       Refactored to use the Styler implementation via jinja2 templating.
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_markdown &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_markdown in module pandas.core.frame:

to_markdown(buf: 'FilePath | WriteBuffer[str] | None' = None, *, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Print DataFrame in Markdown-friendly format.
    
    Parameters
    ----------
    buf : str, Path or StringIO-like, optional, default None
        Buffer to write to. If None, the output is returned as a string.
    mode : str, optional
        Mode in which file is opened, "wt" by default.
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_numpy &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_numpy in module pandas.core.frame:

to_numpy(dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>) -> 'np.ndarray' method of pandas.core.frame.DataFrame instance
    Convert the DataFrame to a NumPy array.
    
    By default, the dtype of the returned array will be the common NumPy
    dtype of all types in the DataFrame. For example, if the dtypes are
    ``float16`` and ``float32``, the results dtype will be ``float32``.
    This may require copying data and coercing values, which may be
    expensive.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_orc &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_orc in module pandas.core.frame:

to_orc(path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: "Literal['pyarrow']" = 'pyarrow', index: 'bool | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'bytes | None' method of pandas.core.frame.DataFrame instance
    Write a DataFrame to the ORC format.
    
    .. versionadded:: 1.5.0
    
    Parameters
    ----------
    path : str, file-like object or None, default None
        If a string, it will be used as Root Directory path
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_parquet &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_parquet in module pandas.core.frame:

to_parquet(path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: "Literal['auto', 'pyarrow', 'fastparquet']" = 'auto', compression: 'str | None' = 'snappy', index: 'bool | None' = None, partition_cols: 'list[str] | None' = None, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'bytes | None' method of pandas.core.frame.DataFrame instance
    Write a DataFrame to the binary parquet format.
    
    This function writes the dataframe as a `parquet file
    <https://parquet.apache.org/>`_. You can choose different parquet
    backends, and have the option of compression. See
    :ref:`the user guide <io.parquet>` for more details.
    
    Parameters
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_period &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_period in module pandas.core.frame:

to_period(freq: 'Frequency | None' = None, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Convert DataFrame from DatetimeIndex to PeriodIndex.
    
    Convert DataFrame from DatetimeIndex to PeriodIndex with desired
    frequency (inferred from index if not passed).
    
    Parameters
    ----------
    freq : str, default
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_pickle &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_pickle in module pandas.core.generic:

to_pickle(path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -> 'None' method of pandas.core.frame.DataFrame instance
    Pickle (serialize) object to file.
    
    Parameters
    ----------
    path : str, path object, or file-like object
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a binary ``write()`` function. File path where
        the pickled object will be stored.
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_records &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_records in module pandas.core.frame:

to_records(index: 'bool' = True, column_dtypes=None, index_dtypes=None) -> 'np.rec.recarray' method of pandas.core.frame.DataFrame instance
    Convert DataFrame to a NumPy record array.
    
    Index will be included as the first field of the record array if
    requested.
    
    Parameters
    ----------
    index : bool, default True
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_sql &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_sql in module pandas.core.generic:

to_sql(name: 'str', con, *, schema: 'str | None' = None, if_exists: "Literal['fail', 'replace', 'append']" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: "Literal['multi'] | Callable | None" = None) -> 'int | None' method of pandas.core.frame.DataFrame instance
    Write records stored in a DataFrame to a SQL database.
    
    Databases supported by SQLAlchemy [1]_ are supported. Tables can be
    newly created, appended to, or overwritten.
    
    Parameters
    ----------
    name : str
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_stata &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_stata in module pandas.core.frame:

to_stata(path: 'FilePath | WriteBuffer[bytes]', *, convert_dates: 'dict[Hashable, str] | None' = None, write_index: 'bool' = True, byteorder: 'ToStataByteorder | None' = None, time_stamp: 'datetime.datetime | None' = None, data_label: 'str | None' = None, variable_labels: 'dict[Hashable, str] | None' = None, version: 'int | None' = 114, convert_strl: 'Sequence[Hashable] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None, value_labels: 'dict[Hashable, dict[float, str]] | None' = None) -> 'None' method of pandas.core.frame.DataFrame instance
    Export DataFrame object to Stata dta format.
    
    Writes the DataFrame to a Stata dataset file.
    "dta" files contain a Stata dataset.
    
    Parameters
    ----------
    path : str, path object, or buffer
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_string &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_string in module pandas.core.frame:

to_string(buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'int | list[int] | dict[Hashable, int] | None' = None, header: 'bool | SequenceNotStr[str]' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'fmt.FormattersType | None' = None, float_format: 'fmt.FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool' = False, decimal: 'str' = '.', line_width: 'int | None' = None, min_rows: 'int | None' = None, max_colwidth: 'int | None' = None, encoding: 'str | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Render a DataFrame to a console-friendly tabular output.
    
    Parameters
    ----------
    buf : str, Path or StringIO-like, optional, default None
        Buffer to write to. If None, the output is returned as a string.
    columns : array-like, optional, default None
        The subset of columns to write. Writes all columns by default.
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_timestamp &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_timestamp in module pandas.core.frame:

to_timestamp(freq: 'Frequency | None' = None, how: 'ToTimestampHow' = 'start', axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Cast to DatetimeIndex of timestamps, at *beginning* of period.
    
    Parameters
    ----------
    freq : str, default frequency of PeriodIndex
        Desired frequency.
    how : {'s', 'e', 'start', 'end'}
        Convention for converting period to timestamp; start of period
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_xarray &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_xarray in module pandas.core.generic:

to_xarray() method of pandas.core.frame.DataFrame instance
    Return an xarray object from the pandas object.
    
    Returns
    -------
    xarray.DataArray or xarray.Dataset
        Data in the pandas structure converted to Dataset if the object is
        a DataFrame, or a DataArray if the object is a Series.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_xml &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_xml in module pandas.core.frame:

to_xml(path_or_buffer: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, index: 'bool' = True, root_name: 'str | None' = 'data', row_name: 'str | None' = 'row', na_rep: 'str | None' = None, attr_cols: 'list[str] | None' = None, elem_cols: 'list[str] | None' = None, namespaces: 'dict[str | None, str] | None' = None, prefix: 'str | None' = None, encoding: 'str' = 'utf-8', xml_declaration: 'bool | None' = True, pretty_print: 'bool | None' = True, parser: 'XMLParsers | None' = 'lxml', stylesheet: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Render a DataFrame to an XML document.
    
    .. versionadded:: 1.3.0
    
    Parameters
    ----------
    path_or_buffer : str, path object, file-like object, or None, default None
        String, path object (implementing ``os.PathLike[str]``), or file-like
&&&&&&&&&&&&&&&&&&&&&&&&&&& transform &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method transform in module pandas.core.frame:

transform(func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Call ``func`` on self producing a DataFrame with the same axis shape as self.
    
    Parameters
    ----------
    func : function, str, list-like or dict-like
        Function to use for transforming the data. If a function, must either
        work when passed a DataFrame or when passed to DataFrame.apply. If func
        is both list-like and dict-like, dict-like behavior takes precedence.
&&&&&&&&&&&&&&&&&&&&&&&&&&& transpose &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method transpose in module pandas.core.frame:

transpose(*args, copy: 'bool' = False) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Transpose index and columns.
    
    Reflect the DataFrame over its main diagonal by writing rows as columns
    and vice-versa. The property :attr:`.T` is an accessor to the method
    :meth:`transpose`.
    
    Parameters
    ----------
&&&&&&&&&&&&&&&&&&&&&&&&&&& truediv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method truediv in module pandas.core.frame:

truediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `truediv`).
    
    Equivalent to ``dataframe / other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rtruediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& truncate &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method truncate in module pandas.core.generic:

truncate(before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Truncate a Series or DataFrame before and after some index value.
    
    This is a useful shorthand for boolean indexing based on index
    values above or below certain thresholds.
    
    Parameters
    ----------
    before : date, str, int
&&&&&&&&&&&&&&&&&&&&&&&&&&& tz_convert &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method tz_convert in module pandas.core.generic:

tz_convert(tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Convert tz-aware axis to target time zone.
    
    Parameters
    ----------
    tz : str or tzinfo object or None
        Target time zone. Passing ``None`` will convert to
        UTC and remove the timezone information.
    axis : {0 or 'index', 1 or 'columns'}, default 0
&&&&&&&&&&&&&&&&&&&&&&&&&&& tz_localize &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method tz_localize in module pandas.core.generic:

tz_localize(tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -> 'Self' method of pandas.core.frame.DataFrame instance
    Localize tz-naive index of a Series or DataFrame to target time zone.
    
    This operation localizes the Index. To localize the values in a
    timezone-naive Series, use :meth:`Series.dt.tz_localize`.
    
    Parameters
    ----------
    tz : str or tzinfo or None
&&&&&&&&&&&&&&&&&&&&&&&&&&& unstack &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method unstack in module pandas.core.frame:

unstack(level: 'IndexLabel' = -1, fill_value=None, sort: 'bool' = True) method of pandas.core.frame.DataFrame instance
    Pivot a level of the (necessarily hierarchical) index labels.
    
    Returns a DataFrame having a new level of column labels whose inner-most level
    consists of the pivoted index labels.
    
    If the index is not a MultiIndex, the output will be a Series
    (the analogue of stack when the columns are not a MultiIndex).
    
&&&&&&&&&&&&&&&&&&&&&&&&&&& update &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method update in module pandas.core.frame:

update(other, join: 'UpdateJoin' = 'left', overwrite: 'bool' = True, filter_func=None, errors: 'IgnoreRaise' = 'ignore') -> 'None' method of pandas.core.frame.DataFrame instance
    Modify in place using non-NA values from another DataFrame.
    
    Aligns on indices. There is no return value.
    
    Parameters
    ----------
    other : DataFrame, or object coercible into a DataFrame
        Should have at least one matching index/column label
&&&&&&&&&&&&&&&&&&&&&&&&&&& value_counts &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method value_counts in module pandas.core.frame:

value_counts(subset: 'IndexLabel | None' = None, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, dropna: 'bool' = True) -> 'Series' method of pandas.core.frame.DataFrame instance
    Return a Series containing the frequency of each distinct row in the Dataframe.
    
    Parameters
    ----------
    subset : label or list of labels, optional
        Columns to use when counting unique combinations.
    normalize : bool, default False
        Return proportions rather than frequencies.
&&&&&&&&&&&&&&&&&&&&&&&&&&& values &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on ndarray object:

class ndarray(builtins.object)
 |  ndarray(shape, dtype=float, buffer=None, offset=0,
 |          strides=None, order=None)
 |  
 |  An array object represents a multidimensional, homogeneous array
 |  of fixed-size items.  An associated data-type object describes the
 |  format of each element in the array (its byte-order, how many bytes it
 |  occupies in memory, whether it is an integer, a floating point number,
 |  or something else, etc.)
&&&&&&&&&&&&&&&&&&&&&&&&&&& var &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method var in module pandas.core.frame:

var(axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased variance over requested axis.
    
    Normalized by N-1 by default. This can be changed using the ddof argument.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        For `Series` this parameter is unused and defaults to 0.
&&&&&&&&&&&&&&&&&&&&&&&&&&& where &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method where in module pandas.core.generic:

where(cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Replace values where the condition is False.
    
    Parameters
    ----------
    cond : bool Series/DataFrame, array-like, or callable
        Where `cond` is True, keep the original value. Where
        False, replace with corresponding value from `other`.
        If `cond` is callable, it is computed on the Series/DataFrame and
&&&&&&&&&&&&&&&&&&&&&&&&&&& xs &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method xs in module pandas.core.generic:

xs(key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return cross-section from the Series/DataFrame.
    
    This method takes a `key` argument to select data at a particular
    level of a MultiIndex.
    
    Parameters
    ----------
    key : label or tuple of label
