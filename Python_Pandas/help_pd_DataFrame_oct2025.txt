&&&&&&&&&&&&&&&&&&&&&&&&&&& T &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on DataFrame in module pandas.core.frame object:

class DataFrame(pandas.core.generic.NDFrame, pandas.core.arraylike.OpsMixin)
 |  DataFrame(data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'
 |  
 |  Two-dimensional, size-mutable, potentially heterogeneous tabular data.
 |  
 |  Data structure also contains labeled axes (rows and columns).
 |  Arithmetic operations align on both row and column labels. Can be
 |  thought of as a dict-like container for Series objects. The primary
 |  pandas data structure.
 |  
 |  Parameters
 |  ----------
 |  data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame
 |      Dict can contain Series, arrays, constants, dataclass or list-like objects. If
 |      data is a dict, column order follows insertion-order. If a dict contains Series
 |      which have an index defined, it is aligned by its index. This alignment also
 |      occurs if data is a Series or a DataFrame itself. Alignment is done on
 |      Series/DataFrame inputs.
 |  
 |      If data is a list of dicts, column order follows insertion-order.
 |  
 |  index : Index or array-like
 |      Index to use for resulting frame. Will default to RangeIndex if
 |      no indexing information part of input data and no index provided.
 |  columns : Index or array-like
 |      Column labels to use for resulting frame when data does not have them,
 |      defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,
 |      will perform column selection instead.
 |  dtype : dtype, default None
 |      Data type to force. Only a single dtype is allowed. If None, infer.
 |  copy : bool or None, default None
 |      Copy data from inputs.
 |      For dict data, the default of None behaves like ``copy=True``.  For DataFrame
 |      or 2d ndarray input, the default of None behaves like ``copy=False``.
 |      If data is a dict containing one or more Series (possibly of different dtypes),
 |      ``copy=False`` will ensure that these inputs are not copied.
 |  
 |      .. versionchanged:: 1.3.0
 |  
 |  See Also
 |  --------
 |  DataFrame.from_records : Constructor from tuples, also record arrays.
 |  DataFrame.from_dict : From dicts of Series, arrays, or dicts.
 |  read_csv : Read a comma-separated values (csv) file into DataFrame.
 |  read_table : Read general delimited file into DataFrame.
 |  read_clipboard : Read text from clipboard into DataFrame.
 |  
 |  Notes
 |  -----
 |  Please reference the :ref:`User Guide <basics.dataframe>` for more information.
 |  
 |  Examples
 |  --------
 |  Constructing DataFrame from a dictionary.
 |  
 |  >>> d = {'col1': [1, 2], 'col2': [3, 4]}
 |  >>> df = pd.DataFrame(data=d)
 |  >>> df
 |     col1  col2
 |  0     1     3
 |  1     2     4
 |  
 |  Notice that the inferred dtype is int64.
 |  
 |  >>> df.dtypes
 |  col1    int64
 |  col2    int64
 |  dtype: object
 |  
 |  To enforce a single dtype:
 |  
 |  >>> df = pd.DataFrame(data=d, dtype=np.int8)
 |  >>> df.dtypes
 |  col1    int8
 |  col2    int8
 |  dtype: object
 |  
 |  Constructing DataFrame from a dictionary including Series:
 |  
 |  >>> d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}
 |  >>> pd.DataFrame(data=d, index=[0, 1, 2, 3])
 |     col1  col2
 |  0     0   NaN
 |  1     1   NaN
 |  2     2   2.0
 |  3     3   3.0
 |  
 |  Constructing DataFrame from numpy ndarray:
 |  
 |  >>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),
 |  ...                    columns=['a', 'b', 'c'])
 |  >>> df2
 |     a  b  c
 |  0  1  2  3
 |  1  4  5  6
 |  2  7  8  9
 |  
 |  Constructing DataFrame from a numpy ndarray that has labeled columns:
 |  
 |  >>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],
 |  ...                 dtype=[("a", "i4"), ("b", "i4"), ("c", "i4")])
 |  >>> df3 = pd.DataFrame(data, columns=['c', 'a'])
 |  ...
 |  >>> df3
 |     c  a
 |  0  3  1
 |  1  6  4
 |  2  9  7
 |  
 |  Constructing DataFrame from dataclass:
 |  
 |  >>> from dataclasses import make_dataclass
 |  >>> Point = make_dataclass("Point", [("x", int), ("y", int)])
 |  >>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])
 |     x  y
 |  0  0  0
 |  1  0  3
 |  2  2  3
 |  
 |  Constructing DataFrame from Series/DataFrame:
 |  
 |  >>> ser = pd.Series([1, 2, 3], index=["a", "b", "c"])
 |  >>> df = pd.DataFrame(data=ser, index=["a", "c"])
 |  >>> df
 |     0
 |  a  1
 |  c  3
 |  
 |  >>> df1 = pd.DataFrame([1, 2, 3], index=["a", "b", "c"], columns=["x"])
 |  >>> df2 = pd.DataFrame(data=df1, index=["a", "c"])
 |  >>> df2
 |     x
 |  a  1
 |  c  3
 |  
 |  Method resolution order:
 |      DataFrame
 |      pandas.core.generic.NDFrame
 |      pandas.core.base.PandasObject
 |      pandas.core.accessor.DirNamesMixin
 |      pandas.core.indexing.IndexingMixin
 |      pandas.core.arraylike.OpsMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __arrow_c_stream__(self, requested_schema=None)
 |      Export the pandas DataFrame as an Arrow C stream PyCapsule.
 |      
 |      This relies on pyarrow to convert the pandas DataFrame to the Arrow
 |      format (and follows the default behaviour of ``pyarrow.Table.from_pandas``
 |      in its handling of the index, i.e. store the index as a column except
 |      for RangeIndex).
 |      This conversion is not necessarily zero-copy.
 |      
 |      Parameters
 |      ----------
 |      requested_schema : PyCapsule, default None
 |          The schema to which the dataframe should be casted, passed as a
 |          PyCapsule containing a C ArrowSchema representation of the
 |          requested schema.
 |      
 |      Returns
 |      -------
 |      PyCapsule
 |  
 |  __dataframe__(self, nan_as_null: 'bool' = False, allow_copy: 'bool' = True) -> 'DataFrameXchg'
 |      Return the dataframe interchange object implementing the interchange protocol.
 |      
 |      Parameters
 |      ----------
 |      nan_as_null : bool, default False
 |          `nan_as_null` is DEPRECATED and has no effect. Please avoid using
 |          it; it will be removed in a future release.
 |      allow_copy : bool, default True
 |          Whether to allow memory copying when exporting. If set to False
 |          it would cause non-zero-copy exports to fail.
 |      
 |      Returns
 |      -------
 |      DataFrame interchange object
 |          The object which consuming library can use to ingress the dataframe.
 |      
 |      Notes
 |      -----
 |      Details on the interchange protocol:
 |      https://data-apis.org/dataframe-protocol/latest/index.html
 |      
 |      Examples
 |      --------
 |      >>> df_not_necessarily_pandas = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> interchange_object = df_not_necessarily_pandas.__dataframe__()
 |      >>> interchange_object.column_names()
 |      Index(['A', 'B'], dtype='object')
 |      >>> df_pandas = (pd.api.interchange.from_dataframe
 |      ...              (interchange_object.select_columns_by_name(['A'])))
 |      >>> df_pandas
 |           A
 |      0    1
 |      1    2
 |      
 |      These methods (``column_names``, ``select_columns_by_name``) should work
 |      for any dataframe library which implements the interchange protocol.
 |  
 |  __dataframe_consortium_standard__(self, *, api_version: 'str | None' = None) -> 'Any'
 |      Provide entry point to the Consortium DataFrame Standard API.
 |      
 |      This is developed and maintained outside of pandas.
 |      Please report any issues to https://github.com/data-apis/dataframe-api-compat.
 |  
 |  __divmod__(self, other) -> 'tuple[DataFrame, DataFrame]'
 |  
 |  __getitem__(self, key)
 |  
 |  __init__(self, data=None, index: 'Axes | None' = None, columns: 'Axes | None' = None, dtype: 'Dtype | None' = None, copy: 'bool | None' = None) -> 'None'
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __len__(self) -> 'int'
 |      Returns length of info axis, but here we use the index.
 |  
 |  __matmul__(self, other: 'AnyArrayLike | DataFrame') -> 'DataFrame | Series'
 |      Matrix multiplication using binary `@` operator.
 |  
 |  __rdivmod__(self, other) -> 'tuple[DataFrame, DataFrame]'
 |  
 |  __repr__(self) -> 'str'
 |      Return a string representation for a particular DataFrame.
 |  
 |  __rmatmul__(self, other) -> 'DataFrame'
 |      Matrix multiplication using binary `@` operator.
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  add(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Addition of dataframe and other, element-wise (binary operator `add`).
 |      
 |      Equivalent to ``dataframe + other``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `radd`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  agg = aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)
 |  
 |  aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)
 |      Aggregate using one or more operations over the specified axis.
 |      
 |      Parameters
 |      ----------
 |      func : function, str, list or dict
 |          Function to use for aggregating the data. If a function, must either
 |          work when passed a DataFrame or when passed to DataFrame.apply.
 |      
 |          Accepted combinations are:
 |      
 |          - function
 |          - string function name
 |          - list of functions and/or function names, e.g. ``[np.sum, 'mean']``
 |          - dict of axis labels -> functions, function names or list of such.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |              If 0 or 'index': apply function to each column.
 |              If 1 or 'columns': apply function to each row.
 |      *args
 |          Positional arguments to pass to `func`.
 |      **kwargs
 |          Keyword arguments to pass to `func`.
 |      
 |      Returns
 |      -------
 |      scalar, Series or DataFrame
 |      
 |          The return can be:
 |      
 |          * scalar : when Series.agg is called with single function
 |          * Series : when DataFrame.agg is called with a single function
 |          * DataFrame : when DataFrame.agg is called with several functions
 |      
 |      See Also
 |      --------
 |      DataFrame.apply : Perform any type of operations.
 |      DataFrame.transform : Perform transformation type operations.
 |      pandas.DataFrame.groupby : Perform operations over groups.
 |      pandas.DataFrame.resample : Perform operations over resampled bins.
 |      pandas.DataFrame.rolling : Perform operations over rolling window.
 |      pandas.DataFrame.expanding : Perform operations over expanding window.
 |      pandas.core.window.ewm.ExponentialMovingWindow : Perform operation over exponential
 |          weighted window.
 |      
 |      Notes
 |      -----
 |      The aggregation operations are always performed over an axis, either the
 |      index (default) or the column axis. This behavior is different from
 |      `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,
 |      `var`), where the default is to compute the aggregation of the flattened
 |      array, e.g., ``numpy.mean(arr_2d)`` as opposed to
 |      ``numpy.mean(arr_2d, axis=0)``.
 |      
 |      `agg` is an alias for `aggregate`. Use the alias.
 |      
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      A passed user-defined-function will be passed a Series for evaluation.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[1, 2, 3],
 |      ...                    [4, 5, 6],
 |      ...                    [7, 8, 9],
 |      ...                    [np.nan, np.nan, np.nan]],
 |      ...                   columns=['A', 'B', 'C'])
 |      
 |      Aggregate these functions over the rows.
 |      
 |      >>> df.agg(['sum', 'min'])
 |              A     B     C
 |      sum  12.0  15.0  18.0
 |      min   1.0   2.0   3.0
 |      
 |      Different aggregations per column.
 |      
 |      >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})
 |              A    B
 |      sum  12.0  NaN
 |      min   1.0  2.0
 |      max   NaN  8.0
 |      
 |      Aggregate different functions over the columns and rename the index of the resulting
 |      DataFrame.
 |      
 |      >>> df.agg(x=('A', 'max'), y=('B', 'min'), z=('C', 'mean'))
 |           A    B    C
 |      x  7.0  NaN  NaN
 |      y  NaN  2.0  NaN
 |      z  NaN  NaN  6.0
 |      
 |      Aggregate over the columns.
 |      
 |      >>> df.agg("mean", axis="columns")
 |      0    2.0
 |      1    5.0
 |      2    8.0
 |      3    NaN
 |      dtype: float64
 |  
 |  all(self, axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'Series | bool'
 |      Return whether all elements are True, potentially over an axis.
 |      
 |      Returns True unless there at least one element within a series or
 |      along a Dataframe axis that is False or equivalent (e.g. zero or
 |      empty).
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Indicate which axis or axes should be reduced. For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          * 0 / 'index' : reduce the index, return a Series whose index is the
 |            original column labels.
 |          * 1 / 'columns' : reduce the columns, return a Series whose index is the
 |            original index.
 |          * None : reduce all axes, return a scalar.
 |      
 |      bool_only : bool, default False
 |          Include only boolean columns. Not implemented for Series.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire row/column is NA and skipna is
 |          True, then the result will be True, as for an empty row/column.
 |          If skipna is False, then NA are treated as True, because these are not
 |          equal to zero.
 |      **kwargs : any, default None
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          If level is specified, then, DataFrame is returned; otherwise, Series
 |          is returned.
 |      
 |      See Also
 |      --------
 |      Series.all : Return True if all elements are True.
 |      DataFrame.any : Return True if one (or more) elements are True.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> pd.Series([True, True]).all()
 |      True
 |      >>> pd.Series([True, False]).all()
 |      False
 |      >>> pd.Series([], dtype="float64").all()
 |      True
 |      >>> pd.Series([np.nan]).all()
 |      True
 |      >>> pd.Series([np.nan]).all(skipna=False)
 |      True
 |      
 |      **DataFrames**
 |      
 |      Create a dataframe from a dictionary.
 |      
 |      >>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})
 |      >>> df
 |         col1   col2
 |      0  True   True
 |      1  True  False
 |      
 |      Default behaviour checks if values in each column all return True.
 |      
 |      >>> df.all()
 |      col1     True
 |      col2    False
 |      dtype: bool
 |      
 |      Specify ``axis='columns'`` to check if values in each row all return True.
 |      
 |      >>> df.all(axis='columns')
 |      0     True
 |      1    False
 |      dtype: bool
 |      
 |      Or ``axis=None`` for whether every value is True.
 |      
 |      >>> df.all(axis=None)
 |      False
 |  
 |  any(self, *, axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'Series | bool'
 |      Return whether any element is True, potentially over an axis.
 |      
 |      Returns False unless there is at least one element within a series or
 |      along a Dataframe axis that is True or equivalent (e.g. non-zero or
 |      non-empty).
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Indicate which axis or axes should be reduced. For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          * 0 / 'index' : reduce the index, return a Series whose index is the
 |            original column labels.
 |          * 1 / 'columns' : reduce the columns, return a Series whose index is the
 |            original index.
 |          * None : reduce all axes, return a scalar.
 |      
 |      bool_only : bool, default False
 |          Include only boolean columns. Not implemented for Series.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire row/column is NA and skipna is
 |          True, then the result will be False, as for an empty row/column.
 |          If skipna is False, then NA are treated as True, because these are not
 |          equal to zero.
 |      **kwargs : any, default None
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          If level is specified, then, DataFrame is returned; otherwise, Series
 |          is returned.
 |      
 |      See Also
 |      --------
 |      numpy.any : Numpy version of this method.
 |      Series.any : Return whether any element is True.
 |      Series.all : Return whether all elements are True.
 |      DataFrame.any : Return whether any element is True over requested axis.
 |      DataFrame.all : Return whether all elements are True over requested axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      For Series input, the output is a scalar indicating whether any element
 |      is True.
 |      
 |      >>> pd.Series([False, False]).any()
 |      False
 |      >>> pd.Series([True, False]).any()
 |      True
 |      >>> pd.Series([], dtype="float64").any()
 |      False
 |      >>> pd.Series([np.nan]).any()
 |      False
 |      >>> pd.Series([np.nan]).any(skipna=False)
 |      True
 |      
 |      **DataFrame**
 |      
 |      Whether each column contains at least one True element (the default).
 |      
 |      >>> df = pd.DataFrame({"A": [1, 2], "B": [0, 2], "C": [0, 0]})
 |      >>> df
 |         A  B  C
 |      0  1  0  0
 |      1  2  2  0
 |      
 |      >>> df.any()
 |      A     True
 |      B     True
 |      C    False
 |      dtype: bool
 |      
 |      Aggregating over the columns.
 |      
 |      >>> df = pd.DataFrame({"A": [True, False], "B": [1, 2]})
 |      >>> df
 |             A  B
 |      0   True  1
 |      1  False  2
 |      
 |      >>> df.any(axis='columns')
 |      0    True
 |      1    True
 |      dtype: bool
 |      
 |      >>> df = pd.DataFrame({"A": [True, False], "B": [1, 0]})
 |      >>> df
 |             A  B
 |      0   True  1
 |      1  False  0
 |      
 |      >>> df.any(axis='columns')
 |      0    True
 |      1    False
 |      dtype: bool
 |      
 |      Aggregating over the entire DataFrame with ``axis=None``.
 |      
 |      >>> df.any(axis=None)
 |      True
 |      
 |      `any` for an empty DataFrame is an empty Series.
 |      
 |      >>> pd.DataFrame([]).any()
 |      Series([], dtype: bool)
 |  
 |  apply(self, func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type: "Literal['expand', 'reduce', 'broadcast'] | None" = None, args=(), by_row: "Literal[False, 'compat']" = 'compat', engine: "Literal['python', 'numba']" = 'python', engine_kwargs: 'dict[str, bool] | None' = None, **kwargs)
 |      Apply a function along an axis of the DataFrame.
 |      
 |      Objects passed to the function are Series objects whose index is
 |      either the DataFrame's index (``axis=0``) or the DataFrame's columns
 |      (``axis=1``). By default (``result_type=None``), the final return type
 |      is inferred from the return type of the applied function. Otherwise,
 |      it depends on the `result_type` argument.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          Function to apply to each column or row.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Axis along which the function is applied:
 |      
 |          * 0 or 'index': apply function to each column.
 |          * 1 or 'columns': apply function to each row.
 |      
 |      raw : bool, default False
 |          Determines if row or column is passed as a Series or ndarray object:
 |      
 |          * ``False`` : passes each row or column as a Series to the
 |            function.
 |          * ``True`` : the passed function will receive ndarray objects
 |            instead.
 |            If you are just applying a NumPy reduction function this will
 |            achieve much better performance.
 |      
 |      result_type : {'expand', 'reduce', 'broadcast', None}, default None
 |          These only act when ``axis=1`` (columns):
 |      
 |          * 'expand' : list-like results will be turned into columns.
 |          * 'reduce' : returns a Series if possible rather than expanding
 |            list-like results. This is the opposite of 'expand'.
 |          * 'broadcast' : results will be broadcast to the original shape
 |            of the DataFrame, the original index and columns will be
 |            retained.
 |      
 |          The default behaviour (None) depends on the return value of the
 |          applied function: list-like results will be returned as a Series
 |          of those. However if the apply function returns a Series these
 |          are expanded to columns.
 |      args : tuple
 |          Positional arguments to pass to `func` in addition to the
 |          array/series.
 |      by_row : False or "compat", default "compat"
 |          Only has an effect when ``func`` is a listlike or dictlike of funcs
 |          and the func isn't a string.
 |          If "compat", will if possible first translate the func into pandas
 |          methods (e.g. ``Series().apply(np.sum)`` will be translated to
 |          ``Series().sum()``). If that doesn't work, will try call to apply again with
 |          ``by_row=True`` and if that fails, will call apply again with
 |          ``by_row=False`` (backward compatible).
 |          If False, the funcs will be passed the whole Series at once.
 |      
 |          .. versionadded:: 2.1.0
 |      
 |      engine : {'python', 'numba'}, default 'python'
 |          Choose between the python (default) engine or the numba engine in apply.
 |      
 |          The numba engine will attempt to JIT compile the passed function,
 |          which may result in speedups for large DataFrames.
 |          It also supports the following engine_kwargs :
 |      
 |          - nopython (compile the function in nopython mode)
 |          - nogil (release the GIL inside the JIT compiled function)
 |          - parallel (try to apply the function in parallel over the DataFrame)
 |      
 |            Note: Due to limitations within numba/how pandas interfaces with numba,
 |            you should only use this if raw=True
 |      
 |          Note: The numba compiler only supports a subset of
 |          valid Python/numpy operations.
 |      
 |          Please read more about the `supported python features
 |          <https://numba.pydata.org/numba-doc/dev/reference/pysupported.html>`_
 |          and `supported numpy features
 |          <https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html>`_
 |          in numba to learn what you can or cannot use in the passed function.
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      engine_kwargs : dict
 |          Pass keyword arguments to the engine.
 |          This is currently only used by the numba engine,
 |          see the documentation for the engine argument for more information.
 |      **kwargs
 |          Additional keyword arguments to pass as keywords arguments to
 |          `func`.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Result of applying ``func`` along the given axis of the
 |          DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.map: For elementwise operations.
 |      DataFrame.aggregate: Only perform aggregating type operations.
 |      DataFrame.transform: Only perform transforming type operations.
 |      
 |      Notes
 |      -----
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])
 |      >>> df
 |         A  B
 |      0  4  9
 |      1  4  9
 |      2  4  9
 |      
 |      Using a numpy universal function (in this case the same as
 |      ``np.sqrt(df)``):
 |      
 |      >>> df.apply(np.sqrt)
 |           A    B
 |      0  2.0  3.0
 |      1  2.0  3.0
 |      2  2.0  3.0
 |      
 |      Using a reducing function on either axis
 |      
 |      >>> df.apply(np.sum, axis=0)
 |      A    12
 |      B    27
 |      dtype: int64
 |      
 |      >>> df.apply(np.sum, axis=1)
 |      0    13
 |      1    13
 |      2    13
 |      dtype: int64
 |      
 |      Returning a list-like will result in a Series
 |      
 |      >>> df.apply(lambda x: [1, 2], axis=1)
 |      0    [1, 2]
 |      1    [1, 2]
 |      2    [1, 2]
 |      dtype: object
 |      
 |      Passing ``result_type='expand'`` will expand list-like results
 |      to columns of a Dataframe
 |      
 |      >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')
 |         0  1
 |      0  1  2
 |      1  1  2
 |      2  1  2
 |      
 |      Returning a Series inside the function is similar to passing
 |      ``result_type='expand'``. The resulting column names
 |      will be the Series index.
 |      
 |      >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)
 |         foo  bar
 |      0    1    2
 |      1    1    2
 |      2    1    2
 |      
 |      Passing ``result_type='broadcast'`` will ensure the same shape
 |      result, whether list-like or scalar is returned by the function,
 |      and broadcast it along the axis. The resulting column names will
 |      be the originals.
 |      
 |      >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')
 |         A  B
 |      0  1  2
 |      1  1  2
 |      2  1  2
 |  
 |  applymap(self, func: 'PythonFuncType', na_action: 'NaAction | None' = None, **kwargs) -> 'DataFrame'
 |      Apply a function to a Dataframe elementwise.
 |      
 |      .. deprecated:: 2.1.0
 |      
 |         DataFrame.applymap has been deprecated. Use DataFrame.map instead.
 |      
 |      This method applies a function that accepts and returns a scalar
 |      to every element of a DataFrame.
 |      
 |      Parameters
 |      ----------
 |      func : callable
 |          Python function, returns a single value from a single value.
 |      na_action : {None, 'ignore'}, default None
 |          If 'ignore', propagate NaN values, without passing them to func.
 |      **kwargs
 |          Additional keyword arguments to pass as keywords arguments to
 |          `func`.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Transformed DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.apply : Apply a function along input axis of DataFrame.
 |      DataFrame.map : Apply a function along input axis of DataFrame.
 |      DataFrame.replace: Replace values given in `to_replace` with `value`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])
 |      >>> df
 |             0      1
 |      0  1.000  2.120
 |      1  3.356  4.567
 |      
 |      >>> df.map(lambda x: len(str(x)))
 |         0  1
 |      0  3  4
 |      1  5  5
 |  
 |  assign(self, **kwargs) -> 'DataFrame'
 |      Assign new columns to a DataFrame.
 |      
 |      Returns a new object with all original columns in addition to new ones.
 |      Existing columns that are re-assigned will be overwritten.
 |      
 |      Parameters
 |      ----------
 |      **kwargs : dict of {str: callable or Series}
 |          The column names are keywords. If the values are
 |          callable, they are computed on the DataFrame and
 |          assigned to the new columns. The callable must not
 |          change input DataFrame (though pandas doesn't check it).
 |          If the values are not callable, (e.g. a Series, scalar, or array),
 |          they are simply assigned.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          A new DataFrame with the new columns in addition to
 |          all the existing columns.
 |      
 |      Notes
 |      -----
 |      Assigning multiple columns within the same ``assign`` is possible.
 |      Later items in '\*\*kwargs' may refer to newly created or modified
 |      columns in 'df'; items are computed and assigned into 'df' in order.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},
 |      ...                   index=['Portland', 'Berkeley'])
 |      >>> df
 |                temp_c
 |      Portland    17.0
 |      Berkeley    25.0
 |      
 |      Where the value is a callable, evaluated on `df`:
 |      
 |      >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)
 |                temp_c  temp_f
 |      Portland    17.0    62.6
 |      Berkeley    25.0    77.0
 |      
 |      Alternatively, the same behavior can be achieved by directly
 |      referencing an existing Series or sequence:
 |      
 |      >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)
 |                temp_c  temp_f
 |      Portland    17.0    62.6
 |      Berkeley    25.0    77.0
 |      
 |      You can create multiple columns within the same assign where one
 |      of the columns depends on another one defined within the same assign:
 |      
 |      >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,
 |      ...           temp_k=lambda x: (x['temp_f'] + 459.67) * 5 / 9)
 |                temp_c  temp_f  temp_k
 |      Portland    17.0    62.6  290.15
 |      Berkeley    25.0    77.0  298.15
 |  
 |  boxplot = boxplot_frame(self: 'DataFrame', column=None, by=None, ax=None, fontsize: 'int | None' = None, rot: 'int' = 0, grid: 'bool' = True, figsize: 'tuple[float, float] | None' = None, layout=None, return_type=None, backend=None, **kwargs)
 |      Make a box plot from DataFrame columns.
 |      
 |      Make a box-and-whisker plot from DataFrame columns, optionally grouped
 |      by some other columns. A box plot is a method for graphically depicting
 |      groups of numerical data through their quartiles.
 |      The box extends from the Q1 to Q3 quartile values of the data,
 |      with a line at the median (Q2). The whiskers extend from the edges
 |      of box to show the range of the data. By default, they extend no more than
 |      `1.5 * IQR (IQR = Q3 - Q1)` from the edges of the box, ending at the farthest
 |      data point within that interval. Outliers are plotted as separate dots.
 |      
 |      For further details see
 |      Wikipedia's entry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`_.
 |      
 |      Parameters
 |      ----------
 |      column : str or list of str, optional
 |          Column name or list of names, or vector.
 |          Can be any valid input to :meth:`pandas.DataFrame.groupby`.
 |      by : str or array-like, optional
 |          Column in the DataFrame to :meth:`pandas.DataFrame.groupby`.
 |          One box-plot will be done per value of columns in `by`.
 |      ax : object of class matplotlib.axes.Axes, optional
 |          The matplotlib axes to be used by boxplot.
 |      fontsize : float or str
 |          Tick label font size in points or as a string (e.g., `large`).
 |      rot : float, default 0
 |          The rotation angle of labels (in degrees)
 |          with respect to the screen coordinate system.
 |      grid : bool, default True
 |          Setting this to True will show the grid.
 |      figsize : A tuple (width, height) in inches
 |          The size of the figure to create in matplotlib.
 |      layout : tuple (rows, columns), optional
 |          For example, (3, 5) will display the subplots
 |          using 3 rows and 5 columns, starting from the top-left.
 |      return_type : {'axes', 'dict', 'both'} or None, default 'axes'
 |          The kind of object to return. The default is ``axes``.
 |      
 |          * 'axes' returns the matplotlib axes the boxplot is drawn on.
 |          * 'dict' returns a dictionary whose values are the matplotlib
 |            Lines of the boxplot.
 |          * 'both' returns a namedtuple with the axes and dict.
 |          * when grouping with ``by``, a Series mapping columns to
 |            ``return_type`` is returned.
 |      
 |            If ``return_type`` is `None`, a NumPy array
 |            of axes with the same shape as ``layout`` is returned.
 |      backend : str, default None
 |          Backend to use instead of the backend specified in the option
 |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |          specify the ``plotting.backend`` for the whole session, set
 |          ``pd.options.plotting.backend``.
 |      
 |      **kwargs
 |          All other plotting keyword arguments to be passed to
 |          :func:`matplotlib.pyplot.boxplot`.
 |      
 |      Returns
 |      -------
 |      result
 |          See Notes.
 |      
 |      See Also
 |      --------
 |      pandas.Series.plot.hist: Make a histogram.
 |      matplotlib.pyplot.boxplot : Matplotlib equivalent plot.
 |      
 |      Notes
 |      -----
 |      The return type depends on the `return_type` parameter:
 |      
 |      * 'axes' : object of class matplotlib.axes.Axes
 |      * 'dict' : dict of matplotlib.lines.Line2D objects
 |      * 'both' : a namedtuple with structure (ax, lines)
 |      
 |      For data grouped with ``by``, return a Series of the above or a numpy
 |      array:
 |      
 |      * :class:`~pandas.Series`
 |      * :class:`~numpy.array` (for ``return_type = None``)
 |      
 |      Use ``return_type='dict'`` when you want to tweak the appearance
 |      of the lines after plotting. In this case a dict containing the Lines
 |      making up the boxes, caps, fliers, medians, and whiskers is returned.
 |      
 |      Examples
 |      --------
 |      
 |      Boxplots can be created for every column in the dataframe
 |      by ``df.boxplot()`` or indicating the columns to be used:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> np.random.seed(1234)
 |          >>> df = pd.DataFrame(np.random.randn(10, 4),
 |          ...                   columns=['Col1', 'Col2', 'Col3', 'Col4'])
 |          >>> boxplot = df.boxplot(column=['Col1', 'Col2', 'Col3'])  # doctest: +SKIP
 |      
 |      Boxplots of variables distributions grouped by the values of a third
 |      variable can be created using the option ``by``. For instance:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame(np.random.randn(10, 2),
 |          ...                   columns=['Col1', 'Col2'])
 |          >>> df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',
 |          ...                      'B', 'B', 'B', 'B', 'B'])
 |          >>> boxplot = df.boxplot(by='X')
 |      
 |      A list of strings (i.e. ``['X', 'Y']``) can be passed to boxplot
 |      in order to group the data by combination of the variables in the x-axis:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame(np.random.randn(10, 3),
 |          ...                   columns=['Col1', 'Col2', 'Col3'])
 |          >>> df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',
 |          ...                      'B', 'B', 'B', 'B', 'B'])
 |          >>> df['Y'] = pd.Series(['A', 'B', 'A', 'B', 'A',
 |          ...                      'B', 'A', 'B', 'A', 'B'])
 |          >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by=['X', 'Y'])
 |      
 |      The layout of boxplot can be adjusted giving a tuple to ``layout``:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',
 |          ...                      layout=(2, 1))
 |      
 |      Additional formatting can be done to the boxplot, like suppressing the grid
 |      (``grid=False``), rotating the labels in the x-axis (i.e. ``rot=45``)
 |      or changing the fontsize (i.e. ``fontsize=15``):
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> boxplot = df.boxplot(grid=False, rot=45, fontsize=15)  # doctest: +SKIP
 |      
 |      The parameter ``return_type`` can be used to select the type of element
 |      returned by `boxplot`.  When ``return_type='axes'`` is selected,
 |      the matplotlib axes on which the boxplot is drawn are returned:
 |      
 |          >>> boxplot = df.boxplot(column=['Col1', 'Col2'], return_type='axes')
 |          >>> type(boxplot)
 |          <class 'matplotlib.axes._axes.Axes'>
 |      
 |      When grouping with ``by``, a Series mapping columns to ``return_type``
 |      is returned:
 |      
 |          >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',
 |          ...                      return_type='axes')
 |          >>> type(boxplot)
 |          <class 'pandas.core.series.Series'>
 |      
 |      If ``return_type`` is `None`, a NumPy array of axes with the same shape
 |      as ``layout`` is returned:
 |      
 |          >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',
 |          ...                      return_type=None)
 |          >>> type(boxplot)
 |          <class 'numpy.ndarray'>
 |  
 |  combine(self, other: 'DataFrame', func: 'Callable[[Series, Series], Series | Hashable]', fill_value=None, overwrite: 'bool' = True) -> 'DataFrame'
 |      Perform column-wise combine with another DataFrame.
 |      
 |      Combines a DataFrame with `other` DataFrame using `func`
 |      to element-wise combine columns. The row and column indexes of the
 |      resulting DataFrame will be the union of the two.
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame
 |          The DataFrame to merge column-wise.
 |      func : function
 |          Function that takes two series as inputs and return a Series or a
 |          scalar. Used to merge the two dataframes column by columns.
 |      fill_value : scalar value, default None
 |          The value to fill NaNs with prior to passing any column to the
 |          merge func.
 |      overwrite : bool, default True
 |          If True, columns in `self` that do not exist in `other` will be
 |          overwritten with NaNs.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Combination of the provided DataFrames.
 |      
 |      See Also
 |      --------
 |      DataFrame.combine_first : Combine two DataFrame objects and default to
 |          non-null values in frame calling the method.
 |      
 |      Examples
 |      --------
 |      Combine using a simple function that chooses the smaller column.
 |      
 |      >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})
 |      >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
 |      >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2
 |      >>> df1.combine(df2, take_smaller)
 |         A  B
 |      0  0  3
 |      1  0  3
 |      
 |      Example using a true element-wise combine function.
 |      
 |      >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})
 |      >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
 |      >>> df1.combine(df2, np.minimum)
 |         A  B
 |      0  1  2
 |      1  0  3
 |      
 |      Using `fill_value` fills Nones prior to passing the column to the
 |      merge function.
 |      
 |      >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})
 |      >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
 |      >>> df1.combine(df2, take_smaller, fill_value=-5)
 |         A    B
 |      0  0 -5.0
 |      1  0  4.0
 |      
 |      However, if the same element in both dataframes is None, that None
 |      is preserved
 |      
 |      >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})
 |      >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})
 |      >>> df1.combine(df2, take_smaller, fill_value=-5)
 |          A    B
 |      0  0 -5.0
 |      1  0  3.0
 |      
 |      Example that demonstrates the use of `overwrite` and behavior when
 |      the axis differ between the dataframes.
 |      
 |      >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})
 |      >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])
 |      >>> df1.combine(df2, take_smaller)
 |           A    B     C
 |      0  NaN  NaN   NaN
 |      1  NaN  3.0 -10.0
 |      2  NaN  3.0   1.0
 |      
 |      >>> df1.combine(df2, take_smaller, overwrite=False)
 |           A    B     C
 |      0  0.0  NaN   NaN
 |      1  0.0  3.0 -10.0
 |      2  NaN  3.0   1.0
 |      
 |      Demonstrating the preference of the passed in dataframe.
 |      
 |      >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])
 |      >>> df2.combine(df1, take_smaller)
 |         A    B   C
 |      0  0.0  NaN NaN
 |      1  0.0  3.0 NaN
 |      2  NaN  3.0 NaN
 |      
 |      >>> df2.combine(df1, take_smaller, overwrite=False)
 |           A    B   C
 |      0  0.0  NaN NaN
 |      1  0.0  3.0 1.0
 |      2  NaN  3.0 1.0
 |  
 |  combine_first(self, other: 'DataFrame') -> 'DataFrame'
 |      Update null elements with value in the same location in `other`.
 |      
 |      Combine two DataFrame objects by filling null values in one DataFrame
 |      with non-null values from other DataFrame. The row and column indexes
 |      of the resulting DataFrame will be the union of the two. The resulting
 |      dataframe contains the 'first' dataframe values and overrides the
 |      second one values where both first.loc[index, col] and
 |      second.loc[index, col] are not missing values, upon calling
 |      first.combine_first(second).
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame
 |          Provided DataFrame to use to fill null values.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The result of combining the provided DataFrame with the other object.
 |      
 |      See Also
 |      --------
 |      DataFrame.combine : Perform series-wise operation on two DataFrames
 |          using a given function.
 |      
 |      Examples
 |      --------
 |      >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})
 |      >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
 |      >>> df1.combine_first(df2)
 |           A    B
 |      0  1.0  3.0
 |      1  0.0  4.0
 |      
 |      Null values still persist if the location of that null value
 |      does not exist in `other`
 |      
 |      >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})
 |      >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])
 |      >>> df1.combine_first(df2)
 |           A    B    C
 |      0  NaN  4.0  NaN
 |      1  0.0  3.0  1.0
 |      2  NaN  3.0  1.0
 |  
 |  compare(self, other: 'DataFrame', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -> 'DataFrame'
 |      Compare to another DataFrame and show the differences.
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame
 |          Object to compare with.
 |      
 |      align_axis : {0 or 'index', 1 or 'columns'}, default 1
 |          Determine which axis to align the comparison on.
 |      
 |          * 0, or 'index' : Resulting differences are stacked vertically
 |              with rows drawn alternately from self and other.
 |          * 1, or 'columns' : Resulting differences are aligned horizontally
 |              with columns drawn alternately from self and other.
 |      
 |      keep_shape : bool, default False
 |          If true, all rows and columns are kept.
 |          Otherwise, only the ones with different values are kept.
 |      
 |      keep_equal : bool, default False
 |          If true, the result keeps values that are equal.
 |          Otherwise, equal values are shown as NaNs.
 |      
 |      result_names : tuple, default ('self', 'other')
 |          Set the dataframes names in the comparison.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          DataFrame that shows the differences stacked side by side.
 |      
 |          The resulting index will be a MultiIndex with 'self' and 'other'
 |          stacked alternately at the inner level.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          When the two DataFrames don't have identical labels or shape.
 |      
 |      See Also
 |      --------
 |      Series.compare : Compare with another Series and show differences.
 |      DataFrame.equals : Test whether two objects contain the same elements.
 |      
 |      Notes
 |      -----
 |      Matching NaNs will not appear as a difference.
 |      
 |      Can only compare identically-labeled
 |      (i.e. same shape, identical row and column labels) DataFrames
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     {
 |      ...         "col1": ["a", "a", "b", "b", "a"],
 |      ...         "col2": [1.0, 2.0, 3.0, np.nan, 5.0],
 |      ...         "col3": [1.0, 2.0, 3.0, 4.0, 5.0]
 |      ...     },
 |      ...     columns=["col1", "col2", "col3"],
 |      ... )
 |      >>> df
 |        col1  col2  col3
 |      0    a   1.0   1.0
 |      1    a   2.0   2.0
 |      2    b   3.0   3.0
 |      3    b   NaN   4.0
 |      4    a   5.0   5.0
 |      
 |      >>> df2 = df.copy()
 |      >>> df2.loc[0, 'col1'] = 'c'
 |      >>> df2.loc[2, 'col3'] = 4.0
 |      >>> df2
 |        col1  col2  col3
 |      0    c   1.0   1.0
 |      1    a   2.0   2.0
 |      2    b   3.0   4.0
 |      3    b   NaN   4.0
 |      4    a   5.0   5.0
 |      
 |      Align the differences on columns
 |      
 |      >>> df.compare(df2)
 |        col1       col3
 |        self other self other
 |      0    a     c  NaN   NaN
 |      2  NaN   NaN  3.0   4.0
 |      
 |      Assign result_names
 |      
 |      >>> df.compare(df2, result_names=("left", "right"))
 |        col1       col3
 |        left right left right
 |      0    a     c  NaN   NaN
 |      2  NaN   NaN  3.0   4.0
 |      
 |      Stack the differences on rows
 |      
 |      >>> df.compare(df2, align_axis=0)
 |              col1  col3
 |      0 self     a   NaN
 |        other    c   NaN
 |      2 self   NaN   3.0
 |        other  NaN   4.0
 |      
 |      Keep the equal values
 |      
 |      >>> df.compare(df2, keep_equal=True)
 |        col1       col3
 |        self other self other
 |      0    a     c  1.0   1.0
 |      2    b     b  3.0   4.0
 |      
 |      Keep all original rows and columns
 |      
 |      >>> df.compare(df2, keep_shape=True)
 |        col1       col2       col3
 |        self other self other self other
 |      0    a     c  NaN   NaN  NaN   NaN
 |      1  NaN   NaN  NaN   NaN  NaN   NaN
 |      2  NaN   NaN  NaN   NaN  3.0   4.0
 |      3  NaN   NaN  NaN   NaN  NaN   NaN
 |      4  NaN   NaN  NaN   NaN  NaN   NaN
 |      
 |      Keep all original rows and columns and also all original values
 |      
 |      >>> df.compare(df2, keep_shape=True, keep_equal=True)
 |        col1       col2       col3
 |        self other self other self other
 |      0    a     c  1.0   1.0  1.0   1.0
 |      1    a     a  2.0   2.0  2.0   2.0
 |      2    b     b  3.0   3.0  3.0   4.0
 |      3    b     b  NaN   NaN  4.0   4.0
 |      4    a     a  5.0   5.0  5.0   5.0
 |  
 |  corr(self, method: 'CorrelationMethod' = 'pearson', min_periods: 'int' = 1, numeric_only: 'bool' = False) -> 'DataFrame'
 |      Compute pairwise correlation of columns, excluding NA/null values.
 |      
 |      Parameters
 |      ----------
 |      method : {'pearson', 'kendall', 'spearman'} or callable
 |          Method of correlation:
 |      
 |          * pearson : standard correlation coefficient
 |          * kendall : Kendall Tau correlation coefficient
 |          * spearman : Spearman rank correlation
 |          * callable: callable with input two 1d ndarrays
 |              and returning a float. Note that the returned matrix from corr
 |              will have 1 along the diagonals and will be symmetric
 |              regardless of the callable's behavior.
 |      min_periods : int, optional
 |          Minimum number of observations required per pair of columns
 |          to have a valid result. Currently only available for Pearson
 |          and Spearman correlation.
 |      numeric_only : bool, default False
 |          Include only `float`, `int` or `boolean` data.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |          .. versionchanged:: 2.0.0
 |              The default value of ``numeric_only`` is now ``False``.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Correlation matrix.
 |      
 |      See Also
 |      --------
 |      DataFrame.corrwith : Compute pairwise correlation with another
 |          DataFrame or Series.
 |      Series.corr : Compute the correlation between two Series.
 |      
 |      Notes
 |      -----
 |      Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.
 |      
 |      * `Pearson correlation coefficient <https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_
 |      * `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_
 |      * `Spearman's rank correlation coefficient <https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_
 |      
 |      Examples
 |      --------
 |      >>> def histogram_intersection(a, b):
 |      ...     v = np.minimum(a, b).sum().round(decimals=1)
 |      ...     return v
 |      >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],
 |      ...                   columns=['dogs', 'cats'])
 |      >>> df.corr(method=histogram_intersection)
 |            dogs  cats
 |      dogs   1.0   0.3
 |      cats   0.3   1.0
 |      
 |      >>> df = pd.DataFrame([(1, 1), (2, np.nan), (np.nan, 3), (4, 4)],
 |      ...                   columns=['dogs', 'cats'])
 |      >>> df.corr(min_periods=3)
 |            dogs  cats
 |      dogs   1.0   NaN
 |      cats   NaN   1.0
 |  
 |  corrwith(self, other: 'DataFrame | Series', axis: 'Axis' = 0, drop: 'bool' = False, method: 'CorrelationMethod' = 'pearson', numeric_only: 'bool' = False) -> 'Series'
 |      Compute pairwise correlation.
 |      
 |      Pairwise correlation is computed between rows or columns of
 |      DataFrame with rows or columns of Series or DataFrame. DataFrames
 |      are first aligned along both axes before computing the
 |      correlations.
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame, Series
 |          Object with which to compute correlations.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to use. 0 or 'index' to compute row-wise, 1 or 'columns' for
 |          column-wise.
 |      drop : bool, default False
 |          Drop missing indices from result.
 |      method : {'pearson', 'kendall', 'spearman'} or callable
 |          Method of correlation:
 |      
 |          * pearson : standard correlation coefficient
 |          * kendall : Kendall Tau correlation coefficient
 |          * spearman : Spearman rank correlation
 |          * callable: callable with input two 1d ndarrays
 |              and returning a float.
 |      
 |      numeric_only : bool, default False
 |          Include only `float`, `int` or `boolean` data.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |          .. versionchanged:: 2.0.0
 |              The default value of ``numeric_only`` is now ``False``.
 |      
 |      Returns
 |      -------
 |      Series
 |          Pairwise correlations.
 |      
 |      See Also
 |      --------
 |      DataFrame.corr : Compute pairwise correlation of columns.
 |      
 |      Examples
 |      --------
 |      >>> index = ["a", "b", "c", "d", "e"]
 |      >>> columns = ["one", "two", "three", "four"]
 |      >>> df1 = pd.DataFrame(np.arange(20).reshape(5, 4), index=index, columns=columns)
 |      >>> df2 = pd.DataFrame(np.arange(16).reshape(4, 4), index=index[:4], columns=columns)
 |      >>> df1.corrwith(df2)
 |      one      1.0
 |      two      1.0
 |      three    1.0
 |      four     1.0
 |      dtype: float64
 |      
 |      >>> df2.corrwith(df1, axis=1)
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  count(self, axis: 'Axis' = 0, numeric_only: 'bool' = False)
 |      Count non-NA cells for each column or row.
 |      
 |      The values `None`, `NaN`, `NaT`, ``pandas.NA`` are considered NA.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          If 0 or 'index' counts are generated for each column.
 |          If 1 or 'columns' counts are generated for each row.
 |      numeric_only : bool, default False
 |          Include only `float`, `int` or `boolean` data.
 |      
 |      Returns
 |      -------
 |      Series
 |          For each column/row the number of non-NA/null entries.
 |      
 |      See Also
 |      --------
 |      Series.count: Number of non-NA elements in a Series.
 |      DataFrame.value_counts: Count unique combinations of columns.
 |      DataFrame.shape: Number of DataFrame rows and columns (including NA
 |          elements).
 |      DataFrame.isna: Boolean same-sized DataFrame showing places of NA
 |          elements.
 |      
 |      Examples
 |      --------
 |      Constructing DataFrame from a dictionary:
 |      
 |      >>> df = pd.DataFrame({"Person":
 |      ...                    ["John", "Myla", "Lewis", "John", "Myla"],
 |      ...                    "Age": [24., np.nan, 21., 33, 26],
 |      ...                    "Single": [False, True, True, True, False]})
 |      >>> df
 |         Person   Age  Single
 |      0    John  24.0   False
 |      1    Myla   NaN    True
 |      2   Lewis  21.0    True
 |      3    John  33.0    True
 |      4    Myla  26.0   False
 |      
 |      Notice the uncounted NA values:
 |      
 |      >>> df.count()
 |      Person    5
 |      Age       4
 |      Single    5
 |      dtype: int64
 |      
 |      Counts for each **row**:
 |      
 |      >>> df.count(axis='columns')
 |      0    3
 |      1    2
 |      2    3
 |      3    3
 |      4    3
 |      dtype: int64
 |  
 |  cov(self, min_periods: 'int | None' = None, ddof: 'int | None' = 1, numeric_only: 'bool' = False) -> 'DataFrame'
 |      Compute pairwise covariance of columns, excluding NA/null values.
 |      
 |      Compute the pairwise covariance among the series of a DataFrame.
 |      The returned data frame is the `covariance matrix
 |      <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns
 |      of the DataFrame.
 |      
 |      Both NA and null values are automatically excluded from the
 |      calculation. (See the note below about bias from missing values.)
 |      A threshold can be set for the minimum number of
 |      observations for each value created. Comparisons with observations
 |      below this threshold will be returned as ``NaN``.
 |      
 |      This method is generally used for the analysis of time series data to
 |      understand the relationship between different measures
 |      across time.
 |      
 |      Parameters
 |      ----------
 |      min_periods : int, optional
 |          Minimum number of observations required per pair of columns
 |          to have a valid result.
 |      
 |      ddof : int, default 1
 |          Delta degrees of freedom.  The divisor used in calculations
 |          is ``N - ddof``, where ``N`` represents the number of elements.
 |          This argument is applicable only when no ``nan`` is in the dataframe.
 |      
 |      numeric_only : bool, default False
 |          Include only `float`, `int` or `boolean` data.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |          .. versionchanged:: 2.0.0
 |              The default value of ``numeric_only`` is now ``False``.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The covariance matrix of the series of the DataFrame.
 |      
 |      See Also
 |      --------
 |      Series.cov : Compute covariance with another Series.
 |      core.window.ewm.ExponentialMovingWindow.cov : Exponential weighted sample
 |          covariance.
 |      core.window.expanding.Expanding.cov : Expanding sample covariance.
 |      core.window.rolling.Rolling.cov : Rolling sample covariance.
 |      
 |      Notes
 |      -----
 |      Returns the covariance matrix of the DataFrame's time series.
 |      The covariance is normalized by N-ddof.
 |      
 |      For DataFrames that have Series that are missing data (assuming that
 |      data is `missing at random
 |      <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)
 |      the returned covariance matrix will be an unbiased estimate
 |      of the variance and covariance between the member Series.
 |      
 |      However, for many applications this estimate may not be acceptable
 |      because the estimate covariance matrix is not guaranteed to be positive
 |      semi-definite. This could lead to estimate correlations having
 |      absolute values which are greater than one, and/or a non-invertible
 |      covariance matrix. See `Estimation of covariance matrices
 |      <https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_
 |      matrices>`__ for more details.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],
 |      ...                   columns=['dogs', 'cats'])
 |      >>> df.cov()
 |                dogs      cats
 |      dogs  0.666667 -1.000000
 |      cats -1.000000  1.666667
 |      
 |      >>> np.random.seed(42)
 |      >>> df = pd.DataFrame(np.random.randn(1000, 5),
 |      ...                   columns=['a', 'b', 'c', 'd', 'e'])
 |      >>> df.cov()
 |                a         b         c         d         e
 |      a  0.998438 -0.020161  0.059277 -0.008943  0.014144
 |      b -0.020161  1.059352 -0.008543 -0.024738  0.009826
 |      c  0.059277 -0.008543  1.010670 -0.001486 -0.000271
 |      d -0.008943 -0.024738 -0.001486  0.921297 -0.013692
 |      e  0.014144  0.009826 -0.000271 -0.013692  0.977795
 |      
 |      **Minimum number of periods**
 |      
 |      This method also supports an optional ``min_periods`` keyword
 |      that specifies the required minimum number of non-NA observations for
 |      each column pair in order to have a valid result:
 |      
 |      >>> np.random.seed(42)
 |      >>> df = pd.DataFrame(np.random.randn(20, 3),
 |      ...                   columns=['a', 'b', 'c'])
 |      >>> df.loc[df.index[:5], 'a'] = np.nan
 |      >>> df.loc[df.index[5:10], 'b'] = np.nan
 |      >>> df.cov(min_periods=12)
 |                a         b         c
 |      a  0.316741       NaN -0.150812
 |      b       NaN  1.248003  0.191417
 |      c -0.150812  0.191417  0.895202
 |  
 |  cummax(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative maximum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      maximum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Return cumulative maximum of Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.max : Similar functionality
 |          but ignores ``NaN`` values.
 |      DataFrame.max : Return the maximum over
 |          DataFrame axis.
 |      DataFrame.cummax : Return cumulative maximum over DataFrame axis.
 |      DataFrame.cummin : Return cumulative minimum over DataFrame axis.
 |      DataFrame.cumsum : Return cumulative sum over DataFrame axis.
 |      DataFrame.cumprod : Return cumulative product over DataFrame axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cummax()
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3    5.0
 |      4    5.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cummax(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the maximum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cummax()
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  3.0  1.0
 |      
 |      To iterate over columns and find the maximum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cummax(axis=1)
 |           A    B
 |      0  2.0  2.0
 |      1  3.0  NaN
 |      2  1.0  1.0
 |  
 |  cummin(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative minimum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      minimum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Return cumulative minimum of Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.min : Similar functionality
 |          but ignores ``NaN`` values.
 |      DataFrame.min : Return the minimum over
 |          DataFrame axis.
 |      DataFrame.cummax : Return cumulative maximum over DataFrame axis.
 |      DataFrame.cummin : Return cumulative minimum over DataFrame axis.
 |      DataFrame.cumsum : Return cumulative sum over DataFrame axis.
 |      DataFrame.cumprod : Return cumulative product over DataFrame axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cummin()
 |      0    2.0
 |      1    NaN
 |      2    2.0
 |      3   -1.0
 |      4   -1.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cummin(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the minimum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cummin()
 |           A    B
 |      0  2.0  1.0
 |      1  2.0  NaN
 |      2  1.0  0.0
 |      
 |      To iterate over columns and find the minimum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cummin(axis=1)
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |  
 |  cumprod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative product over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      product.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Return cumulative product of Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.prod : Similar functionality
 |          but ignores ``NaN`` values.
 |      DataFrame.prod : Return the product over
 |          DataFrame axis.
 |      DataFrame.cummax : Return cumulative maximum over DataFrame axis.
 |      DataFrame.cummin : Return cumulative minimum over DataFrame axis.
 |      DataFrame.cumsum : Return cumulative sum over DataFrame axis.
 |      DataFrame.cumprod : Return cumulative product over DataFrame axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cumprod()
 |      0     2.0
 |      1     NaN
 |      2    10.0
 |      3   -10.0
 |      4    -0.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cumprod(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the product
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cumprod()
 |           A    B
 |      0  2.0  1.0
 |      1  6.0  NaN
 |      2  6.0  0.0
 |      
 |      To iterate over columns and find the product in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cumprod(axis=1)
 |           A    B
 |      0  2.0  2.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |  
 |  cumsum(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative sum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      sum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Return cumulative sum of Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.sum : Similar functionality
 |          but ignores ``NaN`` values.
 |      DataFrame.sum : Return the sum over
 |          DataFrame axis.
 |      DataFrame.cummax : Return cumulative maximum over DataFrame axis.
 |      DataFrame.cummin : Return cumulative minimum over DataFrame axis.
 |      DataFrame.cumsum : Return cumulative sum over DataFrame axis.
 |      DataFrame.cumprod : Return cumulative product over DataFrame axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cumsum()
 |      0    2.0
 |      1    NaN
 |      2    7.0
 |      3    6.0
 |      4    6.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cumsum(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the sum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cumsum()
 |           A    B
 |      0  2.0  1.0
 |      1  5.0  NaN
 |      2  6.0  1.0
 |      
 |      To iterate over columns and find the sum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cumsum(axis=1)
 |           A    B
 |      0  2.0  3.0
 |      1  3.0  NaN
 |      2  1.0  1.0
 |  
 |  diff(self, periods: 'int' = 1, axis: 'Axis' = 0) -> 'DataFrame'
 |      First discrete difference of element.
 |      
 |      Calculates the difference of a DataFrame element compared with another
 |      element in the DataFrame (default is element in previous row).
 |      
 |      Parameters
 |      ----------
 |      periods : int, default 1
 |          Periods to shift for calculating difference, accepts negative
 |          values.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Take difference over rows (0) or columns (1).
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          First differences of the Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.pct_change: Percent change over given number of periods.
 |      DataFrame.shift: Shift index by desired number of periods with an
 |          optional time freq.
 |      Series.diff: First discrete difference of object.
 |      
 |      Notes
 |      -----
 |      For boolean dtypes, this uses :meth:`operator.xor` rather than
 |      :meth:`operator.sub`.
 |      The result is calculated according to current dtype in DataFrame,
 |      however dtype of the result is always float64.
 |      
 |      Examples
 |      --------
 |      
 |      Difference with previous row
 |      
 |      >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],
 |      ...                    'b': [1, 1, 2, 3, 5, 8],
 |      ...                    'c': [1, 4, 9, 16, 25, 36]})
 |      >>> df
 |         a  b   c
 |      0  1  1   1
 |      1  2  1   4
 |      2  3  2   9
 |      3  4  3  16
 |      4  5  5  25
 |      5  6  8  36
 |      
 |      >>> df.diff()
 |           a    b     c
 |      0  NaN  NaN   NaN
 |      1  1.0  0.0   3.0
 |      2  1.0  1.0   5.0
 |      3  1.0  1.0   7.0
 |      4  1.0  2.0   9.0
 |      5  1.0  3.0  11.0
 |      
 |      Difference with previous column
 |      
 |      >>> df.diff(axis=1)
 |          a  b   c
 |      0 NaN  0   0
 |      1 NaN -1   3
 |      2 NaN -1   7
 |      3 NaN -1  13
 |      4 NaN  0  20
 |      5 NaN  2  28
 |      
 |      Difference with 3rd previous row
 |      
 |      >>> df.diff(periods=3)
 |           a    b     c
 |      0  NaN  NaN   NaN
 |      1  NaN  NaN   NaN
 |      2  NaN  NaN   NaN
 |      3  3.0  2.0  15.0
 |      4  3.0  4.0  21.0
 |      5  3.0  6.0  27.0
 |      
 |      Difference with following row
 |      
 |      >>> df.diff(periods=-1)
 |           a    b     c
 |      0 -1.0  0.0  -3.0
 |      1 -1.0 -1.0  -5.0
 |      2 -1.0 -1.0  -7.0
 |      3 -1.0 -2.0  -9.0
 |      4 -1.0 -3.0 -11.0
 |      5  NaN  NaN   NaN
 |      
 |      Overflow in input dtype
 |      
 |      >>> df = pd.DataFrame({'a': [1, 0]}, dtype=np.uint8)
 |      >>> df.diff()
 |             a
 |      0    NaN
 |      1  255.0
 |  
 |  div = truediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |  
 |  divide = truediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |  
 |  dot(self, other: 'AnyArrayLike | DataFrame') -> 'DataFrame | Series'
 |      Compute the matrix multiplication between the DataFrame and other.
 |      
 |      This method computes the matrix product between the DataFrame and the
 |      values of an other Series, DataFrame or a numpy array.
 |      
 |      It can also be called using ``self @ other``.
 |      
 |      Parameters
 |      ----------
 |      other : Series, DataFrame or array-like
 |          The other object to compute the matrix product with.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          If other is a Series, return the matrix product between self and
 |          other as a Series. If other is a DataFrame or a numpy.array, return
 |          the matrix product of self and other in a DataFrame of a np.array.
 |      
 |      See Also
 |      --------
 |      Series.dot: Similar method for Series.
 |      
 |      Notes
 |      -----
 |      The dimensions of DataFrame and other must be compatible in order to
 |      compute the matrix multiplication. In addition, the column names of
 |      DataFrame and the index of other must contain the same values, as they
 |      will be aligned prior to the multiplication.
 |      
 |      The dot method for Series computes the inner product, instead of the
 |      matrix product here.
 |      
 |      Examples
 |      --------
 |      Here we multiply a DataFrame with a Series.
 |      
 |      >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])
 |      >>> s = pd.Series([1, 1, 2, 1])
 |      >>> df.dot(s)
 |      0    -4
 |      1     5
 |      dtype: int64
 |      
 |      Here we multiply a DataFrame with another DataFrame.
 |      
 |      >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])
 |      >>> df.dot(other)
 |          0   1
 |      0   1   4
 |      1   2   2
 |      
 |      Note that the dot method give the same result as @
 |      
 |      >>> df @ other
 |          0   1
 |      0   1   4
 |      1   2   2
 |      
 |      The dot method works also if other is an np.array.
 |      
 |      >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])
 |      >>> df.dot(arr)
 |          0   1
 |      0   1   4
 |      1   2   2
 |      
 |      Note how shuffling of the objects does not change the result.
 |      
 |      >>> s2 = s.reindex([1, 0, 2, 3])
 |      >>> df.dot(s2)
 |      0    -4
 |      1     5
 |      dtype: int64
 |  
 |  drop(self, labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -> 'DataFrame | None'
 |      Drop specified labels from rows or columns.
 |      
 |      Remove rows or columns by specifying label names and corresponding
 |      axis, or by directly specifying index or column names. When using a
 |      multi-index, labels on different levels can be removed by specifying
 |      the level. See the :ref:`user guide <advanced.shown_levels>`
 |      for more information about the now unused levels.
 |      
 |      Parameters
 |      ----------
 |      labels : single label or list-like
 |          Index or column labels to drop. A tuple will be used as a single
 |          label and not treated as a list-like.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Whether to drop labels from the index (0 or 'index') or
 |          columns (1 or 'columns').
 |      index : single label or list-like
 |          Alternative to specifying axis (``labels, axis=0``
 |          is equivalent to ``index=labels``).
 |      columns : single label or list-like
 |          Alternative to specifying axis (``labels, axis=1``
 |          is equivalent to ``columns=labels``).
 |      level : int or level name, optional
 |          For MultiIndex, level from which the labels will be removed.
 |      inplace : bool, default False
 |          If False, return a copy. Otherwise, do operation
 |          in place and return None.
 |      errors : {'ignore', 'raise'}, default 'raise'
 |          If 'ignore', suppress error and only existing labels are
 |          dropped.
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          Returns DataFrame or None DataFrame with the specified
 |          index or column labels removed or None if inplace=True.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If any of the labels is not found in the selected axis.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Label-location based indexer for selection by label.
 |      DataFrame.dropna : Return DataFrame with labels on given axis omitted
 |          where (all or any) data are missing.
 |      DataFrame.drop_duplicates : Return DataFrame with duplicate rows
 |          removed, optionally only considering certain columns.
 |      Series.drop : Return Series with specified index labels removed.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),
 |      ...                   columns=['A', 'B', 'C', 'D'])
 |      >>> df
 |         A  B   C   D
 |      0  0  1   2   3
 |      1  4  5   6   7
 |      2  8  9  10  11
 |      
 |      Drop columns
 |      
 |      >>> df.drop(['B', 'C'], axis=1)
 |         A   D
 |      0  0   3
 |      1  4   7
 |      2  8  11
 |      
 |      >>> df.drop(columns=['B', 'C'])
 |         A   D
 |      0  0   3
 |      1  4   7
 |      2  8  11
 |      
 |      Drop a row by index
 |      
 |      >>> df.drop([0, 1])
 |         A  B   C   D
 |      2  8  9  10  11
 |      
 |      Drop columns and/or rows of MultiIndex DataFrame
 |      
 |      >>> midx = pd.MultiIndex(levels=[['llama', 'cow', 'falcon'],
 |      ...                              ['speed', 'weight', 'length']],
 |      ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],
 |      ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])
 |      >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],
 |      ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],
 |      ...                         [250, 150], [1.5, 0.8], [320, 250],
 |      ...                         [1, 0.8], [0.3, 0.2]])
 |      >>> df
 |                      big     small
 |      llama   speed   45.0    30.0
 |              weight  200.0   100.0
 |              length  1.5     1.0
 |      cow     speed   30.0    20.0
 |              weight  250.0   150.0
 |              length  1.5     0.8
 |      falcon  speed   320.0   250.0
 |              weight  1.0     0.8
 |              length  0.3     0.2
 |      
 |      Drop a specific index combination from the MultiIndex
 |      DataFrame, i.e., drop the combination ``'falcon'`` and
 |      ``'weight'``, which deletes only the corresponding row
 |      
 |      >>> df.drop(index=('falcon', 'weight'))
 |                      big     small
 |      llama   speed   45.0    30.0
 |              weight  200.0   100.0
 |              length  1.5     1.0
 |      cow     speed   30.0    20.0
 |              weight  250.0   150.0
 |              length  1.5     0.8
 |      falcon  speed   320.0   250.0
 |              length  0.3     0.2
 |      
 |      >>> df.drop(index='cow', columns='small')
 |                      big
 |      llama   speed   45.0
 |              weight  200.0
 |              length  1.5
 |      falcon  speed   320.0
 |              weight  1.0
 |              length  0.3
 |      
 |      >>> df.drop(index='length', level=1)
 |                      big     small
 |      llama   speed   45.0    30.0
 |              weight  200.0   100.0
 |      cow     speed   30.0    20.0
 |              weight  250.0   150.0
 |      falcon  speed   320.0   250.0
 |              weight  1.0     0.8
 |  
 |  drop_duplicates(self, subset: 'Hashable | Sequence[Hashable] | None' = None, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'DataFrame | None'
 |      Return DataFrame with duplicate rows removed.
 |      
 |      Considering certain columns is optional. Indexes, including time indexes
 |      are ignored.
 |      
 |      Parameters
 |      ----------
 |      subset : column label or sequence of labels, optional
 |          Only consider certain columns for identifying duplicates, by
 |          default use all of the columns.
 |      keep : {'first', 'last', ``False``}, default 'first'
 |          Determines which duplicates (if any) to keep.
 |      
 |          - 'first' : Drop duplicates except for the first occurrence.
 |          - 'last' : Drop duplicates except for the last occurrence.
 |          - ``False`` : Drop all duplicates.
 |      
 |      inplace : bool, default ``False``
 |          Whether to modify the DataFrame rather than creating a new one.
 |      ignore_index : bool, default ``False``
 |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          DataFrame with duplicates removed or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.value_counts: Count unique combinations of columns.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing ramen rating.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],
 |      ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],
 |      ...     'rating': [4, 4, 3.5, 15, 5]
 |      ... })
 |      >>> df
 |          brand style  rating
 |      0  Yum Yum   cup     4.0
 |      1  Yum Yum   cup     4.0
 |      2  Indomie   cup     3.5
 |      3  Indomie  pack    15.0
 |      4  Indomie  pack     5.0
 |      
 |      By default, it removes duplicate rows based on all columns.
 |      
 |      >>> df.drop_duplicates()
 |          brand style  rating
 |      0  Yum Yum   cup     4.0
 |      2  Indomie   cup     3.5
 |      3  Indomie  pack    15.0
 |      4  Indomie  pack     5.0
 |      
 |      To remove duplicates on specific column(s), use ``subset``.
 |      
 |      >>> df.drop_duplicates(subset=['brand'])
 |          brand style  rating
 |      0  Yum Yum   cup     4.0
 |      2  Indomie   cup     3.5
 |      
 |      To remove duplicates and keep last occurrences, use ``keep``.
 |      
 |      >>> df.drop_duplicates(subset=['brand', 'style'], keep='last')
 |          brand style  rating
 |      1  Yum Yum   cup     4.0
 |      2  Indomie   cup     3.5
 |      4  Indomie  pack     5.0
 |  
 |  dropna(self, *, axis: 'Axis' = 0, how: 'AnyAll | lib.NoDefault' = <no_default>, thresh: 'int | lib.NoDefault' = <no_default>, subset: 'IndexLabel | None' = None, inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'DataFrame | None'
 |      Remove missing values.
 |      
 |      See the :ref:`User Guide <missing_data>` for more on which values are
 |      considered missing, and how to work with missing data.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Determine if rows or columns which contain missing values are
 |          removed.
 |      
 |          * 0, or 'index' : Drop rows which contain missing values.
 |          * 1, or 'columns' : Drop columns which contain missing value.
 |      
 |          Only a single axis is allowed.
 |      
 |      how : {'any', 'all'}, default 'any'
 |          Determine if row or column is removed from DataFrame, when we have
 |          at least one NA or all NA.
 |      
 |          * 'any' : If any NA values are present, drop that row or column.
 |          * 'all' : If all values are NA, drop that row or column.
 |      
 |      thresh : int, optional
 |          Require that many non-NA values. Cannot be combined with how.
 |      subset : column label or sequence of labels, optional
 |          Labels along other axis to consider, e.g. if you are dropping rows
 |          these would be a list of columns to include.
 |      inplace : bool, default False
 |          Whether to modify the DataFrame rather than creating a new one.
 |      ignore_index : bool, default ``False``
 |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          DataFrame with NA entries dropped from it or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.isna: Indicate missing values.
 |      DataFrame.notna : Indicate existing (non-missing) values.
 |      DataFrame.fillna : Replace missing values.
 |      Series.dropna : Drop missing values.
 |      Index.dropna : Drop missing indices.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"name": ['Alfred', 'Batman', 'Catwoman'],
 |      ...                    "toy": [np.nan, 'Batmobile', 'Bullwhip'],
 |      ...                    "born": [pd.NaT, pd.Timestamp("1940-04-25"),
 |      ...                             pd.NaT]})
 |      >>> df
 |             name        toy       born
 |      0    Alfred        NaN        NaT
 |      1    Batman  Batmobile 1940-04-25
 |      2  Catwoman   Bullwhip        NaT
 |      
 |      Drop the rows where at least one element is missing.
 |      
 |      >>> df.dropna()
 |           name        toy       born
 |      1  Batman  Batmobile 1940-04-25
 |      
 |      Drop the columns where at least one element is missing.
 |      
 |      >>> df.dropna(axis='columns')
 |             name
 |      0    Alfred
 |      1    Batman
 |      2  Catwoman
 |      
 |      Drop the rows where all elements are missing.
 |      
 |      >>> df.dropna(how='all')
 |             name        toy       born
 |      0    Alfred        NaN        NaT
 |      1    Batman  Batmobile 1940-04-25
 |      2  Catwoman   Bullwhip        NaT
 |      
 |      Keep only the rows with at least 2 non-NA values.
 |      
 |      >>> df.dropna(thresh=2)
 |             name        toy       born
 |      1    Batman  Batmobile 1940-04-25
 |      2  Catwoman   Bullwhip        NaT
 |      
 |      Define in which columns to look for missing values.
 |      
 |      >>> df.dropna(subset=['name', 'toy'])
 |             name        toy       born
 |      1    Batman  Batmobile 1940-04-25
 |      2  Catwoman   Bullwhip        NaT
 |  
 |  duplicated(self, subset: 'Hashable | Sequence[Hashable] | None' = None, keep: 'DropKeep' = 'first') -> 'Series'
 |      Return boolean Series denoting duplicate rows.
 |      
 |      Considering certain columns is optional.
 |      
 |      Parameters
 |      ----------
 |      subset : column label or sequence of labels, optional
 |          Only consider certain columns for identifying duplicates, by
 |          default use all of the columns.
 |      keep : {'first', 'last', False}, default 'first'
 |          Determines which duplicates (if any) to mark.
 |      
 |          - ``first`` : Mark duplicates as ``True`` except for the first occurrence.
 |          - ``last`` : Mark duplicates as ``True`` except for the last occurrence.
 |          - False : Mark all duplicates as ``True``.
 |      
 |      Returns
 |      -------
 |      Series
 |          Boolean series for each duplicated rows.
 |      
 |      See Also
 |      --------
 |      Index.duplicated : Equivalent method on index.
 |      Series.duplicated : Equivalent method on Series.
 |      Series.drop_duplicates : Remove duplicate values from Series.
 |      DataFrame.drop_duplicates : Remove duplicate values from DataFrame.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing ramen rating.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],
 |      ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],
 |      ...     'rating': [4, 4, 3.5, 15, 5]
 |      ... })
 |      >>> df
 |          brand style  rating
 |      0  Yum Yum   cup     4.0
 |      1  Yum Yum   cup     4.0
 |      2  Indomie   cup     3.5
 |      3  Indomie  pack    15.0
 |      4  Indomie  pack     5.0
 |      
 |      By default, for each set of duplicated values, the first occurrence
 |      is set on False and all others on True.
 |      
 |      >>> df.duplicated()
 |      0    False
 |      1     True
 |      2    False
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      By using 'last', the last occurrence of each set of duplicated values
 |      is set on False and all others on True.
 |      
 |      >>> df.duplicated(keep='last')
 |      0     True
 |      1    False
 |      2    False
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      By setting ``keep`` on False, all duplicates are True.
 |      
 |      >>> df.duplicated(keep=False)
 |      0     True
 |      1     True
 |      2    False
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      To find duplicates on specific column(s), use ``subset``.
 |      
 |      >>> df.duplicated(subset=['brand'])
 |      0    False
 |      1     True
 |      2    False
 |      3     True
 |      4     True
 |      dtype: bool
 |  
 |  eq(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'
 |      Get Equal to of dataframe and other, element-wise (binary operator `eq`).
 |      
 |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
 |      operators.
 |      
 |      Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
 |      (rows or columns) and level for comparison.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'
 |          Whether to compare by the index (0 or 'index') or columns
 |          (1 or 'columns').
 |      level : int or label
 |          Broadcast across a level, matching Index values on the passed
 |          MultiIndex level.
 |      
 |      Returns
 |      -------
 |      DataFrame of bool
 |          Result of the comparison.
 |      
 |      See Also
 |      --------
 |      DataFrame.eq : Compare DataFrames for equality elementwise.
 |      DataFrame.ne : Compare DataFrames for inequality elementwise.
 |      DataFrame.le : Compare DataFrames for less than inequality
 |          or equality elementwise.
 |      DataFrame.lt : Compare DataFrames for strictly less than
 |          inequality elementwise.
 |      DataFrame.ge : Compare DataFrames for greater than inequality
 |          or equality elementwise.
 |      DataFrame.gt : Compare DataFrames for strictly greater than
 |          inequality elementwise.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      `NaN` values are considered different (i.e. `NaN` != `NaN`).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'cost': [250, 150, 100],
 |      ...                    'revenue': [100, 250, 300]},
 |      ...                   index=['A', 'B', 'C'])
 |      >>> df
 |         cost  revenue
 |      A   250      100
 |      B   150      250
 |      C   100      300
 |      
 |      Comparison with a scalar, using either the operator or method:
 |      
 |      >>> df == 100
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      >>> df.eq(100)
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned
 |      with the index of `other` and broadcast:
 |      
 |      >>> df != pd.Series([100, 250], index=["cost", "revenue"])
 |          cost  revenue
 |      A   True     True
 |      B   True    False
 |      C  False     True
 |      
 |      Use the method to control the broadcast axis:
 |      
 |      >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
 |         cost  revenue
 |      A  True    False
 |      B  True     True
 |      C  True     True
 |      D  True     True
 |      
 |      When comparing to an arbitrary sequence, the number of columns must
 |      match the number elements in `other`:
 |      
 |      >>> df == [250, 100]
 |          cost  revenue
 |      A   True     True
 |      B  False    False
 |      C  False    False
 |      
 |      Use the method to control the axis:
 |      
 |      >>> df.eq([250, 250, 100], axis='index')
 |          cost  revenue
 |      A   True    False
 |      B  False     True
 |      C   True    False
 |      
 |      Compare to a DataFrame of different shape.
 |      
 |      >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
 |      ...                      index=['A', 'B', 'C', 'D'])
 |      >>> other
 |         revenue
 |      A      300
 |      B      250
 |      C      100
 |      D      150
 |      
 |      >>> df.gt(other)
 |          cost  revenue
 |      A  False    False
 |      B  False    False
 |      C  False     True
 |      D  False    False
 |      
 |      Compare to a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
 |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},
 |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
 |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
 |      >>> df_multindex
 |            cost  revenue
 |      Q1 A   250      100
 |         B   150      250
 |         C   100      300
 |      Q2 A   150      200
 |         B   300      175
 |         C   220      225
 |      
 |      >>> df.le(df_multindex, level=1)
 |             cost  revenue
 |      Q1 A   True     True
 |         B   True     True
 |         C   True     True
 |      Q2 A  False     True
 |         B   True    False
 |         C   True    False
 |  
 |  eval(self, expr: 'str', *, inplace: 'bool' = False, **kwargs) -> 'Any | None'
 |      Evaluate a string describing operations on DataFrame columns.
 |      
 |      Operates on columns only, not specific rows or elements.  This allows
 |      `eval` to run arbitrary code, which can make you vulnerable to code
 |      injection if you pass user input to this function.
 |      
 |      Parameters
 |      ----------
 |      expr : str
 |          The expression string to evaluate.
 |      inplace : bool, default False
 |          If the expression contains an assignment, whether to perform the
 |          operation inplace and mutate the existing DataFrame. Otherwise,
 |          a new DataFrame is returned.
 |      **kwargs
 |          See the documentation for :func:`eval` for complete details
 |          on the keyword arguments accepted by
 |          :meth:`~pandas.DataFrame.query`.
 |      
 |      Returns
 |      -------
 |      ndarray, scalar, pandas object, or None
 |          The result of the evaluation or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.query : Evaluates a boolean expression to query the columns
 |          of a frame.
 |      DataFrame.assign : Can evaluate an expression or function to create new
 |          values for a column.
 |      eval : Evaluate a Python expression as a string using various
 |          backends.
 |      
 |      Notes
 |      -----
 |      For more details see the API documentation for :func:`~eval`.
 |      For detailed examples see :ref:`enhancing performance with eval
 |      <enhancingperf.eval>`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})
 |      >>> df
 |         A   B
 |      0  1  10
 |      1  2   8
 |      2  3   6
 |      3  4   4
 |      4  5   2
 |      >>> df.eval('A + B')
 |      0    11
 |      1    10
 |      2     9
 |      3     8
 |      4     7
 |      dtype: int64
 |      
 |      Assignment is allowed though by default the original DataFrame is not
 |      modified.
 |      
 |      >>> df.eval('C = A + B')
 |         A   B   C
 |      0  1  10  11
 |      1  2   8  10
 |      2  3   6   9
 |      3  4   4   8
 |      4  5   2   7
 |      >>> df
 |         A   B
 |      0  1  10
 |      1  2   8
 |      2  3   6
 |      3  4   4
 |      4  5   2
 |      
 |      Multiple columns can be assigned to using multi-line expressions:
 |      
 |      >>> df.eval(
 |      ...     '''
 |      ... C = A + B
 |      ... D = A - B
 |      ... '''
 |      ... )
 |         A   B   C  D
 |      0  1  10  11 -9
 |      1  2   8  10 -6
 |      2  3   6   9 -3
 |      3  4   4   8  0
 |      4  5   2   7  3
 |  
 |  explode(self, column: 'IndexLabel', ignore_index: 'bool' = False) -> 'DataFrame'
 |      Transform each element of a list-like to a row, replicating index values.
 |      
 |      Parameters
 |      ----------
 |      column : IndexLabel
 |          Column(s) to explode.
 |          For multiple columns, specify a non-empty list with each element
 |          be str or tuple, and all specified columns their list-like data
 |          on same row of the frame must have matching length.
 |      
 |          .. versionadded:: 1.3.0
 |              Multi-column explode
 |      
 |      ignore_index : bool, default False
 |          If True, the resulting index will be labeled 0, 1, …, n - 1.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Exploded lists to rows of the subset columns;
 |          index will be duplicated for these rows.
 |      
 |      Raises
 |      ------
 |      ValueError :
 |          * If columns of the frame are not unique.
 |          * If specified columns to explode is empty list.
 |          * If specified columns to explode have not matching count of
 |            elements rowwise in the frame.
 |      
 |      See Also
 |      --------
 |      DataFrame.unstack : Pivot a level of the (necessarily hierarchical)
 |          index labels.
 |      DataFrame.melt : Unpivot a DataFrame from wide format to long format.
 |      Series.explode : Explode a DataFrame from list-like columns to long format.
 |      
 |      Notes
 |      -----
 |      This routine will explode list-likes including lists, tuples, sets,
 |      Series, and np.ndarray. The result dtype of the subset rows will
 |      be object. Scalars will be returned unchanged, and empty list-likes will
 |      result in a np.nan for that row. In addition, the ordering of rows in the
 |      output will be non-deterministic when exploding sets.
 |      
 |      Reference :ref:`the user guide <reshaping.explode>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [[0, 1, 2], 'foo', [], [3, 4]],
 |      ...                    'B': 1,
 |      ...                    'C': [['a', 'b', 'c'], np.nan, [], ['d', 'e']]})
 |      >>> df
 |                 A  B          C
 |      0  [0, 1, 2]  1  [a, b, c]
 |      1        foo  1        NaN
 |      2         []  1         []
 |      3     [3, 4]  1     [d, e]
 |      
 |      Single-column explode.
 |      
 |      >>> df.explode('A')
 |           A  B          C
 |      0    0  1  [a, b, c]
 |      0    1  1  [a, b, c]
 |      0    2  1  [a, b, c]
 |      1  foo  1        NaN
 |      2  NaN  1         []
 |      3    3  1     [d, e]
 |      3    4  1     [d, e]
 |      
 |      Multi-column explode.
 |      
 |      >>> df.explode(list('AC'))
 |           A  B    C
 |      0    0  1    a
 |      0    1  1    b
 |      0    2  1    c
 |      1  foo  1  NaN
 |      2  NaN  1  NaN
 |      3    3  1    d
 |      3    4  1    e
 |  
 |  floordiv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Integer division of dataframe and other, element-wise (binary operator `floordiv`).
 |      
 |      Equivalent to ``dataframe // other``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `rfloordiv`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  ge(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'
 |      Get Greater than or equal to of dataframe and other, element-wise (binary operator `ge`).
 |      
 |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
 |      operators.
 |      
 |      Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
 |      (rows or columns) and level for comparison.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'
 |          Whether to compare by the index (0 or 'index') or columns
 |          (1 or 'columns').
 |      level : int or label
 |          Broadcast across a level, matching Index values on the passed
 |          MultiIndex level.
 |      
 |      Returns
 |      -------
 |      DataFrame of bool
 |          Result of the comparison.
 |      
 |      See Also
 |      --------
 |      DataFrame.eq : Compare DataFrames for equality elementwise.
 |      DataFrame.ne : Compare DataFrames for inequality elementwise.
 |      DataFrame.le : Compare DataFrames for less than inequality
 |          or equality elementwise.
 |      DataFrame.lt : Compare DataFrames for strictly less than
 |          inequality elementwise.
 |      DataFrame.ge : Compare DataFrames for greater than inequality
 |          or equality elementwise.
 |      DataFrame.gt : Compare DataFrames for strictly greater than
 |          inequality elementwise.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      `NaN` values are considered different (i.e. `NaN` != `NaN`).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'cost': [250, 150, 100],
 |      ...                    'revenue': [100, 250, 300]},
 |      ...                   index=['A', 'B', 'C'])
 |      >>> df
 |         cost  revenue
 |      A   250      100
 |      B   150      250
 |      C   100      300
 |      
 |      Comparison with a scalar, using either the operator or method:
 |      
 |      >>> df == 100
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      >>> df.eq(100)
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned
 |      with the index of `other` and broadcast:
 |      
 |      >>> df != pd.Series([100, 250], index=["cost", "revenue"])
 |          cost  revenue
 |      A   True     True
 |      B   True    False
 |      C  False     True
 |      
 |      Use the method to control the broadcast axis:
 |      
 |      >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
 |         cost  revenue
 |      A  True    False
 |      B  True     True
 |      C  True     True
 |      D  True     True
 |      
 |      When comparing to an arbitrary sequence, the number of columns must
 |      match the number elements in `other`:
 |      
 |      >>> df == [250, 100]
 |          cost  revenue
 |      A   True     True
 |      B  False    False
 |      C  False    False
 |      
 |      Use the method to control the axis:
 |      
 |      >>> df.eq([250, 250, 100], axis='index')
 |          cost  revenue
 |      A   True    False
 |      B  False     True
 |      C   True    False
 |      
 |      Compare to a DataFrame of different shape.
 |      
 |      >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
 |      ...                      index=['A', 'B', 'C', 'D'])
 |      >>> other
 |         revenue
 |      A      300
 |      B      250
 |      C      100
 |      D      150
 |      
 |      >>> df.gt(other)
 |          cost  revenue
 |      A  False    False
 |      B  False    False
 |      C  False     True
 |      D  False    False
 |      
 |      Compare to a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
 |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},
 |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
 |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
 |      >>> df_multindex
 |            cost  revenue
 |      Q1 A   250      100
 |         B   150      250
 |         C   100      300
 |      Q2 A   150      200
 |         B   300      175
 |         C   220      225
 |      
 |      >>> df.le(df_multindex, level=1)
 |             cost  revenue
 |      Q1 A   True     True
 |         B   True     True
 |         C   True     True
 |      Q2 A  False     True
 |         B   True    False
 |         C   True    False
 |  
 |  groupby(self, by=None, axis: 'Axis | lib.NoDefault' = <no_default>, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = <no_default>, dropna: 'bool' = True) -> 'DataFrameGroupBy'
 |      Group DataFrame using a mapper or by a Series of columns.
 |      
 |      A groupby operation involves some combination of splitting the
 |      object, applying a function, and combining the results. This can be
 |      used to group large amounts of data and compute operations on these
 |      groups.
 |      
 |      Parameters
 |      ----------
 |      by : mapping, function, label, pd.Grouper or list of such
 |          Used to determine the groups for the groupby.
 |          If ``by`` is a function, it's called on each value of the object's
 |          index. If a dict or Series is passed, the Series or dict VALUES
 |          will be used to determine the groups (the Series' values are first
 |          aligned; see ``.align()`` method). If a list or ndarray of length
 |          equal to the selected axis is passed (see the `groupby user guide
 |          <https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups>`_),
 |          the values are used as-is to determine the groups. A label or list
 |          of labels may be passed to group by the columns in ``self``.
 |          Notice that a tuple is interpreted as a (single) key.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Split along rows (0) or columns (1). For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              Will be removed and behave like axis=0 in a future version.
 |              For ``axis=1``, do ``frame.T.groupby(...)`` instead.
 |      
 |      level : int, level name, or sequence of such, default None
 |          If the axis is a MultiIndex (hierarchical), group by a particular
 |          level or levels. Do not specify both ``by`` and ``level``.
 |      as_index : bool, default True
 |          Return object with group labels as the
 |          index. Only relevant for DataFrame input. as_index=False is
 |          effectively "SQL-style" grouped output. This argument has no effect
 |          on filtrations (see the `filtrations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),
 |          such as ``head()``, ``tail()``, ``nth()`` and in transformations
 |          (see the `transformations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).
 |      sort : bool, default True
 |          Sort group keys. Get better performance by turning this off.
 |          Note this does not influence the order of observations within each
 |          group. Groupby preserves the order of rows within each group. If False,
 |          the groups will appear in the same order as they did in the original DataFrame.
 |          This argument has no effect on filtrations (see the `filtrations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),
 |          such as ``head()``, ``tail()``, ``nth()`` and in transformations
 |          (see the `transformations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Specifying ``sort=False`` with an ordered categorical grouper will no
 |              longer sort the values.
 |      
 |      group_keys : bool, default True
 |          When calling apply and the ``by`` argument produces a like-indexed
 |          (i.e. :ref:`a transform <groupby.transform>`) result, add group keys to
 |          index to identify pieces. By default group keys are not included
 |          when the result's index (and column) labels match the inputs, and
 |          are included otherwise.
 |      
 |          .. versionchanged:: 1.5.0
 |      
 |             Warns that ``group_keys`` will no longer be ignored when the
 |             result from ``apply`` is a like-indexed Series or DataFrame.
 |             Specify ``group_keys`` explicitly to include the group keys or
 |             not.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |             ``group_keys`` now defaults to ``True``.
 |      
 |      observed : bool, default False
 |          This only applies if any of the groupers are Categoricals.
 |          If True: only show observed values for categorical groupers.
 |          If False: show all values for categorical groupers.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              The default value will change to True in a future version of pandas.
 |      
 |      dropna : bool, default True
 |          If True, and if group keys contain NA values, NA values together
 |          with row/column will be dropped.
 |          If False, NA values will also be treated as the key in groups.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.DataFrameGroupBy
 |          Returns a groupby object that contains information about the groups.
 |      
 |      See Also
 |      --------
 |      resample : Convenience method for frequency conversion and resampling
 |          of time series.
 |      
 |      Notes
 |      -----
 |      See the `user guide
 |      <https://pandas.pydata.org/pandas-docs/stable/groupby.html>`__ for more
 |      detailed usage and examples, including splitting an object into groups,
 |      iterating through groups, selecting a group, aggregation, and more.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',
 |      ...                               'Parrot', 'Parrot'],
 |      ...                    'Max Speed': [380., 370., 24., 26.]})
 |      >>> df
 |         Animal  Max Speed
 |      0  Falcon      380.0
 |      1  Falcon      370.0
 |      2  Parrot       24.0
 |      3  Parrot       26.0
 |      >>> df.groupby(['Animal']).mean()
 |              Max Speed
 |      Animal
 |      Falcon      375.0
 |      Parrot       25.0
 |      
 |      **Hierarchical Indexes**
 |      
 |      We can groupby different levels of a hierarchical index
 |      using the `level` parameter:
 |      
 |      >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],
 |      ...           ['Captive', 'Wild', 'Captive', 'Wild']]
 |      >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))
 |      >>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},
 |      ...                   index=index)
 |      >>> df
 |                      Max Speed
 |      Animal Type
 |      Falcon Captive      390.0
 |             Wild         350.0
 |      Parrot Captive       30.0
 |             Wild          20.0
 |      >>> df.groupby(level=0).mean()
 |              Max Speed
 |      Animal
 |      Falcon      370.0
 |      Parrot       25.0
 |      >>> df.groupby(level="Type").mean()
 |               Max Speed
 |      Type
 |      Captive      210.0
 |      Wild         185.0
 |      
 |      We can also choose to include NA in group keys or not by setting
 |      `dropna` parameter, the default setting is `True`.
 |      
 |      >>> l = [[1, 2, 3], [1, None, 4], [2, 1, 3], [1, 2, 2]]
 |      >>> df = pd.DataFrame(l, columns=["a", "b", "c"])
 |      
 |      >>> df.groupby(by=["b"]).sum()
 |          a   c
 |      b
 |      1.0 2   3
 |      2.0 2   5
 |      
 |      >>> df.groupby(by=["b"], dropna=False).sum()
 |          a   c
 |      b
 |      1.0 2   3
 |      2.0 2   5
 |      NaN 1   4
 |      
 |      >>> l = [["a", 12, 12], [None, 12.3, 33.], ["b", 12.3, 123], ["a", 1, 1]]
 |      >>> df = pd.DataFrame(l, columns=["a", "b", "c"])
 |      
 |      >>> df.groupby(by="a").sum()
 |          b     c
 |      a
 |      a   13.0   13.0
 |      b   12.3  123.0
 |      
 |      >>> df.groupby(by="a", dropna=False).sum()
 |          b     c
 |      a
 |      a   13.0   13.0
 |      b   12.3  123.0
 |      NaN 12.3   33.0
 |      
 |      When using ``.apply()``, use ``group_keys`` to include or exclude the
 |      group keys. The ``group_keys`` argument defaults to ``True`` (include).
 |      
 |      >>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',
 |      ...                               'Parrot', 'Parrot'],
 |      ...                    'Max Speed': [380., 370., 24., 26.]})
 |      >>> df.groupby("Animal", group_keys=True)[['Max Speed']].apply(lambda x: x)
 |                Max Speed
 |      Animal
 |      Falcon 0      380.0
 |             1      370.0
 |      Parrot 2       24.0
 |             3       26.0
 |      
 |      >>> df.groupby("Animal", group_keys=False)[['Max Speed']].apply(lambda x: x)
 |         Max Speed
 |      0      380.0
 |      1      370.0
 |      2       24.0
 |      3       26.0
 |  
 |  gt(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'
 |      Get Greater than of dataframe and other, element-wise (binary operator `gt`).
 |      
 |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
 |      operators.
 |      
 |      Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
 |      (rows or columns) and level for comparison.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'
 |          Whether to compare by the index (0 or 'index') or columns
 |          (1 or 'columns').
 |      level : int or label
 |          Broadcast across a level, matching Index values on the passed
 |          MultiIndex level.
 |      
 |      Returns
 |      -------
 |      DataFrame of bool
 |          Result of the comparison.
 |      
 |      See Also
 |      --------
 |      DataFrame.eq : Compare DataFrames for equality elementwise.
 |      DataFrame.ne : Compare DataFrames for inequality elementwise.
 |      DataFrame.le : Compare DataFrames for less than inequality
 |          or equality elementwise.
 |      DataFrame.lt : Compare DataFrames for strictly less than
 |          inequality elementwise.
 |      DataFrame.ge : Compare DataFrames for greater than inequality
 |          or equality elementwise.
 |      DataFrame.gt : Compare DataFrames for strictly greater than
 |          inequality elementwise.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      `NaN` values are considered different (i.e. `NaN` != `NaN`).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'cost': [250, 150, 100],
 |      ...                    'revenue': [100, 250, 300]},
 |      ...                   index=['A', 'B', 'C'])
 |      >>> df
 |         cost  revenue
 |      A   250      100
 |      B   150      250
 |      C   100      300
 |      
 |      Comparison with a scalar, using either the operator or method:
 |      
 |      >>> df == 100
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      >>> df.eq(100)
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned
 |      with the index of `other` and broadcast:
 |      
 |      >>> df != pd.Series([100, 250], index=["cost", "revenue"])
 |          cost  revenue
 |      A   True     True
 |      B   True    False
 |      C  False     True
 |      
 |      Use the method to control the broadcast axis:
 |      
 |      >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
 |         cost  revenue
 |      A  True    False
 |      B  True     True
 |      C  True     True
 |      D  True     True
 |      
 |      When comparing to an arbitrary sequence, the number of columns must
 |      match the number elements in `other`:
 |      
 |      >>> df == [250, 100]
 |          cost  revenue
 |      A   True     True
 |      B  False    False
 |      C  False    False
 |      
 |      Use the method to control the axis:
 |      
 |      >>> df.eq([250, 250, 100], axis='index')
 |          cost  revenue
 |      A   True    False
 |      B  False     True
 |      C   True    False
 |      
 |      Compare to a DataFrame of different shape.
 |      
 |      >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
 |      ...                      index=['A', 'B', 'C', 'D'])
 |      >>> other
 |         revenue
 |      A      300
 |      B      250
 |      C      100
 |      D      150
 |      
 |      >>> df.gt(other)
 |          cost  revenue
 |      A  False    False
 |      B  False    False
 |      C  False     True
 |      D  False    False
 |      
 |      Compare to a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
 |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},
 |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
 |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
 |      >>> df_multindex
 |            cost  revenue
 |      Q1 A   250      100
 |         B   150      250
 |         C   100      300
 |      Q2 A   150      200
 |         B   300      175
 |         C   220      225
 |      
 |      >>> df.le(df_multindex, level=1)
 |             cost  revenue
 |      Q1 A   True     True
 |         B   True     True
 |         C   True     True
 |      Q2 A  False     True
 |         B   True    False
 |         C   True    False
 |  
 |  hist = hist_frame(data: 'DataFrame', column: 'IndexLabel | None' = None, by=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, ax=None, sharex: 'bool' = False, sharey: 'bool' = False, figsize: 'tuple[int, int] | None' = None, layout: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs)
 |      Make a histogram of the DataFrame's columns.
 |      
 |      A `histogram`_ is a representation of the distribution of data.
 |      This function calls :meth:`matplotlib.pyplot.hist`, on each series in
 |      the DataFrame, resulting in one histogram per column.
 |      
 |      .. _histogram: https://en.wikipedia.org/wiki/Histogram
 |      
 |      Parameters
 |      ----------
 |      data : DataFrame
 |          The pandas object holding the data.
 |      column : str or sequence, optional
 |          If passed, will be used to limit data to a subset of columns.
 |      by : object, optional
 |          If passed, then used to form histograms for separate groups.
 |      grid : bool, default True
 |          Whether to show axis grid lines.
 |      xlabelsize : int, default None
 |          If specified changes the x-axis label size.
 |      xrot : float, default None
 |          Rotation of x axis labels. For example, a value of 90 displays the
 |          x labels rotated 90 degrees clockwise.
 |      ylabelsize : int, default None
 |          If specified changes the y-axis label size.
 |      yrot : float, default None
 |          Rotation of y axis labels. For example, a value of 90 displays the
 |          y labels rotated 90 degrees clockwise.
 |      ax : Matplotlib axes object, default None
 |          The axes to plot the histogram on.
 |      sharex : bool, default True if ax is None else False
 |          In case subplots=True, share x axis and set some x axis labels to
 |          invisible; defaults to True if ax is None otherwise False if an ax
 |          is passed in.
 |          Note that passing in both an ax and sharex=True will alter all x axis
 |          labels for all subplots in a figure.
 |      sharey : bool, default False
 |          In case subplots=True, share y axis and set some y axis labels to
 |          invisible.
 |      figsize : tuple, optional
 |          The size in inches of the figure to create. Uses the value in
 |          `matplotlib.rcParams` by default.
 |      layout : tuple, optional
 |          Tuple of (rows, columns) for the layout of the histograms.
 |      bins : int or sequence, default 10
 |          Number of histogram bins to be used. If an integer is given, bins + 1
 |          bin edges are calculated and returned. If bins is a sequence, gives
 |          bin edges, including left edge of first bin and right edge of last
 |          bin. In this case, bins is returned unmodified.
 |      
 |      backend : str, default None
 |          Backend to use instead of the backend specified in the option
 |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |          specify the ``plotting.backend`` for the whole session, set
 |          ``pd.options.plotting.backend``.
 |      
 |      legend : bool, default False
 |          Whether to show the legend.
 |      
 |      **kwargs
 |          All other plotting keyword arguments to be passed to
 |          :meth:`matplotlib.pyplot.hist`.
 |      
 |      Returns
 |      -------
 |      matplotlib.AxesSubplot or numpy.ndarray of them
 |      
 |      See Also
 |      --------
 |      matplotlib.pyplot.hist : Plot a histogram using matplotlib.
 |      
 |      Examples
 |      --------
 |      This example draws a histogram based on the length and width of
 |      some animals, displayed in three bins
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> data = {'length': [1.5, 0.5, 1.2, 0.9, 3],
 |          ...         'width': [0.7, 0.2, 0.15, 0.2, 1.1]}
 |          >>> index = ['pig', 'rabbit', 'duck', 'chicken', 'horse']
 |          >>> df = pd.DataFrame(data, index=index)
 |          >>> hist = df.hist(bins=3)
 |  
 |  idxmax(self, axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -> 'Series'
 |      Return index of first occurrence of maximum over requested axis.
 |      
 |      NA/null values are excluded.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      numeric_only : bool, default False
 |          Include only `float`, `int` or `boolean` data.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      Series
 |          Indexes of maxima along the specified axis.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          * If the row/column is empty
 |      
 |      See Also
 |      --------
 |      Series.idxmax : Return index of the maximum element.
 |      
 |      Notes
 |      -----
 |      This method is the DataFrame version of ``ndarray.argmax``.
 |      
 |      Examples
 |      --------
 |      Consider a dataset containing food consumption in Argentina.
 |      
 |      >>> df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],
 |      ...                     'co2_emissions': [37.2, 19.66, 1712]},
 |      ...                   index=['Pork', 'Wheat Products', 'Beef'])
 |      
 |      >>> df
 |                      consumption  co2_emissions
 |      Pork                  10.51         37.20
 |      Wheat Products       103.11         19.66
 |      Beef                  55.48       1712.00
 |      
 |      By default, it returns the index for the maximum value in each column.
 |      
 |      >>> df.idxmax()
 |      consumption     Wheat Products
 |      co2_emissions             Beef
 |      dtype: object
 |      
 |      To return the index for the maximum value in each row, use ``axis="columns"``.
 |      
 |      >>> df.idxmax(axis="columns")
 |      Pork              co2_emissions
 |      Wheat Products     consumption
 |      Beef              co2_emissions
 |      dtype: object
 |  
 |  idxmin(self, axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -> 'Series'
 |      Return index of first occurrence of minimum over requested axis.
 |      
 |      NA/null values are excluded.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      numeric_only : bool, default False
 |          Include only `float`, `int` or `boolean` data.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      Series
 |          Indexes of minima along the specified axis.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          * If the row/column is empty
 |      
 |      See Also
 |      --------
 |      Series.idxmin : Return index of the minimum element.
 |      
 |      Notes
 |      -----
 |      This method is the DataFrame version of ``ndarray.argmin``.
 |      
 |      Examples
 |      --------
 |      Consider a dataset containing food consumption in Argentina.
 |      
 |      >>> df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],
 |      ...                     'co2_emissions': [37.2, 19.66, 1712]},
 |      ...                   index=['Pork', 'Wheat Products', 'Beef'])
 |      
 |      >>> df
 |                      consumption  co2_emissions
 |      Pork                  10.51         37.20
 |      Wheat Products       103.11         19.66
 |      Beef                  55.48       1712.00
 |      
 |      By default, it returns the index for the minimum value in each column.
 |      
 |      >>> df.idxmin()
 |      consumption                Pork
 |      co2_emissions    Wheat Products
 |      dtype: object
 |      
 |      To return the index for the minimum value in each row, use ``axis="columns"``.
 |      
 |      >>> df.idxmin(axis="columns")
 |      Pork                consumption
 |      Wheat Products    co2_emissions
 |      Beef                consumption
 |      dtype: object
 |  
 |  info(self, verbose: 'bool | None' = None, buf: 'WriteBuffer[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool | None' = None) -> 'None'
 |      Print a concise summary of a DataFrame.
 |      
 |      This method prints information about a DataFrame including
 |      the index dtype and columns, non-null values and memory usage.
 |      
 |      Parameters
 |      ----------
 |      verbose : bool, optional
 |          Whether to print the full summary. By default, the setting in
 |          ``pandas.options.display.max_info_columns`` is followed.
 |      buf : writable buffer, defaults to sys.stdout
 |          Where to send the output. By default, the output is printed to
 |          sys.stdout. Pass a writable buffer if you need to further process
 |          the output.
 |      max_cols : int, optional
 |          When to switch from the verbose to the truncated output. If the
 |          DataFrame has more than `max_cols` columns, the truncated output
 |          is used. By default, the setting in
 |          ``pandas.options.display.max_info_columns`` is used.
 |      memory_usage : bool, str, optional
 |          Specifies whether total memory usage of the DataFrame
 |          elements (including the index) should be displayed. By default,
 |          this follows the ``pandas.options.display.memory_usage`` setting.
 |      
 |          True always show memory usage. False never shows memory usage.
 |          A value of 'deep' is equivalent to "True with deep introspection".
 |          Memory usage is shown in human-readable units (base-2
 |          representation). Without deep introspection a memory estimation is
 |          made based in column dtype and number of rows assuming values
 |          consume the same memory amount for corresponding dtypes. With deep
 |          memory introspection, a real memory usage calculation is performed
 |          at the cost of computational resources. See the
 |          :ref:`Frequently Asked Questions <df-memory-usage>` for more
 |          details.
 |      show_counts : bool, optional
 |          Whether to show the non-null counts. By default, this is shown
 |          only if the DataFrame is smaller than
 |          ``pandas.options.display.max_info_rows`` and
 |          ``pandas.options.display.max_info_columns``. A value of True always
 |          shows the counts, and False never shows the counts.
 |      
 |      Returns
 |      -------
 |      None
 |          This method prints a summary of a DataFrame and returns None.
 |      
 |      See Also
 |      --------
 |      DataFrame.describe: Generate descriptive statistics of DataFrame
 |          columns.
 |      DataFrame.memory_usage: Memory usage of DataFrame columns.
 |      
 |      Examples
 |      --------
 |      >>> int_values = [1, 2, 3, 4, 5]
 |      >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']
 |      >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]
 |      >>> df = pd.DataFrame({"int_col": int_values, "text_col": text_values,
 |      ...                   "float_col": float_values})
 |      >>> df
 |          int_col text_col  float_col
 |      0        1    alpha       0.00
 |      1        2     beta       0.25
 |      2        3    gamma       0.50
 |      3        4    delta       0.75
 |      4        5  epsilon       1.00
 |      
 |      Prints information of all columns:
 |      
 |      >>> df.info(verbose=True)
 |      <class 'pandas.core.frame.DataFrame'>
 |      RangeIndex: 5 entries, 0 to 4
 |      Data columns (total 3 columns):
 |       #   Column     Non-Null Count  Dtype
 |      ---  ------     --------------  -----
 |       0   int_col    5 non-null      int64
 |       1   text_col   5 non-null      object
 |       2   float_col  5 non-null      float64
 |      dtypes: float64(1), int64(1), object(1)
 |      memory usage: 248.0+ bytes
 |      
 |      Prints a summary of columns count and its dtypes but not per column
 |      information:
 |      
 |      >>> df.info(verbose=False)
 |      <class 'pandas.core.frame.DataFrame'>
 |      RangeIndex: 5 entries, 0 to 4
 |      Columns: 3 entries, int_col to float_col
 |      dtypes: float64(1), int64(1), object(1)
 |      memory usage: 248.0+ bytes
 |      
 |      Pipe output of DataFrame.info to buffer instead of sys.stdout, get
 |      buffer content and writes to a text file:
 |      
 |      >>> import io
 |      >>> buffer = io.StringIO()
 |      >>> df.info(buf=buffer)
 |      >>> s = buffer.getvalue()
 |      >>> with open("df_info.txt", "w",
 |      ...           encoding="utf-8") as f:  # doctest: +SKIP
 |      ...     f.write(s)
 |      260
 |      
 |      The `memory_usage` parameter allows deep introspection mode, specially
 |      useful for big DataFrames and fine-tune memory optimization:
 |      
 |      >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)
 |      >>> df = pd.DataFrame({
 |      ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),
 |      ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),
 |      ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)
 |      ... })
 |      >>> df.info()
 |      <class 'pandas.core.frame.DataFrame'>
 |      RangeIndex: 1000000 entries, 0 to 999999
 |      Data columns (total 3 columns):
 |       #   Column    Non-Null Count    Dtype
 |      ---  ------    --------------    -----
 |       0   column_1  1000000 non-null  object
 |       1   column_2  1000000 non-null  object
 |       2   column_3  1000000 non-null  object
 |      dtypes: object(3)
 |      memory usage: 22.9+ MB
 |      
 |      >>> df.info(memory_usage='deep')
 |      <class 'pandas.core.frame.DataFrame'>
 |      RangeIndex: 1000000 entries, 0 to 999999
 |      Data columns (total 3 columns):
 |       #   Column    Non-Null Count    Dtype
 |      ---  ------    --------------    -----
 |       0   column_1  1000000 non-null  object
 |       1   column_2  1000000 non-null  object
 |       2   column_3  1000000 non-null  object
 |      dtypes: object(3)
 |      memory usage: 165.9 MB
 |  
 |  insert(self, loc: 'int', column: 'Hashable', value: 'Scalar | AnyArrayLike', allow_duplicates: 'bool | lib.NoDefault' = <no_default>) -> 'None'
 |      Insert column into DataFrame at specified location.
 |      
 |      Raises a ValueError if `column` is already contained in the DataFrame,
 |      unless `allow_duplicates` is set to True.
 |      
 |      Parameters
 |      ----------
 |      loc : int
 |          Insertion index. Must verify 0 <= loc <= len(columns).
 |      column : str, number, or hashable object
 |          Label of the inserted column.
 |      value : Scalar, Series, or array-like
 |          Content of the inserted column.
 |      allow_duplicates : bool, optional, default lib.no_default
 |          Allow duplicate column labels to be created.
 |      
 |      See Also
 |      --------
 |      Index.insert : Insert new item by index.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
 |      >>> df
 |         col1  col2
 |      0     1     3
 |      1     2     4
 |      >>> df.insert(1, "newcol", [99, 99])
 |      >>> df
 |         col1  newcol  col2
 |      0     1      99     3
 |      1     2      99     4
 |      >>> df.insert(0, "col1", [100, 100], allow_duplicates=True)
 |      >>> df
 |         col1  col1  newcol  col2
 |      0   100     1      99     3
 |      1   100     2      99     4
 |      
 |      Notice that pandas uses index alignment in case of `value` from type `Series`:
 |      
 |      >>> df.insert(0, "col0", pd.Series([5, 6], index=[1, 2]))
 |      >>> df
 |         col0  col1  col1  newcol  col2
 |      0   NaN   100     1      99     3
 |      1   5.0   100     2      99     4
 |  
 |  isetitem(self, loc, value) -> 'None'
 |      Set the given value in the column with position `loc`.
 |      
 |      This is a positional analogue to ``__setitem__``.
 |      
 |      Parameters
 |      ----------
 |      loc : int or sequence of ints
 |          Index position for the column.
 |      value : scalar or arraylike
 |          Value(s) for the column.
 |      
 |      Notes
 |      -----
 |      ``frame.isetitem(loc, value)`` is an in-place method as it will
 |      modify the DataFrame in place (not returning a new object). In contrast to
 |      ``frame.iloc[:, i] = value`` which will try to update the existing values in
 |      place, ``frame.isetitem(loc, value)`` will not update the values of the column
 |      itself in place, it will instead insert a new array.
 |      
 |      In cases where ``frame.columns`` is unique, this is equivalent to
 |      ``frame[frame.columns[i]] = value``.
 |  
 |  isin(self, values: 'Series | DataFrame | Sequence | Mapping') -> 'DataFrame'
 |      Whether each element in the DataFrame is contained in values.
 |      
 |      Parameters
 |      ----------
 |      values : iterable, Series, DataFrame or dict
 |          The result will only be true at a location if all the
 |          labels match. If `values` is a Series, that's the index. If
 |          `values` is a dict, the keys must be the column names,
 |          which must match. If `values` is a DataFrame,
 |          then both the index and column labels must match.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          DataFrame of booleans showing whether each element in the DataFrame
 |          is contained in values.
 |      
 |      See Also
 |      --------
 |      DataFrame.eq: Equality test for DataFrame.
 |      Series.isin: Equivalent method on Series.
 |      Series.str.contains: Test if pattern or regex is contained within a
 |          string of a Series or Index.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},
 |      ...                   index=['falcon', 'dog'])
 |      >>> df
 |              num_legs  num_wings
 |      falcon         2          2
 |      dog            4          0
 |      
 |      When ``values`` is a list check whether every value in the DataFrame
 |      is present in the list (which animals have 0 or 2 legs or wings)
 |      
 |      >>> df.isin([0, 2])
 |              num_legs  num_wings
 |      falcon      True       True
 |      dog        False       True
 |      
 |      To check if ``values`` is *not* in the DataFrame, use the ``~`` operator:
 |      
 |      >>> ~df.isin([0, 2])
 |              num_legs  num_wings
 |      falcon     False      False
 |      dog         True      False
 |      
 |      When ``values`` is a dict, we can pass values to check for each
 |      column separately:
 |      
 |      >>> df.isin({'num_wings': [0, 3]})
 |              num_legs  num_wings
 |      falcon     False      False
 |      dog        False       True
 |      
 |      When ``values`` is a Series or DataFrame the index and column must
 |      match. Note that 'falcon' does not match based on the number of legs
 |      in other.
 |      
 |      >>> other = pd.DataFrame({'num_legs': [8, 3], 'num_wings': [0, 2]},
 |      ...                      index=['spider', 'falcon'])
 |      >>> df.isin(other)
 |              num_legs  num_wings
 |      falcon     False       True
 |      dog        False      False
 |  
 |  isna(self) -> 'DataFrame'
 |      Detect missing values.
 |      
 |      Return a boolean same-sized object indicating if the values are NA.
 |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
 |      values.
 |      Everything else gets mapped to False values. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Mask of bool values for each element in DataFrame that
 |          indicates whether an element is an NA value.
 |      
 |      See Also
 |      --------
 |      DataFrame.isnull : Alias of isna.
 |      DataFrame.notna : Boolean inverse of isna.
 |      DataFrame.dropna : Omit axes labels with missing values.
 |      isna : Top-level isna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.isna()
 |           age   born   name    toy
 |      0  False   True  False   True
 |      1  False  False  False  False
 |      2   True  False  False  False
 |      
 |      Show which entries in a Series are NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.isna()
 |      0    False
 |      1    False
 |      2     True
 |      dtype: bool
 |  
 |  isnull(self) -> 'DataFrame'
 |      DataFrame.isnull is an alias for DataFrame.isna.
 |      
 |      Detect missing values.
 |      
 |      Return a boolean same-sized object indicating if the values are NA.
 |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
 |      values.
 |      Everything else gets mapped to False values. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Mask of bool values for each element in DataFrame that
 |          indicates whether an element is an NA value.
 |      
 |      See Also
 |      --------
 |      DataFrame.isnull : Alias of isna.
 |      DataFrame.notna : Boolean inverse of isna.
 |      DataFrame.dropna : Omit axes labels with missing values.
 |      isna : Top-level isna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.isna()
 |           age   born   name    toy
 |      0  False   True  False   True
 |      1  False  False  False  False
 |      2   True  False  False  False
 |      
 |      Show which entries in a Series are NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.isna()
 |      0    False
 |      1    False
 |      2     True
 |      dtype: bool
 |  
 |  items(self) -> 'Iterable[tuple[Hashable, Series]]'
 |      Iterate over (column name, Series) pairs.
 |      
 |      Iterates over the DataFrame columns, returning a tuple with
 |      the column name and the content as a Series.
 |      
 |      Yields
 |      ------
 |      label : object
 |          The column names for the DataFrame being iterated over.
 |      content : Series
 |          The column entries belonging to each label, as a Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.iterrows : Iterate over DataFrame rows as
 |          (index, Series) pairs.
 |      DataFrame.itertuples : Iterate over DataFrame rows as namedtuples
 |          of the values.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],
 |      ...                   'population': [1864, 22000, 80000]},
 |      ...                   index=['panda', 'polar', 'koala'])
 |      >>> df
 |              species   population
 |      panda   bear      1864
 |      polar   bear      22000
 |      koala   marsupial 80000
 |      >>> for label, content in df.items():
 |      ...     print(f'label: {label}')
 |      ...     print(f'content: {content}', sep='\n')
 |      ...
 |      label: species
 |      content:
 |      panda         bear
 |      polar         bear
 |      koala    marsupial
 |      Name: species, dtype: object
 |      label: population
 |      content:
 |      panda     1864
 |      polar    22000
 |      koala    80000
 |      Name: population, dtype: int64
 |  
 |  iterrows(self) -> 'Iterable[tuple[Hashable, Series]]'
 |      Iterate over DataFrame rows as (index, Series) pairs.
 |      
 |      Yields
 |      ------
 |      index : label or tuple of label
 |          The index of the row. A tuple for a `MultiIndex`.
 |      data : Series
 |          The data of the row as a Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.
 |      DataFrame.items : Iterate over (column name, Series) pairs.
 |      
 |      Notes
 |      -----
 |      1. Because ``iterrows`` returns a Series for each row,
 |         it does **not** preserve dtypes across the rows (dtypes are
 |         preserved across columns for DataFrames).
 |      
 |         To preserve dtypes while iterating over the rows, it is better
 |         to use :meth:`itertuples` which returns namedtuples of the values
 |         and which is generally faster than ``iterrows``.
 |      
 |      2. You should **never modify** something you are iterating over.
 |         This is not guaranteed to work in all cases. Depending on the
 |         data types, the iterator returns a copy and not a view, and writing
 |         to it will have no effect.
 |      
 |      Examples
 |      --------
 |      
 |      >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])
 |      >>> row = next(df.iterrows())[1]
 |      >>> row
 |      int      1.0
 |      float    1.5
 |      Name: 0, dtype: float64
 |      >>> print(row['int'].dtype)
 |      float64
 |      >>> print(df['int'].dtype)
 |      int64
 |  
 |  itertuples(self, index: 'bool' = True, name: 'str | None' = 'Pandas') -> 'Iterable[tuple[Any, ...]]'
 |      Iterate over DataFrame rows as namedtuples.
 |      
 |      Parameters
 |      ----------
 |      index : bool, default True
 |          If True, return the index as the first element of the tuple.
 |      name : str or None, default "Pandas"
 |          The name of the returned namedtuples or None to return regular
 |          tuples.
 |      
 |      Returns
 |      -------
 |      iterator
 |          An object to iterate over namedtuples for each row in the
 |          DataFrame with the first field possibly being the index and
 |          following fields being the column values.
 |      
 |      See Also
 |      --------
 |      DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)
 |          pairs.
 |      DataFrame.items : Iterate over (column name, Series) pairs.
 |      
 |      Notes
 |      -----
 |      The column names will be renamed to positional names if they are
 |      invalid Python identifiers, repeated, or start with an underscore.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},
 |      ...                   index=['dog', 'hawk'])
 |      >>> df
 |            num_legs  num_wings
 |      dog          4          0
 |      hawk         2          2
 |      >>> for row in df.itertuples():
 |      ...     print(row)
 |      ...
 |      Pandas(Index='dog', num_legs=4, num_wings=0)
 |      Pandas(Index='hawk', num_legs=2, num_wings=2)
 |      
 |      By setting the `index` parameter to False we can remove the index
 |      as the first element of the tuple:
 |      
 |      >>> for row in df.itertuples(index=False):
 |      ...     print(row)
 |      ...
 |      Pandas(num_legs=4, num_wings=0)
 |      Pandas(num_legs=2, num_wings=2)
 |      
 |      With the `name` parameter set we set a custom name for the yielded
 |      namedtuples:
 |      
 |      >>> for row in df.itertuples(name='Animal'):
 |      ...     print(row)
 |      ...
 |      Animal(Index='dog', num_legs=4, num_wings=0)
 |      Animal(Index='hawk', num_legs=2, num_wings=2)
 |  
 |  join(self, other: 'DataFrame | Series | Iterable[DataFrame | Series]', on: 'IndexLabel | None' = None, how: 'MergeHow' = 'left', lsuffix: 'str' = '', rsuffix: 'str' = '', sort: 'bool' = False, validate: 'JoinValidate | None' = None) -> 'DataFrame'
 |      Join columns of another DataFrame.
 |      
 |      Join columns with `other` DataFrame either on index or on a key
 |      column. Efficiently join multiple DataFrame objects by index at once by
 |      passing a list.
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame, Series, or a list containing any combination of them
 |          Index should be similar to one of the columns in this one. If a
 |          Series is passed, its name attribute must be set, and that will be
 |          used as the column name in the resulting joined DataFrame.
 |      on : str, list of str, or array-like, optional
 |          Column or index level name(s) in the caller to join on the index
 |          in `other`, otherwise joins index-on-index. If multiple
 |          values given, the `other` DataFrame must have a MultiIndex. Can
 |          pass an array as the join key if it is not already contained in
 |          the calling DataFrame. Like an Excel VLOOKUP operation.
 |      how : {'left', 'right', 'outer', 'inner', 'cross'}, default 'left'
 |          How to handle the operation of the two objects.
 |      
 |          * left: use calling frame's index (or column if on is specified)
 |          * right: use `other`'s index.
 |          * outer: form union of calling frame's index (or column if on is
 |            specified) with `other`'s index, and sort it lexicographically.
 |          * inner: form intersection of calling frame's index (or column if
 |            on is specified) with `other`'s index, preserving the order
 |            of the calling's one.
 |          * cross: creates the cartesian product from both frames, preserves the order
 |            of the left keys.
 |      lsuffix : str, default ''
 |          Suffix to use from left frame's overlapping columns.
 |      rsuffix : str, default ''
 |          Suffix to use from right frame's overlapping columns.
 |      sort : bool, default False
 |          Order result DataFrame lexicographically by the join key. If False,
 |          the order of the join key depends on the join type (how keyword).
 |      validate : str, optional
 |          If specified, checks if join is of specified type.
 |      
 |          * "one_to_one" or "1:1": check if join keys are unique in both left
 |            and right datasets.
 |          * "one_to_many" or "1:m": check if join keys are unique in left dataset.
 |          * "many_to_one" or "m:1": check if join keys are unique in right dataset.
 |          * "many_to_many" or "m:m": allowed, but does not result in checks.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          A dataframe containing columns from both the caller and `other`.
 |      
 |      See Also
 |      --------
 |      DataFrame.merge : For column(s)-on-column(s) operations.
 |      
 |      Notes
 |      -----
 |      Parameters `on`, `lsuffix`, and `rsuffix` are not supported when
 |      passing a list of `DataFrame` objects.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],
 |      ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})
 |      
 |      >>> df
 |        key   A
 |      0  K0  A0
 |      1  K1  A1
 |      2  K2  A2
 |      3  K3  A3
 |      4  K4  A4
 |      5  K5  A5
 |      
 |      >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],
 |      ...                       'B': ['B0', 'B1', 'B2']})
 |      
 |      >>> other
 |        key   B
 |      0  K0  B0
 |      1  K1  B1
 |      2  K2  B2
 |      
 |      Join DataFrames using their indexes.
 |      
 |      >>> df.join(other, lsuffix='_caller', rsuffix='_other')
 |        key_caller   A key_other    B
 |      0         K0  A0        K0   B0
 |      1         K1  A1        K1   B1
 |      2         K2  A2        K2   B2
 |      3         K3  A3       NaN  NaN
 |      4         K4  A4       NaN  NaN
 |      5         K5  A5       NaN  NaN
 |      
 |      If we want to join using the key columns, we need to set key to be
 |      the index in both `df` and `other`. The joined DataFrame will have
 |      key as its index.
 |      
 |      >>> df.set_index('key').join(other.set_index('key'))
 |            A    B
 |      key
 |      K0   A0   B0
 |      K1   A1   B1
 |      K2   A2   B2
 |      K3   A3  NaN
 |      K4   A4  NaN
 |      K5   A5  NaN
 |      
 |      Another option to join using the key columns is to use the `on`
 |      parameter. DataFrame.join always uses `other`'s index but we can use
 |      any column in `df`. This method preserves the original DataFrame's
 |      index in the result.
 |      
 |      >>> df.join(other.set_index('key'), on='key')
 |        key   A    B
 |      0  K0  A0   B0
 |      1  K1  A1   B1
 |      2  K2  A2   B2
 |      3  K3  A3  NaN
 |      4  K4  A4  NaN
 |      5  K5  A5  NaN
 |      
 |      Using non-unique key values shows how they are matched.
 |      
 |      >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K1', 'K3', 'K0', 'K1'],
 |      ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})
 |      
 |      >>> df
 |        key   A
 |      0  K0  A0
 |      1  K1  A1
 |      2  K1  A2
 |      3  K3  A3
 |      4  K0  A4
 |      5  K1  A5
 |      
 |      >>> df.join(other.set_index('key'), on='key', validate='m:1')
 |        key   A    B
 |      0  K0  A0   B0
 |      1  K1  A1   B1
 |      2  K1  A2   B1
 |      3  K3  A3  NaN
 |      4  K0  A4   B0
 |      5  K1  A5   B1
 |  
 |  kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased kurtosis over requested axis.
 |      
 |      Kurtosis obtained using Fisher's definition of
 |      kurtosis (kurtosis of normal == 0.0). Normalized by N-1.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      Series or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])
 |                  >>> s
 |                  cat    1
 |                  dog    2
 |                  dog    2
 |                  mouse  3
 |                  dtype: int64
 |                  >>> s.kurt()
 |                  1.5
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},
 |                  ...                   index=['cat', 'dog', 'dog', 'mouse'])
 |                  >>> df
 |                         a   b
 |                    cat  1   3
 |                    dog  2   4
 |                    dog  2   4
 |                  mouse  3   4
 |                  >>> df.kurt()
 |                  a   1.5
 |                  b   4.0
 |                  dtype: float64
 |      
 |                  With axis=None
 |      
 |                  >>> df.kurt(axis=None).round(6)
 |                  -0.988693
 |      
 |                  Using axis=1
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},
 |                  ...                   index=['cat', 'dog'])
 |                  >>> df.kurt(axis=1)
 |                  cat   -6.0
 |                  dog   -6.0
 |                  dtype: float64
 |  
 |  kurtosis = kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |  
 |  le(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'
 |      Get Less than or equal to of dataframe and other, element-wise (binary operator `le`).
 |      
 |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
 |      operators.
 |      
 |      Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
 |      (rows or columns) and level for comparison.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'
 |          Whether to compare by the index (0 or 'index') or columns
 |          (1 or 'columns').
 |      level : int or label
 |          Broadcast across a level, matching Index values on the passed
 |          MultiIndex level.
 |      
 |      Returns
 |      -------
 |      DataFrame of bool
 |          Result of the comparison.
 |      
 |      See Also
 |      --------
 |      DataFrame.eq : Compare DataFrames for equality elementwise.
 |      DataFrame.ne : Compare DataFrames for inequality elementwise.
 |      DataFrame.le : Compare DataFrames for less than inequality
 |          or equality elementwise.
 |      DataFrame.lt : Compare DataFrames for strictly less than
 |          inequality elementwise.
 |      DataFrame.ge : Compare DataFrames for greater than inequality
 |          or equality elementwise.
 |      DataFrame.gt : Compare DataFrames for strictly greater than
 |          inequality elementwise.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      `NaN` values are considered different (i.e. `NaN` != `NaN`).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'cost': [250, 150, 100],
 |      ...                    'revenue': [100, 250, 300]},
 |      ...                   index=['A', 'B', 'C'])
 |      >>> df
 |         cost  revenue
 |      A   250      100
 |      B   150      250
 |      C   100      300
 |      
 |      Comparison with a scalar, using either the operator or method:
 |      
 |      >>> df == 100
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      >>> df.eq(100)
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned
 |      with the index of `other` and broadcast:
 |      
 |      >>> df != pd.Series([100, 250], index=["cost", "revenue"])
 |          cost  revenue
 |      A   True     True
 |      B   True    False
 |      C  False     True
 |      
 |      Use the method to control the broadcast axis:
 |      
 |      >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
 |         cost  revenue
 |      A  True    False
 |      B  True     True
 |      C  True     True
 |      D  True     True
 |      
 |      When comparing to an arbitrary sequence, the number of columns must
 |      match the number elements in `other`:
 |      
 |      >>> df == [250, 100]
 |          cost  revenue
 |      A   True     True
 |      B  False    False
 |      C  False    False
 |      
 |      Use the method to control the axis:
 |      
 |      >>> df.eq([250, 250, 100], axis='index')
 |          cost  revenue
 |      A   True    False
 |      B  False     True
 |      C   True    False
 |      
 |      Compare to a DataFrame of different shape.
 |      
 |      >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
 |      ...                      index=['A', 'B', 'C', 'D'])
 |      >>> other
 |         revenue
 |      A      300
 |      B      250
 |      C      100
 |      D      150
 |      
 |      >>> df.gt(other)
 |          cost  revenue
 |      A  False    False
 |      B  False    False
 |      C  False     True
 |      D  False    False
 |      
 |      Compare to a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
 |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},
 |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
 |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
 |      >>> df_multindex
 |            cost  revenue
 |      Q1 A   250      100
 |         B   150      250
 |         C   100      300
 |      Q2 A   150      200
 |         B   300      175
 |         C   220      225
 |      
 |      >>> df.le(df_multindex, level=1)
 |             cost  revenue
 |      Q1 A   True     True
 |         B   True     True
 |         C   True     True
 |      Q2 A  False     True
 |         B   True    False
 |         C   True    False
 |  
 |  lt(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'
 |      Get Less than of dataframe and other, element-wise (binary operator `lt`).
 |      
 |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
 |      operators.
 |      
 |      Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
 |      (rows or columns) and level for comparison.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'
 |          Whether to compare by the index (0 or 'index') or columns
 |          (1 or 'columns').
 |      level : int or label
 |          Broadcast across a level, matching Index values on the passed
 |          MultiIndex level.
 |      
 |      Returns
 |      -------
 |      DataFrame of bool
 |          Result of the comparison.
 |      
 |      See Also
 |      --------
 |      DataFrame.eq : Compare DataFrames for equality elementwise.
 |      DataFrame.ne : Compare DataFrames for inequality elementwise.
 |      DataFrame.le : Compare DataFrames for less than inequality
 |          or equality elementwise.
 |      DataFrame.lt : Compare DataFrames for strictly less than
 |          inequality elementwise.
 |      DataFrame.ge : Compare DataFrames for greater than inequality
 |          or equality elementwise.
 |      DataFrame.gt : Compare DataFrames for strictly greater than
 |          inequality elementwise.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      `NaN` values are considered different (i.e. `NaN` != `NaN`).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'cost': [250, 150, 100],
 |      ...                    'revenue': [100, 250, 300]},
 |      ...                   index=['A', 'B', 'C'])
 |      >>> df
 |         cost  revenue
 |      A   250      100
 |      B   150      250
 |      C   100      300
 |      
 |      Comparison with a scalar, using either the operator or method:
 |      
 |      >>> df == 100
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      >>> df.eq(100)
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned
 |      with the index of `other` and broadcast:
 |      
 |      >>> df != pd.Series([100, 250], index=["cost", "revenue"])
 |          cost  revenue
 |      A   True     True
 |      B   True    False
 |      C  False     True
 |      
 |      Use the method to control the broadcast axis:
 |      
 |      >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
 |         cost  revenue
 |      A  True    False
 |      B  True     True
 |      C  True     True
 |      D  True     True
 |      
 |      When comparing to an arbitrary sequence, the number of columns must
 |      match the number elements in `other`:
 |      
 |      >>> df == [250, 100]
 |          cost  revenue
 |      A   True     True
 |      B  False    False
 |      C  False    False
 |      
 |      Use the method to control the axis:
 |      
 |      >>> df.eq([250, 250, 100], axis='index')
 |          cost  revenue
 |      A   True    False
 |      B  False     True
 |      C   True    False
 |      
 |      Compare to a DataFrame of different shape.
 |      
 |      >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
 |      ...                      index=['A', 'B', 'C', 'D'])
 |      >>> other
 |         revenue
 |      A      300
 |      B      250
 |      C      100
 |      D      150
 |      
 |      >>> df.gt(other)
 |          cost  revenue
 |      A  False    False
 |      B  False    False
 |      C  False     True
 |      D  False    False
 |      
 |      Compare to a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
 |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},
 |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
 |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
 |      >>> df_multindex
 |            cost  revenue
 |      Q1 A   250      100
 |         B   150      250
 |         C   100      300
 |      Q2 A   150      200
 |         B   300      175
 |         C   220      225
 |      
 |      >>> df.le(df_multindex, level=1)
 |             cost  revenue
 |      Q1 A   True     True
 |         B   True     True
 |         C   True     True
 |      Q2 A  False     True
 |         B   True    False
 |         C   True    False
 |  
 |  map(self, func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame'
 |      Apply a function to a Dataframe elementwise.
 |      
 |      .. versionadded:: 2.1.0
 |      
 |         DataFrame.applymap was deprecated and renamed to DataFrame.map.
 |      
 |      This method applies a function that accepts and returns a scalar
 |      to every element of a DataFrame.
 |      
 |      Parameters
 |      ----------
 |      func : callable
 |          Python function, returns a single value from a single value.
 |      na_action : {None, 'ignore'}, default None
 |          If 'ignore', propagate NaN values, without passing them to func.
 |      **kwargs
 |          Additional keyword arguments to pass as keywords arguments to
 |          `func`.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Transformed DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.apply : Apply a function along input axis of DataFrame.
 |      DataFrame.replace: Replace values given in `to_replace` with `value`.
 |      Series.map : Apply a function elementwise on a Series.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])
 |      >>> df
 |             0      1
 |      0  1.000  2.120
 |      1  3.356  4.567
 |      
 |      >>> df.map(lambda x: len(str(x)))
 |         0  1
 |      0  3  4
 |      1  5  5
 |      
 |      Like Series.map, NA values can be ignored:
 |      
 |      >>> df_copy = df.copy()
 |      >>> df_copy.iloc[0, 0] = pd.NA
 |      >>> df_copy.map(lambda x: len(str(x)), na_action='ignore')
 |           0  1
 |      0  NaN  4
 |      1  5.0  5
 |      
 |      It is also possible to use `map` with functions that are not
 |      `lambda` functions:
 |      
 |      >>> df.map(round, ndigits=1)
 |           0    1
 |      0  1.0  2.1
 |      1  3.4  4.6
 |      
 |      Note that a vectorized version of `func` often exists, which will
 |      be much faster. You could square each number elementwise.
 |      
 |      >>> df.map(lambda x: x**2)
 |                 0          1
 |      0   1.000000   4.494400
 |      1  11.262736  20.857489
 |      
 |      But it's better to avoid map in that case.
 |      
 |      >>> df ** 2
 |                 0          1
 |      0   1.000000   4.494400
 |      1  11.262736  20.857489
 |  
 |  max(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the maximum of the values over the requested axis.
 |      
 |      If you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      Series or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.max()
 |      8
 |  
 |  mean(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the mean of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      Series or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.mean()
 |                  2.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.mean()
 |                  a   1.5
 |                  b   2.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.mean(axis=1)
 |                  tiger   1.5
 |                  zebra   2.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True` to avoid
 |                  getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.mean(numeric_only=True)
 |                  a   1.5
 |                  dtype: float64
 |  
 |  median(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the median of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      Series or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.median()
 |                  2.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.median()
 |                  a   1.5
 |                  b   2.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.median(axis=1)
 |                  tiger   1.5
 |                  zebra   2.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True`
 |                  to avoid getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.median(numeric_only=True)
 |                  a   1.5
 |                  dtype: float64
 |  
 |  melt(self, id_vars=None, value_vars=None, var_name=None, value_name: 'Hashable' = 'value', col_level: 'Level | None' = None, ignore_index: 'bool' = True) -> 'DataFrame'
 |      Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.
 |      
 |      This function is useful to massage a DataFrame into a format where one
 |      or more columns are identifier variables (`id_vars`), while all other
 |      columns, considered measured variables (`value_vars`), are "unpivoted" to
 |      the row axis, leaving just two non-identifier columns, 'variable' and
 |      'value'.
 |      
 |      Parameters
 |      ----------
 |      id_vars : scalar, tuple, list, or ndarray, optional
 |          Column(s) to use as identifier variables.
 |      value_vars : scalar, tuple, list, or ndarray, optional
 |          Column(s) to unpivot. If not specified, uses all columns that
 |          are not set as `id_vars`.
 |      var_name : scalar, default None
 |          Name to use for the 'variable' column. If None it uses
 |          ``frame.columns.name`` or 'variable'.
 |      value_name : scalar, default 'value'
 |          Name to use for the 'value' column, can't be an existing column label.
 |      col_level : scalar, optional
 |          If columns are a MultiIndex then use this level to melt.
 |      ignore_index : bool, default True
 |          If True, original index is ignored. If False, the original index is retained.
 |          Index labels will be repeated as necessary.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Unpivoted DataFrame.
 |      
 |      See Also
 |      --------
 |      melt : Identical method.
 |      pivot_table : Create a spreadsheet-style pivot table as a DataFrame.
 |      DataFrame.pivot : Return reshaped DataFrame organized
 |          by given index / column values.
 |      DataFrame.explode : Explode a DataFrame from list-like
 |              columns to long format.
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.melt>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},
 |      ...                    'B': {0: 1, 1: 3, 2: 5},
 |      ...                    'C': {0: 2, 1: 4, 2: 6}})
 |      >>> df
 |         A  B  C
 |      0  a  1  2
 |      1  b  3  4
 |      2  c  5  6
 |      
 |      >>> df.melt(id_vars=['A'], value_vars=['B'])
 |         A variable  value
 |      0  a        B      1
 |      1  b        B      3
 |      2  c        B      5
 |      
 |      >>> df.melt(id_vars=['A'], value_vars=['B', 'C'])
 |         A variable  value
 |      0  a        B      1
 |      1  b        B      3
 |      2  c        B      5
 |      3  a        C      2
 |      4  b        C      4
 |      5  c        C      6
 |      
 |      The names of 'variable' and 'value' columns can be customized:
 |      
 |      >>> df.melt(id_vars=['A'], value_vars=['B'],
 |      ...         var_name='myVarname', value_name='myValname')
 |         A myVarname  myValname
 |      0  a         B          1
 |      1  b         B          3
 |      2  c         B          5
 |      
 |      Original index values can be kept around:
 |      
 |      >>> df.melt(id_vars=['A'], value_vars=['B', 'C'], ignore_index=False)
 |         A variable  value
 |      0  a        B      1
 |      1  b        B      3
 |      2  c        B      5
 |      0  a        C      2
 |      1  b        C      4
 |      2  c        C      6
 |      
 |      If you have multi-index columns:
 |      
 |      >>> df.columns = [list('ABC'), list('DEF')]
 |      >>> df
 |         A  B  C
 |         D  E  F
 |      0  a  1  2
 |      1  b  3  4
 |      2  c  5  6
 |      
 |      >>> df.melt(col_level=0, id_vars=['A'], value_vars=['B'])
 |         A variable  value
 |      0  a        B      1
 |      1  b        B      3
 |      2  c        B      5
 |      
 |      >>> df.melt(id_vars=[('A', 'D')], value_vars=[('B', 'E')])
 |        (A, D) variable_0 variable_1  value
 |      0      a          B          E      1
 |      1      b          B          E      3
 |      2      c          B          E      5
 |  
 |  memory_usage(self, index: 'bool' = True, deep: 'bool' = False) -> 'Series'
 |      Return the memory usage of each column in bytes.
 |      
 |      The memory usage can optionally include the contribution of
 |      the index and elements of `object` dtype.
 |      
 |      This value is displayed in `DataFrame.info` by default. This can be
 |      suppressed by setting ``pandas.options.display.memory_usage`` to False.
 |      
 |      Parameters
 |      ----------
 |      index : bool, default True
 |          Specifies whether to include the memory usage of the DataFrame's
 |          index in returned Series. If ``index=True``, the memory usage of
 |          the index is the first item in the output.
 |      deep : bool, default False
 |          If True, introspect the data deeply by interrogating
 |          `object` dtypes for system-level memory consumption, and include
 |          it in the returned values.
 |      
 |      Returns
 |      -------
 |      Series
 |          A Series whose index is the original column names and whose values
 |          is the memory usage of each column in bytes.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.nbytes : Total bytes consumed by the elements of an
 |          ndarray.
 |      Series.memory_usage : Bytes consumed by a Series.
 |      Categorical : Memory-efficient array for string values with
 |          many repeated values.
 |      DataFrame.info : Concise summary of a DataFrame.
 |      
 |      Notes
 |      -----
 |      See the :ref:`Frequently Asked Questions <df-memory-usage>` for more
 |      details.
 |      
 |      Examples
 |      --------
 |      >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']
 |      >>> data = dict([(t, np.ones(shape=5000, dtype=int).astype(t))
 |      ...              for t in dtypes])
 |      >>> df = pd.DataFrame(data)
 |      >>> df.head()
 |         int64  float64            complex128  object  bool
 |      0      1      1.0              1.0+0.0j       1  True
 |      1      1      1.0              1.0+0.0j       1  True
 |      2      1      1.0              1.0+0.0j       1  True
 |      3      1      1.0              1.0+0.0j       1  True
 |      4      1      1.0              1.0+0.0j       1  True
 |      
 |      >>> df.memory_usage()
 |      Index           128
 |      int64         40000
 |      float64       40000
 |      complex128    80000
 |      object        40000
 |      bool           5000
 |      dtype: int64
 |      
 |      >>> df.memory_usage(index=False)
 |      int64         40000
 |      float64       40000
 |      complex128    80000
 |      object        40000
 |      bool           5000
 |      dtype: int64
 |      
 |      The memory footprint of `object` dtype columns is ignored by default:
 |      
 |      >>> df.memory_usage(deep=True)
 |      Index            128
 |      int64          40000
 |      float64        40000
 |      complex128     80000
 |      object        180000
 |      bool            5000
 |      dtype: int64
 |      
 |      Use a Categorical for efficient storage of an object-dtype column with
 |      many repeated values.
 |      
 |      >>> df['object'].astype('category').memory_usage(deep=True)
 |      5244
 |  
 |  merge(self, right: 'DataFrame | Series', how: 'MergeHow' = 'inner', on: 'IndexLabel | AnyArrayLike | None' = None, left_on: 'IndexLabel | AnyArrayLike | None' = None, right_on: 'IndexLabel | AnyArrayLike | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), copy: 'bool | None' = None, indicator: 'str | bool' = False, validate: 'MergeValidate | None' = None) -> 'DataFrame'
 |      Merge DataFrame or named Series objects with a database-style join.
 |      
 |      A named Series object is treated as a DataFrame with a single named column.
 |      
 |      The join is done on columns or indexes. If joining columns on
 |      columns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes
 |      on indexes or indexes on a column or columns, the index will be passed on.
 |      When performing a cross merge, no column specifications to merge on are
 |      allowed.
 |      
 |      .. warning::
 |      
 |          If both key columns contain rows where the key is a null value, those
 |          rows will be matched against each other. This is different from usual SQL
 |          join behaviour and can lead to unexpected results.
 |      
 |      Parameters
 |      ----------
 |      right : DataFrame or named Series
 |          Object to merge with.
 |      how : {'left', 'right', 'outer', 'inner', 'cross'}, default 'inner'
 |          Type of merge to be performed.
 |      
 |          * left: use only keys from left frame, similar to a SQL left outer join;
 |            preserve key order.
 |          * right: use only keys from right frame, similar to a SQL right outer join;
 |            preserve key order.
 |          * outer: use union of keys from both frames, similar to a SQL full outer
 |            join; sort keys lexicographically.
 |          * inner: use intersection of keys from both frames, similar to a SQL inner
 |            join; preserve the order of the left keys.
 |          * cross: creates the cartesian product from both frames, preserves the order
 |            of the left keys.
 |      on : label or list
 |          Column or index level names to join on. These must be found in both
 |          DataFrames. If `on` is None and not merging on indexes then this defaults
 |          to the intersection of the columns in both DataFrames.
 |      left_on : label or list, or array-like
 |          Column or index level names to join on in the left DataFrame. Can also
 |          be an array or list of arrays of the length of the left DataFrame.
 |          These arrays are treated as if they are columns.
 |      right_on : label or list, or array-like
 |          Column or index level names to join on in the right DataFrame. Can also
 |          be an array or list of arrays of the length of the right DataFrame.
 |          These arrays are treated as if they are columns.
 |      left_index : bool, default False
 |          Use the index from the left DataFrame as the join key(s). If it is a
 |          MultiIndex, the number of keys in the other DataFrame (either the index
 |          or a number of columns) must match the number of levels.
 |      right_index : bool, default False
 |          Use the index from the right DataFrame as the join key. Same caveats as
 |          left_index.
 |      sort : bool, default False
 |          Sort the join keys lexicographically in the result DataFrame. If False,
 |          the order of the join keys depends on the join type (how keyword).
 |      suffixes : list-like, default is ("_x", "_y")
 |          A length-2 sequence where each element is optionally a string
 |          indicating the suffix to add to overlapping column names in
 |          `left` and `right` respectively. Pass a value of `None` instead
 |          of a string to indicate that the column name from `left` or
 |          `right` should be left as-is, with no suffix. At least one of the
 |          values must not be None.
 |      copy : bool, default True
 |          If False, avoid copy if possible.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      indicator : bool or str, default False
 |          If True, adds a column to the output DataFrame called "_merge" with
 |          information on the source of each row. The column can be given a different
 |          name by providing a string argument. The column will have a Categorical
 |          type with the value of "left_only" for observations whose merge key only
 |          appears in the left DataFrame, "right_only" for observations
 |          whose merge key only appears in the right DataFrame, and "both"
 |          if the observation's merge key is found in both DataFrames.
 |      
 |      validate : str, optional
 |          If specified, checks if merge is of specified type.
 |      
 |          * "one_to_one" or "1:1": check if merge keys are unique in both
 |            left and right datasets.
 |          * "one_to_many" or "1:m": check if merge keys are unique in left
 |            dataset.
 |          * "many_to_one" or "m:1": check if merge keys are unique in right
 |            dataset.
 |          * "many_to_many" or "m:m": allowed, but does not result in checks.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          A DataFrame of the two merged objects.
 |      
 |      See Also
 |      --------
 |      merge_ordered : Merge with optional filling/interpolation.
 |      merge_asof : Merge on nearest keys.
 |      DataFrame.join : Similar method using indices.
 |      
 |      Examples
 |      --------
 |      >>> df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],
 |      ...                     'value': [1, 2, 3, 5]})
 |      >>> df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],
 |      ...                     'value': [5, 6, 7, 8]})
 |      >>> df1
 |          lkey value
 |      0   foo      1
 |      1   bar      2
 |      2   baz      3
 |      3   foo      5
 |      >>> df2
 |          rkey value
 |      0   foo      5
 |      1   bar      6
 |      2   baz      7
 |      3   foo      8
 |      
 |      Merge df1 and df2 on the lkey and rkey columns. The value columns have
 |      the default suffixes, _x and _y, appended.
 |      
 |      >>> df1.merge(df2, left_on='lkey', right_on='rkey')
 |        lkey  value_x rkey  value_y
 |      0  foo        1  foo        5
 |      1  foo        1  foo        8
 |      2  bar        2  bar        6
 |      3  baz        3  baz        7
 |      4  foo        5  foo        5
 |      5  foo        5  foo        8
 |      
 |      Merge DataFrames df1 and df2 with specified left and right suffixes
 |      appended to any overlapping columns.
 |      
 |      >>> df1.merge(df2, left_on='lkey', right_on='rkey',
 |      ...           suffixes=('_left', '_right'))
 |        lkey  value_left rkey  value_right
 |      0  foo           1  foo            5
 |      1  foo           1  foo            8
 |      2  bar           2  bar            6
 |      3  baz           3  baz            7
 |      4  foo           5  foo            5
 |      5  foo           5  foo            8
 |      
 |      Merge DataFrames df1 and df2, but raise an exception if the DataFrames have
 |      any overlapping columns.
 |      
 |      >>> df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))
 |      Traceback (most recent call last):
 |      ...
 |      ValueError: columns overlap but no suffix specified:
 |          Index(['value'], dtype='object')
 |      
 |      >>> df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})
 |      >>> df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})
 |      >>> df1
 |            a  b
 |      0   foo  1
 |      1   bar  2
 |      >>> df2
 |            a  c
 |      0   foo  3
 |      1   baz  4
 |      
 |      >>> df1.merge(df2, how='inner', on='a')
 |            a  b  c
 |      0   foo  1  3
 |      
 |      >>> df1.merge(df2, how='left', on='a')
 |            a  b  c
 |      0   foo  1  3.0
 |      1   bar  2  NaN
 |      
 |      >>> df1 = pd.DataFrame({'left': ['foo', 'bar']})
 |      >>> df2 = pd.DataFrame({'right': [7, 8]})
 |      >>> df1
 |          left
 |      0   foo
 |      1   bar
 |      >>> df2
 |          right
 |      0   7
 |      1   8
 |      
 |      >>> df1.merge(df2, how='cross')
 |         left  right
 |      0   foo      7
 |      1   foo      8
 |      2   bar      7
 |      3   bar      8
 |  
 |  min(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the minimum of the values over the requested axis.
 |      
 |      If you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      Series or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.min()
 |      0
 |  
 |  mod(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Modulo of dataframe and other, element-wise (binary operator `mod`).
 |      
 |      Equivalent to ``dataframe % other``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `rmod`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  mode(self, axis: 'Axis' = 0, numeric_only: 'bool' = False, dropna: 'bool' = True) -> 'DataFrame'
 |      Get the mode(s) of each element along the selected axis.
 |      
 |      The mode of a set of values is the value that appears most often.
 |      It can be multiple values.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to iterate over while searching for the mode:
 |      
 |          * 0 or 'index' : get mode of each column
 |          * 1 or 'columns' : get mode of each row.
 |      
 |      numeric_only : bool, default False
 |          If True, only apply to numeric columns.
 |      dropna : bool, default True
 |          Don't consider counts of NaN/NaT.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The modes of each column or row.
 |      
 |      See Also
 |      --------
 |      Series.mode : Return the highest frequency value in a Series.
 |      Series.value_counts : Return the counts of values in a Series.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('bird', 2, 2),
 |      ...                    ('mammal', 4, np.nan),
 |      ...                    ('arthropod', 8, 0),
 |      ...                    ('bird', 2, np.nan)],
 |      ...                   index=('falcon', 'horse', 'spider', 'ostrich'),
 |      ...                   columns=('species', 'legs', 'wings'))
 |      >>> df
 |                 species  legs  wings
 |      falcon        bird     2    2.0
 |      horse       mammal     4    NaN
 |      spider   arthropod     8    0.0
 |      ostrich       bird     2    NaN
 |      
 |      By default, missing values are not considered, and the mode of wings
 |      are both 0 and 2. Because the resulting DataFrame has two rows,
 |      the second row of ``species`` and ``legs`` contains ``NaN``.
 |      
 |      >>> df.mode()
 |        species  legs  wings
 |      0    bird   2.0    0.0
 |      1     NaN   NaN    2.0
 |      
 |      Setting ``dropna=False`` ``NaN`` values are considered and they can be
 |      the mode (like for wings).
 |      
 |      >>> df.mode(dropna=False)
 |        species  legs  wings
 |      0    bird     2    NaN
 |      
 |      Setting ``numeric_only=True``, only the mode of numeric columns is
 |      computed, and columns of other types are ignored.
 |      
 |      >>> df.mode(numeric_only=True)
 |         legs  wings
 |      0   2.0    0.0
 |      1   NaN    2.0
 |      
 |      To compute the mode over columns and not rows, use the axis parameter:
 |      
 |      >>> df.mode(axis='columns', numeric_only=True)
 |                 0    1
 |      falcon   2.0  NaN
 |      horse    4.0  NaN
 |      spider   0.0  8.0
 |      ostrich  2.0  NaN
 |  
 |  mul(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Multiplication of dataframe and other, element-wise (binary operator `mul`).
 |      
 |      Equivalent to ``dataframe * other``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `rmul`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  multiply = mul(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |  
 |  ne(self, other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame'
 |      Get Not equal to of dataframe and other, element-wise (binary operator `ne`).
 |      
 |      Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
 |      operators.
 |      
 |      Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
 |      (rows or columns) and level for comparison.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}, default 'columns'
 |          Whether to compare by the index (0 or 'index') or columns
 |          (1 or 'columns').
 |      level : int or label
 |          Broadcast across a level, matching Index values on the passed
 |          MultiIndex level.
 |      
 |      Returns
 |      -------
 |      DataFrame of bool
 |          Result of the comparison.
 |      
 |      See Also
 |      --------
 |      DataFrame.eq : Compare DataFrames for equality elementwise.
 |      DataFrame.ne : Compare DataFrames for inequality elementwise.
 |      DataFrame.le : Compare DataFrames for less than inequality
 |          or equality elementwise.
 |      DataFrame.lt : Compare DataFrames for strictly less than
 |          inequality elementwise.
 |      DataFrame.ge : Compare DataFrames for greater than inequality
 |          or equality elementwise.
 |      DataFrame.gt : Compare DataFrames for strictly greater than
 |          inequality elementwise.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      `NaN` values are considered different (i.e. `NaN` != `NaN`).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'cost': [250, 150, 100],
 |      ...                    'revenue': [100, 250, 300]},
 |      ...                   index=['A', 'B', 'C'])
 |      >>> df
 |         cost  revenue
 |      A   250      100
 |      B   150      250
 |      C   100      300
 |      
 |      Comparison with a scalar, using either the operator or method:
 |      
 |      >>> df == 100
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      >>> df.eq(100)
 |          cost  revenue
 |      A  False     True
 |      B  False    False
 |      C   True    False
 |      
 |      When `other` is a :class:`Series`, the columns of a DataFrame are aligned
 |      with the index of `other` and broadcast:
 |      
 |      >>> df != pd.Series([100, 250], index=["cost", "revenue"])
 |          cost  revenue
 |      A   True     True
 |      B   True    False
 |      C  False     True
 |      
 |      Use the method to control the broadcast axis:
 |      
 |      >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
 |         cost  revenue
 |      A  True    False
 |      B  True     True
 |      C  True     True
 |      D  True     True
 |      
 |      When comparing to an arbitrary sequence, the number of columns must
 |      match the number elements in `other`:
 |      
 |      >>> df == [250, 100]
 |          cost  revenue
 |      A   True     True
 |      B  False    False
 |      C  False    False
 |      
 |      Use the method to control the axis:
 |      
 |      >>> df.eq([250, 250, 100], axis='index')
 |          cost  revenue
 |      A   True    False
 |      B  False     True
 |      C   True    False
 |      
 |      Compare to a DataFrame of different shape.
 |      
 |      >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
 |      ...                      index=['A', 'B', 'C', 'D'])
 |      >>> other
 |         revenue
 |      A      300
 |      B      250
 |      C      100
 |      D      150
 |      
 |      >>> df.gt(other)
 |          cost  revenue
 |      A  False    False
 |      B  False    False
 |      C  False     True
 |      D  False    False
 |      
 |      Compare to a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
 |      ...                              'revenue': [100, 250, 300, 200, 175, 225]},
 |      ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
 |      ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
 |      >>> df_multindex
 |            cost  revenue
 |      Q1 A   250      100
 |         B   150      250
 |         C   100      300
 |      Q2 A   150      200
 |         B   300      175
 |         C   220      225
 |      
 |      >>> df.le(df_multindex, level=1)
 |             cost  revenue
 |      Q1 A   True     True
 |         B   True     True
 |         C   True     True
 |      Q2 A  False     True
 |         B   True    False
 |         C   True    False
 |  
 |  nlargest(self, n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -> 'DataFrame'
 |      Return the first `n` rows ordered by `columns` in descending order.
 |      
 |      Return the first `n` rows with the largest values in `columns`, in
 |      descending order. The columns that are not specified are returned as
 |      well, but not used for ordering.
 |      
 |      This method is equivalent to
 |      ``df.sort_values(columns, ascending=False).head(n)``, but more
 |      performant.
 |      
 |      Parameters
 |      ----------
 |      n : int
 |          Number of rows to return.
 |      columns : label or list of labels
 |          Column label(s) to order by.
 |      keep : {'first', 'last', 'all'}, default 'first'
 |          Where there are duplicate values:
 |      
 |          - ``first`` : prioritize the first occurrence(s)
 |          - ``last`` : prioritize the last occurrence(s)
 |          - ``all`` : keep all the ties of the smallest item even if it means
 |            selecting more than ``n`` items.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The first `n` rows ordered by the given columns in descending
 |          order.
 |      
 |      See Also
 |      --------
 |      DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in
 |          ascending order.
 |      DataFrame.sort_values : Sort DataFrame by the values.
 |      DataFrame.head : Return the first `n` rows without re-ordering.
 |      
 |      Notes
 |      -----
 |      This function cannot be used with all column types. For example, when
 |      specifying columns with `object` or `category` dtypes, ``TypeError`` is
 |      raised.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,
 |      ...                                   434000, 434000, 337000, 11300,
 |      ...                                   11300, 11300],
 |      ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,
 |      ...                            17036, 182, 38, 311],
 |      ...                    'alpha-2': ["IT", "FR", "MT", "MV", "BN",
 |      ...                                "IS", "NR", "TV", "AI"]},
 |      ...                   index=["Italy", "France", "Malta",
 |      ...                          "Maldives", "Brunei", "Iceland",
 |      ...                          "Nauru", "Tuvalu", "Anguilla"])
 |      >>> df
 |                population      GDP alpha-2
 |      Italy       59000000  1937894      IT
 |      France      65000000  2583560      FR
 |      Malta         434000    12011      MT
 |      Maldives      434000     4520      MV
 |      Brunei        434000    12128      BN
 |      Iceland       337000    17036      IS
 |      Nauru          11300      182      NR
 |      Tuvalu         11300       38      TV
 |      Anguilla       11300      311      AI
 |      
 |      In the following example, we will use ``nlargest`` to select the three
 |      rows having the largest values in column "population".
 |      
 |      >>> df.nlargest(3, 'population')
 |              population      GDP alpha-2
 |      France    65000000  2583560      FR
 |      Italy     59000000  1937894      IT
 |      Malta       434000    12011      MT
 |      
 |      When using ``keep='last'``, ties are resolved in reverse order:
 |      
 |      >>> df.nlargest(3, 'population', keep='last')
 |              population      GDP alpha-2
 |      France    65000000  2583560      FR
 |      Italy     59000000  1937894      IT
 |      Brunei      434000    12128      BN
 |      
 |      When using ``keep='all'``, the number of element kept can go beyond ``n``
 |      if there are duplicate values for the smallest element, all the
 |      ties are kept:
 |      
 |      >>> df.nlargest(3, 'population', keep='all')
 |                population      GDP alpha-2
 |      France      65000000  2583560      FR
 |      Italy       59000000  1937894      IT
 |      Malta         434000    12011      MT
 |      Maldives      434000     4520      MV
 |      Brunei        434000    12128      BN
 |      
 |      However, ``nlargest`` does not keep ``n`` distinct largest elements:
 |      
 |      >>> df.nlargest(5, 'population', keep='all')
 |                population      GDP alpha-2
 |      France      65000000  2583560      FR
 |      Italy       59000000  1937894      IT
 |      Malta         434000    12011      MT
 |      Maldives      434000     4520      MV
 |      Brunei        434000    12128      BN
 |      
 |      To order by the largest values in column "population" and then "GDP",
 |      we can specify multiple columns like in the next example.
 |      
 |      >>> df.nlargest(3, ['population', 'GDP'])
 |              population      GDP alpha-2
 |      France    65000000  2583560      FR
 |      Italy     59000000  1937894      IT
 |      Brunei      434000    12128      BN
 |  
 |  notna(self) -> 'DataFrame'
 |      Detect existing (non-missing) values.
 |      
 |      Return a boolean same-sized object indicating if the values are not NA.
 |      Non-missing values get mapped to True. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False
 |      values.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Mask of bool values for each element in DataFrame that
 |          indicates whether an element is not an NA value.
 |      
 |      See Also
 |      --------
 |      DataFrame.notnull : Alias of notna.
 |      DataFrame.isna : Boolean inverse of notna.
 |      DataFrame.dropna : Omit axes labels with missing values.
 |      notna : Top-level notna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are not NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.notna()
 |           age   born  name    toy
 |      0   True  False  True  False
 |      1   True   True  True   True
 |      2  False   True  True   True
 |      
 |      Show which entries in a Series are not NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.notna()
 |      0     True
 |      1     True
 |      2    False
 |      dtype: bool
 |  
 |  notnull(self) -> 'DataFrame'
 |      DataFrame.notnull is an alias for DataFrame.notna.
 |      
 |      Detect existing (non-missing) values.
 |      
 |      Return a boolean same-sized object indicating if the values are not NA.
 |      Non-missing values get mapped to True. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False
 |      values.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Mask of bool values for each element in DataFrame that
 |          indicates whether an element is not an NA value.
 |      
 |      See Also
 |      --------
 |      DataFrame.notnull : Alias of notna.
 |      DataFrame.isna : Boolean inverse of notna.
 |      DataFrame.dropna : Omit axes labels with missing values.
 |      notna : Top-level notna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are not NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.notna()
 |           age   born  name    toy
 |      0   True  False  True  False
 |      1   True   True  True   True
 |      2  False   True  True   True
 |      
 |      Show which entries in a Series are not NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.notna()
 |      0     True
 |      1     True
 |      2    False
 |      dtype: bool
 |  
 |  nsmallest(self, n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -> 'DataFrame'
 |      Return the first `n` rows ordered by `columns` in ascending order.
 |      
 |      Return the first `n` rows with the smallest values in `columns`, in
 |      ascending order. The columns that are not specified are returned as
 |      well, but not used for ordering.
 |      
 |      This method is equivalent to
 |      ``df.sort_values(columns, ascending=True).head(n)``, but more
 |      performant.
 |      
 |      Parameters
 |      ----------
 |      n : int
 |          Number of items to retrieve.
 |      columns : list or str
 |          Column name or names to order by.
 |      keep : {'first', 'last', 'all'}, default 'first'
 |          Where there are duplicate values:
 |      
 |          - ``first`` : take the first occurrence.
 |          - ``last`` : take the last occurrence.
 |          - ``all`` : keep all the ties of the largest item even if it means
 |            selecting more than ``n`` items.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |      
 |      See Also
 |      --------
 |      DataFrame.nlargest : Return the first `n` rows ordered by `columns` in
 |          descending order.
 |      DataFrame.sort_values : Sort DataFrame by the values.
 |      DataFrame.head : Return the first `n` rows without re-ordering.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,
 |      ...                                   434000, 434000, 337000, 337000,
 |      ...                                   11300, 11300],
 |      ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,
 |      ...                            17036, 182, 38, 311],
 |      ...                    'alpha-2': ["IT", "FR", "MT", "MV", "BN",
 |      ...                                "IS", "NR", "TV", "AI"]},
 |      ...                   index=["Italy", "France", "Malta",
 |      ...                          "Maldives", "Brunei", "Iceland",
 |      ...                          "Nauru", "Tuvalu", "Anguilla"])
 |      >>> df
 |                population      GDP alpha-2
 |      Italy       59000000  1937894      IT
 |      France      65000000  2583560      FR
 |      Malta         434000    12011      MT
 |      Maldives      434000     4520      MV
 |      Brunei        434000    12128      BN
 |      Iceland       337000    17036      IS
 |      Nauru         337000      182      NR
 |      Tuvalu         11300       38      TV
 |      Anguilla       11300      311      AI
 |      
 |      In the following example, we will use ``nsmallest`` to select the
 |      three rows having the smallest values in column "population".
 |      
 |      >>> df.nsmallest(3, 'population')
 |                population    GDP alpha-2
 |      Tuvalu         11300     38      TV
 |      Anguilla       11300    311      AI
 |      Iceland       337000  17036      IS
 |      
 |      When using ``keep='last'``, ties are resolved in reverse order:
 |      
 |      >>> df.nsmallest(3, 'population', keep='last')
 |                population  GDP alpha-2
 |      Anguilla       11300  311      AI
 |      Tuvalu         11300   38      TV
 |      Nauru         337000  182      NR
 |      
 |      When using ``keep='all'``, the number of element kept can go beyond ``n``
 |      if there are duplicate values for the largest element, all the
 |      ties are kept.
 |      
 |      >>> df.nsmallest(3, 'population', keep='all')
 |                population    GDP alpha-2
 |      Tuvalu         11300     38      TV
 |      Anguilla       11300    311      AI
 |      Iceland       337000  17036      IS
 |      Nauru         337000    182      NR
 |      
 |      However, ``nsmallest`` does not keep ``n`` distinct
 |      smallest elements:
 |      
 |      >>> df.nsmallest(4, 'population', keep='all')
 |                population    GDP alpha-2
 |      Tuvalu         11300     38      TV
 |      Anguilla       11300    311      AI
 |      Iceland       337000  17036      IS
 |      Nauru         337000    182      NR
 |      
 |      To order by the smallest values in column "population" and then "GDP", we can
 |      specify multiple columns like in the next example.
 |      
 |      >>> df.nsmallest(3, ['population', 'GDP'])
 |                population  GDP alpha-2
 |      Tuvalu         11300   38      TV
 |      Anguilla       11300  311      AI
 |      Nauru         337000  182      NR
 |  
 |  nunique(self, axis: 'Axis' = 0, dropna: 'bool' = True) -> 'Series'
 |      Count number of distinct elements in specified axis.
 |      
 |      Return Series with number of distinct elements. Can ignore NaN
 |      values.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for
 |          column-wise.
 |      dropna : bool, default True
 |          Don't include NaN in the counts.
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      See Also
 |      --------
 |      Series.nunique: Method nunique for Series.
 |      DataFrame.count: Count non-NA cells for each column or row.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [4, 5, 6], 'B': [4, 1, 1]})
 |      >>> df.nunique()
 |      A    3
 |      B    2
 |      dtype: int64
 |      
 |      >>> df.nunique(axis=1)
 |      0    1
 |      1    2
 |      2    2
 |      dtype: int64
 |  
 |  pivot(self, *, columns, index=<no_default>, values=<no_default>) -> 'DataFrame'
 |      Return reshaped DataFrame organized by given index / column values.
 |      
 |      Reshape data (produce a "pivot" table) based on column values. Uses
 |      unique values from specified `index` / `columns` to form axes of the
 |      resulting DataFrame. This function does not support data
 |      aggregation, multiple values will result in a MultiIndex in the
 |      columns. See the :ref:`User Guide <reshaping>` for more on reshaping.
 |      
 |      Parameters
 |      ----------
 |      columns : str or object or a list of str
 |          Column to use to make new frame's columns.
 |      index : str or object or a list of str, optional
 |          Column to use to make new frame's index. If not given, uses existing index.
 |      values : str, object or a list of the previous, optional
 |          Column(s) to use for populating new frame's values. If not
 |          specified, all remaining columns will be used and the result will
 |          have hierarchically indexed columns.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Returns reshaped DataFrame.
 |      
 |      Raises
 |      ------
 |      ValueError:
 |          When there are any `index`, `columns` combinations with multiple
 |          values. `DataFrame.pivot_table` when you need to aggregate.
 |      
 |      See Also
 |      --------
 |      DataFrame.pivot_table : Generalization of pivot that can handle
 |          duplicate values for one index/column pair.
 |      DataFrame.unstack : Pivot based on the index values instead of a
 |          column.
 |      wide_to_long : Wide panel to long format. Less flexible but more
 |          user-friendly than melt.
 |      
 |      Notes
 |      -----
 |      For finer-tuned control, see hierarchical indexing documentation along
 |      with the related stack/unstack methods.
 |      
 |      Reference :ref:`the user guide <reshaping.pivot>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',
 |      ...                            'two'],
 |      ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],
 |      ...                    'baz': [1, 2, 3, 4, 5, 6],
 |      ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})
 |      >>> df
 |          foo   bar  baz  zoo
 |      0   one   A    1    x
 |      1   one   B    2    y
 |      2   one   C    3    z
 |      3   two   A    4    q
 |      4   two   B    5    w
 |      5   two   C    6    t
 |      
 |      >>> df.pivot(index='foo', columns='bar', values='baz')
 |      bar  A   B   C
 |      foo
 |      one  1   2   3
 |      two  4   5   6
 |      
 |      >>> df.pivot(index='foo', columns='bar')['baz']
 |      bar  A   B   C
 |      foo
 |      one  1   2   3
 |      two  4   5   6
 |      
 |      >>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])
 |            baz       zoo
 |      bar   A  B  C   A  B  C
 |      foo
 |      one   1  2  3   x  y  z
 |      two   4  5  6   q  w  t
 |      
 |      You could also assign a list of column names or a list of index names.
 |      
 |      >>> df = pd.DataFrame({
 |      ...        "lev1": [1, 1, 1, 2, 2, 2],
 |      ...        "lev2": [1, 1, 2, 1, 1, 2],
 |      ...        "lev3": [1, 2, 1, 2, 1, 2],
 |      ...        "lev4": [1, 2, 3, 4, 5, 6],
 |      ...        "values": [0, 1, 2, 3, 4, 5]})
 |      >>> df
 |          lev1 lev2 lev3 lev4 values
 |      0   1    1    1    1    0
 |      1   1    1    2    2    1
 |      2   1    2    1    3    2
 |      3   2    1    2    4    3
 |      4   2    1    1    5    4
 |      5   2    2    2    6    5
 |      
 |      >>> df.pivot(index="lev1", columns=["lev2", "lev3"], values="values")
 |      lev2    1         2
 |      lev3    1    2    1    2
 |      lev1
 |      1     0.0  1.0  2.0  NaN
 |      2     4.0  3.0  NaN  5.0
 |      
 |      >>> df.pivot(index=["lev1", "lev2"], columns=["lev3"], values="values")
 |            lev3    1    2
 |      lev1  lev2
 |         1     1  0.0  1.0
 |               2  2.0  NaN
 |         2     1  4.0  3.0
 |               2  NaN  5.0
 |      
 |      A ValueError is raised if there are any duplicates.
 |      
 |      >>> df = pd.DataFrame({"foo": ['one', 'one', 'two', 'two'],
 |      ...                    "bar": ['A', 'A', 'B', 'C'],
 |      ...                    "baz": [1, 2, 3, 4]})
 |      >>> df
 |         foo bar  baz
 |      0  one   A    1
 |      1  one   A    2
 |      2  two   B    3
 |      3  two   C    4
 |      
 |      Notice that the first two rows are the same for our `index`
 |      and `columns` arguments.
 |      
 |      >>> df.pivot(index='foo', columns='bar', values='baz')
 |      Traceback (most recent call last):
 |         ...
 |      ValueError: Index contains duplicate entries, cannot reshape
 |  
 |  pivot_table(self, values=None, index=None, columns=None, aggfunc: 'AggFuncType' = 'mean', fill_value=None, margins: 'bool' = False, dropna: 'bool' = True, margins_name: 'Level' = 'All', observed: 'bool | lib.NoDefault' = <no_default>, sort: 'bool' = True) -> 'DataFrame'
 |      Create a spreadsheet-style pivot table as a DataFrame.
 |      
 |      The levels in the pivot table will be stored in MultiIndex objects
 |      (hierarchical indexes) on the index and columns of the result DataFrame.
 |      
 |      Parameters
 |      ----------
 |      values : list-like or scalar, optional
 |          Column or columns to aggregate.
 |      index : column, Grouper, array, or list of the previous
 |          Keys to group by on the pivot table index. If a list is passed,
 |          it can contain any of the other types (except list). If an array is
 |          passed, it must be the same length as the data and will be used in
 |          the same manner as column values.
 |      columns : column, Grouper, array, or list of the previous
 |          Keys to group by on the pivot table column. If a list is passed,
 |          it can contain any of the other types (except list). If an array is
 |          passed, it must be the same length as the data and will be used in
 |          the same manner as column values.
 |      aggfunc : function, list of functions, dict, default "mean"
 |          If a list of functions is passed, the resulting pivot table will have
 |          hierarchical columns whose top level are the function names
 |          (inferred from the function objects themselves).
 |          If a dict is passed, the key is column to aggregate and the value is
 |          function or list of functions. If ``margin=True``, aggfunc will be
 |          used to calculate the partial aggregates.
 |      fill_value : scalar, default None
 |          Value to replace missing values with (in the resulting pivot table,
 |          after aggregation).
 |      margins : bool, default False
 |          If ``margins=True``, special ``All`` columns and rows
 |          will be added with partial group aggregates across the categories
 |          on the rows and columns.
 |      dropna : bool, default True
 |          Do not include columns whose entries are all NaN. If True,
 |          rows with a NaN value in any column will be omitted before
 |          computing margins.
 |      margins_name : str, default 'All'
 |          Name of the row / column that will contain the totals
 |          when margins is True.
 |      observed : bool, default False
 |          This only applies if any of the groupers are Categoricals.
 |          If True: only show observed values for categorical groupers.
 |          If False: show all values for categorical groupers.
 |      
 |          .. deprecated:: 2.2.0
 |      
 |              The default value of ``False`` is deprecated and will change to
 |              ``True`` in a future version of pandas.
 |      
 |      sort : bool, default True
 |          Specifies if the result should be sorted.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          An Excel style pivot table.
 |      
 |      See Also
 |      --------
 |      DataFrame.pivot : Pivot without aggregation that can handle
 |          non-numeric data.
 |      DataFrame.melt: Unpivot a DataFrame from wide to long format,
 |          optionally leaving identifiers set.
 |      wide_to_long : Wide panel to long format. Less flexible but more
 |          user-friendly than melt.
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.pivot>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": ["foo", "foo", "foo", "foo", "foo",
 |      ...                          "bar", "bar", "bar", "bar"],
 |      ...                    "B": ["one", "one", "one", "two", "two",
 |      ...                          "one", "one", "two", "two"],
 |      ...                    "C": ["small", "large", "large", "small",
 |      ...                          "small", "large", "small", "small",
 |      ...                          "large"],
 |      ...                    "D": [1, 2, 2, 3, 3, 4, 5, 6, 7],
 |      ...                    "E": [2, 4, 5, 5, 6, 6, 8, 9, 9]})
 |      >>> df
 |           A    B      C  D  E
 |      0  foo  one  small  1  2
 |      1  foo  one  large  2  4
 |      2  foo  one  large  2  5
 |      3  foo  two  small  3  5
 |      4  foo  two  small  3  6
 |      5  bar  one  large  4  6
 |      6  bar  one  small  5  8
 |      7  bar  two  small  6  9
 |      8  bar  two  large  7  9
 |      
 |      This first example aggregates values by taking the sum.
 |      
 |      >>> table = pd.pivot_table(df, values='D', index=['A', 'B'],
 |      ...                        columns=['C'], aggfunc="sum")
 |      >>> table
 |      C        large  small
 |      A   B
 |      bar one    4.0    5.0
 |          two    7.0    6.0
 |      foo one    4.0    1.0
 |          two    NaN    6.0
 |      
 |      We can also fill missing values using the `fill_value` parameter.
 |      
 |      >>> table = pd.pivot_table(df, values='D', index=['A', 'B'],
 |      ...                        columns=['C'], aggfunc="sum", fill_value=0)
 |      >>> table
 |      C        large  small
 |      A   B
 |      bar one      4      5
 |          two      7      6
 |      foo one      4      1
 |          two      0      6
 |      
 |      The next example aggregates by taking the mean across multiple columns.
 |      
 |      >>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],
 |      ...                        aggfunc={'D': "mean", 'E': "mean"})
 |      >>> table
 |                      D         E
 |      A   C
 |      bar large  5.500000  7.500000
 |          small  5.500000  8.500000
 |      foo large  2.000000  4.500000
 |          small  2.333333  4.333333
 |      
 |      We can also calculate multiple types of aggregations for any given
 |      value column.
 |      
 |      >>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],
 |      ...                        aggfunc={'D': "mean",
 |      ...                                 'E': ["min", "max", "mean"]})
 |      >>> table
 |                        D   E
 |                     mean max      mean  min
 |      A   C
 |      bar large  5.500000   9  7.500000    6
 |          small  5.500000   9  8.500000    8
 |      foo large  2.000000   5  4.500000    4
 |          small  2.333333   6  4.333333    2
 |  
 |  pop(self, item: 'Hashable') -> 'Series'
 |      Return item and drop from frame. Raise KeyError if not found.
 |      
 |      Parameters
 |      ----------
 |      item : label
 |          Label of column to be popped.
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('falcon', 'bird', 389.0),
 |      ...                    ('parrot', 'bird', 24.0),
 |      ...                    ('lion', 'mammal', 80.5),
 |      ...                    ('monkey', 'mammal', np.nan)],
 |      ...                   columns=('name', 'class', 'max_speed'))
 |      >>> df
 |           name   class  max_speed
 |      0  falcon    bird      389.0
 |      1  parrot    bird       24.0
 |      2    lion  mammal       80.5
 |      3  monkey  mammal        NaN
 |      
 |      >>> df.pop('class')
 |      0      bird
 |      1      bird
 |      2    mammal
 |      3    mammal
 |      Name: class, dtype: object
 |      
 |      >>> df
 |           name  max_speed
 |      0  falcon      389.0
 |      1  parrot       24.0
 |      2    lion       80.5
 |      3  monkey        NaN
 |  
 |  pow(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Exponential power of dataframe and other, element-wise (binary operator `pow`).
 |      
 |      Equivalent to ``dataframe ** other``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `rpow`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  prod(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |      Return the product of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.prod with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      min_count : int, default 0
 |          The required number of valid values to perform the operation. If fewer than
 |          ``min_count`` non-NA values are present the result will be NA.
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      Series or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      By default, the product of an empty or all-NA Series is ``1``
 |      
 |      >>> pd.Series([], dtype="float64").prod()
 |      1.0
 |      
 |      This can be controlled with the ``min_count`` parameter
 |      
 |      >>> pd.Series([], dtype="float64").prod(min_count=1)
 |      nan
 |      
 |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
 |      empty series identically.
 |      
 |      >>> pd.Series([np.nan]).prod()
 |      1.0
 |      
 |      >>> pd.Series([np.nan]).prod(min_count=1)
 |      nan
 |  
 |  product = prod(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |  
 |  quantile(self, q: 'float | AnyArrayLike | Sequence[float]' = 0.5, axis: 'Axis' = 0, numeric_only: 'bool' = False, interpolation: 'QuantileInterpolation' = 'linear', method: "Literal['single', 'table']" = 'single') -> 'Series | DataFrame'
 |      Return values at the given quantile over requested axis.
 |      
 |      Parameters
 |      ----------
 |      q : float or array-like, default 0.5 (50% quantile)
 |          Value between 0 <= q <= 1, the quantile(s) to compute.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
 |      numeric_only : bool, default False
 |          Include only `float`, `int` or `boolean` data.
 |      
 |          .. versionchanged:: 2.0.0
 |              The default value of ``numeric_only`` is now ``False``.
 |      
 |      interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
 |          This optional parameter specifies the interpolation method to use,
 |          when the desired quantile lies between two data points `i` and `j`:
 |      
 |          * linear: `i + (j - i) * fraction`, where `fraction` is the
 |            fractional part of the index surrounded by `i` and `j`.
 |          * lower: `i`.
 |          * higher: `j`.
 |          * nearest: `i` or `j` whichever is nearest.
 |          * midpoint: (`i` + `j`) / 2.
 |      method : {'single', 'table'}, default 'single'
 |          Whether to compute quantiles per-column ('single') or over all columns
 |          ('table'). When 'table', the only allowed interpolation methods are
 |          'nearest', 'lower', and 'higher'.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |      
 |          If ``q`` is an array, a DataFrame will be returned where the
 |            index is ``q``, the columns are the columns of self, and the
 |            values are the quantiles.
 |          If ``q`` is a float, a Series will be returned where the
 |            index is the columns of self and the values are the quantiles.
 |      
 |      See Also
 |      --------
 |      core.window.rolling.Rolling.quantile: Rolling quantile.
 |      numpy.percentile: Numpy function to compute the percentile.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),
 |      ...                   columns=['a', 'b'])
 |      >>> df.quantile(.1)
 |      a    1.3
 |      b    3.7
 |      Name: 0.1, dtype: float64
 |      >>> df.quantile([.1, .5])
 |             a     b
 |      0.1  1.3   3.7
 |      0.5  2.5  55.0
 |      
 |      Specifying `method='table'` will compute the quantile over all columns.
 |      
 |      >>> df.quantile(.1, method="table", interpolation="nearest")
 |      a    1
 |      b    1
 |      Name: 0.1, dtype: int64
 |      >>> df.quantile([.1, .5], method="table", interpolation="nearest")
 |           a    b
 |      0.1  1    1
 |      0.5  3  100
 |      
 |      Specifying `numeric_only=False` will also compute the quantile of
 |      datetime and timedelta data.
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2],
 |      ...                    'B': [pd.Timestamp('2010'),
 |      ...                          pd.Timestamp('2011')],
 |      ...                    'C': [pd.Timedelta('1 days'),
 |      ...                          pd.Timedelta('2 days')]})
 |      >>> df.quantile(0.5, numeric_only=False)
 |      A                    1.5
 |      B    2010-07-02 12:00:00
 |      C        1 days 12:00:00
 |      Name: 0.5, dtype: object
 |  
 |  query(self, expr: 'str', *, inplace: 'bool' = False, **kwargs) -> 'DataFrame | None'
 |      Query the columns of a DataFrame with a boolean expression.
 |      
 |      Parameters
 |      ----------
 |      expr : str
 |          The query string to evaluate.
 |      
 |          You can refer to variables
 |          in the environment by prefixing them with an '@' character like
 |          ``@a + b``.
 |      
 |          You can refer to column names that are not valid Python variable names
 |          by surrounding them in backticks. Thus, column names containing spaces
 |          or punctuations (besides underscores) or starting with digits must be
 |          surrounded by backticks. (For example, a column named "Area (cm^2)" would
 |          be referenced as ```Area (cm^2)```). Column names which are Python keywords
 |          (like "list", "for", "import", etc) cannot be used.
 |      
 |          For example, if one of your columns is called ``a a`` and you want
 |          to sum it with ``b``, your query should be ```a a` + b``.
 |      
 |      inplace : bool
 |          Whether to modify the DataFrame rather than creating a new one.
 |      **kwargs
 |          See the documentation for :func:`eval` for complete details
 |          on the keyword arguments accepted by :meth:`DataFrame.query`.
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          DataFrame resulting from the provided query expression or
 |          None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      eval : Evaluate a string describing operations on
 |          DataFrame columns.
 |      DataFrame.eval : Evaluate a string describing operations on
 |          DataFrame columns.
 |      
 |      Notes
 |      -----
 |      The result of the evaluation of this expression is first passed to
 |      :attr:`DataFrame.loc` and if that fails because of a
 |      multidimensional key (e.g., a DataFrame) then the result will be passed
 |      to :meth:`DataFrame.__getitem__`.
 |      
 |      This method uses the top-level :func:`eval` function to
 |      evaluate the passed query.
 |      
 |      The :meth:`~pandas.DataFrame.query` method uses a slightly
 |      modified Python syntax by default. For example, the ``&`` and ``|``
 |      (bitwise) operators have the precedence of their boolean cousins,
 |      :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,
 |      however the semantics are different.
 |      
 |      You can change the semantics of the expression by passing the keyword
 |      argument ``parser='python'``. This enforces the same semantics as
 |      evaluation in Python space. Likewise, you can pass ``engine='python'``
 |      to evaluate an expression using Python itself as a backend. This is not
 |      recommended as it is inefficient compared to using ``numexpr`` as the
 |      engine.
 |      
 |      The :attr:`DataFrame.index` and
 |      :attr:`DataFrame.columns` attributes of the
 |      :class:`~pandas.DataFrame` instance are placed in the query namespace
 |      by default, which allows you to treat both the index and columns of the
 |      frame as a column in the frame.
 |      The identifier ``index`` is used for the frame index; you can also
 |      use the name of the index to identify it in a query. Please note that
 |      Python keywords may not be used as identifiers.
 |      
 |      For further details and examples see the ``query`` documentation in
 |      :ref:`indexing <indexing.query>`.
 |      
 |      *Backtick quoted variables*
 |      
 |      Backtick quoted variables are parsed as literal Python code and
 |      are converted internally to a Python valid identifier.
 |      This can lead to the following problems.
 |      
 |      During parsing a number of disallowed characters inside the backtick
 |      quoted string are replaced by strings that are allowed as a Python identifier.
 |      These characters include all operators in Python, the space character, the
 |      question mark, the exclamation mark, the dollar sign, and the euro sign.
 |      For other characters that fall outside the ASCII range (U+0001..U+007F)
 |      and those that are not further specified in PEP 3131,
 |      the query parser will raise an error.
 |      This excludes whitespace different than the space character,
 |      but also the hashtag (as it is used for comments) and the backtick
 |      itself (backtick can also not be escaped).
 |      
 |      In a special case, quotes that make a pair around a backtick can
 |      confuse the parser.
 |      For example, ```it's` > `that's``` will raise an error,
 |      as it forms a quoted string (``'s > `that'``) with a backtick inside.
 |      
 |      See also the Python documentation about lexical analysis
 |      (https://docs.python.org/3/reference/lexical_analysis.html)
 |      in combination with the source code in :mod:`pandas.core.computation.parsing`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': range(1, 6),
 |      ...                    'B': range(10, 0, -2),
 |      ...                    'C C': range(10, 5, -1)})
 |      >>> df
 |         A   B  C C
 |      0  1  10   10
 |      1  2   8    9
 |      2  3   6    8
 |      3  4   4    7
 |      4  5   2    6
 |      >>> df.query('A > B')
 |         A  B  C C
 |      4  5  2    6
 |      
 |      The previous expression is equivalent to
 |      
 |      >>> df[df.A > df.B]
 |         A  B  C C
 |      4  5  2    6
 |      
 |      For columns with spaces in their name, you can use backtick quoting.
 |      
 |      >>> df.query('B == `C C`')
 |         A   B  C C
 |      0  1  10   10
 |      
 |      The previous expression is equivalent to
 |      
 |      >>> df[df.B == df['C C']]
 |         A   B  C C
 |      0  1  10   10
 |  
 |  radd(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Addition of dataframe and other, element-wise (binary operator `radd`).
 |      
 |      Equivalent to ``other + dataframe``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `add`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  rdiv = rtruediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |  
 |  reindex(self, labels=None, *, index=None, columns=None, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = nan, limit: 'int | None' = None, tolerance=None) -> 'DataFrame'
 |      Conform DataFrame to new index with optional filling logic.
 |      
 |      Places NA/NaN in locations having no value in the previous index. A new object
 |      is produced unless the new index is equivalent to the current one and
 |      ``copy=False``.
 |      
 |      Parameters
 |      ----------
 |      
 |      labels : array-like, optional
 |          New labels / index to conform the axis specified by 'axis' to.
 |      index : array-like, optional
 |          New labels for the index. Preferably an Index object to avoid
 |          duplicating data.
 |      columns : array-like, optional
 |          New labels for the columns. Preferably an Index object to avoid
 |          duplicating data.
 |      axis : int or str, optional
 |          Axis to target. Can be either the axis name ('index', 'columns')
 |          or number (0, 1).
 |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}
 |          Method to use for filling holes in reindexed DataFrame.
 |          Please note: this is only applicable to DataFrames/Series with a
 |          monotonically increasing/decreasing index.
 |      
 |          * None (default): don't fill gaps
 |          * pad / ffill: Propagate last valid observation forward to next
 |            valid.
 |          * backfill / bfill: Use next valid observation to fill gap.
 |          * nearest: Use nearest valid observations to fill gap.
 |      
 |      copy : bool, default True
 |          Return a new object, even if the passed indexes are the same.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : scalar, default np.nan
 |          Value to use for missing values. Defaults to NaN, but can be any
 |          "compatible" value.
 |      limit : int, default None
 |          Maximum number of consecutive elements to forward or backward fill.
 |      tolerance : optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations most
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      DataFrame with changed index.
 |      
 |      See Also
 |      --------
 |      DataFrame.set_index : Set row labels.
 |      DataFrame.reset_index : Remove row labels or move them to new columns.
 |      DataFrame.reindex_like : Change to same indices as other DataFrame.
 |      
 |      Examples
 |      --------
 |      ``DataFrame.reindex`` supports two calling conventions
 |      
 |      * ``(index=index_labels, columns=column_labels, ...)``
 |      * ``(labels, axis={'index', 'columns'}, ...)``
 |      
 |      We *highly* recommend using keyword arguments to clarify your
 |      intent.
 |      
 |      Create a dataframe with some fictional data.
 |      
 |      >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']
 |      >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],
 |      ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},
 |      ...                   index=index)
 |      >>> df
 |                 http_status  response_time
 |      Firefox            200           0.04
 |      Chrome             200           0.02
 |      Safari             404           0.07
 |      IE10               404           0.08
 |      Konqueror          301           1.00
 |      
 |      Create a new index and reindex the dataframe. By default
 |      values in the new index that do not have corresponding
 |      records in the dataframe are assigned ``NaN``.
 |      
 |      >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',
 |      ...              'Chrome']
 |      >>> df.reindex(new_index)
 |                     http_status  response_time
 |      Safari               404.0           0.07
 |      Iceweasel              NaN            NaN
 |      Comodo Dragon          NaN            NaN
 |      IE10                 404.0           0.08
 |      Chrome               200.0           0.02
 |      
 |      We can fill in the missing values by passing a value to
 |      the keyword ``fill_value``. Because the index is not monotonically
 |      increasing or decreasing, we cannot use arguments to the keyword
 |      ``method`` to fill the ``NaN`` values.
 |      
 |      >>> df.reindex(new_index, fill_value=0)
 |                     http_status  response_time
 |      Safari                 404           0.07
 |      Iceweasel                0           0.00
 |      Comodo Dragon            0           0.00
 |      IE10                   404           0.08
 |      Chrome                 200           0.02
 |      
 |      >>> df.reindex(new_index, fill_value='missing')
 |                    http_status response_time
 |      Safari                404          0.07
 |      Iceweasel         missing       missing
 |      Comodo Dragon     missing       missing
 |      IE10                  404          0.08
 |      Chrome                200          0.02
 |      
 |      We can also reindex the columns.
 |      
 |      >>> df.reindex(columns=['http_status', 'user_agent'])
 |                 http_status  user_agent
 |      Firefox            200         NaN
 |      Chrome             200         NaN
 |      Safari             404         NaN
 |      IE10               404         NaN
 |      Konqueror          301         NaN
 |      
 |      Or we can use "axis-style" keyword arguments
 |      
 |      >>> df.reindex(['http_status', 'user_agent'], axis="columns")
 |                 http_status  user_agent
 |      Firefox            200         NaN
 |      Chrome             200         NaN
 |      Safari             404         NaN
 |      IE10               404         NaN
 |      Konqueror          301         NaN
 |      
 |      To further illustrate the filling functionality in
 |      ``reindex``, we will create a dataframe with a
 |      monotonically increasing index (for example, a sequence
 |      of dates).
 |      
 |      >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')
 |      >>> df2 = pd.DataFrame({"prices": [100, 101, np.nan, 100, 89, 88]},
 |      ...                    index=date_index)
 |      >>> df2
 |                  prices
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      
 |      Suppose we decide to expand the dataframe to cover a wider
 |      date range.
 |      
 |      >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')
 |      >>> df2.reindex(date_index2)
 |                  prices
 |      2009-12-29     NaN
 |      2009-12-30     NaN
 |      2009-12-31     NaN
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      2010-01-07     NaN
 |      
 |      The index entries that did not have a value in the original data frame
 |      (for example, '2009-12-29') are by default filled with ``NaN``.
 |      If desired, we can fill in the missing values using one of several
 |      options.
 |      
 |      For example, to back-propagate the last valid value to fill the ``NaN``
 |      values, pass ``bfill`` as an argument to the ``method`` keyword.
 |      
 |      >>> df2.reindex(date_index2, method='bfill')
 |                  prices
 |      2009-12-29   100.0
 |      2009-12-30   100.0
 |      2009-12-31   100.0
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      2010-01-07     NaN
 |      
 |      Please note that the ``NaN`` value present in the original dataframe
 |      (at index value 2010-01-03) will not be filled by any of the
 |      value propagation schemes. This is because filling while reindexing
 |      does not look at dataframe values, but only compares the original and
 |      desired indexes. If you do want to fill in the ``NaN`` values present
 |      in the original dataframe, use the ``fillna()`` method.
 |      
 |      See the :ref:`user guide <basics.reindexing>` for more.
 |  
 |  rename(self, mapper: 'Renamer | None' = None, *, index: 'Renamer | None' = None, columns: 'Renamer | None' = None, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -> 'DataFrame | None'
 |      Rename columns or index labels.
 |      
 |      Function / dict values must be unique (1-to-1). Labels not contained in
 |      a dict / Series will be left as-is. Extra labels listed don't throw an
 |      error.
 |      
 |      See the :ref:`user guide <basics.rename>` for more.
 |      
 |      Parameters
 |      ----------
 |      mapper : dict-like or function
 |          Dict-like or function transformations to apply to
 |          that axis' values. Use either ``mapper`` and ``axis`` to
 |          specify the axis to target with ``mapper``, or ``index`` and
 |          ``columns``.
 |      index : dict-like or function
 |          Alternative to specifying axis (``mapper, axis=0``
 |          is equivalent to ``index=mapper``).
 |      columns : dict-like or function
 |          Alternative to specifying axis (``mapper, axis=1``
 |          is equivalent to ``columns=mapper``).
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Axis to target with ``mapper``. Can be either the axis name
 |          ('index', 'columns') or number (0, 1). The default is 'index'.
 |      copy : bool, default True
 |          Also copy underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      inplace : bool, default False
 |          Whether to modify the DataFrame rather than creating a new one.
 |          If True then value of copy is ignored.
 |      level : int or level name, default None
 |          In case of a MultiIndex, only rename labels in the specified
 |          level.
 |      errors : {'ignore', 'raise'}, default 'ignore'
 |          If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,
 |          or `columns` contains labels that are not present in the Index
 |          being transformed.
 |          If 'ignore', existing keys will be renamed and extra keys will be
 |          ignored.
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          DataFrame with the renamed axis labels or None if ``inplace=True``.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If any of the labels is not found in the selected axis and
 |          "errors='raise'".
 |      
 |      See Also
 |      --------
 |      DataFrame.rename_axis : Set the name of the axis.
 |      
 |      Examples
 |      --------
 |      ``DataFrame.rename`` supports two calling conventions
 |      
 |      * ``(index=index_mapper, columns=columns_mapper, ...)``
 |      * ``(mapper, axis={'index', 'columns'}, ...)``
 |      
 |      We *highly* recommend using keyword arguments to clarify your
 |      intent.
 |      
 |      Rename columns using a mapping:
 |      
 |      >>> df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
 |      >>> df.rename(columns={"A": "a", "B": "c"})
 |         a  c
 |      0  1  4
 |      1  2  5
 |      2  3  6
 |      
 |      Rename index using a mapping:
 |      
 |      >>> df.rename(index={0: "x", 1: "y", 2: "z"})
 |         A  B
 |      x  1  4
 |      y  2  5
 |      z  3  6
 |      
 |      Cast index labels to a different type:
 |      
 |      >>> df.index
 |      RangeIndex(start=0, stop=3, step=1)
 |      >>> df.rename(index=str).index
 |      Index(['0', '1', '2'], dtype='object')
 |      
 |      >>> df.rename(columns={"A": "a", "B": "b", "C": "c"}, errors="raise")
 |      Traceback (most recent call last):
 |      KeyError: ['C'] not found in axis
 |      
 |      Using axis-style parameters:
 |      
 |      >>> df.rename(str.lower, axis='columns')
 |         a  b
 |      0  1  4
 |      1  2  5
 |      2  3  6
 |      
 |      >>> df.rename({1: 2, 2: 4}, axis='index')
 |         A  B
 |      0  1  4
 |      2  2  5
 |      4  3  6
 |  
 |  reorder_levels(self, order: 'Sequence[int | str]', axis: 'Axis' = 0) -> 'DataFrame'
 |      Rearrange index levels using input order. May not drop or duplicate levels.
 |      
 |      Parameters
 |      ----------
 |      order : list of int or list of str
 |          List representing new level order. Reference level by number
 |          (position) or by key (label).
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Where to reorder levels.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |      
 |      Examples
 |      --------
 |      >>> data = {
 |      ...     "class": ["Mammals", "Mammals", "Reptiles"],
 |      ...     "diet": ["Omnivore", "Carnivore", "Carnivore"],
 |      ...     "species": ["Humans", "Dogs", "Snakes"],
 |      ... }
 |      >>> df = pd.DataFrame(data, columns=["class", "diet", "species"])
 |      >>> df = df.set_index(["class", "diet"])
 |      >>> df
 |                                        species
 |      class      diet
 |      Mammals    Omnivore                Humans
 |                 Carnivore                 Dogs
 |      Reptiles   Carnivore               Snakes
 |      
 |      Let's reorder the levels of the index:
 |      
 |      >>> df.reorder_levels(["diet", "class"])
 |                                        species
 |      diet      class
 |      Omnivore  Mammals                  Humans
 |      Carnivore Mammals                    Dogs
 |                Reptiles                 Snakes
 |  
 |  reset_index(self, level: 'IndexLabel | None' = None, *, drop: 'bool' = False, inplace: 'bool' = False, col_level: 'Hashable' = 0, col_fill: 'Hashable' = '', allow_duplicates: 'bool | lib.NoDefault' = <no_default>, names: 'Hashable | Sequence[Hashable] | None' = None) -> 'DataFrame | None'
 |      Reset the index, or a level of it.
 |      
 |      Reset the index of the DataFrame, and use the default one instead.
 |      If the DataFrame has a MultiIndex, this method can remove one or more
 |      levels.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, tuple, or list, default None
 |          Only remove the given levels from the index. Removes all levels by
 |          default.
 |      drop : bool, default False
 |          Do not try to insert index into dataframe columns. This resets
 |          the index to the default integer index.
 |      inplace : bool, default False
 |          Whether to modify the DataFrame rather than creating a new one.
 |      col_level : int or str, default 0
 |          If the columns have multiple levels, determines which level the
 |          labels are inserted into. By default it is inserted into the first
 |          level.
 |      col_fill : object, default ''
 |          If the columns have multiple levels, determines how the other
 |          levels are named. If None then the index name is repeated.
 |      allow_duplicates : bool, optional, default lib.no_default
 |          Allow duplicate column labels to be created.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      names : int, str or 1-dimensional list, default None
 |          Using the given string, rename the DataFrame column which contains the
 |          index data. If the DataFrame has a MultiIndex, this has to be a list or
 |          tuple with length equal to the number of levels.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          DataFrame with the new index or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.set_index : Opposite of reset_index.
 |      DataFrame.reindex : Change to new indices or expand indices.
 |      DataFrame.reindex_like : Change to same indices as other DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('bird', 389.0),
 |      ...                    ('bird', 24.0),
 |      ...                    ('mammal', 80.5),
 |      ...                    ('mammal', np.nan)],
 |      ...                   index=['falcon', 'parrot', 'lion', 'monkey'],
 |      ...                   columns=('class', 'max_speed'))
 |      >>> df
 |               class  max_speed
 |      falcon    bird      389.0
 |      parrot    bird       24.0
 |      lion    mammal       80.5
 |      monkey  mammal        NaN
 |      
 |      When we reset the index, the old index is added as a column, and a
 |      new sequential index is used:
 |      
 |      >>> df.reset_index()
 |          index   class  max_speed
 |      0  falcon    bird      389.0
 |      1  parrot    bird       24.0
 |      2    lion  mammal       80.5
 |      3  monkey  mammal        NaN
 |      
 |      We can use the `drop` parameter to avoid the old index being added as
 |      a column:
 |      
 |      >>> df.reset_index(drop=True)
 |          class  max_speed
 |      0    bird      389.0
 |      1    bird       24.0
 |      2  mammal       80.5
 |      3  mammal        NaN
 |      
 |      You can also use `reset_index` with `MultiIndex`.
 |      
 |      >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),
 |      ...                                    ('bird', 'parrot'),
 |      ...                                    ('mammal', 'lion'),
 |      ...                                    ('mammal', 'monkey')],
 |      ...                                   names=['class', 'name'])
 |      >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),
 |      ...                                      ('species', 'type')])
 |      >>> df = pd.DataFrame([(389.0, 'fly'),
 |      ...                    (24.0, 'fly'),
 |      ...                    (80.5, 'run'),
 |      ...                    (np.nan, 'jump')],
 |      ...                   index=index,
 |      ...                   columns=columns)
 |      >>> df
 |                     speed species
 |                       max    type
 |      class  name
 |      bird   falcon  389.0     fly
 |             parrot   24.0     fly
 |      mammal lion     80.5     run
 |             monkey    NaN    jump
 |      
 |      Using the `names` parameter, choose a name for the index column:
 |      
 |      >>> df.reset_index(names=['classes', 'names'])
 |        classes   names  speed species
 |                           max    type
 |      0    bird  falcon  389.0     fly
 |      1    bird  parrot   24.0     fly
 |      2  mammal    lion   80.5     run
 |      3  mammal  monkey    NaN    jump
 |      
 |      If the index has multiple levels, we can reset a subset of them:
 |      
 |      >>> df.reset_index(level='class')
 |               class  speed species
 |                        max    type
 |      name
 |      falcon    bird  389.0     fly
 |      parrot    bird   24.0     fly
 |      lion    mammal   80.5     run
 |      monkey  mammal    NaN    jump
 |      
 |      If we are not dropping the index, by default, it is placed in the top
 |      level. We can place it in another level:
 |      
 |      >>> df.reset_index(level='class', col_level=1)
 |                      speed species
 |               class    max    type
 |      name
 |      falcon    bird  389.0     fly
 |      parrot    bird   24.0     fly
 |      lion    mammal   80.5     run
 |      monkey  mammal    NaN    jump
 |      
 |      When the index is inserted under another level, we can specify under
 |      which one with the parameter `col_fill`:
 |      
 |      >>> df.reset_index(level='class', col_level=1, col_fill='species')
 |                    species  speed species
 |                      class    max    type
 |      name
 |      falcon           bird  389.0     fly
 |      parrot           bird   24.0     fly
 |      lion           mammal   80.5     run
 |      monkey         mammal    NaN    jump
 |      
 |      If we specify a nonexistent level for `col_fill`, it is created:
 |      
 |      >>> df.reset_index(level='class', col_level=1, col_fill='genus')
 |                      genus  speed species
 |                      class    max    type
 |      name
 |      falcon           bird  389.0     fly
 |      parrot           bird   24.0     fly
 |      lion           mammal   80.5     run
 |      monkey         mammal    NaN    jump
 |  
 |  rfloordiv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Integer division of dataframe and other, element-wise (binary operator `rfloordiv`).
 |      
 |      Equivalent to ``other // dataframe``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `floordiv`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  rmod(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Modulo of dataframe and other, element-wise (binary operator `rmod`).
 |      
 |      Equivalent to ``other % dataframe``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `mod`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  rmul(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Multiplication of dataframe and other, element-wise (binary operator `rmul`).
 |      
 |      Equivalent to ``other * dataframe``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `mul`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  round(self, decimals: 'int | dict[IndexLabel, int] | Series' = 0, *args, **kwargs) -> 'DataFrame'
 |      Round a DataFrame to a variable number of decimal places.
 |      
 |      Parameters
 |      ----------
 |      decimals : int, dict, Series
 |          Number of decimal places to round each column to. If an int is
 |          given, round each column to the same number of places.
 |          Otherwise dict and Series round to variable numbers of places.
 |          Column names should be in the keys if `decimals` is a
 |          dict-like, or in the index if `decimals` is a Series. Any
 |          columns not included in `decimals` will be left as is. Elements
 |          of `decimals` which are not columns of the input will be
 |          ignored.
 |      *args
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with numpy.
 |      **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          A DataFrame with the affected columns rounded to the specified
 |          number of decimal places.
 |      
 |      See Also
 |      --------
 |      numpy.around : Round a numpy array to the given number of decimals.
 |      Series.round : Round a Series to the given number of decimals.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],
 |      ...                   columns=['dogs', 'cats'])
 |      >>> df
 |          dogs  cats
 |      0  0.21  0.32
 |      1  0.01  0.67
 |      2  0.66  0.03
 |      3  0.21  0.18
 |      
 |      By providing an integer each column is rounded to the same number
 |      of decimal places
 |      
 |      >>> df.round(1)
 |          dogs  cats
 |      0   0.2   0.3
 |      1   0.0   0.7
 |      2   0.7   0.0
 |      3   0.2   0.2
 |      
 |      With a dict, the number of places for specific columns can be
 |      specified with the column names as key and the number of decimal
 |      places as value
 |      
 |      >>> df.round({'dogs': 1, 'cats': 0})
 |          dogs  cats
 |      0   0.2   0.0
 |      1   0.0   1.0
 |      2   0.7   0.0
 |      3   0.2   0.0
 |      
 |      Using a Series, the number of places for specific columns can be
 |      specified with the column names as index and the number of
 |      decimal places as value
 |      
 |      >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])
 |      >>> df.round(decimals)
 |          dogs  cats
 |      0   0.2   0.0
 |      1   0.0   1.0
 |      2   0.7   0.0
 |      3   0.2   0.0
 |  
 |  rpow(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Exponential power of dataframe and other, element-wise (binary operator `rpow`).
 |      
 |      Equivalent to ``other ** dataframe``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `pow`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  rsub(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Subtraction of dataframe and other, element-wise (binary operator `rsub`).
 |      
 |      Equivalent to ``other - dataframe``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `sub`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  rtruediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).
 |      
 |      Equivalent to ``other / dataframe``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `truediv`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  select_dtypes(self, include=None, exclude=None) -> 'Self'
 |      Return a subset of the DataFrame's columns based on the column dtypes.
 |      
 |      Parameters
 |      ----------
 |      include, exclude : scalar or list-like
 |          A selection of dtypes or strings to be included/excluded. At least
 |          one of these parameters must be supplied.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The subset of the frame including the dtypes in ``include`` and
 |          excluding the dtypes in ``exclude``.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          * If both of ``include`` and ``exclude`` are empty
 |          * If ``include`` and ``exclude`` have overlapping elements
 |          * If any kind of string dtype is passed in.
 |      
 |      See Also
 |      --------
 |      DataFrame.dtypes: Return Series with the data type of each column.
 |      
 |      Notes
 |      -----
 |      * To select all *numeric* types, use ``np.number`` or ``'number'``
 |      * To select strings you must use the ``object`` dtype, but note that
 |        this will return *all* object dtype columns. With
 |        ``pd.options.future.infer_string`` enabled, using ``"str"`` will
 |        work to select all string columns.
 |      * See the `numpy dtype hierarchy
 |        <https://numpy.org/doc/stable/reference/arrays.scalars.html>`__
 |      * To select datetimes, use ``np.datetime64``, ``'datetime'`` or
 |        ``'datetime64'``
 |      * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or
 |        ``'timedelta64'``
 |      * To select Pandas categorical dtypes, use ``'category'``
 |      * To select Pandas datetimetz dtypes, use ``'datetimetz'``
 |        or ``'datetime64[ns, tz]'``
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'a': [1, 2] * 3,
 |      ...                    'b': [True, False] * 3,
 |      ...                    'c': [1.0, 2.0] * 3})
 |      >>> df
 |              a      b  c
 |      0       1   True  1.0
 |      1       2  False  2.0
 |      2       1   True  1.0
 |      3       2  False  2.0
 |      4       1   True  1.0
 |      5       2  False  2.0
 |      
 |      >>> df.select_dtypes(include='bool')
 |         b
 |      0  True
 |      1  False
 |      2  True
 |      3  False
 |      4  True
 |      5  False
 |      
 |      >>> df.select_dtypes(include=['float64'])
 |         c
 |      0  1.0
 |      1  2.0
 |      2  1.0
 |      3  2.0
 |      4  1.0
 |      5  2.0
 |      
 |      >>> df.select_dtypes(exclude=['int64'])
 |             b    c
 |      0   True  1.0
 |      1  False  2.0
 |      2   True  1.0
 |      3  False  2.0
 |      4   True  1.0
 |      5  False  2.0
 |  
 |  sem(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased standard error of the mean over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.sem with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame (if level specified) 
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.sem().round(6)
 |                  0.57735
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.sem()
 |                  a   0.5
 |                  b   0.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.sem(axis=1)
 |                  tiger   0.5
 |                  zebra   0.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True`
 |                  to avoid getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.sem(numeric_only=True)
 |                  a   0.5
 |                  dtype: float64
 |  
 |  set_axis(self, labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame'
 |      Assign desired index to given axis.
 |      
 |      Indexes for column or row labels can be changed by assigning
 |      a list-like or Index.
 |      
 |      Parameters
 |      ----------
 |      labels : list-like, Index
 |          The values for the new index.
 |      
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to update. The value 0 identifies the rows. For `Series`
 |          this parameter is unused and defaults to 0.
 |      
 |      copy : bool, default True
 |          Whether to make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          An object of type DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.rename_axis : Alter the name of the index or columns.
 |      
 |              Examples
 |              --------
 |              >>> df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
 |      
 |              Change the row labels.
 |      
 |              >>> df.set_axis(['a', 'b', 'c'], axis='index')
 |                 A  B
 |              a  1  4
 |              b  2  5
 |              c  3  6
 |      
 |              Change the column labels.
 |      
 |              >>> df.set_axis(['I', 'II'], axis='columns')
 |                 I  II
 |              0  1   4
 |              1  2   5
 |              2  3   6
 |  
 |  set_index(self, keys, *, drop: 'bool' = True, append: 'bool' = False, inplace: 'bool' = False, verify_integrity: 'bool' = False) -> 'DataFrame | None'
 |      Set the DataFrame index using existing columns.
 |      
 |      Set the DataFrame index (row labels) using one or more existing
 |      columns or arrays (of the correct length). The index can replace the
 |      existing index or expand on it.
 |      
 |      Parameters
 |      ----------
 |      keys : label or array-like or list of labels/arrays
 |          This parameter can be either a single column key, a single array of
 |          the same length as the calling DataFrame, or a list containing an
 |          arbitrary combination of column keys and arrays. Here, "array"
 |          encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and
 |          instances of :class:`~collections.abc.Iterator`.
 |      drop : bool, default True
 |          Delete columns to be used as the new index.
 |      append : bool, default False
 |          Whether to append columns to existing index.
 |      inplace : bool, default False
 |          Whether to modify the DataFrame rather than creating a new one.
 |      verify_integrity : bool, default False
 |          Check the new index for duplicates. Otherwise defer the check until
 |          necessary. Setting to False will improve the performance of this
 |          method.
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          Changed row labels or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.reset_index : Opposite of set_index.
 |      DataFrame.reindex : Change to new indices or expand indices.
 |      DataFrame.reindex_like : Change to same indices as other DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'month': [1, 4, 7, 10],
 |      ...                    'year': [2012, 2014, 2013, 2014],
 |      ...                    'sale': [55, 40, 84, 31]})
 |      >>> df
 |         month  year  sale
 |      0      1  2012    55
 |      1      4  2014    40
 |      2      7  2013    84
 |      3     10  2014    31
 |      
 |      Set the index to become the 'month' column:
 |      
 |      >>> df.set_index('month')
 |             year  sale
 |      month
 |      1      2012    55
 |      4      2014    40
 |      7      2013    84
 |      10     2014    31
 |      
 |      Create a MultiIndex using columns 'year' and 'month':
 |      
 |      >>> df.set_index(['year', 'month'])
 |                  sale
 |      year  month
 |      2012  1     55
 |      2014  4     40
 |      2013  7     84
 |      2014  10    31
 |      
 |      Create a MultiIndex using an Index and a column:
 |      
 |      >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])
 |               month  sale
 |         year
 |      1  2012  1      55
 |      2  2014  4      40
 |      3  2013  7      84
 |      4  2014  10     31
 |      
 |      Create a MultiIndex using two Series:
 |      
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> df.set_index([s, s**2])
 |            month  year  sale
 |      1 1       1  2012    55
 |      2 4       4  2014    40
 |      3 9       7  2013    84
 |      4 16     10  2014    31
 |  
 |  shift(self, periods: 'int | Sequence[int]' = 1, freq: 'Frequency | None' = None, axis: 'Axis' = 0, fill_value: 'Hashable' = <no_default>, suffix: 'str | None' = None) -> 'DataFrame'
 |      Shift index by desired number of periods with an optional time `freq`.
 |      
 |      When `freq` is not passed, shift the index without realigning the data.
 |      If `freq` is passed (in this case, the index must be date or datetime,
 |      or it will raise a `NotImplementedError`), the index will be
 |      increased using the periods and the `freq`. `freq` can be inferred
 |      when specified as "infer" as long as either freq or inferred_freq
 |      attribute is set in the index.
 |      
 |      Parameters
 |      ----------
 |      periods : int or Sequence
 |          Number of periods to shift. Can be positive or negative.
 |          If an iterable of ints, the data will be shifted once by each int.
 |          This is equivalent to shifting by one value at a time and
 |          concatenating all resulting frames. The resulting columns will have
 |          the shift suffixed to their column names. For multiple periods,
 |          axis must not be 1.
 |      freq : DateOffset, tseries.offsets, timedelta, or str, optional
 |          Offset to use from the tseries module or time rule (e.g. 'EOM').
 |          If `freq` is specified then the index values are shifted but the
 |          data is not realigned. That is, use `freq` if you would like to
 |          extend the index when shifting and preserve the original data.
 |          If `freq` is specified as "infer" then it will be inferred from
 |          the freq or inferred_freq attributes of the index. If neither of
 |          those attributes exist, a ValueError is thrown.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Shift direction. For `Series` this parameter is unused and defaults to 0.
 |      fill_value : object, optional
 |          The scalar value to use for newly introduced missing values.
 |          the default depends on the dtype of `self`.
 |          For numeric data, ``np.nan`` is used.
 |          For datetime, timedelta, or period data, etc. :attr:`NaT` is used.
 |          For extension dtypes, ``self.dtype.na_value`` is used.
 |      suffix : str, optional
 |          If str and periods is an iterable, this is added after the column
 |          name and before the shift value for each shifted column name.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Copy of input object, shifted.
 |      
 |      See Also
 |      --------
 |      Index.shift : Shift values of Index.
 |      DatetimeIndex.shift : Shift values of DatetimeIndex.
 |      PeriodIndex.shift : Shift values of PeriodIndex.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"Col1": [10, 20, 15, 30, 45],
 |      ...                    "Col2": [13, 23, 18, 33, 48],
 |      ...                    "Col3": [17, 27, 22, 37, 52]},
 |      ...                   index=pd.date_range("2020-01-01", "2020-01-05"))
 |      >>> df
 |                  Col1  Col2  Col3
 |      2020-01-01    10    13    17
 |      2020-01-02    20    23    27
 |      2020-01-03    15    18    22
 |      2020-01-04    30    33    37
 |      2020-01-05    45    48    52
 |      
 |      >>> df.shift(periods=3)
 |                  Col1  Col2  Col3
 |      2020-01-01   NaN   NaN   NaN
 |      2020-01-02   NaN   NaN   NaN
 |      2020-01-03   NaN   NaN   NaN
 |      2020-01-04  10.0  13.0  17.0
 |      2020-01-05  20.0  23.0  27.0
 |      
 |      >>> df.shift(periods=1, axis="columns")
 |                  Col1  Col2  Col3
 |      2020-01-01   NaN    10    13
 |      2020-01-02   NaN    20    23
 |      2020-01-03   NaN    15    18
 |      2020-01-04   NaN    30    33
 |      2020-01-05   NaN    45    48
 |      
 |      >>> df.shift(periods=3, fill_value=0)
 |                  Col1  Col2  Col3
 |      2020-01-01     0     0     0
 |      2020-01-02     0     0     0
 |      2020-01-03     0     0     0
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      
 |      >>> df.shift(periods=3, freq="D")
 |                  Col1  Col2  Col3
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      2020-01-06    15    18    22
 |      2020-01-07    30    33    37
 |      2020-01-08    45    48    52
 |      
 |      >>> df.shift(periods=3, freq="infer")
 |                  Col1  Col2  Col3
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      2020-01-06    15    18    22
 |      2020-01-07    30    33    37
 |      2020-01-08    45    48    52
 |      
 |      >>> df['Col1'].shift(periods=[0, 1, 2])
 |                  Col1_0  Col1_1  Col1_2
 |      2020-01-01      10     NaN     NaN
 |      2020-01-02      20    10.0     NaN
 |      2020-01-03      15    20.0    10.0
 |      2020-01-04      30    15.0    20.0
 |      2020-01-05      45    30.0    15.0
 |  
 |  skew(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased skew over requested axis.
 |      
 |      Normalized by N-1.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      Series or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.skew()
 |                  0.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},
 |                  ...                   index=['tiger', 'zebra', 'cow'])
 |                  >>> df
 |                          a   b   c
 |                  tiger   1   2   1
 |                  zebra   2   3   3
 |                  cow     3   4   5
 |                  >>> df.skew()
 |                  a   0.0
 |                  b   0.0
 |                  c   0.0
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.skew(axis=1)
 |                  tiger   1.732051
 |                  zebra  -1.732051
 |                  cow     0.000000
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True` to avoid
 |                  getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},
 |                  ...                   index=['tiger', 'zebra', 'cow'])
 |                  >>> df.skew(numeric_only=True)
 |                  a   0.0
 |                  dtype: float64
 |  
 |  sort_index(self, *, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -> 'DataFrame | None'
 |      Sort object by labels (along an axis).
 |      
 |      Returns a new DataFrame sorted by label if `inplace` argument is
 |      ``False``, otherwise updates the original DataFrame and returns None.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis along which to sort.  The value 0 identifies the rows,
 |          and 1 identifies the columns.
 |      level : int or level name or list of ints or list of level names
 |          If not None, sort on values in specified index level(s).
 |      ascending : bool or list-like of bools, default True
 |          Sort ascending vs. descending. When the index is a MultiIndex the
 |          sort direction can be controlled for each level individually.
 |      inplace : bool, default False
 |          Whether to modify the DataFrame rather than creating a new one.
 |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'
 |          Choice of sorting algorithm. See also :func:`numpy.sort` for more
 |          information. `mergesort` and `stable` are the only stable algorithms. For
 |          DataFrames, this option is only applied when sorting on a single
 |          column or label.
 |      na_position : {'first', 'last'}, default 'last'
 |          Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.
 |          Not implemented for MultiIndex.
 |      sort_remaining : bool, default True
 |          If True and sorting by level and index is multilevel, sort by other
 |          levels too (in order) after sorting by specified level.
 |      ignore_index : bool, default False
 |          If True, the resulting axis will be labeled 0, 1, …, n - 1.
 |      key : callable, optional
 |          If not None, apply the key function to the index values
 |          before sorting. This is similar to the `key` argument in the
 |          builtin :meth:`sorted` function, with the notable difference that
 |          this `key` function should be *vectorized*. It should expect an
 |          ``Index`` and return an ``Index`` of the same shape. For MultiIndex
 |          inputs, the key is applied *per level*.
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          The original DataFrame sorted by the labels or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.sort_index : Sort Series by the index.
 |      DataFrame.sort_values : Sort DataFrame by the value.
 |      Series.sort_values : Sort Series by the value.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([1, 2, 3, 4, 5], index=[100, 29, 234, 1, 150],
 |      ...                   columns=['A'])
 |      >>> df.sort_index()
 |           A
 |      1    4
 |      29   2
 |      100  1
 |      150  5
 |      234  3
 |      
 |      By default, it sorts in ascending order, to sort in descending order,
 |      use ``ascending=False``
 |      
 |      >>> df.sort_index(ascending=False)
 |           A
 |      234  3
 |      150  5
 |      100  1
 |      29   2
 |      1    4
 |      
 |      A key function can be specified which is applied to the index before
 |      sorting. For a ``MultiIndex`` this is applied to each level separately.
 |      
 |      >>> df = pd.DataFrame({"a": [1, 2, 3, 4]}, index=['A', 'b', 'C', 'd'])
 |      >>> df.sort_index(key=lambda x: x.str.lower())
 |         a
 |      A  1
 |      b  2
 |      C  3
 |      d  4
 |  
 |  sort_values(self, by: 'IndexLabel', *, axis: 'Axis' = 0, ascending: 'bool | list[bool] | tuple[bool, ...]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'str' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -> 'DataFrame | None'
 |      Sort by the values along either axis.
 |      
 |      Parameters
 |      ----------
 |      by : str or list of str
 |          Name or list of names to sort by.
 |      
 |          - if `axis` is 0 or `'index'` then `by` may contain index
 |            levels and/or column labels.
 |          - if `axis` is 1 or `'columns'` then `by` may contain column
 |            levels and/or index labels.
 |      axis : "{0 or 'index', 1 or 'columns'}", default 0
 |           Axis to be sorted.
 |      ascending : bool or list of bool, default True
 |           Sort ascending vs. descending. Specify list for multiple sort
 |           orders.  If this is a list of bools, must match the length of
 |           the by.
 |      inplace : bool, default False
 |           If True, perform operation in-place.
 |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'
 |           Choice of sorting algorithm. See also :func:`numpy.sort` for more
 |           information. `mergesort` and `stable` are the only stable algorithms. For
 |           DataFrames, this option is only applied when sorting on a single
 |           column or label.
 |      na_position : {'first', 'last'}, default 'last'
 |           Puts NaNs at the beginning if `first`; `last` puts NaNs at the
 |           end.
 |      ignore_index : bool, default False
 |           If True, the resulting axis will be labeled 0, 1, …, n - 1.
 |      key : callable, optional
 |          Apply the key function to the values
 |          before sorting. This is similar to the `key` argument in the
 |          builtin :meth:`sorted` function, with the notable difference that
 |          this `key` function should be *vectorized*. It should expect a
 |          ``Series`` and return a Series with the same shape as the input.
 |          It will be applied to each column in `by` independently.
 |      
 |      Returns
 |      -------
 |      DataFrame or None
 |          DataFrame with sorted values or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.sort_index : Sort a DataFrame by the index.
 |      Series.sort_values : Similar method for a Series.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({
 |      ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],
 |      ...     'col2': [2, 1, 9, 8, 7, 4],
 |      ...     'col3': [0, 1, 9, 4, 2, 3],
 |      ...     'col4': ['a', 'B', 'c', 'D', 'e', 'F']
 |      ... })
 |      >>> df
 |        col1  col2  col3 col4
 |      0    A     2     0    a
 |      1    A     1     1    B
 |      2    B     9     9    c
 |      3  NaN     8     4    D
 |      4    D     7     2    e
 |      5    C     4     3    F
 |      
 |      Sort by col1
 |      
 |      >>> df.sort_values(by=['col1'])
 |        col1  col2  col3 col4
 |      0    A     2     0    a
 |      1    A     1     1    B
 |      2    B     9     9    c
 |      5    C     4     3    F
 |      4    D     7     2    e
 |      3  NaN     8     4    D
 |      
 |      Sort by multiple columns
 |      
 |      >>> df.sort_values(by=['col1', 'col2'])
 |        col1  col2  col3 col4
 |      1    A     1     1    B
 |      0    A     2     0    a
 |      2    B     9     9    c
 |      5    C     4     3    F
 |      4    D     7     2    e
 |      3  NaN     8     4    D
 |      
 |      Sort Descending
 |      
 |      >>> df.sort_values(by='col1', ascending=False)
 |        col1  col2  col3 col4
 |      4    D     7     2    e
 |      5    C     4     3    F
 |      2    B     9     9    c
 |      0    A     2     0    a
 |      1    A     1     1    B
 |      3  NaN     8     4    D
 |      
 |      Putting NAs first
 |      
 |      >>> df.sort_values(by='col1', ascending=False, na_position='first')
 |        col1  col2  col3 col4
 |      3  NaN     8     4    D
 |      4    D     7     2    e
 |      5    C     4     3    F
 |      2    B     9     9    c
 |      0    A     2     0    a
 |      1    A     1     1    B
 |      
 |      Sorting with a key function
 |      
 |      >>> df.sort_values(by='col4', key=lambda col: col.str.lower())
 |         col1  col2  col3 col4
 |      0    A     2     0    a
 |      1    A     1     1    B
 |      2    B     9     9    c
 |      3  NaN     8     4    D
 |      4    D     7     2    e
 |      5    C     4     3    F
 |      
 |      Natural sort with the key argument,
 |      using the `natsort <https://github.com/SethMMorton/natsort>` package.
 |      
 |      >>> df = pd.DataFrame({
 |      ...    "time": ['0hr', '128hr', '72hr', '48hr', '96hr'],
 |      ...    "value": [10, 20, 30, 40, 50]
 |      ... })
 |      >>> df
 |          time  value
 |      0    0hr     10
 |      1  128hr     20
 |      2   72hr     30
 |      3   48hr     40
 |      4   96hr     50
 |      >>> from natsort import index_natsorted
 |      >>> df.sort_values(
 |      ...     by="time",
 |      ...     key=lambda x: np.argsort(index_natsorted(df["time"]))
 |      ... )
 |          time  value
 |      0    0hr     10
 |      3   48hr     40
 |      2   72hr     30
 |      4   96hr     50
 |      1  128hr     20
 |  
 |  stack(self, level: 'IndexLabel' = -1, dropna: 'bool | lib.NoDefault' = <no_default>, sort: 'bool | lib.NoDefault' = <no_default>, future_stack: 'bool' = False)
 |      Stack the prescribed level(s) from columns to index.
 |      
 |      Return a reshaped DataFrame or Series having a multi-level
 |      index with one or more new inner-most levels compared to the current
 |      DataFrame. The new inner-most levels are created by pivoting the
 |      columns of the current dataframe:
 |      
 |        - if the columns have a single level, the output is a Series;
 |        - if the columns have multiple levels, the new index
 |          level(s) is (are) taken from the prescribed level(s) and
 |          the output is a DataFrame.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, list, default -1
 |          Level(s) to stack from the column axis onto the index
 |          axis, defined as one index or label, or a list of indices
 |          or labels.
 |      dropna : bool, default True
 |          Whether to drop rows in the resulting Frame/Series with
 |          missing values. Stacking a column level onto the index
 |          axis can create combinations of index and column values
 |          that are missing from the original dataframe. See Examples
 |          section.
 |      sort : bool, default True
 |          Whether to sort the levels of the resulting MultiIndex.
 |      future_stack : bool, default False
 |          Whether to use the new implementation that will replace the current
 |          implementation in pandas 3.0. When True, dropna and sort have no impact
 |          on the result and must remain unspecified. See :ref:`pandas 2.1.0 Release
 |          notes <whatsnew_210.enhancements.new_stack>` for more details.
 |      
 |      Returns
 |      -------
 |      DataFrame or Series
 |          Stacked dataframe or series.
 |      
 |      See Also
 |      --------
 |      DataFrame.unstack : Unstack prescribed level(s) from index axis
 |           onto column axis.
 |      DataFrame.pivot : Reshape dataframe from long format to wide
 |           format.
 |      DataFrame.pivot_table : Create a spreadsheet-style pivot table
 |           as a DataFrame.
 |      
 |      Notes
 |      -----
 |      The function is named by analogy with a collection of books
 |      being reorganized from being side by side on a horizontal
 |      position (the columns of the dataframe) to being stacked
 |      vertically on top of each other (in the index of the
 |      dataframe).
 |      
 |      Reference :ref:`the user guide <reshaping.stacking>` for more examples.
 |      
 |      Examples
 |      --------
 |      **Single level columns**
 |      
 |      >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],
 |      ...                                     index=['cat', 'dog'],
 |      ...                                     columns=['weight', 'height'])
 |      
 |      Stacking a dataframe with a single level column axis returns a Series:
 |      
 |      >>> df_single_level_cols
 |           weight height
 |      cat       0      1
 |      dog       2      3
 |      >>> df_single_level_cols.stack(future_stack=True)
 |      cat  weight    0
 |           height    1
 |      dog  weight    2
 |           height    3
 |      dtype: int64
 |      
 |      **Multi level columns: simple case**
 |      
 |      >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),
 |      ...                                        ('weight', 'pounds')])
 |      >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],
 |      ...                                     index=['cat', 'dog'],
 |      ...                                     columns=multicol1)
 |      
 |      Stacking a dataframe with a multi-level column axis:
 |      
 |      >>> df_multi_level_cols1
 |           weight
 |               kg    pounds
 |      cat       1        2
 |      dog       2        4
 |      >>> df_multi_level_cols1.stack(future_stack=True)
 |                  weight
 |      cat kg           1
 |          pounds       2
 |      dog kg           2
 |          pounds       4
 |      
 |      **Missing values**
 |      
 |      >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),
 |      ...                                        ('height', 'm')])
 |      >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],
 |      ...                                     index=['cat', 'dog'],
 |      ...                                     columns=multicol2)
 |      
 |      It is common to have missing values when stacking a dataframe
 |      with multi-level columns, as the stacked dataframe typically
 |      has more values than the original dataframe. Missing values
 |      are filled with NaNs:
 |      
 |      >>> df_multi_level_cols2
 |          weight height
 |              kg      m
 |      cat    1.0    2.0
 |      dog    3.0    4.0
 |      >>> df_multi_level_cols2.stack(future_stack=True)
 |              weight  height
 |      cat kg     1.0     NaN
 |          m      NaN     2.0
 |      dog kg     3.0     NaN
 |          m      NaN     4.0
 |      
 |      **Prescribing the level(s) to be stacked**
 |      
 |      The first parameter controls which level or levels are stacked:
 |      
 |      >>> df_multi_level_cols2.stack(0, future_stack=True)
 |                   kg    m
 |      cat weight  1.0  NaN
 |          height  NaN  2.0
 |      dog weight  3.0  NaN
 |          height  NaN  4.0
 |      >>> df_multi_level_cols2.stack([0, 1], future_stack=True)
 |      cat  weight  kg    1.0
 |           height  m     2.0
 |      dog  weight  kg    3.0
 |           height  m     4.0
 |      dtype: float64
 |  
 |  std(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return sample standard deviation over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.std with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame (if level specified) 
 |      
 |      Notes
 |      -----
 |      To have the same behaviour as `numpy.std`, use `ddof=0` (instead of the
 |      default `ddof=1`)
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],
 |      ...                    'age': [21, 25, 62, 43],
 |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}
 |      ...                   ).set_index('person_id')
 |      >>> df
 |                 age  height
 |      person_id
 |      0           21    1.61
 |      1           25    1.87
 |      2           62    1.49
 |      3           43    2.01
 |      
 |      The standard deviation of the columns can be found as follows:
 |      
 |      >>> df.std()
 |      age       18.786076
 |      height     0.237417
 |      dtype: float64
 |      
 |      Alternatively, `ddof=0` can be set to normalize by N instead of N-1:
 |      
 |      >>> df.std(ddof=0)
 |      age       16.269219
 |      height     0.205609
 |      dtype: float64
 |  
 |  sub(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Subtraction of dataframe and other, element-wise (binary operator `sub`).
 |      
 |      Equivalent to ``dataframe - other``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `rsub`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  subtract = sub(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |  
 |  sum(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |      Return the sum of the values over the requested axis.
 |      
 |      This is equivalent to the method ``numpy.sum``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.sum with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      min_count : int, default 0
 |          The required number of valid values to perform the operation. If fewer than
 |          ``min_count`` non-NA values are present the result will be NA.
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      Series or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.sum()
 |      14
 |      
 |      By default, the sum of an empty or all-NA Series is ``0``.
 |      
 |      >>> pd.Series([], dtype="float64").sum()  # min_count=0 is the default
 |      0.0
 |      
 |      This can be controlled with the ``min_count`` parameter. For example, if
 |      you'd like the sum of an empty series to be NaN, pass ``min_count=1``.
 |      
 |      >>> pd.Series([], dtype="float64").sum(min_count=1)
 |      nan
 |      
 |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
 |      empty series identically.
 |      
 |      >>> pd.Series([np.nan]).sum()
 |      0.0
 |      
 |      >>> pd.Series([np.nan]).sum(min_count=1)
 |      nan
 |  
 |  swaplevel(self, i: 'Axis' = -2, j: 'Axis' = -1, axis: 'Axis' = 0) -> 'DataFrame'
 |      Swap levels i and j in a :class:`MultiIndex`.
 |      
 |      Default is to swap the two innermost levels of the index.
 |      
 |      Parameters
 |      ----------
 |      i, j : int or str
 |          Levels of the indices to be swapped. Can pass level name as string.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |                  The axis to swap levels on. 0 or 'index' for row-wise, 1 or
 |                  'columns' for column-wise.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          DataFrame with levels swapped in MultiIndex.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     {"Grade": ["A", "B", "A", "C"]},
 |      ...     index=[
 |      ...         ["Final exam", "Final exam", "Coursework", "Coursework"],
 |      ...         ["History", "Geography", "History", "Geography"],
 |      ...         ["January", "February", "March", "April"],
 |      ...     ],
 |      ... )
 |      >>> df
 |                                          Grade
 |      Final exam  History     January      A
 |                  Geography   February     B
 |      Coursework  History     March        A
 |                  Geography   April        C
 |      
 |      In the following example, we will swap the levels of the indices.
 |      Here, we will swap the levels column-wise, but levels can be swapped row-wise
 |      in a similar manner. Note that column-wise is the default behaviour.
 |      By not supplying any arguments for i and j, we swap the last and second to
 |      last indices.
 |      
 |      >>> df.swaplevel()
 |                                          Grade
 |      Final exam  January     History         A
 |                  February    Geography       B
 |      Coursework  March       History         A
 |                  April       Geography       C
 |      
 |      By supplying one argument, we can choose which index to swap the last
 |      index with. We can for example swap the first index with the last one as
 |      follows.
 |      
 |      >>> df.swaplevel(0)
 |                                          Grade
 |      January     History     Final exam      A
 |      February    Geography   Final exam      B
 |      March       History     Coursework      A
 |      April       Geography   Coursework      C
 |      
 |      We can also define explicitly which indices we want to swap by supplying values
 |      for both i and j. Here, we for example swap the first and second indices.
 |      
 |      >>> df.swaplevel(0, 1)
 |                                          Grade
 |      History     Final exam  January         A
 |      Geography   Final exam  February        B
 |      History     Coursework  March           A
 |      Geography   Coursework  April           C
 |  
 |  to_dict(self, orient: "Literal['dict', 'list', 'series', 'split', 'tight', 'records', 'index']" = 'dict', *, into: 'type[MutableMappingT] | MutableMappingT' = <class 'dict'>, index: 'bool' = True) -> 'MutableMappingT | list[MutableMappingT]'
 |      Convert the DataFrame to a dictionary.
 |      
 |      The type of the key-value pairs can be customized with the parameters
 |      (see below).
 |      
 |      Parameters
 |      ----------
 |      orient : str {'dict', 'list', 'series', 'split', 'tight', 'records', 'index'}
 |          Determines the type of the values of the dictionary.
 |      
 |          - 'dict' (default) : dict like {column -> {index -> value}}
 |          - 'list' : dict like {column -> [values]}
 |          - 'series' : dict like {column -> Series(values)}
 |          - 'split' : dict like
 |            {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}
 |          - 'tight' : dict like
 |            {'index' -> [index], 'columns' -> [columns], 'data' -> [values],
 |            'index_names' -> [index.names], 'column_names' -> [column.names]}
 |          - 'records' : list like
 |            [{column -> value}, ... , {column -> value}]
 |          - 'index' : dict like {index -> {column -> value}}
 |      
 |          .. versionadded:: 1.4.0
 |              'tight' as an allowed value for the ``orient`` argument
 |      
 |      into : class, default dict
 |          The collections.abc.MutableMapping subclass used for all Mappings
 |          in the return value.  Can be the actual class or an empty
 |          instance of the mapping type you want.  If you want a
 |          collections.defaultdict, you must pass it initialized.
 |      
 |      index : bool, default True
 |          Whether to include the index item (and index_names item if `orient`
 |          is 'tight') in the returned dictionary. Can only be ``False``
 |          when `orient` is 'split' or 'tight'.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      dict, list or collections.abc.MutableMapping
 |          Return a collections.abc.MutableMapping object representing the
 |          DataFrame. The resulting transformation depends on the `orient`
 |          parameter.
 |      
 |      See Also
 |      --------
 |      DataFrame.from_dict: Create a DataFrame from a dictionary.
 |      DataFrame.to_json: Convert a DataFrame to JSON format.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'col1': [1, 2],
 |      ...                    'col2': [0.5, 0.75]},
 |      ...                   index=['row1', 'row2'])
 |      >>> df
 |            col1  col2
 |      row1     1  0.50
 |      row2     2  0.75
 |      >>> df.to_dict()
 |      {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}
 |      
 |      You can specify the return orientation.
 |      
 |      >>> df.to_dict('series')
 |      {'col1': row1    1
 |               row2    2
 |      Name: col1, dtype: int64,
 |      'col2': row1    0.50
 |              row2    0.75
 |      Name: col2, dtype: float64}
 |      
 |      >>> df.to_dict('split')
 |      {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],
 |       'data': [[1, 0.5], [2, 0.75]]}
 |      
 |      >>> df.to_dict('records')
 |      [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]
 |      
 |      >>> df.to_dict('index')
 |      {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}
 |      
 |      >>> df.to_dict('tight')
 |      {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],
 |       'data': [[1, 0.5], [2, 0.75]], 'index_names': [None], 'column_names': [None]}
 |      
 |      You can also specify the mapping type.
 |      
 |      >>> from collections import OrderedDict, defaultdict
 |      >>> df.to_dict(into=OrderedDict)
 |      OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),
 |                   ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])
 |      
 |      If you want a `defaultdict`, you need to initialize it:
 |      
 |      >>> dd = defaultdict(list)
 |      >>> df.to_dict('records', into=dd)
 |      [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),
 |       defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]
 |  
 |  to_feather(self, path: 'FilePath | WriteBuffer[bytes]', **kwargs) -> 'None'
 |      Write a DataFrame to the binary Feather format.
 |      
 |      Parameters
 |      ----------
 |      path : str, path object, file-like object
 |          String, path object (implementing ``os.PathLike[str]``), or file-like
 |          object implementing a binary ``write()`` function. If a string or a path,
 |          it will be used as Root Directory path when writing a partitioned dataset.
 |      **kwargs :
 |          Additional keywords passed to :func:`pyarrow.feather.write_feather`.
 |          This includes the `compression`, `compression_level`, `chunksize`
 |          and `version` keywords.
 |      
 |      Notes
 |      -----
 |      This function writes the dataframe as a `feather file
 |      <https://arrow.apache.org/docs/python/feather.html>`_. Requires a default
 |      index. For saving the DataFrame with your custom index use a method that
 |      supports custom indices e.g. `to_parquet`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]])
 |      >>> df.to_feather("file.feather")  # doctest: +SKIP
 |  
 |  to_gbq(self, destination_table: 'str', *, project_id: 'str | None' = None, chunksize: 'int | None' = None, reauth: 'bool' = False, if_exists: 'ToGbqIfexist' = 'fail', auth_local_webserver: 'bool' = True, table_schema: 'list[dict[str, str]] | None' = None, location: 'str | None' = None, progress_bar: 'bool' = True, credentials=None) -> 'None'
 |      Write a DataFrame to a Google BigQuery table.
 |      
 |      .. deprecated:: 2.2.0
 |      
 |         Please use ``pandas_gbq.to_gbq`` instead.
 |      
 |      This function requires the `pandas-gbq package
 |      <https://pandas-gbq.readthedocs.io>`__.
 |      
 |      See the `How to authenticate with Google BigQuery
 |      <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__
 |      guide for authentication instructions.
 |      
 |      Parameters
 |      ----------
 |      destination_table : str
 |          Name of table to be written, in the form ``dataset.tablename``.
 |      project_id : str, optional
 |          Google BigQuery Account project ID. Optional when available from
 |          the environment.
 |      chunksize : int, optional
 |          Number of rows to be inserted in each chunk from the dataframe.
 |          Set to ``None`` to load the whole dataframe at once.
 |      reauth : bool, default False
 |          Force Google BigQuery to re-authenticate the user. This is useful
 |          if multiple accounts are used.
 |      if_exists : str, default 'fail'
 |          Behavior when the destination table exists. Value can be one of:
 |      
 |          ``'fail'``
 |              If table exists raise pandas_gbq.gbq.TableCreationError.
 |          ``'replace'``
 |              If table exists, drop it, recreate it, and insert data.
 |          ``'append'``
 |              If table exists, insert data. Create if does not exist.
 |      auth_local_webserver : bool, default True
 |          Use the `local webserver flow`_ instead of the `console flow`_
 |          when getting user credentials.
 |      
 |          .. _local webserver flow:
 |              https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server
 |          .. _console flow:
 |              https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console
 |      
 |          *New in version 0.2.0 of pandas-gbq*.
 |      
 |          .. versionchanged:: 1.5.0
 |             Default value is changed to ``True``. Google has deprecated the
 |             ``auth_local_webserver = False`` `"out of band" (copy-paste)
 |             flow
 |             <https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html?m=1#disallowed-oob>`_.
 |      table_schema : list of dicts, optional
 |          List of BigQuery table fields to which according DataFrame
 |          columns conform to, e.g. ``[{'name': 'col1', 'type':
 |          'STRING'},...]``. If schema is not provided, it will be
 |          generated according to dtypes of DataFrame columns. See
 |          BigQuery API documentation on available names of a field.
 |      
 |          *New in version 0.3.1 of pandas-gbq*.
 |      location : str, optional
 |          Location where the load job should run. See the `BigQuery locations
 |          documentation
 |          <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a
 |          list of available locations. The location must match that of the
 |          target dataset.
 |      
 |          *New in version 0.5.0 of pandas-gbq*.
 |      progress_bar : bool, default True
 |          Use the library `tqdm` to show the progress bar for the upload,
 |          chunk by chunk.
 |      
 |          *New in version 0.5.0 of pandas-gbq*.
 |      credentials : google.auth.credentials.Credentials, optional
 |          Credentials for accessing Google APIs. Use this parameter to
 |          override default credentials, such as to use Compute Engine
 |          :class:`google.auth.compute_engine.Credentials` or Service
 |          Account :class:`google.oauth2.service_account.Credentials`
 |          directly.
 |      
 |          *New in version 0.8.0 of pandas-gbq*.
 |      
 |      See Also
 |      --------
 |      pandas_gbq.to_gbq : This function in the pandas-gbq library.
 |      read_gbq : Read a DataFrame from Google BigQuery.
 |      
 |      Examples
 |      --------
 |      Example taken from `Google BigQuery documentation
 |      <https://cloud.google.com/bigquery/docs/samples/bigquery-pandas-gbq-to-gbq-simple>`_
 |      
 |      >>> project_id = "my-project"
 |      >>> table_id = 'my_dataset.my_table'
 |      >>> df = pd.DataFrame({
 |      ...                   "my_string": ["a", "b", "c"],
 |      ...                   "my_int64": [1, 2, 3],
 |      ...                   "my_float64": [4.0, 5.0, 6.0],
 |      ...                   "my_bool1": [True, False, True],
 |      ...                   "my_bool2": [False, True, False],
 |      ...                   "my_dates": pd.date_range("now", periods=3),
 |      ...                   }
 |      ...                   )
 |      
 |      >>> df.to_gbq(table_id, project_id=project_id)  # doctest: +SKIP
 |  
 |  to_html(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'ColspaceArgType | None' = None, header: 'bool' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool | str' = False, decimal: 'str' = '.', bold_rows: 'bool' = True, classes: 'str | list | tuple | None' = None, escape: 'bool' = True, notebook: 'bool' = False, border: 'int | bool | None' = None, table_id: 'str | None' = None, render_links: 'bool' = False, encoding: 'str | None' = None) -> 'str | None'
 |      Render a DataFrame as an HTML table.
 |      
 |      Parameters
 |      ----------
 |      buf : str, Path or StringIO-like, optional, default None
 |          Buffer to write to. If None, the output is returned as a string.
 |      columns : array-like, optional, default None
 |          The subset of columns to write. Writes all columns by default.
 |      col_space : str or int, list or dict of int or str, optional
 |          The minimum width of each column in CSS length units.  An int is assumed to be px units..
 |      header : bool, optional
 |          Whether to print column labels, default True.
 |      index : bool, optional, default True
 |          Whether to print index (row) labels.
 |      na_rep : str, optional, default 'NaN'
 |          String representation of ``NaN`` to use.
 |      formatters : list, tuple or dict of one-param. functions, optional
 |          Formatter functions to apply to columns' elements by position or
 |          name.
 |          The result of each function must be a unicode string.
 |          List/tuple must be of length equal to the number of columns.
 |      float_format : one-parameter function, optional, default None
 |          Formatter function to apply to columns' elements if they are
 |          floats. This function must return a unicode string and will be
 |          applied only to the non-``NaN`` elements, with ``NaN`` being
 |          handled by ``na_rep``.
 |      sparsify : bool, optional, default True
 |          Set to False for a DataFrame with a hierarchical index to print
 |          every multiindex key at each row.
 |      index_names : bool, optional, default True
 |          Prints the names of the indexes.
 |      justify : str, default None
 |          How to justify the column labels. If None uses the option from
 |          the print configuration (controlled by set_option), 'right' out
 |          of the box. Valid values are
 |      
 |          * left
 |          * right
 |          * center
 |          * justify
 |          * justify-all
 |          * start
 |          * end
 |          * inherit
 |          * match-parent
 |          * initial
 |          * unset.
 |      max_rows : int, optional
 |          Maximum number of rows to display in the console.
 |      max_cols : int, optional
 |          Maximum number of columns to display in the console.
 |      show_dimensions : bool, default False
 |          Display DataFrame dimensions (number of rows by number of columns).
 |      decimal : str, default '.'
 |          Character recognized as decimal separator, e.g. ',' in Europe.
 |      
 |      bold_rows : bool, default True
 |          Make the row labels bold in the output.
 |      classes : str or list or tuple, default None
 |          CSS class(es) to apply to the resulting html table.
 |      escape : bool, default True
 |          Convert the characters <, >, and & to HTML-safe sequences.
 |      notebook : {True, False}, default False
 |          Whether the generated HTML is for IPython Notebook.
 |      border : int
 |          A ``border=border`` attribute is included in the opening
 |          `<table>` tag. Default ``pd.options.display.html.border``.
 |      table_id : str, optional
 |          A css id is included in the opening `<table>` tag if specified.
 |      render_links : bool, default False
 |          Convert URLs to HTML links.
 |      encoding : str, default "utf-8"
 |          Set character encoding.
 |      
 |      Returns
 |      -------
 |      str or None
 |          If buf is None, returns the result as a string. Otherwise returns
 |          None.
 |      
 |      See Also
 |      --------
 |      to_string : Convert DataFrame to a string.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})
 |      >>> html_string = '''<table border="1" class="dataframe">
 |      ...   <thead>
 |      ...     <tr style="text-align: right;">
 |      ...       <th></th>
 |      ...       <th>col1</th>
 |      ...       <th>col2</th>
 |      ...     </tr>
 |      ...   </thead>
 |      ...   <tbody>
 |      ...     <tr>
 |      ...       <th>0</th>
 |      ...       <td>1</td>
 |      ...       <td>4</td>
 |      ...     </tr>
 |      ...     <tr>
 |      ...       <th>1</th>
 |      ...       <td>2</td>
 |      ...       <td>3</td>
 |      ...     </tr>
 |      ...   </tbody>
 |      ... </table>'''
 |      >>> assert html_string == df.to_html()
 |  
 |  to_markdown(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'str | None'
 |      Print DataFrame in Markdown-friendly format.
 |      
 |      Parameters
 |      ----------
 |      buf : str, Path or StringIO-like, optional, default None
 |          Buffer to write to. If None, the output is returned as a string.
 |      mode : str, optional
 |          Mode in which file is opened, "wt" by default.
 |      index : bool, optional, default True
 |          Add index (row) labels.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      **kwargs
 |          These parameters will be passed to `tabulate                 <https://pypi.org/project/tabulate>`_.
 |      
 |      Returns
 |      -------
 |      str
 |          DataFrame in Markdown-friendly format.
 |      
 |      Notes
 |      -----
 |      Requires the `tabulate <https://pypi.org/project/tabulate>`_ package.
 |      
 |      Examples
 |              --------
 |              >>> df = pd.DataFrame(
 |              ...     data={"animal_1": ["elk", "pig"], "animal_2": ["dog", "quetzal"]}
 |              ... )
 |              >>> print(df.to_markdown())
 |              |    | animal_1   | animal_2   |
 |              |---:|:-----------|:-----------|
 |              |  0 | elk        | dog        |
 |              |  1 | pig        | quetzal    |
 |      
 |              Output markdown with a tabulate option.
 |      
 |              >>> print(df.to_markdown(tablefmt="grid"))
 |              +----+------------+------------+
 |              |    | animal_1   | animal_2   |
 |              +====+============+============+
 |              |  0 | elk        | dog        |
 |              +----+------------+------------+
 |              |  1 | pig        | quetzal    |
 |              +----+------------+------------+
 |  
 |  to_numpy(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>) -> 'np.ndarray'
 |      Convert the DataFrame to a NumPy array.
 |      
 |      By default, the dtype of the returned array will be the common NumPy
 |      dtype of all types in the DataFrame. For example, if the dtypes are
 |      ``float16`` and ``float32``, the results dtype will be ``float32``.
 |      This may require copying data and coercing values, which may be
 |      expensive.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or numpy.dtype, optional
 |          The dtype to pass to :meth:`numpy.asarray`.
 |      copy : bool, default False
 |          Whether to ensure that the returned value is not a view on
 |          another array. Note that ``copy=False`` does not *ensure* that
 |          ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that
 |          a copy is made, even if not strictly necessary.
 |      na_value : Any, optional
 |          The value to use for missing values. The default value depends
 |          on `dtype` and the dtypes of the DataFrame columns.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray
 |      
 |      See Also
 |      --------
 |      Series.to_numpy : Similar method for Series.
 |      
 |      Examples
 |      --------
 |      >>> pd.DataFrame({"A": [1, 2], "B": [3, 4]}).to_numpy()
 |      array([[1, 3],
 |             [2, 4]])
 |      
 |      With heterogeneous data, the lowest common type will have to
 |      be used.
 |      
 |      >>> df = pd.DataFrame({"A": [1, 2], "B": [3.0, 4.5]})
 |      >>> df.to_numpy()
 |      array([[1. , 3. ],
 |             [2. , 4.5]])
 |      
 |      For a mix of numeric and non-numeric types, the output array will
 |      have object dtype.
 |      
 |      >>> df['C'] = pd.date_range('2000', periods=2)
 |      >>> df.to_numpy()
 |      array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],
 |             [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)
 |  
 |  to_orc(self, path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: "Literal['pyarrow']" = 'pyarrow', index: 'bool | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'bytes | None'
 |      Write a DataFrame to the ORC format.
 |      
 |      .. versionadded:: 1.5.0
 |      
 |      Parameters
 |      ----------
 |      path : str, file-like object or None, default None
 |          If a string, it will be used as Root Directory path
 |          when writing a partitioned dataset. By file-like object,
 |          we refer to objects with a write() method, such as a file handle
 |          (e.g. via builtin open function). If path is None,
 |          a bytes object is returned.
 |      engine : {'pyarrow'}, default 'pyarrow'
 |          ORC library to use.
 |      index : bool, optional
 |          If ``True``, include the dataframe's index(es) in the file output.
 |          If ``False``, they will not be written to the file.
 |          If ``None``, similar to ``infer`` the dataframe's index(es)
 |          will be saved. However, instead of being saved as values,
 |          the RangeIndex will be stored as a range in the metadata so it
 |          doesn't require much space and is faster. Other indexes will
 |          be included as columns in the file output.
 |      engine_kwargs : dict[str, Any] or None, default None
 |          Additional keyword arguments passed to :func:`pyarrow.orc.write_table`.
 |      
 |      Returns
 |      -------
 |      bytes if no path argument is provided else None
 |      
 |      Raises
 |      ------
 |      NotImplementedError
 |          Dtype of one or more columns is category, unsigned integers, interval,
 |          period or sparse.
 |      ValueError
 |          engine is not pyarrow.
 |      
 |      See Also
 |      --------
 |      read_orc : Read a ORC file.
 |      DataFrame.to_parquet : Write a parquet file.
 |      DataFrame.to_csv : Write a csv file.
 |      DataFrame.to_sql : Write to a sql table.
 |      DataFrame.to_hdf : Write to hdf.
 |      
 |      Notes
 |      -----
 |      * Before using this function you should read the :ref:`user guide about
 |        ORC <io.orc>` and :ref:`install optional dependencies <install.warn_orc>`.
 |      * This function requires `pyarrow <https://arrow.apache.org/docs/python/>`_
 |        library.
 |      * For supported dtypes please refer to `supported ORC features in Arrow
 |        <https://arrow.apache.org/docs/cpp/orc.html#data-types>`__.
 |      * Currently timezones in datetime columns are not preserved when a
 |        dataframe is converted into ORC files.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})
 |      >>> df.to_orc('df.orc')  # doctest: +SKIP
 |      >>> pd.read_orc('df.orc')  # doctest: +SKIP
 |         col1  col2
 |      0     1     4
 |      1     2     3
 |      
 |      If you want to get a buffer to the orc content you can write it to io.BytesIO
 |      
 |      >>> import io
 |      >>> b = io.BytesIO(df.to_orc())  # doctest: +SKIP
 |      >>> b.seek(0)  # doctest: +SKIP
 |      0
 |      >>> content = b.read()  # doctest: +SKIP
 |  
 |  to_parquet(self, path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: "Literal['auto', 'pyarrow', 'fastparquet']" = 'auto', compression: 'str | None' = 'snappy', index: 'bool | None' = None, partition_cols: 'list[str] | None' = None, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'bytes | None'
 |      Write a DataFrame to the binary parquet format.
 |      
 |      This function writes the dataframe as a `parquet file
 |      <https://parquet.apache.org/>`_. You can choose different parquet
 |      backends, and have the option of compression. See
 |      :ref:`the user guide <io.parquet>` for more details.
 |      
 |      Parameters
 |      ----------
 |      path : str, path object, file-like object, or None, default None
 |          String, path object (implementing ``os.PathLike[str]``), or file-like
 |          object implementing a binary ``write()`` function. If None, the result is
 |          returned as bytes. If a string or path, it will be used as Root Directory
 |          path when writing a partitioned dataset.
 |      engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'
 |          Parquet library to use. If 'auto', then the option
 |          ``io.parquet.engine`` is used. The default ``io.parquet.engine``
 |          behavior is to try 'pyarrow', falling back to 'fastparquet' if
 |          'pyarrow' is unavailable.
 |      compression : str or None, default 'snappy'
 |          Name of the compression to use. Use ``None`` for no compression.
 |          Supported options: 'snappy', 'gzip', 'brotli', 'lz4', 'zstd'.
 |      index : bool, default None
 |          If ``True``, include the dataframe's index(es) in the file output.
 |          If ``False``, they will not be written to the file.
 |          If ``None``, similar to ``True`` the dataframe's index(es)
 |          will be saved. However, instead of being saved as values,
 |          the RangeIndex will be stored as a range in the metadata so it
 |          doesn't require much space and is faster. Other indexes will
 |          be included as columns in the file output.
 |      partition_cols : list, optional, default None
 |          Column names by which to partition the dataset.
 |          Columns are partitioned in the order they are given.
 |          Must be None if path is not a string.
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      **kwargs
 |          Additional arguments passed to the parquet library. See
 |          :ref:`pandas io <io.parquet>` for more details.
 |      
 |      Returns
 |      -------
 |      bytes if no path argument is provided else None
 |      
 |      See Also
 |      --------
 |      read_parquet : Read a parquet file.
 |      DataFrame.to_orc : Write an orc file.
 |      DataFrame.to_csv : Write a csv file.
 |      DataFrame.to_sql : Write to a sql table.
 |      DataFrame.to_hdf : Write to hdf.
 |      
 |      Notes
 |      -----
 |      This function requires either the `fastparquet
 |      <https://pypi.org/project/fastparquet>`_ or `pyarrow
 |      <https://arrow.apache.org/docs/python/>`_ library.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})
 |      >>> df.to_parquet('df.parquet.gzip',
 |      ...               compression='gzip')  # doctest: +SKIP
 |      >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP
 |         col1  col2
 |      0     1     3
 |      1     2     4
 |      
 |      If you want to get a buffer to the parquet content you can use a io.BytesIO
 |      object, as long as you don't use partition_cols, which creates multiple files.
 |      
 |      >>> import io
 |      >>> f = io.BytesIO()
 |      >>> df.to_parquet(f)
 |      >>> f.seek(0)
 |      0
 |      >>> content = f.read()
 |  
 |  to_period(self, freq: 'Frequency | None' = None, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame'
 |      Convert DataFrame from DatetimeIndex to PeriodIndex.
 |      
 |      Convert DataFrame from DatetimeIndex to PeriodIndex with desired
 |      frequency (inferred from index if not passed).
 |      
 |      Parameters
 |      ----------
 |      freq : str, default
 |          Frequency of the PeriodIndex.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to convert (the index by default).
 |      copy : bool, default True
 |          If False then underlying input data is not copied.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The DataFrame has a PeriodIndex.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.to_datetime(
 |      ...     [
 |      ...         "2001-03-31 00:00:00",
 |      ...         "2002-05-31 00:00:00",
 |      ...         "2003-08-31 00:00:00",
 |      ...     ]
 |      ... )
 |      
 |      >>> idx
 |      DatetimeIndex(['2001-03-31', '2002-05-31', '2003-08-31'],
 |      dtype='datetime64[ns]', freq=None)
 |      
 |      >>> idx.to_period("M")
 |      PeriodIndex(['2001-03', '2002-05', '2003-08'], dtype='period[M]')
 |      
 |      For the yearly frequency
 |      
 |      >>> idx.to_period("Y")
 |      PeriodIndex(['2001', '2002', '2003'], dtype='period[Y-DEC]')
 |  
 |  to_records(self, index: 'bool' = True, column_dtypes=None, index_dtypes=None) -> 'np.rec.recarray'
 |      Convert DataFrame to a NumPy record array.
 |      
 |      Index will be included as the first field of the record array if
 |      requested.
 |      
 |      Parameters
 |      ----------
 |      index : bool, default True
 |          Include index in resulting record array, stored in 'index'
 |          field or using the index label, if set.
 |      column_dtypes : str, type, dict, default None
 |          If a string or type, the data type to store all columns. If
 |          a dictionary, a mapping of column names and indices (zero-indexed)
 |          to specific data types.
 |      index_dtypes : str, type, dict, default None
 |          If a string or type, the data type to store all index levels. If
 |          a dictionary, a mapping of index level names and indices
 |          (zero-indexed) to specific data types.
 |      
 |          This mapping is applied only if `index=True`.
 |      
 |      Returns
 |      -------
 |      numpy.rec.recarray
 |          NumPy ndarray with the DataFrame labels as fields and each row
 |          of the DataFrame as entries.
 |      
 |      See Also
 |      --------
 |      DataFrame.from_records: Convert structured or record ndarray
 |          to DataFrame.
 |      numpy.rec.recarray: An ndarray that allows field access using
 |          attributes, analogous to typed columns in a
 |          spreadsheet.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},
 |      ...                   index=['a', 'b'])
 |      >>> df
 |         A     B
 |      a  1  0.50
 |      b  2  0.75
 |      >>> df.to_records()
 |      rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],
 |                dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])
 |      
 |      If the DataFrame index has no label then the recarray field name
 |      is set to 'index'. If the index has a label then this is used as the
 |      field name:
 |      
 |      >>> df.index = df.index.rename("I")
 |      >>> df.to_records()
 |      rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],
 |                dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])
 |      
 |      The index can be excluded from the record array:
 |      
 |      >>> df.to_records(index=False)
 |      rec.array([(1, 0.5 ), (2, 0.75)],
 |                dtype=[('A', '<i8'), ('B', '<f8')])
 |      
 |      Data types can be specified for the columns:
 |      
 |      >>> df.to_records(column_dtypes={"A": "int32"})
 |      rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],
 |                dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])
 |      
 |      As well as for the index:
 |      
 |      >>> df.to_records(index_dtypes="<S2")
 |      rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],
 |                dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])
 |      
 |      >>> index_dtypes = f"<S{df.index.str.len().max()}"
 |      >>> df.to_records(index_dtypes=index_dtypes)
 |      rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],
 |                dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])
 |  
 |  to_stata(self, path: 'FilePath | WriteBuffer[bytes]', *, convert_dates: 'dict[Hashable, str] | None' = None, write_index: 'bool' = True, byteorder: 'ToStataByteorder | None' = None, time_stamp: 'datetime.datetime | None' = None, data_label: 'str | None' = None, variable_labels: 'dict[Hashable, str] | None' = None, version: 'int | None' = 114, convert_strl: 'Sequence[Hashable] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None, value_labels: 'dict[Hashable, dict[float, str]] | None' = None) -> 'None'
 |      Export DataFrame object to Stata dta format.
 |      
 |      Writes the DataFrame to a Stata dataset file.
 |      "dta" files contain a Stata dataset.
 |      
 |      Parameters
 |      ----------
 |      path : str, path object, or buffer
 |          String, path object (implementing ``os.PathLike[str]``), or file-like
 |          object implementing a binary ``write()`` function.
 |      
 |      convert_dates : dict
 |          Dictionary mapping columns containing datetime types to stata
 |          internal format to use when writing the dates. Options are 'tc',
 |          'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer
 |          or a name. Datetime columns that do not have a conversion type
 |          specified will be converted to 'tc'. Raises NotImplementedError if
 |          a datetime column has timezone information.
 |      write_index : bool
 |          Write the index to Stata dataset.
 |      byteorder : str
 |          Can be ">", "<", "little", or "big". default is `sys.byteorder`.
 |      time_stamp : datetime
 |          A datetime to use as file creation date.  Default is the current
 |          time.
 |      data_label : str, optional
 |          A label for the data set.  Must be 80 characters or smaller.
 |      variable_labels : dict
 |          Dictionary containing columns as keys and variable labels as
 |          values. Each label must be 80 characters or smaller.
 |      version : {114, 117, 118, 119, None}, default 114
 |          Version to use in the output dta file. Set to None to let pandas
 |          decide between 118 or 119 formats depending on the number of
 |          columns in the frame. Version 114 can be read by Stata 10 and
 |          later. Version 117 can be read by Stata 13 or later. Version 118
 |          is supported in Stata 14 and later. Version 119 is supported in
 |          Stata 15 and later. Version 114 limits string variables to 244
 |          characters or fewer while versions 117 and later allow strings
 |          with lengths up to 2,000,000 characters. Versions 118 and 119
 |          support Unicode characters, and version 119 supports more than
 |          32,767 variables.
 |      
 |          Version 119 should usually only be used when the number of
 |          variables exceeds the capacity of dta format 118. Exporting
 |          smaller datasets in format 119 may have unintended consequences,
 |          and, as of November 2020, Stata SE cannot read version 119 files.
 |      
 |      convert_strl : list, optional
 |          List of column names to convert to string columns to Stata StrL
 |          format. Only available if version is 117.  Storing strings in the
 |          StrL format can produce smaller dta files if strings have more than
 |          8 characters and values are repeated.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      
 |          .. versionchanged:: 1.4.0 Zstandard support.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      value_labels : dict of dicts
 |          Dictionary containing columns as keys and dictionaries of column value
 |          to labels as values. Labels for a single variable must be 32,000
 |          characters or smaller.
 |      
 |          .. versionadded:: 1.4.0
 |      
 |      Raises
 |      ------
 |      NotImplementedError
 |          * If datetimes contain timezone information
 |          * Column dtype is not representable in Stata
 |      ValueError
 |          * Columns listed in convert_dates are neither datetime64[ns]
 |            or datetime.datetime
 |          * Column listed in convert_dates is not in DataFrame
 |          * Categorical label contains more than 32,000 characters
 |      
 |      See Also
 |      --------
 |      read_stata : Import Stata data files.
 |      io.stata.StataWriter : Low-level writer for Stata data files.
 |      io.stata.StataWriter117 : Low-level writer for version 117 files.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',
 |      ...                               'parrot'],
 |      ...                    'speed': [350, 18, 361, 15]})
 |      >>> df.to_stata('animals.dta')  # doctest: +SKIP
 |  
 |  to_string(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'int | list[int] | dict[Hashable, int] | None' = None, header: 'bool | SequenceNotStr[str]' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'fmt.FormattersType | None' = None, float_format: 'fmt.FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool' = False, decimal: 'str' = '.', line_width: 'int | None' = None, min_rows: 'int | None' = None, max_colwidth: 'int | None' = None, encoding: 'str | None' = None) -> 'str | None'
 |      Render a DataFrame to a console-friendly tabular output.
 |      
 |      Parameters
 |      ----------
 |      buf : str, Path or StringIO-like, optional, default None
 |          Buffer to write to. If None, the output is returned as a string.
 |      columns : array-like, optional, default None
 |          The subset of columns to write. Writes all columns by default.
 |      col_space : int, list or dict of int, optional
 |          The minimum width of each column. If a list of ints is given every integers corresponds with one column. If a dict is given, the key references the column, while the value defines the space to use..
 |      header : bool or list of str, optional
 |          Write out the column names. If a list of columns is given, it is assumed to be aliases for the column names.
 |      index : bool, optional, default True
 |          Whether to print index (row) labels.
 |      na_rep : str, optional, default 'NaN'
 |          String representation of ``NaN`` to use.
 |      formatters : list, tuple or dict of one-param. functions, optional
 |          Formatter functions to apply to columns' elements by position or
 |          name.
 |          The result of each function must be a unicode string.
 |          List/tuple must be of length equal to the number of columns.
 |      float_format : one-parameter function, optional, default None
 |          Formatter function to apply to columns' elements if they are
 |          floats. This function must return a unicode string and will be
 |          applied only to the non-``NaN`` elements, with ``NaN`` being
 |          handled by ``na_rep``.
 |      sparsify : bool, optional, default True
 |          Set to False for a DataFrame with a hierarchical index to print
 |          every multiindex key at each row.
 |      index_names : bool, optional, default True
 |          Prints the names of the indexes.
 |      justify : str, default None
 |          How to justify the column labels. If None uses the option from
 |          the print configuration (controlled by set_option), 'right' out
 |          of the box. Valid values are
 |      
 |          * left
 |          * right
 |          * center
 |          * justify
 |          * justify-all
 |          * start
 |          * end
 |          * inherit
 |          * match-parent
 |          * initial
 |          * unset.
 |      max_rows : int, optional
 |          Maximum number of rows to display in the console.
 |      max_cols : int, optional
 |          Maximum number of columns to display in the console.
 |      show_dimensions : bool, default False
 |          Display DataFrame dimensions (number of rows by number of columns).
 |      decimal : str, default '.'
 |          Character recognized as decimal separator, e.g. ',' in Europe.
 |      
 |      line_width : int, optional
 |          Width to wrap a line in characters.
 |      min_rows : int, optional
 |          The number of rows to display in the console in a truncated repr
 |          (when number of rows is above `max_rows`).
 |      max_colwidth : int, optional
 |          Max width to truncate each column in characters. By default, no limit.
 |      encoding : str, default "utf-8"
 |          Set character encoding.
 |      
 |      Returns
 |      -------
 |      str or None
 |          If buf is None, returns the result as a string. Otherwise returns
 |          None.
 |      
 |      See Also
 |      --------
 |      to_html : Convert DataFrame to HTML.
 |      
 |      Examples
 |      --------
 |      >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}
 |      >>> df = pd.DataFrame(d)
 |      >>> print(df.to_string())
 |         col1  col2
 |      0     1     4
 |      1     2     5
 |      2     3     6
 |  
 |  to_timestamp(self, freq: 'Frequency | None' = None, how: 'ToTimestampHow' = 'start', axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame'
 |      Cast to DatetimeIndex of timestamps, at *beginning* of period.
 |      
 |      Parameters
 |      ----------
 |      freq : str, default frequency of PeriodIndex
 |          Desired frequency.
 |      how : {'s', 'e', 'start', 'end'}
 |          Convention for converting period to timestamp; start of period
 |          vs. end.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to convert (the index by default).
 |      copy : bool, default True
 |          If False then underlying input data is not copied.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The DataFrame has a DatetimeIndex.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.PeriodIndex(['2023', '2024'], freq='Y')
 |      >>> d = {'col1': [1, 2], 'col2': [3, 4]}
 |      >>> df1 = pd.DataFrame(data=d, index=idx)
 |      >>> df1
 |            col1   col2
 |      2023     1      3
 |      2024     2      4
 |      
 |      The resulting timestamps will be at the beginning of the year in this case
 |      
 |      >>> df1 = df1.to_timestamp()
 |      >>> df1
 |                  col1   col2
 |      2023-01-01     1      3
 |      2024-01-01     2      4
 |      >>> df1.index
 |      DatetimeIndex(['2023-01-01', '2024-01-01'], dtype='datetime64[ns]', freq=None)
 |      
 |      Using `freq` which is the offset that the Timestamps will have
 |      
 |      >>> df2 = pd.DataFrame(data=d, index=idx)
 |      >>> df2 = df2.to_timestamp(freq='M')
 |      >>> df2
 |                  col1   col2
 |      2023-01-31     1      3
 |      2024-01-31     2      4
 |      >>> df2.index
 |      DatetimeIndex(['2023-01-31', '2024-01-31'], dtype='datetime64[ns]', freq=None)
 |  
 |  to_xml(self, path_or_buffer: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, index: 'bool' = True, root_name: 'str | None' = 'data', row_name: 'str | None' = 'row', na_rep: 'str | None' = None, attr_cols: 'list[str] | None' = None, elem_cols: 'list[str] | None' = None, namespaces: 'dict[str | None, str] | None' = None, prefix: 'str | None' = None, encoding: 'str' = 'utf-8', xml_declaration: 'bool | None' = True, pretty_print: 'bool | None' = True, parser: 'XMLParsers | None' = 'lxml', stylesheet: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None) -> 'str | None'
 |      Render a DataFrame to an XML document.
 |      
 |      .. versionadded:: 1.3.0
 |      
 |      Parameters
 |      ----------
 |      path_or_buffer : str, path object, file-like object, or None, default None
 |          String, path object (implementing ``os.PathLike[str]``), or file-like
 |          object implementing a ``write()`` function. If None, the result is returned
 |          as a string.
 |      index : bool, default True
 |          Whether to include index in XML document.
 |      root_name : str, default 'data'
 |          The name of root element in XML document.
 |      row_name : str, default 'row'
 |          The name of row element in XML document.
 |      na_rep : str, optional
 |          Missing data representation.
 |      attr_cols : list-like, optional
 |          List of columns to write as attributes in row element.
 |          Hierarchical columns will be flattened with underscore
 |          delimiting the different levels.
 |      elem_cols : list-like, optional
 |          List of columns to write as children in row element. By default,
 |          all columns output as children of row element. Hierarchical
 |          columns will be flattened with underscore delimiting the
 |          different levels.
 |      namespaces : dict, optional
 |          All namespaces to be defined in root element. Keys of dict
 |          should be prefix names and values of dict corresponding URIs.
 |          Default namespaces should be given empty string key. For
 |          example, ::
 |      
 |              namespaces = {"": "https://example.com"}
 |      
 |      prefix : str, optional
 |          Namespace prefix to be used for every element and/or attribute
 |          in document. This should be one of the keys in ``namespaces``
 |          dict.
 |      encoding : str, default 'utf-8'
 |          Encoding of the resulting document.
 |      xml_declaration : bool, default True
 |          Whether to include the XML declaration at start of document.
 |      pretty_print : bool, default True
 |          Whether output should be pretty printed with indentation and
 |          line breaks.
 |      parser : {'lxml','etree'}, default 'lxml'
 |          Parser module to use for building of tree. Only 'lxml' and
 |          'etree' are supported. With 'lxml', the ability to use XSLT
 |          stylesheet is supported.
 |      stylesheet : str, path object or file-like object, optional
 |          A URL, file-like object, or a raw string containing an XSLT
 |          script used to transform the raw XML output. Script should use
 |          layout of elements and attributes from original output. This
 |          argument requires ``lxml`` to be installed. Only XSLT 1.0
 |          scripts and not later versions is currently supported.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buffer' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      
 |          .. versionchanged:: 1.4.0 Zstandard support.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      Returns
 |      -------
 |      None or str
 |          If ``io`` is None, returns the resulting XML format as a
 |          string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      to_json : Convert the pandas object to a JSON string.
 |      to_html : Convert DataFrame to a html.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'shape': ['square', 'circle', 'triangle'],
 |      ...                    'degrees': [360, 360, 180],
 |      ...                    'sides': [4, np.nan, 3]})
 |      
 |      >>> df.to_xml()  # doctest: +SKIP
 |      <?xml version='1.0' encoding='utf-8'?>
 |      <data>
 |        <row>
 |          <index>0</index>
 |          <shape>square</shape>
 |          <degrees>360</degrees>
 |          <sides>4.0</sides>
 |        </row>
 |        <row>
 |          <index>1</index>
 |          <shape>circle</shape>
 |          <degrees>360</degrees>
 |          <sides/>
 |        </row>
 |        <row>
 |          <index>2</index>
 |          <shape>triangle</shape>
 |          <degrees>180</degrees>
 |          <sides>3.0</sides>
 |        </row>
 |      </data>
 |      
 |      >>> df.to_xml(attr_cols=[
 |      ...           'index', 'shape', 'degrees', 'sides'
 |      ...           ])  # doctest: +SKIP
 |      <?xml version='1.0' encoding='utf-8'?>
 |      <data>
 |        <row index="0" shape="square" degrees="360" sides="4.0"/>
 |        <row index="1" shape="circle" degrees="360"/>
 |        <row index="2" shape="triangle" degrees="180" sides="3.0"/>
 |      </data>
 |      
 |      >>> df.to_xml(namespaces={"doc": "https://example.com"},
 |      ...           prefix="doc")  # doctest: +SKIP
 |      <?xml version='1.0' encoding='utf-8'?>
 |      <doc:data xmlns:doc="https://example.com">
 |        <doc:row>
 |          <doc:index>0</doc:index>
 |          <doc:shape>square</doc:shape>
 |          <doc:degrees>360</doc:degrees>
 |          <doc:sides>4.0</doc:sides>
 |        </doc:row>
 |        <doc:row>
 |          <doc:index>1</doc:index>
 |          <doc:shape>circle</doc:shape>
 |          <doc:degrees>360</doc:degrees>
 |          <doc:sides/>
 |        </doc:row>
 |        <doc:row>
 |          <doc:index>2</doc:index>
 |          <doc:shape>triangle</doc:shape>
 |          <doc:degrees>180</doc:degrees>
 |          <doc:sides>3.0</doc:sides>
 |        </doc:row>
 |      </doc:data>
 |  
 |  transform(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'DataFrame'
 |      Call ``func`` on self producing a DataFrame with the same axis shape as self.
 |      
 |      Parameters
 |      ----------
 |      func : function, str, list-like or dict-like
 |          Function to use for transforming the data. If a function, must either
 |          work when passed a DataFrame or when passed to DataFrame.apply. If func
 |          is both list-like and dict-like, dict-like behavior takes precedence.
 |      
 |          Accepted combinations are:
 |      
 |          - function
 |          - string function name
 |          - list-like of functions and/or function names, e.g. ``[np.exp, 'sqrt']``
 |          - dict-like of axis labels -> functions, function names or list-like of such.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |              If 0 or 'index': apply function to each column.
 |              If 1 or 'columns': apply function to each row.
 |      *args
 |          Positional arguments to pass to `func`.
 |      **kwargs
 |          Keyword arguments to pass to `func`.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          A DataFrame that must have the same length as self.
 |      
 |      Raises
 |      ------
 |      ValueError : If the returned DataFrame has a different length than self.
 |      
 |      See Also
 |      --------
 |      DataFrame.agg : Only perform aggregating type operations.
 |      DataFrame.apply : Invoke function on a DataFrame.
 |      
 |      Notes
 |      -----
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  1  2
 |      2  2  3
 |      >>> df.transform(lambda x: x + 1)
 |         A  B
 |      0  1  2
 |      1  2  3
 |      2  3  4
 |      
 |      Even though the resulting DataFrame must have the same length as the
 |      input DataFrame, it is possible to provide several input functions:
 |      
 |      >>> s = pd.Series(range(3))
 |      >>> s
 |      0    0
 |      1    1
 |      2    2
 |      dtype: int64
 |      >>> s.transform([np.sqrt, np.exp])
 |             sqrt        exp
 |      0  0.000000   1.000000
 |      1  1.000000   2.718282
 |      2  1.414214   7.389056
 |      
 |      You can call transform on a GroupBy object:
 |      
 |      >>> df = pd.DataFrame({
 |      ...     "Date": [
 |      ...         "2015-05-08", "2015-05-07", "2015-05-06", "2015-05-05",
 |      ...         "2015-05-08", "2015-05-07", "2015-05-06", "2015-05-05"],
 |      ...     "Data": [5, 8, 6, 1, 50, 100, 60, 120],
 |      ... })
 |      >>> df
 |               Date  Data
 |      0  2015-05-08     5
 |      1  2015-05-07     8
 |      2  2015-05-06     6
 |      3  2015-05-05     1
 |      4  2015-05-08    50
 |      5  2015-05-07   100
 |      6  2015-05-06    60
 |      7  2015-05-05   120
 |      >>> df.groupby('Date')['Data'].transform('sum')
 |      0     55
 |      1    108
 |      2     66
 |      3    121
 |      4     55
 |      5    108
 |      6     66
 |      7    121
 |      Name: Data, dtype: int64
 |      
 |      >>> df = pd.DataFrame({
 |      ...     "c": [1, 1, 1, 2, 2, 2, 2],
 |      ...     "type": ["m", "n", "o", "m", "m", "n", "n"]
 |      ... })
 |      >>> df
 |         c type
 |      0  1    m
 |      1  1    n
 |      2  1    o
 |      3  2    m
 |      4  2    m
 |      5  2    n
 |      6  2    n
 |      >>> df['size'] = df.groupby('c')['type'].transform(len)
 |      >>> df
 |         c type size
 |      0  1    m    3
 |      1  1    n    3
 |      2  1    o    3
 |      3  2    m    4
 |      4  2    m    4
 |      5  2    n    4
 |      6  2    n    4
 |  
 |  transpose(self, *args, copy: 'bool' = False) -> 'DataFrame'
 |      Transpose index and columns.
 |      
 |      Reflect the DataFrame over its main diagonal by writing rows as columns
 |      and vice-versa. The property :attr:`.T` is an accessor to the method
 |      :meth:`transpose`.
 |      
 |      Parameters
 |      ----------
 |      *args : tuple, optional
 |          Accepted for compatibility with NumPy.
 |      copy : bool, default False
 |          Whether to copy the data after transposing, even for DataFrames
 |          with a single dtype.
 |      
 |          Note that a copy is always required for mixed dtype DataFrames,
 |          or for DataFrames with any extension types.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The transposed DataFrame.
 |      
 |      See Also
 |      --------
 |      numpy.transpose : Permute the dimensions of a given array.
 |      
 |      Notes
 |      -----
 |      Transposing a DataFrame with mixed dtypes will result in a homogeneous
 |      DataFrame with the `object` dtype. In such a case, a copy of the data
 |      is always made.
 |      
 |      Examples
 |      --------
 |      **Square DataFrame with homogeneous dtype**
 |      
 |      >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}
 |      >>> df1 = pd.DataFrame(data=d1)
 |      >>> df1
 |         col1  col2
 |      0     1     3
 |      1     2     4
 |      
 |      >>> df1_transposed = df1.T  # or df1.transpose()
 |      >>> df1_transposed
 |            0  1
 |      col1  1  2
 |      col2  3  4
 |      
 |      When the dtype is homogeneous in the original DataFrame, we get a
 |      transposed DataFrame with the same dtype:
 |      
 |      >>> df1.dtypes
 |      col1    int64
 |      col2    int64
 |      dtype: object
 |      >>> df1_transposed.dtypes
 |      0    int64
 |      1    int64
 |      dtype: object
 |      
 |      **Non-square DataFrame with mixed dtypes**
 |      
 |      >>> d2 = {'name': ['Alice', 'Bob'],
 |      ...       'score': [9.5, 8],
 |      ...       'employed': [False, True],
 |      ...       'kids': [0, 0]}
 |      >>> df2 = pd.DataFrame(data=d2)
 |      >>> df2
 |          name  score  employed  kids
 |      0  Alice    9.5     False     0
 |      1    Bob    8.0      True     0
 |      
 |      >>> df2_transposed = df2.T  # or df2.transpose()
 |      >>> df2_transposed
 |                    0     1
 |      name      Alice   Bob
 |      score       9.5   8.0
 |      employed  False  True
 |      kids          0     0
 |      
 |      When the DataFrame has mixed dtypes, we get a transposed DataFrame with
 |      the `object` dtype:
 |      
 |      >>> df2.dtypes
 |      name         object
 |      score       float64
 |      employed       bool
 |      kids          int64
 |      dtype: object
 |      >>> df2_transposed.dtypes
 |      0    object
 |      1    object
 |      dtype: object
 |  
 |  truediv(self, other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame'
 |      Get Floating division of dataframe and other, element-wise (binary operator `truediv`).
 |      
 |      Equivalent to ``dataframe / other``, but with support to substitute a fill_value
 |      for missing data in one of the inputs. With reverse version, `rtruediv`.
 |      
 |      Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
 |      arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Any single or multiple element data structure, or list-like object.
 |      axis : {0 or 'index', 1 or 'columns'}
 |          Whether to compare by the index (0 or 'index') or columns.
 |          (1 or 'columns'). For Series input, axis to match Series index on.
 |      level : int or label
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : float or None, default None
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful DataFrame alignment, with this value before computation.
 |          If data in both corresponding DataFrame locations is missing
 |          the result will be missing.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Result of the arithmetic operation.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add DataFrames.
 |      DataFrame.sub : Subtract DataFrames.
 |      DataFrame.mul : Multiply DataFrames.
 |      DataFrame.div : Divide DataFrames (float division).
 |      DataFrame.truediv : Divide DataFrames (float division).
 |      DataFrame.floordiv : Divide DataFrames (integer division).
 |      DataFrame.mod : Calculate modulo (remainder after division).
 |      DataFrame.pow : Calculate exponential power.
 |      
 |      Notes
 |      -----
 |      Mismatched indices will be unioned together.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'angles': [0, 3, 4],
 |      ...                    'degrees': [360, 180, 360]},
 |      ...                   index=['circle', 'triangle', 'rectangle'])
 |      >>> df
 |                 angles  degrees
 |      circle          0      360
 |      triangle        3      180
 |      rectangle       4      360
 |      
 |      Add a scalar with operator version which return the same
 |      results.
 |      
 |      >>> df + 1
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      >>> df.add(1)
 |                 angles  degrees
 |      circle          1      361
 |      triangle        4      181
 |      rectangle       5      361
 |      
 |      Divide by constant with reverse version.
 |      
 |      >>> df.div(10)
 |                 angles  degrees
 |      circle        0.0     36.0
 |      triangle      0.3     18.0
 |      rectangle     0.4     36.0
 |      
 |      >>> df.rdiv(10)
 |                   angles   degrees
 |      circle          inf  0.027778
 |      triangle   3.333333  0.055556
 |      rectangle  2.500000  0.027778
 |      
 |      Subtract a list and Series by axis with operator version.
 |      
 |      >>> df - [1, 2]
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub([1, 2], axis='columns')
 |                 angles  degrees
 |      circle         -1      358
 |      triangle        2      178
 |      rectangle       3      358
 |      
 |      >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
 |      ...        axis='index')
 |                 angles  degrees
 |      circle         -1      359
 |      triangle        2      179
 |      rectangle       3      359
 |      
 |      Multiply a dictionary by axis.
 |      
 |      >>> df.mul({'angles': 0, 'degrees': 2})
 |                  angles  degrees
 |      circle           0      720
 |      triangle         0      360
 |      rectangle        0      720
 |      
 |      >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
 |                  angles  degrees
 |      circle           0        0
 |      triangle         6      360
 |      rectangle       12     1080
 |      
 |      Multiply a DataFrame of different shape with operator version.
 |      
 |      >>> other = pd.DataFrame({'angles': [0, 3, 4]},
 |      ...                      index=['circle', 'triangle', 'rectangle'])
 |      >>> other
 |                 angles
 |      circle          0
 |      triangle        3
 |      rectangle       4
 |      
 |      >>> df * other
 |                 angles  degrees
 |      circle          0      NaN
 |      triangle        9      NaN
 |      rectangle      16      NaN
 |      
 |      >>> df.mul(other, fill_value=0)
 |                 angles  degrees
 |      circle          0      0.0
 |      triangle        9      0.0
 |      rectangle      16      0.0
 |      
 |      Divide by a MultiIndex by level.
 |      
 |      >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
 |      ...                              'degrees': [360, 180, 360, 360, 540, 720]},
 |      ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
 |      ...                                    ['circle', 'triangle', 'rectangle',
 |      ...                                     'square', 'pentagon', 'hexagon']])
 |      >>> df_multindex
 |                   angles  degrees
 |      A circle          0      360
 |        triangle        3      180
 |        rectangle       4      360
 |      B square          4      360
 |        pentagon        5      540
 |        hexagon         6      720
 |      
 |      >>> df.div(df_multindex, level=1, fill_value=0)
 |                   angles  degrees
 |      A circle        NaN      1.0
 |        triangle      1.0      1.0
 |        rectangle     1.0      1.0
 |      B square        0.0      0.0
 |        pentagon      0.0      0.0
 |        hexagon       0.0      0.0
 |  
 |  unstack(self, level: 'IndexLabel' = -1, fill_value=None, sort: 'bool' = True)
 |      Pivot a level of the (necessarily hierarchical) index labels.
 |      
 |      Returns a DataFrame having a new level of column labels whose inner-most level
 |      consists of the pivoted index labels.
 |      
 |      If the index is not a MultiIndex, the output will be a Series
 |      (the analogue of stack when the columns are not a MultiIndex).
 |      
 |      Parameters
 |      ----------
 |      level : int, str, or list of these, default -1 (last level)
 |          Level(s) of index to unstack, can pass level name.
 |      fill_value : int, str or dict
 |          Replace NaN with this value if the unstack produces missing values.
 |      sort : bool, default True
 |          Sort the level(s) in the resulting MultiIndex columns.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |      
 |      See Also
 |      --------
 |      DataFrame.pivot : Pivot a table based on column values.
 |      DataFrame.stack : Pivot a level of the column labels (inverse operation
 |          from `unstack`).
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.stacking>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),
 |      ...                                    ('two', 'a'), ('two', 'b')])
 |      >>> s = pd.Series(np.arange(1.0, 5.0), index=index)
 |      >>> s
 |      one  a   1.0
 |           b   2.0
 |      two  a   3.0
 |           b   4.0
 |      dtype: float64
 |      
 |      >>> s.unstack(level=-1)
 |           a   b
 |      one  1.0  2.0
 |      two  3.0  4.0
 |      
 |      >>> s.unstack(level=0)
 |         one  two
 |      a  1.0   3.0
 |      b  2.0   4.0
 |      
 |      >>> df = s.unstack(level=0)
 |      >>> df.unstack()
 |      one  a  1.0
 |           b  2.0
 |      two  a  3.0
 |           b  4.0
 |      dtype: float64
 |  
 |  update(self, other, join: 'UpdateJoin' = 'left', overwrite: 'bool' = True, filter_func=None, errors: 'IgnoreRaise' = 'ignore') -> 'None'
 |      Modify in place using non-NA values from another DataFrame.
 |      
 |      Aligns on indices. There is no return value.
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame, or object coercible into a DataFrame
 |          Should have at least one matching index/column label
 |          with the original DataFrame. If a Series is passed,
 |          its name attribute must be set, and that will be
 |          used as the column name to align with the original DataFrame.
 |      join : {'left'}, default 'left'
 |          Only left join is implemented, keeping the index and columns of the
 |          original object.
 |      overwrite : bool, default True
 |          How to handle non-NA values for overlapping keys:
 |      
 |          * True: overwrite original DataFrame's values
 |            with values from `other`.
 |          * False: only update values that are NA in
 |            the original DataFrame.
 |      
 |      filter_func : callable(1d-array) -> bool 1d-array, optional
 |          Can choose to replace values other than NA. Return True for values
 |          that should be updated.
 |      errors : {'raise', 'ignore'}, default 'ignore'
 |          If 'raise', will raise a ValueError if the DataFrame and `other`
 |          both contain non-NA data in the same place.
 |      
 |      Returns
 |      -------
 |      None
 |          This method directly changes calling object.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          * When `errors='raise'` and there's overlapping non-NA data.
 |          * When `errors` is not either `'ignore'` or `'raise'`
 |      NotImplementedError
 |          * If `join != 'left'`
 |      
 |      See Also
 |      --------
 |      dict.update : Similar method for dictionaries.
 |      DataFrame.merge : For column(s)-on-column(s) operations.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2, 3],
 |      ...                    'B': [400, 500, 600]})
 |      >>> new_df = pd.DataFrame({'B': [4, 5, 6],
 |      ...                        'C': [7, 8, 9]})
 |      >>> df.update(new_df)
 |      >>> df
 |         A  B
 |      0  1  4
 |      1  2  5
 |      2  3  6
 |      
 |      The DataFrame's length does not increase as a result of the update,
 |      only values at matching index/column labels are updated.
 |      
 |      >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],
 |      ...                    'B': ['x', 'y', 'z']})
 |      >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})
 |      >>> df.update(new_df)
 |      >>> df
 |         A  B
 |      0  a  d
 |      1  b  e
 |      2  c  f
 |      
 |      >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],
 |      ...                    'B': ['x', 'y', 'z']})
 |      >>> new_df = pd.DataFrame({'B': ['d', 'f']}, index=[0, 2])
 |      >>> df.update(new_df)
 |      >>> df
 |         A  B
 |      0  a  d
 |      1  b  y
 |      2  c  f
 |      
 |      For Series, its name attribute must be set.
 |      
 |      >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],
 |      ...                    'B': ['x', 'y', 'z']})
 |      >>> new_column = pd.Series(['d', 'e', 'f'], name='B')
 |      >>> df.update(new_column)
 |      >>> df
 |         A  B
 |      0  a  d
 |      1  b  e
 |      2  c  f
 |      
 |      If `other` contains NaNs the corresponding values are not updated
 |      in the original dataframe.
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2, 3],
 |      ...                    'B': [400., 500., 600.]})
 |      >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})
 |      >>> df.update(new_df)
 |      >>> df
 |         A      B
 |      0  1    4.0
 |      1  2  500.0
 |      2  3    6.0
 |  
 |  value_counts(self, subset: 'IndexLabel | None' = None, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, dropna: 'bool' = True) -> 'Series'
 |      Return a Series containing the frequency of each distinct row in the Dataframe.
 |      
 |      Parameters
 |      ----------
 |      subset : label or list of labels, optional
 |          Columns to use when counting unique combinations.
 |      normalize : bool, default False
 |          Return proportions rather than frequencies.
 |      sort : bool, default True
 |          Sort by frequencies when True. Sort by DataFrame column values when False.
 |      ascending : bool, default False
 |          Sort in ascending order.
 |      dropna : bool, default True
 |          Don't include counts of rows that contain NA values.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      See Also
 |      --------
 |      Series.value_counts: Equivalent method on Series.
 |      
 |      Notes
 |      -----
 |      The returned Series will have a MultiIndex with one level per input
 |      column but an Index (non-multi) for a single label. By default, rows
 |      that contain any NA values are omitted from the result. By default,
 |      the resulting Series will be in descending order so that the first
 |      element is the most frequently-occurring row.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'num_legs': [2, 4, 4, 6],
 |      ...                    'num_wings': [2, 0, 0, 0]},
 |      ...                   index=['falcon', 'dog', 'cat', 'ant'])
 |      >>> df
 |              num_legs  num_wings
 |      falcon         2          2
 |      dog            4          0
 |      cat            4          0
 |      ant            6          0
 |      
 |      >>> df.value_counts()
 |      num_legs  num_wings
 |      4         0            2
 |      2         2            1
 |      6         0            1
 |      Name: count, dtype: int64
 |      
 |      >>> df.value_counts(sort=False)
 |      num_legs  num_wings
 |      2         2            1
 |      4         0            2
 |      6         0            1
 |      Name: count, dtype: int64
 |      
 |      >>> df.value_counts(ascending=True)
 |      num_legs  num_wings
 |      2         2            1
 |      6         0            1
 |      4         0            2
 |      Name: count, dtype: int64
 |      
 |      >>> df.value_counts(normalize=True)
 |      num_legs  num_wings
 |      4         0            0.50
 |      2         2            0.25
 |      6         0            0.25
 |      Name: proportion, dtype: float64
 |      
 |      With `dropna` set to `False` we can also count rows with NA values.
 |      
 |      >>> df = pd.DataFrame({'first_name': ['John', 'Anne', 'John', 'Beth'],
 |      ...                    'middle_name': ['Smith', pd.NA, pd.NA, 'Louise']})
 |      >>> df
 |        first_name middle_name
 |      0       John       Smith
 |      1       Anne        <NA>
 |      2       John        <NA>
 |      3       Beth      Louise
 |      
 |      >>> df.value_counts()
 |      first_name  middle_name
 |      Beth        Louise         1
 |      John        Smith          1
 |      Name: count, dtype: int64
 |      
 |      >>> df.value_counts(dropna=False)
 |      first_name  middle_name
 |      Anne        NaN            1
 |      Beth        Louise         1
 |      John        Smith          1
 |                  NaN            1
 |      Name: count, dtype: int64
 |      
 |      >>> df.value_counts("first_name")
 |      first_name
 |      John    2
 |      Anne    1
 |      Beth    1
 |      Name: count, dtype: int64
 |  
 |  var(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased variance over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0), columns (1)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.var with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame (if level specified) 
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],
 |      ...                    'age': [21, 25, 62, 43],
 |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}
 |      ...                   ).set_index('person_id')
 |      >>> df
 |                 age  height
 |      person_id
 |      0           21    1.61
 |      1           25    1.87
 |      2           62    1.49
 |      3           43    2.01
 |      
 |      >>> df.var()
 |      age       352.916667
 |      height      0.056367
 |      dtype: float64
 |      
 |      Alternatively, ``ddof=0`` can be set to normalize by N instead of N-1:
 |      
 |      >>> df.var(ddof=0)
 |      age       264.687500
 |      height      0.042275
 |      dtype: float64
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_dict(data: 'dict', orient: 'FromDictOrient' = 'columns', dtype: 'Dtype | None' = None, columns: 'Axes | None' = None) -> 'DataFrame' from builtins.type
 |      Construct DataFrame from dict of array-like or dicts.
 |      
 |      Creates DataFrame object from dictionary by columns or by index
 |      allowing dtype specification.
 |      
 |      Parameters
 |      ----------
 |      data : dict
 |          Of the form {field : array-like} or {field : dict}.
 |      orient : {'columns', 'index', 'tight'}, default 'columns'
 |          The "orientation" of the data. If the keys of the passed dict
 |          should be the columns of the resulting DataFrame, pass 'columns'
 |          (default). Otherwise if the keys should be rows, pass 'index'.
 |          If 'tight', assume a dict with keys ['index', 'columns', 'data',
 |          'index_names', 'column_names'].
 |      
 |          .. versionadded:: 1.4.0
 |             'tight' as an allowed value for the ``orient`` argument
 |      
 |      dtype : dtype, default None
 |          Data type to force after DataFrame construction, otherwise infer.
 |      columns : list, default None
 |          Column labels to use when ``orient='index'``. Raises a ValueError
 |          if used with ``orient='columns'`` or ``orient='tight'``.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |      
 |      See Also
 |      --------
 |      DataFrame.from_records : DataFrame from structured ndarray, sequence
 |          of tuples or dicts, or DataFrame.
 |      DataFrame : DataFrame object creation using constructor.
 |      DataFrame.to_dict : Convert the DataFrame to a dictionary.
 |      
 |      Examples
 |      --------
 |      By default the keys of the dict become the DataFrame columns:
 |      
 |      >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}
 |      >>> pd.DataFrame.from_dict(data)
 |         col_1 col_2
 |      0      3     a
 |      1      2     b
 |      2      1     c
 |      3      0     d
 |      
 |      Specify ``orient='index'`` to create the DataFrame using dictionary
 |      keys as rows:
 |      
 |      >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}
 |      >>> pd.DataFrame.from_dict(data, orient='index')
 |             0  1  2  3
 |      row_1  3  2  1  0
 |      row_2  a  b  c  d
 |      
 |      When using the 'index' orientation, the column names can be
 |      specified manually:
 |      
 |      >>> pd.DataFrame.from_dict(data, orient='index',
 |      ...                        columns=['A', 'B', 'C', 'D'])
 |             A  B  C  D
 |      row_1  3  2  1  0
 |      row_2  a  b  c  d
 |      
 |      Specify ``orient='tight'`` to create the DataFrame using a 'tight'
 |      format:
 |      
 |      >>> data = {'index': [('a', 'b'), ('a', 'c')],
 |      ...         'columns': [('x', 1), ('y', 2)],
 |      ...         'data': [[1, 3], [2, 4]],
 |      ...         'index_names': ['n1', 'n2'],
 |      ...         'column_names': ['z1', 'z2']}
 |      >>> pd.DataFrame.from_dict(data, orient='tight')
 |      z1     x  y
 |      z2     1  2
 |      n1 n2
 |      a  b   1  3
 |         c   2  4
 |  
 |  from_records(data, index=None, exclude=None, columns=None, coerce_float: 'bool' = False, nrows: 'int | None' = None) -> 'DataFrame' from builtins.type
 |      Convert structured or record ndarray to DataFrame.
 |      
 |      Creates a DataFrame object from a structured ndarray, sequence of
 |      tuples or dicts, or DataFrame.
 |      
 |      Parameters
 |      ----------
 |      data : structured ndarray, sequence of tuples or dicts, or DataFrame
 |          Structured input data.
 |      
 |          .. deprecated:: 2.1.0
 |              Passing a DataFrame is deprecated.
 |      index : str, list of fields, array-like
 |          Field of array to use as the index, alternately a specific set of
 |          input labels to use.
 |      exclude : sequence, default None
 |          Columns or fields to exclude.
 |      columns : sequence, default None
 |          Column names to use. If the passed data do not have names
 |          associated with them, this argument provides names for the
 |          columns. Otherwise this argument indicates the order of the columns
 |          in the result (any names not found in the data will become all-NA
 |          columns).
 |      coerce_float : bool, default False
 |          Attempt to convert values of non-string, non-numeric objects (like
 |          decimal.Decimal) to floating point, useful for SQL result sets.
 |      nrows : int, default None
 |          Number of rows to read if data is an iterator.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |      
 |      See Also
 |      --------
 |      DataFrame.from_dict : DataFrame from dict of array-like or dicts.
 |      DataFrame : DataFrame object creation using constructor.
 |      
 |      Examples
 |      --------
 |      Data can be provided as a structured ndarray:
 |      
 |      >>> data = np.array([(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')],
 |      ...                 dtype=[('col_1', 'i4'), ('col_2', 'U1')])
 |      >>> pd.DataFrame.from_records(data)
 |         col_1 col_2
 |      0      3     a
 |      1      2     b
 |      2      1     c
 |      3      0     d
 |      
 |      Data can be provided as a list of dicts:
 |      
 |      >>> data = [{'col_1': 3, 'col_2': 'a'},
 |      ...         {'col_1': 2, 'col_2': 'b'},
 |      ...         {'col_1': 1, 'col_2': 'c'},
 |      ...         {'col_1': 0, 'col_2': 'd'}]
 |      >>> pd.DataFrame.from_records(data)
 |         col_1 col_2
 |      0      3     a
 |      1      2     b
 |      2      1     c
 |      3      0     d
 |      
 |      Data can be provided as a list of tuples with corresponding columns:
 |      
 |      >>> data = [(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')]
 |      >>> pd.DataFrame.from_records(data, columns=['col_1', 'col_2'])
 |         col_1 col_2
 |      0      3     a
 |      1      2     b
 |      2      1     c
 |      3      0     d
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  T
 |      The transpose of the DataFrame.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The transposed DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.transpose : Transpose index and columns.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
 |      >>> df
 |         col1  col2
 |      0     1     3
 |      1     2     4
 |      
 |      >>> df.T
 |            0  1
 |      col1  1  2
 |      col2  3  4
 |  
 |  axes
 |      Return a list representing the axes of the DataFrame.
 |      
 |      It has the row axis labels and column axis labels as the only members.
 |      They are returned in that order.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
 |      >>> df.axes
 |      [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],
 |      dtype='object')]
 |  
 |  shape
 |      Return a tuple representing the dimensionality of the DataFrame.
 |      
 |      See Also
 |      --------
 |      ndarray.shape : Tuple of array dimensions.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
 |      >>> df.shape
 |      (2, 2)
 |      
 |      >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],
 |      ...                    'col3': [5, 6]})
 |      >>> df.shape
 |      (2, 3)
 |  
 |  style
 |      Returns a Styler object.
 |      
 |      Contains methods for building a styled HTML representation of the DataFrame.
 |      
 |      See Also
 |      --------
 |      io.formats.style.Styler : Helps style a DataFrame or Series according to the
 |          data with HTML and CSS.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2, 3]})
 |      >>> df.style  # doctest: +SKIP
 |      
 |      Please see
 |      `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  values
 |      Return a Numpy representation of the DataFrame.
 |      
 |      .. warning::
 |      
 |         We recommend using :meth:`DataFrame.to_numpy` instead.
 |      
 |      Only the values in the DataFrame will be returned, the axes labels
 |      will be removed.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray
 |          The values of the DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.to_numpy : Recommended alternative to this method.
 |      DataFrame.index : Retrieve the index labels.
 |      DataFrame.columns : Retrieving the column names.
 |      
 |      Notes
 |      -----
 |      The dtype will be a lower-common-denominator dtype (implicit
 |      upcasting); that is to say if the dtypes (even of numeric types)
 |      are mixed, the one that accommodates all will be chosen. Use this
 |      with care if you are not dealing with the blocks.
 |      
 |      e.g. If the dtypes are float16 and float32, dtype will be upcast to
 |      float32.  If dtypes are int32 and uint8, dtype will be upcast to
 |      int32. By :func:`numpy.find_common_type` convention, mixing int64
 |      and uint64 will result in a float64 dtype.
 |      
 |      Examples
 |      --------
 |      A DataFrame where all columns are the same type (e.g., int64) results
 |      in an array of the same type.
 |      
 |      >>> df = pd.DataFrame({'age':    [ 3,  29],
 |      ...                    'height': [94, 170],
 |      ...                    'weight': [31, 115]})
 |      >>> df
 |         age  height  weight
 |      0    3      94      31
 |      1   29     170     115
 |      >>> df.dtypes
 |      age       int64
 |      height    int64
 |      weight    int64
 |      dtype: object
 |      >>> df.values
 |      array([[  3,  94,  31],
 |             [ 29, 170, 115]])
 |      
 |      A DataFrame with mixed type columns(e.g., str/object, int64, float32)
 |      results in an ndarray of the broadest type that accommodates these
 |      mixed types (e.g., object).
 |      
 |      >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),
 |      ...                     ('lion',     80.5, 1),
 |      ...                     ('monkey', np.nan, None)],
 |      ...                   columns=('name', 'max_speed', 'rank'))
 |      >>> df2.dtypes
 |      name          object
 |      max_speed    float64
 |      rank          object
 |      dtype: object
 |      >>> df2.values
 |      array([['parrot', 24.0, 'second'],
 |             ['lion', 80.5, 1],
 |             ['monkey', nan, None]], dtype=object)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  columns
 |      The column labels of the DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> df
 |           A  B
 |      0    1  3
 |      1    2  4
 |      >>> df.columns
 |      Index(['A', 'B'], dtype='object')
 |  
 |  index
 |      The index (row labels) of the DataFrame.
 |      
 |      The index of a DataFrame is a series of labels that identify each row.
 |      The labels can be integers, strings, or any other hashable type. The index
 |      is used for label-based access and alignment, and can be accessed or
 |      modified using this attribute.
 |      
 |      Returns
 |      -------
 |      pandas.Index
 |          The index labels of the DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.columns : The column labels of the DataFrame.
 |      DataFrame.to_numpy : Convert the DataFrame to a NumPy array.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Aritra'],
 |      ...                    'Age': [25, 30, 35],
 |      ...                    'Location': ['Seattle', 'New York', 'Kona']},
 |      ...                   index=([10, 20, 30]))
 |      >>> df.index
 |      Index([10, 20, 30], dtype='int64')
 |      
 |      In this example, we create a DataFrame with 3 rows and 3 columns,
 |      including Name, Age, and Location information. We set the index labels to
 |      be the integers 10, 20, and 30. We then access the `index` attribute of the
 |      DataFrame, which returns an `Index` object containing the index labels.
 |      
 |      >>> df.index = [100, 200, 300]
 |      >>> df
 |          Name  Age Location
 |      100  Alice   25  Seattle
 |      200    Bob   30 New York
 |      300  Aritra  35    Kona
 |      
 |      In this example, we modify the index labels of the DataFrame by assigning
 |      a new list of labels to the `index` attribute. The DataFrame is then
 |      updated with the new labels, and the output shows the modified DataFrame.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'_AXIS_ORDERS': "list[Literal['index', 'columns']]"...
 |  
 |  __pandas_priority__ = 4000
 |  
 |  plot = <class 'pandas.plotting._core.PlotAccessor'>
 |      Make plots of Series or DataFrame.
 |      
 |      Uses the backend specified by the
 |      option ``plotting.backend``. By default, matplotlib is used.
 |      
 |      Parameters
 |      ----------
 |      data : Series or DataFrame
 |          The object for which the method is called.
 |      x : label or position, default None
 |          Only used if data is a DataFrame.
 |      y : label, position or list of label, positions, default None
 |          Allows plotting of one column versus another. Only used if data is a
 |          DataFrame.
 |      kind : str
 |          The kind of plot to produce:
 |      
 |          - 'line' : line plot (default)
 |          - 'bar' : vertical bar plot
 |          - 'barh' : horizontal bar plot
 |          - 'hist' : histogram
 |          - 'box' : boxplot
 |          - 'kde' : Kernel Density Estimation plot
 |          - 'density' : same as 'kde'
 |          - 'area' : area plot
 |          - 'pie' : pie plot
 |          - 'scatter' : scatter plot (DataFrame only)
 |          - 'hexbin' : hexbin plot (DataFrame only)
 |      ax : matplotlib axes object, default None
 |          An axes of the current figure.
 |      subplots : bool or sequence of iterables, default False
 |          Whether to group columns into subplots:
 |      
 |          - ``False`` : No subplots will be used
 |          - ``True`` : Make separate subplots for each column.
 |          - sequence of iterables of column labels: Create a subplot for each
 |            group of columns. For example `[('a', 'c'), ('b', 'd')]` will
 |            create 2 subplots: one with columns 'a' and 'c', and one
 |            with columns 'b' and 'd'. Remaining columns that aren't specified
 |            will be plotted in additional subplots (one per column).
 |      
 |            .. versionadded:: 1.5.0
 |      
 |      sharex : bool, default True if ax is None else False
 |          In case ``subplots=True``, share x axis and set some x axis labels
 |          to invisible; defaults to True if ax is None otherwise False if
 |          an ax is passed in; Be aware, that passing in both an ax and
 |          ``sharex=True`` will alter all x axis labels for all axis in a figure.
 |      sharey : bool, default False
 |          In case ``subplots=True``, share y axis and set some y axis labels to invisible.
 |      layout : tuple, optional
 |          (rows, columns) for the layout of subplots.
 |      figsize : a tuple (width, height) in inches
 |          Size of a figure object.
 |      use_index : bool, default True
 |          Use index as ticks for x axis.
 |      title : str or list
 |          Title to use for the plot. If a string is passed, print the string
 |          at the top of the figure. If a list is passed and `subplots` is
 |          True, print each item in the list above the corresponding subplot.
 |      grid : bool, default None (matlab style default)
 |          Axis grid lines.
 |      legend : bool or {'reverse'}
 |          Place legend on axis subplots.
 |      style : list or dict
 |          The matplotlib line style per column.
 |      logx : bool or 'sym', default False
 |          Use log scaling or symlog scaling on x axis.
 |      
 |      logy : bool or 'sym' default False
 |          Use log scaling or symlog scaling on y axis.
 |      
 |      loglog : bool or 'sym', default False
 |          Use log scaling or symlog scaling on both x and y axes.
 |      
 |      xticks : sequence
 |          Values to use for the xticks.
 |      yticks : sequence
 |          Values to use for the yticks.
 |      xlim : 2-tuple/list
 |          Set the x limits of the current axes.
 |      ylim : 2-tuple/list
 |          Set the y limits of the current axes.
 |      xlabel : label, optional
 |          Name to use for the xlabel on x-axis. Default uses index name as xlabel, or the
 |          x-column name for planar plots.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Now applicable to histograms.
 |      
 |      ylabel : label, optional
 |          Name to use for the ylabel on y-axis. Default will show no ylabel, or the
 |          y-column name for planar plots.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Now applicable to histograms.
 |      
 |      rot : float, default None
 |          Rotation for ticks (xticks for vertical, yticks for horizontal
 |          plots).
 |      fontsize : float, default None
 |          Font size for xticks and yticks.
 |      colormap : str or matplotlib colormap object, default None
 |          Colormap to select colors from. If string, load colormap with that
 |          name from matplotlib.
 |      colorbar : bool, optional
 |          If True, plot colorbar (only relevant for 'scatter' and 'hexbin'
 |          plots).
 |      position : float
 |          Specify relative alignments for bar plot layout.
 |          From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |          (center).
 |      table : bool, Series or DataFrame, default False
 |          If True, draw a table using the data in the DataFrame and the data
 |          will be transposed to meet matplotlib's default layout.
 |          If a Series or DataFrame is passed, use passed data to draw a
 |          table.
 |      yerr : DataFrame, Series, array-like, dict and str
 |          See :ref:`Plotting with Error Bars <visualization.errorbars>` for
 |          detail.
 |      xerr : DataFrame, Series, array-like, dict and str
 |          Equivalent to yerr.
 |      stacked : bool, default False in line and bar plots, and True in area plot
 |          If True, create stacked plot.
 |      secondary_y : bool or sequence, default False
 |          Whether to plot on the secondary y-axis if a list/tuple, which
 |          columns to plot on secondary y-axis.
 |      mark_right : bool, default True
 |          When using a secondary_y axis, automatically mark the column
 |          labels with "(right)" in the legend.
 |      include_bool : bool, default is False
 |          If True, boolean values can be plotted.
 |      backend : str, default None
 |          Backend to use instead of the backend specified in the option
 |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |          specify the ``plotting.backend`` for the whole session, set
 |          ``pd.options.plotting.backend``.
 |      **kwargs
 |          Options to pass to matplotlib plotting method.
 |      
 |      Returns
 |      -------
 |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them
 |          If the backend is not the default matplotlib one, the return value
 |          will be the object returned by the backend.
 |      
 |      Notes
 |      -----
 |      - See matplotlib documentation online for more on this subject
 |      - If `kind` = 'bar' or 'barh', you can specify relative alignments
 |        for bar plot layout by `position` keyword.
 |        From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |        (center)
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ser = pd.Series([1, 2, 3, 3])
 |          >>> plot = ser.plot(kind='hist', title="My plot")
 |      
 |      For DataFrame:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({'length': [1.5, 0.5, 1.2, 0.9, 3],
 |          ...                   'width': [0.7, 0.2, 0.15, 0.2, 1.1]},
 |          ...                   index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])
 |          >>> plot = df.plot(title="DataFrame Plot")
 |      
 |      For SeriesGroupBy:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> lst = [-1, -2, -3, 1, 2, 3]
 |          >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |          >>> plot = ser.groupby(lambda x: x > 0).plot(title="SeriesGroupBy Plot")
 |      
 |      For DataFrameGroupBy:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({"col1" : [1, 2, 3, 4],
 |          ...                   "col2" : ["A", "B", "A", "B"]})
 |          >>> plot = df.groupby("col2").plot(kind="bar", title="DataFrameGroupBy Plot")
 |  
 |  
 |  sparse = <class 'pandas.core.arrays.sparse.accessor.SparseFrameAccesso...
 |      DataFrame accessor for sparse data.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"a": [1, 2, 0, 0],
 |      ...                   "b": [3, 0, 0, 4]}, dtype="Sparse[int]")
 |      >>> df.sparse.density
 |      0.5
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.generic.NDFrame:
 |  
 |  __abs__(self) -> 'Self'
 |  
 |  __array__(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool_t | None' = None) -> 'np.ndarray'
 |  
 |  __array_ufunc__(self, ufunc: 'np.ufunc', method: 'str', *inputs: 'Any', **kwargs: 'Any')
 |  
 |  __bool__ = __nonzero__(self) -> 'NoReturn'
 |  
 |  __contains__(self, key) -> 'bool_t'
 |      True if the key is in the info axis
 |  
 |  __copy__(self, deep: 'bool_t' = True) -> 'Self'
 |  
 |  __deepcopy__(self, memo=None) -> 'Self'
 |      Parameters
 |      ----------
 |      memo, default None
 |          Standard signature. Unused
 |  
 |  __delitem__(self, key) -> 'None'
 |      Delete item
 |  
 |  __finalize__(self, other, method: 'str | None' = None, **kwargs) -> 'Self'
 |      Propagate metadata from other to self.
 |      
 |      Parameters
 |      ----------
 |      other : the object from which to get the attributes that we are going
 |          to propagate
 |      method : str, optional
 |          A passed method name providing context on where ``__finalize__``
 |          was called.
 |      
 |          .. warning::
 |      
 |             The value passed as `method` are not currently considered
 |             stable across pandas releases.
 |  
 |  __getattr__(self, name: 'str')
 |      After regular attribute access, try looking up the name
 |      This allows simpler access to columns for interactive use.
 |  
 |  __getstate__(self) -> 'dict[str, Any]'
 |  
 |  __iadd__(self, other) -> 'Self'
 |  
 |  __iand__(self, other) -> 'Self'
 |  
 |  __ifloordiv__(self, other) -> 'Self'
 |  
 |  __imod__(self, other) -> 'Self'
 |  
 |  __imul__(self, other) -> 'Self'
 |  
 |  __invert__(self) -> 'Self'
 |  
 |  __ior__(self, other) -> 'Self'
 |  
 |  __ipow__(self, other) -> 'Self'
 |  
 |  __isub__(self, other) -> 'Self'
 |  
 |  __iter__(self) -> 'Iterator'
 |      Iterate over info axis.
 |      
 |      Returns
 |      -------
 |      iterator
 |          Info axis as iterator.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
 |      >>> for x in df:
 |      ...     print(x)
 |      A
 |      B
 |  
 |  __itruediv__(self, other) -> 'Self'
 |  
 |  __ixor__(self, other) -> 'Self'
 |  
 |  __neg__(self) -> 'Self'
 |  
 |  __nonzero__(self) -> 'NoReturn'
 |  
 |  __pos__(self) -> 'Self'
 |  
 |  __round__(self, decimals: 'int' = 0) -> 'Self'
 |  
 |  __setattr__(self, name: 'str', value) -> 'None'
 |      After regular attribute access, try setting the name
 |      This allows simpler access to columns for interactive use.
 |  
 |  __setstate__(self, state) -> 'None'
 |  
 |  abs(self) -> 'Self'
 |      Return a Series/DataFrame with absolute numeric value of each element.
 |      
 |      This function only applies to elements that are all numeric.
 |      
 |      Returns
 |      -------
 |      abs
 |          Series/DataFrame containing the absolute value of each element.
 |      
 |      See Also
 |      --------
 |      numpy.absolute : Calculate the absolute value element-wise.
 |      
 |      Notes
 |      -----
 |      For ``complex`` inputs, ``1.2 + 1j``, the absolute value is
 |      :math:`\sqrt{ a^2 + b^2 }`.
 |      
 |      Examples
 |      --------
 |      Absolute numeric values in a Series.
 |      
 |      >>> s = pd.Series([-1.10, 2, -3.33, 4])
 |      >>> s.abs()
 |      0    1.10
 |      1    2.00
 |      2    3.33
 |      3    4.00
 |      dtype: float64
 |      
 |      Absolute numeric values in a Series with complex numbers.
 |      
 |      >>> s = pd.Series([1.2 + 1j])
 |      >>> s.abs()
 |      0    1.56205
 |      dtype: float64
 |      
 |      Absolute numeric values in a Series with a Timedelta element.
 |      
 |      >>> s = pd.Series([pd.Timedelta('1 days')])
 |      >>> s.abs()
 |      0   1 days
 |      dtype: timedelta64[ns]
 |      
 |      Select rows with data closest to certain value using argsort (from
 |      `StackOverflow <https://stackoverflow.com/a/17758115>`__).
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'a': [4, 5, 6, 7],
 |      ...     'b': [10, 20, 30, 40],
 |      ...     'c': [100, 50, -30, -50]
 |      ... })
 |      >>> df
 |           a    b    c
 |      0    4   10  100
 |      1    5   20   50
 |      2    6   30  -30
 |      3    7   40  -50
 |      >>> df.loc[(df.c - 43).abs().argsort()]
 |           a    b    c
 |      1    5   20   50
 |      0    4   10  100
 |      2    6   30  -30
 |      3    7   40  -50
 |  
 |  add_prefix(self, prefix: 'str', axis: 'Axis | None' = None) -> 'Self'
 |      Prefix labels with string `prefix`.
 |      
 |      For Series, the row labels are prefixed.
 |      For DataFrame, the column labels are prefixed.
 |      
 |      Parameters
 |      ----------
 |      prefix : str
 |          The string to add before each label.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to add prefix on
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          New Series or DataFrame with updated labels.
 |      
 |      See Also
 |      --------
 |      Series.add_suffix: Suffix row labels with string `suffix`.
 |      DataFrame.add_suffix: Suffix column labels with string `suffix`.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |      
 |      >>> s.add_prefix('item_')
 |      item_0    1
 |      item_1    2
 |      item_2    3
 |      item_3    4
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
 |      >>> df
 |         A  B
 |      0  1  3
 |      1  2  4
 |      2  3  5
 |      3  4  6
 |      
 |      >>> df.add_prefix('col_')
 |           col_A  col_B
 |      0       1       3
 |      1       2       4
 |      2       3       5
 |      3       4       6
 |  
 |  add_suffix(self, suffix: 'str', axis: 'Axis | None' = None) -> 'Self'
 |      Suffix labels with string `suffix`.
 |      
 |      For Series, the row labels are suffixed.
 |      For DataFrame, the column labels are suffixed.
 |      
 |      Parameters
 |      ----------
 |      suffix : str
 |          The string to add after each label.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to add suffix on
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          New Series or DataFrame with updated labels.
 |      
 |      See Also
 |      --------
 |      Series.add_prefix: Prefix row labels with string `prefix`.
 |      DataFrame.add_prefix: Prefix column labels with string `prefix`.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |      
 |      >>> s.add_suffix('_item')
 |      0_item    1
 |      1_item    2
 |      2_item    3
 |      3_item    4
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
 |      >>> df
 |         A  B
 |      0  1  3
 |      1  2  4
 |      2  3  5
 |      3  4  6
 |      
 |      >>> df.add_suffix('_col')
 |           A_col  B_col
 |      0       1       3
 |      1       2       4
 |      2       3       5
 |      3       4       6
 |  
 |  align(self, other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, fill_axis: 'Axis | lib.NoDefault' = <no_default>, broadcast_axis: 'Axis | None | lib.NoDefault' = <no_default>) -> 'tuple[Self, NDFrameT]'
 |      Align two objects on their axes with the specified join method.
 |      
 |      Join method is specified for each axis Index.
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame or Series
 |      join : {'outer', 'inner', 'left', 'right'}, default 'outer'
 |          Type of alignment to be performed.
 |      
 |          * left: use only keys from left frame, preserve key order.
 |          * right: use only keys from right frame, preserve key order.
 |          * outer: use union of keys from both frames, sort keys lexicographically.
 |          * inner: use intersection of keys from both frames,
 |            preserve the order of the left keys.
 |      
 |      axis : allowed axis of the other object, default None
 |          Align on index (0), columns (1), or both (None).
 |      level : int or level name, default None
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      copy : bool, default True
 |          Always returns new objects. If copy=False and no reindexing is
 |          required then original objects are returned.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      fill_value : scalar, default np.nan
 |          Value to use for missing values. Defaults to NaN, but can be any
 |          "compatible" value.
 |      method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None
 |          Method to use for filling holes in reindexed Series:
 |      
 |          - pad / ffill: propagate last valid observation forward to next valid.
 |          - backfill / bfill: use NEXT valid observation to fill gap.
 |      
 |          .. deprecated:: 2.1
 |      
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      
 |          .. deprecated:: 2.1
 |      
 |      fill_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default 0
 |          Filling axis, method and limit.
 |      
 |          .. deprecated:: 2.1
 |      
 |      broadcast_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default None
 |          Broadcast values along this axis, if aligning two objects of
 |          different dimensions.
 |      
 |          .. deprecated:: 2.1
 |      
 |      Returns
 |      -------
 |      tuple of (Series/DataFrame, type of other)
 |          Aligned objects.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=["D", "B", "E", "A"], index=[1, 2]
 |      ... )
 |      >>> other = pd.DataFrame(
 |      ...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],
 |      ...     columns=["A", "B", "C", "D"],
 |      ...     index=[2, 3, 4],
 |      ... )
 |      >>> df
 |         D  B  E  A
 |      1  1  2  3  4
 |      2  6  7  8  9
 |      >>> other
 |          A    B    C    D
 |      2   10   20   30   40
 |      3   60   70   80   90
 |      4  600  700  800  900
 |      
 |      Align on columns:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=1)
 |      >>> left
 |         A  B   C  D  E
 |      1  4  2 NaN  1  3
 |      2  9  7 NaN  6  8
 |      >>> right
 |          A    B    C    D   E
 |      2   10   20   30   40 NaN
 |      3   60   70   80   90 NaN
 |      4  600  700  800  900 NaN
 |      
 |      We can also align on the index:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=0)
 |      >>> left
 |          D    B    E    A
 |      1  1.0  2.0  3.0  4.0
 |      2  6.0  7.0  8.0  9.0
 |      3  NaN  NaN  NaN  NaN
 |      4  NaN  NaN  NaN  NaN
 |      >>> right
 |          A      B      C      D
 |      1    NaN    NaN    NaN    NaN
 |      2   10.0   20.0   30.0   40.0
 |      3   60.0   70.0   80.0   90.0
 |      4  600.0  700.0  800.0  900.0
 |      
 |      Finally, the default `axis=None` will align on both index and columns:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=None)
 |      >>> left
 |           A    B   C    D    E
 |      1  4.0  2.0 NaN  1.0  3.0
 |      2  9.0  7.0 NaN  6.0  8.0
 |      3  NaN  NaN NaN  NaN  NaN
 |      4  NaN  NaN NaN  NaN  NaN
 |      >>> right
 |             A      B      C      D   E
 |      1    NaN    NaN    NaN    NaN NaN
 |      2   10.0   20.0   30.0   40.0 NaN
 |      3   60.0   70.0   80.0   90.0 NaN
 |      4  600.0  700.0  800.0  900.0 NaN
 |  
 |  asfreq(self, freq: 'Frequency', method: 'FillnaOptions | None' = None, how: "Literal['start', 'end'] | None" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -> 'Self'
 |      Convert time series to specified frequency.
 |      
 |      Returns the original data conformed to a new index with the specified
 |      frequency.
 |      
 |      If the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index
 |      is the result of transforming the original index with
 |      :meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index
 |      will map one-to-one to the new index).
 |      
 |      Otherwise, the new index will be equivalent to ``pd.date_range(start, end,
 |      freq=freq)`` where ``start`` and ``end`` are, respectively, the first and
 |      last entries in the original index (see :func:`pandas.date_range`). The
 |      values corresponding to any timesteps in the new index which were not present
 |      in the original index will be null (``NaN``), unless a method for filling
 |      such unknowns is provided (see the ``method`` parameter below).
 |      
 |      The :meth:`resample` method is more appropriate if an operation on each group of
 |      timesteps (such as an aggregate) is necessary to represent the data at the new
 |      frequency.
 |      
 |      Parameters
 |      ----------
 |      freq : DateOffset or str
 |          Frequency DateOffset or string.
 |      method : {'backfill'/'bfill', 'pad'/'ffill'}, default None
 |          Method to use for filling holes in reindexed Series (note this
 |          does not fill NaNs that already were present):
 |      
 |          * 'pad' / 'ffill': propagate last valid observation forward to next
 |            valid
 |          * 'backfill' / 'bfill': use NEXT valid observation to fill.
 |      how : {'start', 'end'}, default end
 |          For PeriodIndex only (see PeriodIndex.asfreq).
 |      normalize : bool, default False
 |          Whether to reset output index to midnight.
 |      fill_value : scalar, optional
 |          Value to use for missing values, applied during upsampling (note
 |          this does not fill NaNs that already were present).
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Series/DataFrame object reindexed to the specified frequency.
 |      
 |      See Also
 |      --------
 |      reindex : Conform DataFrame to new index with optional filling logic.
 |      
 |      Notes
 |      -----
 |      To learn more about the frequency strings, please see `this link
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
 |      
 |      Examples
 |      --------
 |      Start by creating a series with 4 one minute timestamps.
 |      
 |      >>> index = pd.date_range('1/1/2000', periods=4, freq='min')
 |      >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)
 |      >>> df = pd.DataFrame({'s': series})
 |      >>> df
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample the series into 30 second bins.
 |      
 |      >>> df.asfreq(freq='30s')
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    NaN
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    NaN
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    NaN
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample again, providing a ``fill value``.
 |      
 |      >>> df.asfreq(freq='30s', fill_value=9.0)
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    9.0
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    9.0
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    9.0
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample again, providing a ``method``.
 |      
 |      >>> df.asfreq(freq='30s', method='bfill')
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    NaN
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    2.0
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    3.0
 |      2000-01-01 00:03:00    3.0
 |  
 |  asof(self, where, subset=None)
 |      Return the last row(s) without any NaNs before `where`.
 |      
 |      The last row (for each element in `where`, if list) without any
 |      NaN is taken.
 |      In case of a :class:`~pandas.DataFrame`, the last row without NaN
 |      considering only the subset of columns (if not `None`)
 |      
 |      If there is no good value, NaN is returned for a Series or
 |      a Series of NaN values for a DataFrame
 |      
 |      Parameters
 |      ----------
 |      where : date or array-like of dates
 |          Date(s) before which the last row(s) are returned.
 |      subset : str or array-like of str, default `None`
 |          For DataFrame, if not `None`, only use these columns to
 |          check for NaNs.
 |      
 |      Returns
 |      -------
 |      scalar, Series, or DataFrame
 |      
 |          The return can be:
 |      
 |          * scalar : when `self` is a Series and `where` is a scalar
 |          * Series: when `self` is a Series and `where` is an array-like,
 |            or when `self` is a DataFrame and `where` is a scalar
 |          * DataFrame : when `self` is a DataFrame and `where` is an
 |            array-like
 |      
 |      See Also
 |      --------
 |      merge_asof : Perform an asof merge. Similar to left join.
 |      
 |      Notes
 |      -----
 |      Dates are assumed to be sorted. Raises if this is not the case.
 |      
 |      Examples
 |      --------
 |      A Series and a scalar `where`.
 |      
 |      >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])
 |      >>> s
 |      10    1.0
 |      20    2.0
 |      30    NaN
 |      40    4.0
 |      dtype: float64
 |      
 |      >>> s.asof(20)
 |      2.0
 |      
 |      For a sequence `where`, a Series is returned. The first value is
 |      NaN, because the first element of `where` is before the first
 |      index value.
 |      
 |      >>> s.asof([5, 20])
 |      5     NaN
 |      20    2.0
 |      dtype: float64
 |      
 |      Missing values are not considered. The following is ``2.0``, not
 |      NaN, even though NaN is at the index location for ``30``.
 |      
 |      >>> s.asof(30)
 |      2.0
 |      
 |      Take all columns into consideration
 |      
 |      >>> df = pd.DataFrame({'a': [10., 20., 30., 40., 50.],
 |      ...                    'b': [None, None, None, None, 500]},
 |      ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',
 |      ...                                           '2018-02-27 09:02:00',
 |      ...                                           '2018-02-27 09:03:00',
 |      ...                                           '2018-02-27 09:04:00',
 |      ...                                           '2018-02-27 09:05:00']))
 |      >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',
 |      ...                           '2018-02-27 09:04:30']))
 |                            a   b
 |      2018-02-27 09:03:30 NaN NaN
 |      2018-02-27 09:04:30 NaN NaN
 |      
 |      Take a single column into consideration
 |      
 |      >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',
 |      ...                           '2018-02-27 09:04:30']),
 |      ...         subset=['a'])
 |                              a   b
 |      2018-02-27 09:03:30  30.0 NaN
 |      2018-02-27 09:04:30  40.0 NaN
 |  
 |  astype(self, dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -> 'Self'
 |      Cast a pandas object to a specified dtype ``dtype``.
 |      
 |      Parameters
 |      ----------
 |      dtype : str, data type, Series or Mapping of column name -> data type
 |          Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to
 |          cast entire pandas object to the same type. Alternatively, use a
 |          mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is
 |          a numpy.dtype or Python type to cast one or more of the DataFrame's
 |          columns to column-specific types.
 |      copy : bool, default True
 |          Return a copy when ``copy=True`` (be very careful setting
 |          ``copy=False`` as changes to values then may propagate to other
 |          pandas objects).
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      errors : {'raise', 'ignore'}, default 'raise'
 |          Control raising of exceptions on invalid data for provided dtype.
 |      
 |          - ``raise`` : allow exceptions to be raised
 |          - ``ignore`` : suppress exceptions. On error return original object.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |      
 |      See Also
 |      --------
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to a numeric type.
 |      numpy.ndarray.astype : Cast a numpy array to a specified type.
 |      
 |      Notes
 |      -----
 |      .. versionchanged:: 2.0.0
 |      
 |          Using ``astype`` to convert from timezone-naive dtype to
 |          timezone-aware dtype will raise an exception.
 |          Use :meth:`Series.dt.tz_localize` instead.
 |      
 |      Examples
 |      --------
 |      Create a DataFrame:
 |      
 |      >>> d = {'col1': [1, 2], 'col2': [3, 4]}
 |      >>> df = pd.DataFrame(data=d)
 |      >>> df.dtypes
 |      col1    int64
 |      col2    int64
 |      dtype: object
 |      
 |      Cast all columns to int32:
 |      
 |      >>> df.astype('int32').dtypes
 |      col1    int32
 |      col2    int32
 |      dtype: object
 |      
 |      Cast col1 to int32 using a dictionary:
 |      
 |      >>> df.astype({'col1': 'int32'}).dtypes
 |      col1    int32
 |      col2    int64
 |      dtype: object
 |      
 |      Create a series:
 |      
 |      >>> ser = pd.Series([1, 2], dtype='int32')
 |      >>> ser
 |      0    1
 |      1    2
 |      dtype: int32
 |      >>> ser.astype('int64')
 |      0    1
 |      1    2
 |      dtype: int64
 |      
 |      Convert to categorical type:
 |      
 |      >>> ser.astype('category')
 |      0    1
 |      1    2
 |      dtype: category
 |      Categories (2, int32): [1, 2]
 |      
 |      Convert to ordered categorical type with custom ordering:
 |      
 |      >>> from pandas.api.types import CategoricalDtype
 |      >>> cat_dtype = CategoricalDtype(
 |      ...     categories=[2, 1], ordered=True)
 |      >>> ser.astype(cat_dtype)
 |      0    1
 |      1    2
 |      dtype: category
 |      Categories (2, int64): [2 < 1]
 |      
 |      Create a series of dates:
 |      
 |      >>> ser_date = pd.Series(pd.date_range('20200101', periods=3))
 |      >>> ser_date
 |      0   2020-01-01
 |      1   2020-01-02
 |      2   2020-01-03
 |      dtype: datetime64[ns]
 |  
 |  at_time(self, time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -> 'Self'
 |      Select values at particular time of day (e.g., 9:30AM).
 |      
 |      Parameters
 |      ----------
 |      time : datetime.time or str
 |          The values to select.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      between_time : Select values between particular times of the day.
 |      first : Select initial periods of time series based on a date offset.
 |      last : Select final periods of time series based on a date offset.
 |      DatetimeIndex.indexer_at_time : Get just the index locations for
 |          values at particular time of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='12h')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-09 12:00:00  2
 |      2018-04-10 00:00:00  3
 |      2018-04-10 12:00:00  4
 |      
 |      >>> ts.at_time('12:00')
 |                           A
 |      2018-04-09 12:00:00  2
 |      2018-04-10 12:00:00  4
 |  
 |  backfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by using the next valid observation to fill the gap.
 |      
 |      .. deprecated:: 2.0
 |      
 |          Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.bfill` or :meth:`Series.bfill`.
 |  
 |  between_time(self, start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -> 'Self'
 |      Select values between particular times of the day (e.g., 9:00-9:30 AM).
 |      
 |      By setting ``start_time`` to be later than ``end_time``,
 |      you can get the times that are *not* between the two times.
 |      
 |      Parameters
 |      ----------
 |      start_time : datetime.time or str
 |          Initial time as a time filter limit.
 |      end_time : datetime.time or str
 |          End time as a time filter limit.
 |      inclusive : {"both", "neither", "left", "right"}, default "both"
 |          Include boundaries; whether to set each bound as closed or open.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Determine range time on index or columns value.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Data from the original object filtered to the specified dates range.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      at_time : Select values at a particular time of the day.
 |      first : Select initial periods of time series based on a date offset.
 |      last : Select final periods of time series based on a date offset.
 |      DatetimeIndex.indexer_between_time : Get just the index locations for
 |          values between particular times of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-10 00:20:00  2
 |      2018-04-11 00:40:00  3
 |      2018-04-12 01:00:00  4
 |      
 |      >>> ts.between_time('0:15', '0:45')
 |                           A
 |      2018-04-10 00:20:00  2
 |      2018-04-11 00:40:00  3
 |      
 |      You get the times that are *not* between two times by setting
 |      ``start_time`` later than ``end_time``:
 |      
 |      >>> ts.between_time('0:45', '0:15')
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-12 01:00:00  4
 |  
 |  bfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by using the next valid observation to fill the gap.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      limit_area : {`None`, 'inside', 'outside'}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([1, None, None, 2])
 |      >>> s.bfill()
 |      0    1.0
 |      1    2.0
 |      2    2.0
 |      3    2.0
 |      dtype: float64
 |      >>> s.bfill(limit=1)
 |      0    1.0
 |      1    NaN
 |      2    2.0
 |      3    2.0
 |      dtype: float64
 |      
 |      With DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})
 |      >>> df
 |            A     B
 |      0   1.0   NaN
 |      1   NaN   5.0
 |      2   NaN   NaN
 |      3   4.0   7.0
 |      >>> df.bfill()
 |            A     B
 |      0   1.0   5.0
 |      1   4.0   5.0
 |      2   4.0   7.0
 |      3   4.0   7.0
 |      >>> df.bfill(limit=1)
 |            A     B
 |      0   1.0   5.0
 |      1   NaN   5.0
 |      2   4.0   7.0
 |      3   4.0   7.0
 |  
 |  bool(self) -> 'bool_t'
 |      Return the bool of a single element Series or DataFrame.
 |      
 |      .. deprecated:: 2.1.0
 |      
 |         bool is deprecated and will be removed in future version of pandas.
 |         For ``Series`` use ``pandas.Series.item``.
 |      
 |      This must be a boolean scalar value, either True or False. It will raise a
 |      ValueError if the Series or DataFrame does not have exactly 1 element, or that
 |      element is not boolean (integer values 0 and 1 will also raise an exception).
 |      
 |      Returns
 |      -------
 |      bool
 |          The value in the Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      Series.astype : Change the data type of a Series, including to boolean.
 |      DataFrame.astype : Change the data type of a DataFrame, including to boolean.
 |      numpy.bool_ : NumPy boolean data type, used by pandas for boolean values.
 |      
 |      Examples
 |      --------
 |      The method will only work for single element objects with a boolean value:
 |      
 |      >>> pd.Series([True]).bool()  # doctest: +SKIP
 |      True
 |      >>> pd.Series([False]).bool()  # doctest: +SKIP
 |      False
 |      
 |      >>> pd.DataFrame({'col': [True]}).bool()  # doctest: +SKIP
 |      True
 |      >>> pd.DataFrame({'col': [False]}).bool()  # doctest: +SKIP
 |      False
 |      
 |      This is an alternative method and will only work
 |      for single element objects with a boolean value:
 |      
 |      >>> pd.Series([True]).item()  # doctest: +SKIP
 |      True
 |      >>> pd.Series([False]).item()  # doctest: +SKIP
 |      False
 |  
 |  clip(self, lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -> 'Self | None'
 |      Trim values at input threshold(s).
 |      
 |      Assigns values outside boundary to boundary values. Thresholds
 |      can be singular values or array like, and in the latter case
 |      the clipping is performed element-wise in the specified axis.
 |      
 |      Parameters
 |      ----------
 |      lower : float or array-like, default None
 |          Minimum threshold value. All values below this
 |          threshold will be set to it. A missing
 |          threshold (e.g `NA`) will not clip the value.
 |      upper : float or array-like, default None
 |          Maximum threshold value. All values above this
 |          threshold will be set to it. A missing
 |          threshold (e.g `NA`) will not clip the value.
 |      axis : {{0 or 'index', 1 or 'columns', None}}, default None
 |          Align object with lower and upper along the given axis.
 |          For `Series` this parameter is unused and defaults to `None`.
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted
 |          for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame or None
 |          Same type as calling object with the values outside the
 |          clip boundaries replaced or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.clip : Trim values at input threshold in series.
 |      DataFrame.clip : Trim values at input threshold in dataframe.
 |      numpy.clip : Clip (limit) the values in an array.
 |      
 |      Examples
 |      --------
 |      >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}
 |      >>> df = pd.DataFrame(data)
 |      >>> df
 |         col_0  col_1
 |      0      9     -2
 |      1     -3     -7
 |      2      0      6
 |      3     -1      8
 |      4      5     -5
 |      
 |      Clips per column using lower and upper thresholds:
 |      
 |      >>> df.clip(-4, 6)
 |         col_0  col_1
 |      0      6     -2
 |      1     -3     -4
 |      2      0      6
 |      3     -1      6
 |      4      5     -4
 |      
 |      Clips using specific lower and upper thresholds per column:
 |      
 |      >>> df.clip([-2, -1], [4, 5])
 |          col_0  col_1
 |      0      4     -1
 |      1     -2     -1
 |      2      0      5
 |      3     -1      5
 |      4      4     -1
 |      
 |      Clips using specific lower and upper thresholds per column element:
 |      
 |      >>> t = pd.Series([2, -4, -1, 6, 3])
 |      >>> t
 |      0    2
 |      1   -4
 |      2   -1
 |      3    6
 |      4    3
 |      dtype: int64
 |      
 |      >>> df.clip(t, t + 4, axis=0)
 |         col_0  col_1
 |      0      6      2
 |      1     -3     -4
 |      2      0      3
 |      3      6      8
 |      4      5      3
 |      
 |      Clips using specific lower threshold per column element, with missing values:
 |      
 |      >>> t = pd.Series([2, -4, np.nan, 6, 3])
 |      >>> t
 |      0    2.0
 |      1   -4.0
 |      2    NaN
 |      3    6.0
 |      4    3.0
 |      dtype: float64
 |      
 |      >>> df.clip(t, axis=0)
 |      col_0  col_1
 |      0      9      2
 |      1     -3     -4
 |      2      0      6
 |      3      6      8
 |      4      5      3
 |  
 |  convert_dtypes(self, infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -> 'Self'
 |      Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.
 |      
 |      Parameters
 |      ----------
 |      infer_objects : bool, default True
 |          Whether object dtypes should be converted to the best possible types.
 |      convert_string : bool, default True
 |          Whether object dtypes should be converted to ``StringDtype()``.
 |      convert_integer : bool, default True
 |          Whether, if possible, conversion can be done to integer extension types.
 |      convert_boolean : bool, defaults True
 |          Whether object dtypes should be converted to ``BooleanDtypes()``.
 |      convert_floating : bool, defaults True
 |          Whether, if possible, conversion can be done to floating extension types.
 |          If `convert_integer` is also True, preference will be give to integer
 |          dtypes if the floats can be faithfully casted to integers.
 |      dtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'
 |          Back-end data type applied to the resultant :class:`DataFrame`
 |          (still experimental). Behaviour is as follows:
 |      
 |          * ``"numpy_nullable"``: returns nullable-dtype-backed :class:`DataFrame`
 |            (default).
 |          * ``"pyarrow"``: returns pyarrow-backed nullable :class:`ArrowDtype`
 |            DataFrame.
 |      
 |          .. versionadded:: 2.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Copy of input object with new dtype.
 |      
 |      See Also
 |      --------
 |      infer_objects : Infer dtypes of objects.
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to a numeric type.
 |      
 |      Notes
 |      -----
 |      By default, ``convert_dtypes`` will attempt to convert a Series (or each
 |      Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options
 |      ``convert_string``, ``convert_integer``, ``convert_boolean`` and
 |      ``convert_floating``, it is possible to turn off individual conversions
 |      to ``StringDtype``, the integer extension types, ``BooleanDtype``
 |      or floating extension types, respectively.
 |      
 |      For object-dtyped columns, if ``infer_objects`` is ``True``, use the inference
 |      rules as during normal Series/DataFrame construction.  Then, if possible,
 |      convert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer
 |      or floating extension type, otherwise leave as ``object``.
 |      
 |      If the dtype is integer, convert to an appropriate integer extension type.
 |      
 |      If the dtype is numeric, and consists of all integers, convert to an
 |      appropriate integer extension type. Otherwise, convert to an
 |      appropriate floating extension type.
 |      
 |      In the future, as new dtypes are added that support ``pd.NA``, the results
 |      of this method will change to support those new dtypes.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     {
 |      ...         "a": pd.Series([1, 2, 3], dtype=np.dtype("int32")),
 |      ...         "b": pd.Series(["x", "y", "z"], dtype=np.dtype("O")),
 |      ...         "c": pd.Series([True, False, np.nan], dtype=np.dtype("O")),
 |      ...         "d": pd.Series(["h", "i", np.nan], dtype=np.dtype("O")),
 |      ...         "e": pd.Series([10, np.nan, 20], dtype=np.dtype("float")),
 |      ...         "f": pd.Series([np.nan, 100.5, 200], dtype=np.dtype("float")),
 |      ...     }
 |      ... )
 |      
 |      Start with a DataFrame with default dtypes.
 |      
 |      >>> df
 |         a  b      c    d     e      f
 |      0  1  x   True    h  10.0    NaN
 |      1  2  y  False    i   NaN  100.5
 |      2  3  z    NaN  NaN  20.0  200.0
 |      
 |      >>> df.dtypes
 |      a      int32
 |      b     object
 |      c     object
 |      d     object
 |      e    float64
 |      f    float64
 |      dtype: object
 |      
 |      Convert the DataFrame to use best possible dtypes.
 |      
 |      >>> dfn = df.convert_dtypes()
 |      >>> dfn
 |         a  b      c     d     e      f
 |      0  1  x   True     h    10   <NA>
 |      1  2  y  False     i  <NA>  100.5
 |      2  3  z   <NA>  <NA>    20  200.0
 |      
 |      >>> dfn.dtypes
 |      a             Int32
 |      b    string[python]
 |      c           boolean
 |      d    string[python]
 |      e             Int64
 |      f           Float64
 |      dtype: object
 |      
 |      Start with a Series of strings and missing data represented by ``np.nan``.
 |      
 |      >>> s = pd.Series(["a", "b", np.nan])
 |      >>> s
 |      0      a
 |      1      b
 |      2    NaN
 |      dtype: object
 |      
 |      Obtain a Series with dtype ``StringDtype``.
 |      
 |      >>> s.convert_dtypes()
 |      0       a
 |      1       b
 |      2    <NA>
 |      dtype: string
 |  
 |  copy(self, deep: 'bool_t | None' = True) -> 'Self'
 |      Make a copy of this object's indices and data.
 |      
 |      When ``deep=True`` (default), a new object will be created with a
 |      copy of the calling object's data and indices. Modifications to
 |      the data or indices of the copy will not be reflected in the
 |      original object (see notes below).
 |      
 |      When ``deep=False``, a new object will be created without copying
 |      the calling object's data or index (only references to the data
 |      and index are copied). Any changes to the data of the original
 |      will be reflected in the shallow copy (and vice versa).
 |      
 |      .. note::
 |          The ``deep=False`` behaviour as described above will change
 |          in pandas 3.0. `Copy-on-Write
 |          <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |          will be enabled by default, which means that the "shallow" copy
 |          is that is returned with ``deep=False`` will still avoid making
 |          an eager copy, but changes to the data of the original will *no*
 |          longer be reflected in the shallow copy (or vice versa). Instead,
 |          it makes use of a lazy (deferred) copy mechanism that will copy
 |          the data only when any changes to the original or shallow copy is
 |          made.
 |      
 |          You can already get the future behavior and improvements through
 |          enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Parameters
 |      ----------
 |      deep : bool, default True
 |          Make a deep copy, including a copy of the data and the indices.
 |          With ``deep=False`` neither the indices nor the data are copied.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Object type matches caller.
 |      
 |      Notes
 |      -----
 |      When ``deep=True``, data is copied but actual Python objects
 |      will not be copied recursively, only the reference to the object.
 |      This is in contrast to `copy.deepcopy` in the Standard Library,
 |      which recursively copies object data (see examples below).
 |      
 |      While ``Index`` objects are copied when ``deep=True``, the underlying
 |      numpy array is not copied for performance reasons. Since ``Index`` is
 |      immutable, the underlying data can be safely shared and a copy
 |      is not needed.
 |      
 |      Since pandas is not thread safe, see the
 |      :ref:`gotchas <gotchas.thread-safety>` when copying in a threading
 |      environment.
 |      
 |      When ``copy_on_write`` in pandas config is set to ``True``, the
 |      ``copy_on_write`` config takes effect even when ``deep=False``.
 |      This means that any changes to the copied data would make a new copy
 |      of the data upon write (and vice versa). Changes made to either the
 |      original or copied variable would not be reflected in the counterpart.
 |      See :ref:`Copy_on_Write <copy_on_write>` for more information.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2], index=["a", "b"])
 |      >>> s
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      >>> s_copy = s.copy()
 |      >>> s_copy
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      **Shallow copy versus default (deep) copy:**
 |      
 |      >>> s = pd.Series([1, 2], index=["a", "b"])
 |      >>> deep = s.copy()
 |      >>> shallow = s.copy(deep=False)
 |      
 |      Shallow copy shares data and index with original.
 |      
 |      >>> s is shallow
 |      False
 |      >>> s.values is shallow.values and s.index is shallow.index
 |      True
 |      
 |      Deep copy has own copy of data and index.
 |      
 |      >>> s is deep
 |      False
 |      >>> s.values is deep.values or s.index is deep.index
 |      False
 |      
 |      Updates to the data shared by shallow copy and original is reflected
 |      in both (NOTE: this will no longer be true for pandas >= 3.0);
 |      deep copy remains unchanged.
 |      
 |      >>> s.iloc[0] = 3
 |      >>> shallow.iloc[1] = 4
 |      >>> s
 |      a    3
 |      b    4
 |      dtype: int64
 |      >>> shallow
 |      a    3
 |      b    4
 |      dtype: int64
 |      >>> deep
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      Note that when copying an object containing Python objects, a deep copy
 |      will copy the data, but will not do so recursively. Updating a nested
 |      data object will be reflected in the deep copy.
 |      
 |      >>> s = pd.Series([[1, 2], [3, 4]])
 |      >>> deep = s.copy()
 |      >>> s[0][0] = 10
 |      >>> s
 |      0    [10, 2]
 |      1     [3, 4]
 |      dtype: object
 |      >>> deep
 |      0    [10, 2]
 |      1     [3, 4]
 |      dtype: object
 |      
 |      **Copy-on-Write is set to true**, the shallow copy is not modified
 |      when the original data is changed:
 |      
 |      >>> with pd.option_context("mode.copy_on_write", True):
 |      ...     s = pd.Series([1, 2], index=["a", "b"])
 |      ...     copy = s.copy(deep=False)
 |      ...     s.iloc[0] = 100
 |      ...     s
 |      a    100
 |      b      2
 |      dtype: int64
 |      >>> copy
 |      a    1
 |      b    2
 |      dtype: int64
 |  
 |  describe(self, percentiles=None, include=None, exclude=None) -> 'Self'
 |      Generate descriptive statistics.
 |      
 |      Descriptive statistics include those that summarize the central
 |      tendency, dispersion and shape of a
 |      dataset's distribution, excluding ``NaN`` values.
 |      
 |      Analyzes both numeric and object series, as well
 |      as ``DataFrame`` column sets of mixed data types. The output
 |      will vary depending on what is provided. Refer to the notes
 |      below for more detail.
 |      
 |      Parameters
 |      ----------
 |      percentiles : list-like of numbers, optional
 |          The percentiles to include in the output. All should
 |          fall between 0 and 1. The default is
 |          ``[.25, .5, .75]``, which returns the 25th, 50th, and
 |          75th percentiles.
 |      include : 'all', list-like of dtypes or None (default), optional
 |          A white list of data types to include in the result. Ignored
 |          for ``Series``. Here are the options:
 |      
 |          - 'all' : All columns of the input will be included in the output.
 |          - A list-like of dtypes : Limits the results to the
 |            provided data types.
 |            To limit the result to numeric types submit
 |            ``numpy.number``. To limit it instead to object columns submit
 |            the ``numpy.object`` data type. Strings
 |            can also be used in the style of
 |            ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To
 |            select pandas categorical columns, use ``'category'``
 |          - None (default) : The result will include all numeric columns.
 |      exclude : list-like of dtypes or None (default), optional,
 |          A black list of data types to omit from the result. Ignored
 |          for ``Series``. Here are the options:
 |      
 |          - A list-like of dtypes : Excludes the provided data types
 |            from the result. To exclude numeric types submit
 |            ``numpy.number``. To exclude object columns submit the data
 |            type ``numpy.object``. Strings can also be used in the style of
 |            ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To
 |            exclude pandas categorical columns, use ``'category'``
 |          - None (default) : The result will exclude nothing.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Summary statistics of the Series or Dataframe provided.
 |      
 |      See Also
 |      --------
 |      DataFrame.count: Count number of non-NA/null observations.
 |      DataFrame.max: Maximum of the values in the object.
 |      DataFrame.min: Minimum of the values in the object.
 |      DataFrame.mean: Mean of the values.
 |      DataFrame.std: Standard deviation of the observations.
 |      DataFrame.select_dtypes: Subset of a DataFrame including/excluding
 |          columns based on their dtype.
 |      
 |      Notes
 |      -----
 |      For numeric data, the result's index will include ``count``,
 |      ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and
 |      upper percentiles. By default the lower percentile is ``25`` and the
 |      upper percentile is ``75``. The ``50`` percentile is the
 |      same as the median.
 |      
 |      For object data (e.g. strings or timestamps), the result's index
 |      will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``
 |      is the most common value. The ``freq`` is the most common value's
 |      frequency. Timestamps also include the ``first`` and ``last`` items.
 |      
 |      If multiple object values have the highest count, then the
 |      ``count`` and ``top`` results will be arbitrarily chosen from
 |      among those with the highest count.
 |      
 |      For mixed data types provided via a ``DataFrame``, the default is to
 |      return only an analysis of numeric columns. If the dataframe consists
 |      only of object and categorical data without any numeric columns, the
 |      default is to return an analysis of both the object and categorical
 |      columns. If ``include='all'`` is provided as an option, the result
 |      will include a union of attributes of each type.
 |      
 |      The `include` and `exclude` parameters can be used to limit
 |      which columns in a ``DataFrame`` are analyzed for the output.
 |      The parameters are ignored when analyzing a ``Series``.
 |      
 |      Examples
 |      --------
 |      Describing a numeric ``Series``.
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.describe()
 |      count    3.0
 |      mean     2.0
 |      std      1.0
 |      min      1.0
 |      25%      1.5
 |      50%      2.0
 |      75%      2.5
 |      max      3.0
 |      dtype: float64
 |      
 |      Describing a categorical ``Series``.
 |      
 |      >>> s = pd.Series(['a', 'a', 'b', 'c'])
 |      >>> s.describe()
 |      count     4
 |      unique    3
 |      top       a
 |      freq      2
 |      dtype: object
 |      
 |      Describing a timestamp ``Series``.
 |      
 |      >>> s = pd.Series([
 |      ...     np.datetime64("2000-01-01"),
 |      ...     np.datetime64("2010-01-01"),
 |      ...     np.datetime64("2010-01-01")
 |      ... ])
 |      >>> s.describe()
 |      count                      3
 |      mean     2006-09-01 08:00:00
 |      min      2000-01-01 00:00:00
 |      25%      2004-12-31 12:00:00
 |      50%      2010-01-01 00:00:00
 |      75%      2010-01-01 00:00:00
 |      max      2010-01-01 00:00:00
 |      dtype: object
 |      
 |      Describing a ``DataFrame``. By default only numeric fields
 |      are returned.
 |      
 |      >>> df = pd.DataFrame({'categorical': pd.Categorical(['d', 'e', 'f']),
 |      ...                    'numeric': [1, 2, 3],
 |      ...                    'object': ['a', 'b', 'c']
 |      ...                    })
 |      >>> df.describe()
 |             numeric
 |      count      3.0
 |      mean       2.0
 |      std        1.0
 |      min        1.0
 |      25%        1.5
 |      50%        2.0
 |      75%        2.5
 |      max        3.0
 |      
 |      Describing all columns of a ``DataFrame`` regardless of data type.
 |      
 |      >>> df.describe(include='all')  # doctest: +SKIP
 |             categorical  numeric object
 |      count            3      3.0      3
 |      unique           3      NaN      3
 |      top              f      NaN      a
 |      freq             1      NaN      1
 |      mean           NaN      2.0    NaN
 |      std            NaN      1.0    NaN
 |      min            NaN      1.0    NaN
 |      25%            NaN      1.5    NaN
 |      50%            NaN      2.0    NaN
 |      75%            NaN      2.5    NaN
 |      max            NaN      3.0    NaN
 |      
 |      Describing a column from a ``DataFrame`` by accessing it as
 |      an attribute.
 |      
 |      >>> df.numeric.describe()
 |      count    3.0
 |      mean     2.0
 |      std      1.0
 |      min      1.0
 |      25%      1.5
 |      50%      2.0
 |      75%      2.5
 |      max      3.0
 |      Name: numeric, dtype: float64
 |      
 |      Including only numeric columns in a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=[np.number])
 |             numeric
 |      count      3.0
 |      mean       2.0
 |      std        1.0
 |      min        1.0
 |      25%        1.5
 |      50%        2.0
 |      75%        2.5
 |      max        3.0
 |      
 |      Including only string columns in a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=[object])  # doctest: +SKIP
 |             object
 |      count       3
 |      unique      3
 |      top         a
 |      freq        1
 |      
 |      Including only categorical columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=['category'])
 |             categorical
 |      count            3
 |      unique           3
 |      top              d
 |      freq             1
 |      
 |      Excluding numeric columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(exclude=[np.number])  # doctest: +SKIP
 |             categorical object
 |      count            3      3
 |      unique           3      3
 |      top              f      a
 |      freq             1      1
 |      
 |      Excluding object columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(exclude=[object])  # doctest: +SKIP
 |             categorical  numeric
 |      count            3      3.0
 |      unique           3      NaN
 |      top              f      NaN
 |      freq             1      NaN
 |      mean           NaN      2.0
 |      std            NaN      1.0
 |      min            NaN      1.0
 |      25%            NaN      1.5
 |      50%            NaN      2.0
 |      75%            NaN      2.5
 |      max            NaN      3.0
 |  
 |  droplevel(self, level: 'IndexLabel', axis: 'Axis' = 0) -> 'Self'
 |      Return Series/DataFrame with requested index / column level(s) removed.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, or list-like
 |          If a string is given, must be the name of a level
 |          If list-like, elements must be names or positional indexes
 |          of levels.
 |      
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Axis along which the level(s) is removed:
 |      
 |          * 0 or 'index': remove level(s) in column.
 |          * 1 or 'columns': remove level(s) in row.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Series/DataFrame with requested index / column level(s) removed.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([
 |      ...     [1, 2, 3, 4],
 |      ...     [5, 6, 7, 8],
 |      ...     [9, 10, 11, 12]
 |      ... ]).set_index([0, 1]).rename_axis(['a', 'b'])
 |      
 |      >>> df.columns = pd.MultiIndex.from_tuples([
 |      ...     ('c', 'e'), ('d', 'f')
 |      ... ], names=['level_1', 'level_2'])
 |      
 |      >>> df
 |      level_1   c   d
 |      level_2   e   f
 |      a b
 |      1 2      3   4
 |      5 6      7   8
 |      9 10    11  12
 |      
 |      >>> df.droplevel('a')
 |      level_1   c   d
 |      level_2   e   f
 |      b
 |      2        3   4
 |      6        7   8
 |      10      11  12
 |      
 |      >>> df.droplevel('level_2', axis=1)
 |      level_1   c   d
 |      a b
 |      1 2      3   4
 |      5 6      7   8
 |      9 10    11  12
 |  
 |  equals(self, other: 'object') -> 'bool_t'
 |      Test whether two objects contain the same elements.
 |      
 |      This function allows two Series or DataFrames to be compared against
 |      each other to see if they have the same shape and elements. NaNs in
 |      the same location are considered equal.
 |      
 |      The row/column index do not need to have the same type, as long
 |      as the values are considered equal. Corresponding columns and
 |      index must be of the same dtype.
 |      
 |      Parameters
 |      ----------
 |      other : Series or DataFrame
 |          The other Series or DataFrame to be compared with the first.
 |      
 |      Returns
 |      -------
 |      bool
 |          True if all elements are the same in both objects, False
 |          otherwise.
 |      
 |      See Also
 |      --------
 |      Series.eq : Compare two Series objects of the same length
 |          and return a Series where each element is True if the element
 |          in each Series is equal, False otherwise.
 |      DataFrame.eq : Compare two DataFrame objects of the same shape and
 |          return a DataFrame where each element is True if the respective
 |          element in each DataFrame is equal, False otherwise.
 |      testing.assert_series_equal : Raises an AssertionError if left and
 |          right are not equal. Provides an easy interface to ignore
 |          inequality in dtypes, indexes and precision among others.
 |      testing.assert_frame_equal : Like assert_series_equal, but targets
 |          DataFrames.
 |      numpy.array_equal : Return True if two arrays have the same shape
 |          and elements, False otherwise.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({1: [10], 2: [20]})
 |      >>> df
 |          1   2
 |      0  10  20
 |      
 |      DataFrames df and exactly_equal have the same types and values for
 |      their elements and column labels, which will return True.
 |      
 |      >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})
 |      >>> exactly_equal
 |          1   2
 |      0  10  20
 |      >>> df.equals(exactly_equal)
 |      True
 |      
 |      DataFrames df and different_column_type have the same element
 |      types and values, but have different types for the column labels,
 |      which will still return True.
 |      
 |      >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})
 |      >>> different_column_type
 |         1.0  2.0
 |      0   10   20
 |      >>> df.equals(different_column_type)
 |      True
 |      
 |      DataFrames df and different_data_type have different types for the
 |      same values for their elements, and will return False even though
 |      their column labels are the same values and types.
 |      
 |      >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})
 |      >>> different_data_type
 |            1     2
 |      0  10.0  20.0
 |      >>> df.equals(different_data_type)
 |      False
 |  
 |  ewm(self, com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = <no_default>, times: 'np.ndarray | DataFrame | Series | None' = None, method: "Literal['single', 'table']" = 'single') -> 'ExponentialMovingWindow'
 |      Provide exponentially weighted (EW) calculations.
 |      
 |      Exactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be
 |      provided if ``times`` is not provided. If ``times`` is provided,
 |      ``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.
 |      
 |      Parameters
 |      ----------
 |      com : float, optional
 |          Specify decay in terms of center of mass
 |      
 |          :math:`\alpha = 1 / (1 + com)`, for :math:`com \geq 0`.
 |      
 |      span : float, optional
 |          Specify decay in terms of span
 |      
 |          :math:`\alpha = 2 / (span + 1)`, for :math:`span \geq 1`.
 |      
 |      halflife : float, str, timedelta, optional
 |          Specify decay in terms of half-life
 |      
 |          :math:`\alpha = 1 - \exp\left(-\ln(2) / halflife\right)`, for
 |          :math:`halflife > 0`.
 |      
 |          If ``times`` is specified, a timedelta convertible unit over which an
 |          observation decays to half its value. Only applicable to ``mean()``,
 |          and halflife value will not apply to the other functions.
 |      
 |      alpha : float, optional
 |          Specify smoothing factor :math:`\alpha` directly
 |      
 |          :math:`0 < \alpha \leq 1`.
 |      
 |      min_periods : int, default 0
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |      adjust : bool, default True
 |          Divide by decaying adjustment factor in beginning periods to account
 |          for imbalance in relative weightings (viewing EWMA as a moving average).
 |      
 |          - When ``adjust=True`` (default), the EW function is calculated using weights
 |            :math:`w_i = (1 - \alpha)^i`. For example, the EW moving average of the series
 |            [:math:`x_0, x_1, ..., x_t`] would be:
 |      
 |          .. math::
 |              y_t = \frac{x_t + (1 - \alpha)x_{t-1} + (1 - \alpha)^2 x_{t-2} + ... + (1 -
 |              \alpha)^t x_0}{1 + (1 - \alpha) + (1 - \alpha)^2 + ... + (1 - \alpha)^t}
 |      
 |          - When ``adjust=False``, the exponentially weighted function is calculated
 |            recursively:
 |      
 |          .. math::
 |              \begin{split}
 |                  y_0 &= x_0\\
 |                  y_t &= (1 - \alpha) y_{t-1} + \alpha x_t,
 |              \end{split}
 |      ignore_na : bool, default False
 |          Ignore missing values when calculating weights.
 |      
 |          - When ``ignore_na=False`` (default), weights are based on absolute positions.
 |            For example, the weights of :math:`x_0` and :math:`x_2` used in calculating
 |            the final weighted average of [:math:`x_0`, None, :math:`x_2`] are
 |            :math:`(1-\alpha)^2` and :math:`1` if ``adjust=True``, and
 |            :math:`(1-\alpha)^2` and :math:`\alpha` if ``adjust=False``.
 |      
 |          - When ``ignore_na=True``, weights are based
 |            on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`
 |            used in calculating the final weighted average of
 |            [:math:`x_0`, None, :math:`x_2`] are :math:`1-\alpha` and :math:`1` if
 |            ``adjust=True``, and :math:`1-\alpha` and :math:`\alpha` if ``adjust=False``.
 |      
 |      axis : {0, 1}, default 0
 |          If ``0`` or ``'index'``, calculate across the rows.
 |      
 |          If ``1`` or ``'columns'``, calculate across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      times : np.ndarray, Series, default None
 |      
 |          Only applicable to ``mean()``.
 |      
 |          Times corresponding to the observations. Must be monotonically increasing and
 |          ``datetime64[ns]`` dtype.
 |      
 |          If 1-D array like, a sequence with the same shape as the observations.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |          .. versionadded:: 1.4.0
 |      
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |          Only applicable to ``mean()``
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.ExponentialMovingWindow
 |      
 |      See Also
 |      --------
 |      rolling : Provides rolling window calculations.
 |      expanding : Provides expanding transformations.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.exponentially_weighted>`
 |      for further usage details and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      >>> df.ewm(com=0.5).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      >>> df.ewm(alpha=2 / 3).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      
 |      **adjust**
 |      
 |      >>> df.ewm(com=0.5, adjust=True).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      >>> df.ewm(com=0.5, adjust=False).mean()
 |                B
 |      0  0.000000
 |      1  0.666667
 |      2  1.555556
 |      3  1.555556
 |      4  3.650794
 |      
 |      **ignore_na**
 |      
 |      >>> df.ewm(com=0.5, ignore_na=True).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.225000
 |      >>> df.ewm(com=0.5, ignore_na=False).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      
 |      **times**
 |      
 |      Exponentially weighted mean with weights calculated with a timedelta ``halflife``
 |      relative to ``times``.
 |      
 |      >>> times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']
 |      >>> df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()
 |                B
 |      0  0.000000
 |      1  0.585786
 |      2  1.523889
 |      3  1.523889
 |      4  3.233686
 |  
 |  expanding(self, min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = <no_default>, method: "Literal['single', 'table']" = 'single') -> 'Expanding'
 |      Provide expanding window calculations.
 |      
 |      Parameters
 |      ----------
 |      min_periods : int, default 1
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |      axis : int or str, default 0
 |          If ``0`` or ``'index'``, roll across the rows.
 |      
 |          If ``1`` or ``'columns'``, roll across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Expanding
 |      
 |      See Also
 |      --------
 |      rolling : Provides rolling window calculations.
 |      ewm : Provides exponential weighted functions.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.expanding>` for further usage details
 |      and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"B": [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      **min_periods**
 |      
 |      Expanding sum with 1 vs 3 observations needed to calculate a value.
 |      
 |      >>> df.expanding(1).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  3.0
 |      4  7.0
 |      >>> df.expanding(3).sum()
 |           B
 |      0  NaN
 |      1  NaN
 |      2  3.0
 |      3  3.0
 |      4  7.0
 |  
 |  ffill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by propagating the last valid observation to next valid.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      limit_area : {`None`, 'inside', 'outside'}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],
 |      ...                    [3, 4, np.nan, 1],
 |      ...                    [np.nan, np.nan, np.nan, np.nan],
 |      ...                    [np.nan, 3, np.nan, 4]],
 |      ...                   columns=list("ABCD"))
 |      >>> df
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  NaN  NaN NaN  NaN
 |      3  NaN  3.0 NaN  4.0
 |      
 |      >>> df.ffill()
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  3.0  4.0 NaN  1.0
 |      3  3.0  3.0 NaN  4.0
 |      
 |      >>> ser = pd.Series([1, np.nan, 2, 3])
 |      >>> ser.ffill()
 |      0   1.0
 |      1   1.0
 |      2   2.0
 |      3   3.0
 |      dtype: float64
 |  
 |  fillna(self, value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values using the specified method.
 |      
 |      Parameters
 |      ----------
 |      value : scalar, dict, Series, or DataFrame
 |          Value to use to fill holes (e.g. 0), alternately a
 |          dict/Series/DataFrame of values specifying which value to use for
 |          each index (for a Series) or column (for a DataFrame).  Values not
 |          in the dict/Series/DataFrame will not be filled. This value cannot
 |          be a list.
 |      method : {'backfill', 'bfill', 'ffill', None}, default None
 |          Method to use for filling holes in reindexed Series:
 |      
 |          * ffill: propagate last valid observation forward to next valid.
 |          * backfill / bfill: use next valid observation to fill gap.
 |      
 |          .. deprecated:: 2.1.0
 |              Use ffill or bfill instead.
 |      
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      ffill : Fill values by propagating the last valid observation to next valid.
 |      bfill : Fill values by using the next valid observation to fill the gap.
 |      interpolate : Fill NaN values using interpolation.
 |      reindex : Conform object to new index.
 |      asfreq : Convert TimeSeries to specified frequency.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],
 |      ...                    [3, 4, np.nan, 1],
 |      ...                    [np.nan, np.nan, np.nan, np.nan],
 |      ...                    [np.nan, 3, np.nan, 4]],
 |      ...                   columns=list("ABCD"))
 |      >>> df
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  NaN  NaN NaN  NaN
 |      3  NaN  3.0 NaN  4.0
 |      
 |      Replace all NaN elements with 0s.
 |      
 |      >>> df.fillna(0)
 |           A    B    C    D
 |      0  0.0  2.0  0.0  0.0
 |      1  3.0  4.0  0.0  1.0
 |      2  0.0  0.0  0.0  0.0
 |      3  0.0  3.0  0.0  4.0
 |      
 |      Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,
 |      2, and 3 respectively.
 |      
 |      >>> values = {"A": 0, "B": 1, "C": 2, "D": 3}
 |      >>> df.fillna(value=values)
 |           A    B    C    D
 |      0  0.0  2.0  2.0  0.0
 |      1  3.0  4.0  2.0  1.0
 |      2  0.0  1.0  2.0  3.0
 |      3  0.0  3.0  2.0  4.0
 |      
 |      Only replace the first NaN element.
 |      
 |      >>> df.fillna(value=values, limit=1)
 |           A    B    C    D
 |      0  0.0  2.0  2.0  0.0
 |      1  3.0  4.0  NaN  1.0
 |      2  NaN  1.0  NaN  3.0
 |      3  NaN  3.0  NaN  4.0
 |      
 |      When filling using a DataFrame, replacement happens along
 |      the same column names and same indices
 |      
 |      >>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list("ABCE"))
 |      >>> df.fillna(df2)
 |           A    B    C    D
 |      0  0.0  2.0  0.0  0.0
 |      1  3.0  4.0  0.0  1.0
 |      2  0.0  0.0  0.0  NaN
 |      3  0.0  3.0  0.0  4.0
 |      
 |      Note that column D is not affected since it is not present in df2.
 |  
 |  filter(self, items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -> 'Self'
 |      Subset the dataframe rows or columns according to the specified index labels.
 |      
 |      Note that this routine does not filter a dataframe on its
 |      contents. The filter is applied to the labels of the index.
 |      
 |      Parameters
 |      ----------
 |      items : list-like
 |          Keep labels from axis which are in items.
 |      like : str
 |          Keep labels from axis for which "like in label == True".
 |      regex : str (regular expression)
 |          Keep labels from axis for which re.search(regex, label) == True.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          The axis to filter on, expressed either as an index (int)
 |          or axis name (str). By default this is the info axis, 'columns' for
 |          DataFrame. For `Series` this parameter is unused and defaults to `None`.
 |      
 |      Returns
 |      -------
 |      same type as input object
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Access a group of rows and columns
 |          by label(s) or a boolean array.
 |      
 |      Notes
 |      -----
 |      The ``items``, ``like``, and ``regex`` parameters are
 |      enforced to be mutually exclusive.
 |      
 |      ``axis`` defaults to the info axis that is used when indexing
 |      with ``[]``.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),
 |      ...                   index=['mouse', 'rabbit'],
 |      ...                   columns=['one', 'two', 'three'])
 |      >>> df
 |              one  two  three
 |      mouse     1    2      3
 |      rabbit    4    5      6
 |      
 |      >>> # select columns by name
 |      >>> df.filter(items=['one', 'three'])
 |               one  three
 |      mouse     1      3
 |      rabbit    4      6
 |      
 |      >>> # select columns by regular expression
 |      >>> df.filter(regex='e$', axis=1)
 |               one  three
 |      mouse     1      3
 |      rabbit    4      6
 |      
 |      >>> # select rows containing 'bbi'
 |      >>> df.filter(like='bbi', axis=0)
 |               one  two  three
 |      rabbit    4    5      6
 |  
 |  first(self, offset) -> 'Self'
 |      Select initial periods of time series data based on a date offset.
 |      
 |      .. deprecated:: 2.1
 |          :meth:`.first` is deprecated and will be removed in a future version.
 |          Please create a mask and filter using `.loc` instead.
 |      
 |      For a DataFrame with a sorted DatetimeIndex, this function can
 |      select the first few rows based on a date offset.
 |      
 |      Parameters
 |      ----------
 |      offset : str, DateOffset or dateutil.relativedelta
 |          The offset length of the data that will be selected. For instance,
 |          '1ME' will display all the rows having their index within the first month.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A subset of the caller.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      last : Select final periods of time series based on a date offset.
 |      at_time : Select values at a particular time of the day.
 |      between_time : Select values between particular times of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Get the rows for the first 3 days:
 |      
 |      >>> ts.first('3D')
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      
 |      Notice the data for 3 first calendar days were returned, not the first
 |      3 days observed in the dataset, and therefore data for 2018-04-13 was
 |      not returned.
 |  
 |  first_valid_index(self) -> 'Hashable | None'
 |      Return index for first non-NA value or None, if no non-NA value is found.
 |      
 |      Returns
 |      -------
 |      type of index
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([None, 3, 4])
 |      >>> s.first_valid_index()
 |      1
 |      >>> s.last_valid_index()
 |      2
 |      
 |      >>> s = pd.Series([None, None])
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If all elements in Series are NA/null, returns None.
 |      
 |      >>> s = pd.Series()
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If Series is empty, returns None.
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})
 |      >>> df
 |           A      B
 |      0  NaN    NaN
 |      1  NaN    3.0
 |      2  2.0    4.0
 |      >>> df.first_valid_index()
 |      1
 |      >>> df.last_valid_index()
 |      2
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})
 |      >>> df
 |           A      B
 |      0  None   None
 |      1  None   None
 |      2  None   None
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If all elements in DataFrame are NA/null, returns None.
 |      
 |      >>> df = pd.DataFrame()
 |      >>> df
 |      Empty DataFrame
 |      Columns: []
 |      Index: []
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If DataFrame is empty, returns None.
 |  
 |  get(self, key, default=None)
 |      Get item from object for given key (ex: DataFrame column).
 |      
 |      Returns default value if not found.
 |      
 |      Parameters
 |      ----------
 |      key : object
 |      
 |      Returns
 |      -------
 |      same type as items contained in object
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     [
 |      ...         [24.3, 75.7, "high"],
 |      ...         [31, 87.8, "high"],
 |      ...         [22, 71.6, "medium"],
 |      ...         [35, 95, "medium"],
 |      ...     ],
 |      ...     columns=["temp_celsius", "temp_fahrenheit", "windspeed"],
 |      ...     index=pd.date_range(start="2014-02-12", end="2014-02-15", freq="D"),
 |      ... )
 |      
 |      >>> df
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          24.3             75.7      high
 |      2014-02-13          31.0             87.8      high
 |      2014-02-14          22.0             71.6    medium
 |      2014-02-15          35.0             95.0    medium
 |      
 |      >>> df.get(["temp_celsius", "windspeed"])
 |                  temp_celsius windspeed
 |      2014-02-12          24.3      high
 |      2014-02-13          31.0      high
 |      2014-02-14          22.0    medium
 |      2014-02-15          35.0    medium
 |      
 |      >>> ser = df['windspeed']
 |      >>> ser.get('2014-02-13')
 |      'high'
 |      
 |      If the key isn't found, the default value will be used.
 |      
 |      >>> df.get(["temp_celsius", "temp_kelvin"], default="default_value")
 |      'default_value'
 |      
 |      >>> ser.get('2014-02-10', '[unknown]')
 |      '[unknown]'
 |  
 |  head(self, n: 'int' = 5) -> 'Self'
 |      Return the first `n` rows.
 |      
 |      This function returns the first `n` rows for the object based
 |      on position. It is useful for quickly testing if your object
 |      has the right type of data in it.
 |      
 |      For negative values of `n`, this function returns all rows except
 |      the last `|n|` rows, equivalent to ``df[:n]``.
 |      
 |      If n is larger than the number of rows, this function returns all rows.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Number of rows to select.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          The first `n` rows of the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrame.tail: Returns the last `n` rows.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',
 |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})
 |      >>> df
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |      6      shark
 |      7      whale
 |      8      zebra
 |      
 |      Viewing the first 5 lines
 |      
 |      >>> df.head()
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      
 |      Viewing the first `n` lines (three in this case)
 |      
 |      >>> df.head(3)
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      
 |      For negative values of `n`
 |      
 |      >>> df.head(-3)
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |  
 |  infer_objects(self, copy: 'bool_t | None' = None) -> 'Self'
 |      Attempt to infer better dtypes for object columns.
 |      
 |      Attempts soft conversion of object-dtyped
 |      columns, leaving non-object and unconvertible
 |      columns unchanged. The inference rules are the
 |      same as during normal Series/DataFrame construction.
 |      
 |      Parameters
 |      ----------
 |      copy : bool, default True
 |          Whether to make a copy for non-object or non-inferable columns
 |          or Series.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      same type as input object
 |      
 |      See Also
 |      --------
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to numeric type.
 |      convert_dtypes : Convert argument to best possible dtype.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": ["a", 1, 2, 3]})
 |      >>> df = df.iloc[1:]
 |      >>> df
 |         A
 |      1  1
 |      2  2
 |      3  3
 |      
 |      >>> df.dtypes
 |      A    object
 |      dtype: object
 |      
 |      >>> df.infer_objects().dtypes
 |      A    int64
 |      dtype: object
 |  
 |  interpolate(self, method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: "Literal['forward', 'backward', 'both'] | None" = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: "Literal['infer'] | None | lib.NoDefault" = <no_default>, **kwargs) -> 'Self | None'
 |      Fill NaN values using an interpolation method.
 |      
 |      Please note that only ``method='linear'`` is supported for
 |      DataFrame/Series with a MultiIndex.
 |      
 |      Parameters
 |      ----------
 |      method : str, default 'linear'
 |          Interpolation technique to use. One of:
 |      
 |          * 'linear': Ignore the index and treat the values as equally
 |            spaced. This is the only method supported on MultiIndexes.
 |          * 'time': Works on daily and higher resolution data to interpolate
 |            given length of interval.
 |          * 'index', 'values': use the actual numerical values of the index.
 |          * 'pad': Fill in NaNs using existing values.
 |          * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',
 |            'barycentric', 'polynomial': Passed to
 |            `scipy.interpolate.interp1d`, whereas 'spline' is passed to
 |            `scipy.interpolate.UnivariateSpline`. These methods use the numerical
 |            values of the index.  Both 'polynomial' and 'spline' require that
 |            you also specify an `order` (int), e.g.
 |            ``df.interpolate(method='polynomial', order=5)``. Note that,
 |            `slinear` method in Pandas refers to the Scipy first order `spline`
 |            instead of Pandas first order `spline`.
 |          * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',
 |            'cubicspline': Wrappers around the SciPy interpolation methods of
 |            similar names. See `Notes`.
 |          * 'from_derivatives': Refers to
 |            `scipy.interpolate.BPoly.from_derivatives`.
 |      
 |      axis : {{0 or 'index', 1 or 'columns', None}}, default None
 |          Axis to interpolate along. For `Series` this parameter is unused
 |          and defaults to 0.
 |      limit : int, optional
 |          Maximum number of consecutive NaNs to fill. Must be greater than
 |          0.
 |      inplace : bool, default False
 |          Update the data in place if possible.
 |      limit_direction : {{'forward', 'backward', 'both'}}, Optional
 |          Consecutive NaNs will be filled in this direction.
 |      
 |          If limit is specified:
 |              * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.
 |              * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be
 |                'backwards'.
 |      
 |          If 'limit' is not specified:
 |              * If 'method' is 'backfill' or 'bfill', the default is 'backward'
 |              * else the default is 'forward'
 |      
 |          raises ValueError if `limit_direction` is 'forward' or 'both' and
 |              method is 'backfill' or 'bfill'.
 |          raises ValueError if `limit_direction` is 'backward' or 'both' and
 |              method is 'pad' or 'ffill'.
 |      
 |      limit_area : {{`None`, 'inside', 'outside'}}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |      downcast : optional, 'infer' or None, defaults to None
 |          Downcast dtypes if possible.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |      ``**kwargs`` : optional
 |          Keyword arguments to pass on to the interpolating function.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame or None
 |          Returns the same object type as the caller, interpolated at
 |          some or all ``NaN`` values or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      fillna : Fill missing values using different methods.
 |      scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials
 |          (Akima interpolator).
 |      scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the
 |          Bernstein basis.
 |      scipy.interpolate.interp1d : Interpolate a 1-D function.
 |      scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh
 |          interpolator).
 |      scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic
 |          interpolation.
 |      scipy.interpolate.CubicSpline : Cubic spline data interpolator.
 |      
 |      Notes
 |      -----
 |      The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'
 |      methods are wrappers around the respective SciPy implementations of
 |      similar names. These use the actual numerical values of the index.
 |      For more information on their behavior, see the
 |      `SciPy documentation
 |      <https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.
 |      
 |      Examples
 |      --------
 |      Filling in ``NaN`` in a :class:`~pandas.Series` via linear
 |      interpolation.
 |      
 |      >>> s = pd.Series([0, 1, np.nan, 3])
 |      >>> s
 |      0    0.0
 |      1    1.0
 |      2    NaN
 |      3    3.0
 |      dtype: float64
 |      >>> s.interpolate()
 |      0    0.0
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      dtype: float64
 |      
 |      Filling in ``NaN`` in a Series via polynomial interpolation or splines:
 |      Both 'polynomial' and 'spline' methods require that you also specify
 |      an ``order`` (int).
 |      
 |      >>> s = pd.Series([0, 2, np.nan, 8])
 |      >>> s.interpolate(method='polynomial', order=2)
 |      0    0.000000
 |      1    2.000000
 |      2    4.666667
 |      3    8.000000
 |      dtype: float64
 |      
 |      Fill the DataFrame forward (that is, going down) along each column
 |      using linear interpolation.
 |      
 |      Note how the last entry in column 'a' is interpolated differently,
 |      because there is no entry after it to use for interpolation.
 |      Note how the first entry in column 'b' remains ``NaN``, because there
 |      is no entry before it to use for interpolation.
 |      
 |      >>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),
 |      ...                    (np.nan, 2.0, np.nan, np.nan),
 |      ...                    (2.0, 3.0, np.nan, 9.0),
 |      ...                    (np.nan, 4.0, -4.0, 16.0)],
 |      ...                   columns=list('abcd'))
 |      >>> df
 |           a    b    c     d
 |      0  0.0  NaN -1.0   1.0
 |      1  NaN  2.0  NaN   NaN
 |      2  2.0  3.0  NaN   9.0
 |      3  NaN  4.0 -4.0  16.0
 |      >>> df.interpolate(method='linear', limit_direction='forward', axis=0)
 |           a    b    c     d
 |      0  0.0  NaN -1.0   1.0
 |      1  1.0  2.0 -2.0   5.0
 |      2  2.0  3.0 -3.0   9.0
 |      3  2.0  4.0 -4.0  16.0
 |      
 |      Using polynomial interpolation.
 |      
 |      >>> df['d'].interpolate(method='polynomial', order=2)
 |      0     1.0
 |      1     4.0
 |      2     9.0
 |      3    16.0
 |      Name: d, dtype: float64
 |  
 |  keys(self) -> 'Index'
 |      Get the 'info axis' (see Indexing for more).
 |      
 |      This is index for Series, columns for DataFrame.
 |      
 |      Returns
 |      -------
 |      Index
 |          Info axis.
 |      
 |      Examples
 |      --------
 |      >>> d = pd.DataFrame(data={'A': [1, 2, 3], 'B': [0, 4, 8]},
 |      ...                  index=['a', 'b', 'c'])
 |      >>> d
 |         A  B
 |      a  1  0
 |      b  2  4
 |      c  3  8
 |      >>> d.keys()
 |      Index(['A', 'B'], dtype='object')
 |  
 |  last(self, offset) -> 'Self'
 |      Select final periods of time series data based on a date offset.
 |      
 |      .. deprecated:: 2.1
 |          :meth:`.last` is deprecated and will be removed in a future version.
 |          Please create a mask and filter using `.loc` instead.
 |      
 |      For a DataFrame with a sorted DatetimeIndex, this function
 |      selects the last few rows based on a date offset.
 |      
 |      Parameters
 |      ----------
 |      offset : str, DateOffset, dateutil.relativedelta
 |          The offset length of the data that will be selected. For instance,
 |          '3D' will display all the rows having their index within the last 3 days.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A subset of the caller.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      first : Select initial periods of time series based on a date offset.
 |      at_time : Select values at a particular time of the day.
 |      between_time : Select values between particular times of the day.
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 2.1.0
 |          Please create a mask and filter using `.loc` instead
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Get the rows for the last 3 days:
 |      
 |      >>> ts.last('3D')  # doctest: +SKIP
 |                  A
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Notice the data for 3 last calendar days were returned, not the last
 |      3 observed days in the dataset, and therefore data for 2018-04-11 was
 |      not returned.
 |  
 |  last_valid_index(self) -> 'Hashable | None'
 |      Return index for last non-NA value or None, if no non-NA value is found.
 |      
 |      Returns
 |      -------
 |      type of index
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([None, 3, 4])
 |      >>> s.first_valid_index()
 |      1
 |      >>> s.last_valid_index()
 |      2
 |      
 |      >>> s = pd.Series([None, None])
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If all elements in Series are NA/null, returns None.
 |      
 |      >>> s = pd.Series()
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If Series is empty, returns None.
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})
 |      >>> df
 |           A      B
 |      0  NaN    NaN
 |      1  NaN    3.0
 |      2  2.0    4.0
 |      >>> df.first_valid_index()
 |      1
 |      >>> df.last_valid_index()
 |      2
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})
 |      >>> df
 |           A      B
 |      0  None   None
 |      1  None   None
 |      2  None   None
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If all elements in DataFrame are NA/null, returns None.
 |      
 |      >>> df = pd.DataFrame()
 |      >>> df
 |      Empty DataFrame
 |      Columns: []
 |      Index: []
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If DataFrame is empty, returns None.
 |  
 |  mask(self, cond, other=<no_default>, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'
 |      Replace values where the condition is True.
 |      
 |      Parameters
 |      ----------
 |      cond : bool Series/DataFrame, array-like, or callable
 |          Where `cond` is False, keep the original value. Where
 |          True, replace with corresponding value from `other`.
 |          If `cond` is callable, it is computed on the Series/DataFrame and
 |          should return boolean Series/DataFrame or array. The callable must
 |          not change input Series/DataFrame (though pandas doesn't check it).
 |      other : scalar, Series/DataFrame, or callable
 |          Entries where `cond` is True are replaced with
 |          corresponding value from `other`.
 |          If other is callable, it is computed on the Series/DataFrame and
 |          should return scalar or Series/DataFrame. The callable must not
 |          change input Series/DataFrame (though pandas doesn't check it).
 |          If not specified, entries will be filled with the corresponding
 |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension
 |          dtypes).
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      axis : int, default None
 |          Alignment axis if needed. For `Series` this parameter is
 |          unused and defaults to 0.
 |      level : int, default None
 |          Alignment level if needed.
 |      
 |      Returns
 |      -------
 |      Same type as caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      :func:`DataFrame.where` : Return an object of same shape as
 |          self.
 |      
 |      Notes
 |      -----
 |      The mask method is an application of the if-then idiom. For each
 |      element in the calling DataFrame, if ``cond`` is ``False`` the
 |      element is used; otherwise the corresponding element from the DataFrame
 |      ``other`` is used. If the axis of ``other`` does not align with axis of
 |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with
 |      True.
 |      
 |      The signature for :func:`DataFrame.where` differs from
 |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to
 |      ``np.where(m, df1, df2)``.
 |      
 |      For further details and examples see the ``mask`` documentation in
 |      :ref:`indexing <indexing.where_mask>`.
 |      
 |      The dtype of the object takes precedence. The fill value is casted to
 |      the object's dtype, if this can be done losslessly.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(range(5))
 |      >>> s.where(s > 0)
 |      0    NaN
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      4    4.0
 |      dtype: float64
 |      >>> s.mask(s > 0)
 |      0    0.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      >>> s = pd.Series(range(5))
 |      >>> t = pd.Series([True, False])
 |      >>> s.where(t, 99)
 |      0     0
 |      1    99
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      >>> s.mask(t, 99)
 |      0    99
 |      1     1
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      
 |      >>> s.where(s > 1, 10)
 |      0    10
 |      1    10
 |      2    2
 |      3    3
 |      4    4
 |      dtype: int64
 |      >>> s.mask(s > 1, 10)
 |      0     0
 |      1     1
 |      2    10
 |      3    10
 |      4    10
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  2  3
 |      2  4  5
 |      3  6  7
 |      4  8  9
 |      >>> m = df % 3 == 0
 |      >>> df.where(m, -df)
 |         A  B
 |      0  0 -1
 |      1 -2  3
 |      2 -4 -5
 |      3  6 -7
 |      4 -8  9
 |      >>> df.where(m, -df) == np.where(m, df, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |      >>> df.where(m, -df) == df.mask(~m, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |  
 |  pad(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by propagating the last valid observation to next valid.
 |      
 |      .. deprecated:: 2.0
 |      
 |          Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.ffill` or :meth:`Series.ffill`.
 |  
 |  pct_change(self, periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, freq=None, **kwargs) -> 'Self'
 |      Fractional change between the current and a prior element.
 |      
 |      Computes the fractional change from the immediately previous row by
 |      default. This is useful in comparing the fraction of change in a time
 |      series of elements.
 |      
 |      .. note::
 |      
 |          Despite the name of this method, it calculates fractional change
 |          (also known as per unit change or relative change) and not
 |          percentage change. If you need the percentage change, multiply
 |          these values by 100.
 |      
 |      Parameters
 |      ----------
 |      periods : int, default 1
 |          Periods to shift for forming percent change.
 |      fill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default 'pad'
 |          How to handle NAs **before** computing percent changes.
 |      
 |          .. deprecated:: 2.1
 |              All options of `fill_method` are deprecated except `fill_method=None`.
 |      
 |      limit : int, default None
 |          The number of consecutive NAs to fill before stopping.
 |      
 |          .. deprecated:: 2.1
 |      
 |      freq : DateOffset, timedelta, or str, optional
 |          Increment to use from time series API (e.g. 'ME' or BDay()).
 |      **kwargs
 |          Additional keyword arguments are passed into
 |          `DataFrame.shift` or `Series.shift`.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          The same type as the calling object.
 |      
 |      See Also
 |      --------
 |      Series.diff : Compute the difference of two elements in a Series.
 |      DataFrame.diff : Compute the difference of two elements in a DataFrame.
 |      Series.shift : Shift the index by some number of periods.
 |      DataFrame.shift : Shift the index by some number of periods.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([90, 91, 85])
 |      >>> s
 |      0    90
 |      1    91
 |      2    85
 |      dtype: int64
 |      
 |      >>> s.pct_change()
 |      0         NaN
 |      1    0.011111
 |      2   -0.065934
 |      dtype: float64
 |      
 |      >>> s.pct_change(periods=2)
 |      0         NaN
 |      1         NaN
 |      2   -0.055556
 |      dtype: float64
 |      
 |      See the percentage change in a Series where filling NAs with last
 |      valid observation forward to next valid.
 |      
 |      >>> s = pd.Series([90, 91, None, 85])
 |      >>> s
 |      0    90.0
 |      1    91.0
 |      2     NaN
 |      3    85.0
 |      dtype: float64
 |      
 |      >>> s.ffill().pct_change()
 |      0         NaN
 |      1    0.011111
 |      2    0.000000
 |      3   -0.065934
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      Percentage change in French franc, Deutsche Mark, and Italian lira from
 |      1980-01-01 to 1980-03-01.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'FR': [4.0405, 4.0963, 4.3149],
 |      ...     'GR': [1.7246, 1.7482, 1.8519],
 |      ...     'IT': [804.74, 810.01, 860.13]},
 |      ...     index=['1980-01-01', '1980-02-01', '1980-03-01'])
 |      >>> df
 |                      FR      GR      IT
 |      1980-01-01  4.0405  1.7246  804.74
 |      1980-02-01  4.0963  1.7482  810.01
 |      1980-03-01  4.3149  1.8519  860.13
 |      
 |      >>> df.pct_change()
 |                        FR        GR        IT
 |      1980-01-01       NaN       NaN       NaN
 |      1980-02-01  0.013810  0.013684  0.006549
 |      1980-03-01  0.053365  0.059318  0.061876
 |      
 |      Percentage of change in GOOG and APPL stock volume. Shows computing
 |      the percentage change between columns.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     '2016': [1769950, 30586265],
 |      ...     '2015': [1500923, 40912316],
 |      ...     '2014': [1371819, 41403351]},
 |      ...     index=['GOOG', 'APPL'])
 |      >>> df
 |                2016      2015      2014
 |      GOOG   1769950   1500923   1371819
 |      APPL  30586265  40912316  41403351
 |      
 |      >>> df.pct_change(axis='columns', periods=-1)
 |                2016      2015  2014
 |      GOOG  0.179241  0.094112   NaN
 |      APPL -0.252395 -0.011860   NaN
 |  
 |  pipe(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -> 'T'
 |      Apply chainable functions that expect Series or DataFrames.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          Function to apply to the Series/DataFrame.
 |          ``args``, and ``kwargs`` are passed into ``func``.
 |          Alternatively a ``(callable, data_keyword)`` tuple where
 |          ``data_keyword`` is a string indicating the keyword of
 |          ``callable`` that expects the Series/DataFrame.
 |      *args : iterable, optional
 |          Positional arguments passed into ``func``.
 |      **kwargs : mapping, optional
 |          A dictionary of keyword arguments passed into ``func``.
 |      
 |      Returns
 |      -------
 |      the return type of ``func``.
 |      
 |      See Also
 |      --------
 |      DataFrame.apply : Apply a function along input axis of DataFrame.
 |      DataFrame.map : Apply a function elementwise on a whole DataFrame.
 |      Series.map : Apply a mapping correspondence on a
 |          :class:`~pandas.Series`.
 |      
 |      Notes
 |      -----
 |      Use ``.pipe`` when chaining together functions that expect
 |      Series, DataFrames or GroupBy objects.
 |      
 |      Examples
 |      --------
 |      Constructing a income DataFrame from a dictionary.
 |      
 |      >>> data = [[8000, 1000], [9500, np.nan], [5000, 2000]]
 |      >>> df = pd.DataFrame(data, columns=['Salary', 'Others'])
 |      >>> df
 |         Salary  Others
 |      0    8000  1000.0
 |      1    9500     NaN
 |      2    5000  2000.0
 |      
 |      Functions that perform tax reductions on an income DataFrame.
 |      
 |      >>> def subtract_federal_tax(df):
 |      ...     return df * 0.9
 |      >>> def subtract_state_tax(df, rate):
 |      ...     return df * (1 - rate)
 |      >>> def subtract_national_insurance(df, rate, rate_increase):
 |      ...     new_rate = rate + rate_increase
 |      ...     return df * (1 - new_rate)
 |      
 |      Instead of writing
 |      
 |      >>> subtract_national_insurance(
 |      ...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),
 |      ...     rate=0.05,
 |      ...     rate_increase=0.02)  # doctest: +SKIP
 |      
 |      You can write
 |      
 |      >>> (
 |      ...     df.pipe(subtract_federal_tax)
 |      ...     .pipe(subtract_state_tax, rate=0.12)
 |      ...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)
 |      ... )
 |          Salary   Others
 |      0  5892.48   736.56
 |      1  6997.32      NaN
 |      2  3682.80  1473.12
 |      
 |      If you have a function that takes the data as (say) the second
 |      argument, pass a tuple indicating which keyword expects the
 |      data. For example, suppose ``national_insurance`` takes its data as ``df``
 |      in the second argument:
 |      
 |      >>> def subtract_national_insurance(rate, df, rate_increase):
 |      ...     new_rate = rate + rate_increase
 |      ...     return df * (1 - new_rate)
 |      >>> (
 |      ...     df.pipe(subtract_federal_tax)
 |      ...     .pipe(subtract_state_tax, rate=0.12)
 |      ...     .pipe(
 |      ...         (subtract_national_insurance, 'df'),
 |      ...         rate=0.05,
 |      ...         rate_increase=0.02
 |      ...     )
 |      ... )
 |          Salary   Others
 |      0  5892.48   736.56
 |      1  6997.32      NaN
 |      2  3682.80  1473.12
 |  
 |  rank(self, axis: 'Axis' = 0, method: "Literal['average', 'min', 'max', 'first', 'dense']" = 'average', numeric_only: 'bool_t' = False, na_option: "Literal['keep', 'top', 'bottom']" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -> 'Self'
 |      Compute numerical data ranks (1 through n) along axis.
 |      
 |      By default, equal values are assigned a rank that is the average of the
 |      ranks of those values.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Index to direct ranking.
 |          For `Series` this parameter is unused and defaults to 0.
 |      method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'
 |          How to rank the group of records that have the same value (i.e. ties):
 |      
 |          * average: average rank of the group
 |          * min: lowest rank in the group
 |          * max: highest rank in the group
 |          * first: ranks assigned in order they appear in the array
 |          * dense: like 'min', but rank always increases by 1 between groups.
 |      
 |      numeric_only : bool, default False
 |          For DataFrame objects, rank only numeric columns if set to True.
 |      
 |          .. versionchanged:: 2.0.0
 |              The default value of ``numeric_only`` is now ``False``.
 |      
 |      na_option : {'keep', 'top', 'bottom'}, default 'keep'
 |          How to rank NaN values:
 |      
 |          * keep: assign NaN rank to NaN values
 |          * top: assign lowest rank to NaN values
 |          * bottom: assign highest rank to NaN values
 |      
 |      ascending : bool, default True
 |          Whether or not the elements should be ranked in ascending order.
 |      pct : bool, default False
 |          Whether or not to display the returned rankings in percentile
 |          form.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          Return a Series or DataFrame with data ranks as values.
 |      
 |      See Also
 |      --------
 |      core.groupby.DataFrameGroupBy.rank : Rank of values within each group.
 |      core.groupby.SeriesGroupBy.rank : Rank of values within each group.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',
 |      ...                                    'spider', 'snake'],
 |      ...                         'Number_legs': [4, 2, 4, 8, np.nan]})
 |      >>> df
 |          Animal  Number_legs
 |      0      cat          4.0
 |      1  penguin          2.0
 |      2      dog          4.0
 |      3   spider          8.0
 |      4    snake          NaN
 |      
 |      Ties are assigned the mean of the ranks (by default) for the group.
 |      
 |      >>> s = pd.Series(range(5), index=list("abcde"))
 |      >>> s["d"] = s["b"]
 |      >>> s.rank()
 |      a    1.0
 |      b    2.5
 |      c    4.0
 |      d    2.5
 |      e    5.0
 |      dtype: float64
 |      
 |      The following example shows how the method behaves with the above
 |      parameters:
 |      
 |      * default_rank: this is the default behaviour obtained without using
 |        any parameter.
 |      * max_rank: setting ``method = 'max'`` the records that have the
 |        same values are ranked using the highest rank (e.g.: since 'cat'
 |        and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)
 |      * NA_bottom: choosing ``na_option = 'bottom'``, if there are records
 |        with NaN values they are placed at the bottom of the ranking.
 |      * pct_rank: when setting ``pct = True``, the ranking is expressed as
 |        percentile rank.
 |      
 |      >>> df['default_rank'] = df['Number_legs'].rank()
 |      >>> df['max_rank'] = df['Number_legs'].rank(method='max')
 |      >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')
 |      >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)
 |      >>> df
 |          Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank
 |      0      cat          4.0           2.5       3.0        2.5     0.625
 |      1  penguin          2.0           1.0       1.0        1.0     0.250
 |      2      dog          4.0           2.5       3.0        2.5     0.625
 |      3   spider          8.0           4.0       4.0        4.0     1.000
 |      4    snake          NaN           NaN       NaN        5.0       NaN
 |  
 |  reindex_like(self, other, method: "Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Self'
 |      Return an object with matching indices as other object.
 |      
 |      Conform the object to the same index on all axes. Optional
 |      filling logic, placing NaN in locations having no value
 |      in the previous index. A new object is produced unless the
 |      new index is equivalent to the current one and copy=False.
 |      
 |      Parameters
 |      ----------
 |      other : Object of the same data type
 |          Its row and column indices are used to define the new indices
 |          of this object.
 |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}
 |          Method to use for filling holes in reindexed DataFrame.
 |          Please note: this is only applicable to DataFrames/Series with a
 |          monotonically increasing/decreasing index.
 |      
 |          * None (default): don't fill gaps
 |          * pad / ffill: propagate last valid observation forward to next
 |            valid
 |          * backfill / bfill: use next valid observation to fill gap
 |          * nearest: use nearest valid observations to fill gap.
 |      
 |      copy : bool, default True
 |          Return a new object, even if the passed indexes are the same.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      limit : int, default None
 |          Maximum number of consecutive labels to fill for inexact matches.
 |      tolerance : optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations must
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Same type as caller, but with changed indices on each axis.
 |      
 |      See Also
 |      --------
 |      DataFrame.set_index : Set row labels.
 |      DataFrame.reset_index : Remove row labels or move them to new columns.
 |      DataFrame.reindex : Change to new indices or expand indices.
 |      
 |      Notes
 |      -----
 |      Same as calling
 |      ``.reindex(index=other.index, columns=other.columns,...)``.
 |      
 |      Examples
 |      --------
 |      >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],
 |      ...                     [31, 87.8, 'high'],
 |      ...                     [22, 71.6, 'medium'],
 |      ...                     [35, 95, 'medium']],
 |      ...                    columns=['temp_celsius', 'temp_fahrenheit',
 |      ...                             'windspeed'],
 |      ...                    index=pd.date_range(start='2014-02-12',
 |      ...                                        end='2014-02-15', freq='D'))
 |      
 |      >>> df1
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          24.3             75.7      high
 |      2014-02-13          31.0             87.8      high
 |      2014-02-14          22.0             71.6    medium
 |      2014-02-15          35.0             95.0    medium
 |      
 |      >>> df2 = pd.DataFrame([[28, 'low'],
 |      ...                     [30, 'low'],
 |      ...                     [35.1, 'medium']],
 |      ...                    columns=['temp_celsius', 'windspeed'],
 |      ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',
 |      ...                                            '2014-02-15']))
 |      
 |      >>> df2
 |                  temp_celsius windspeed
 |      2014-02-12          28.0       low
 |      2014-02-13          30.0       low
 |      2014-02-15          35.1    medium
 |      
 |      >>> df2.reindex_like(df1)
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          28.0              NaN       low
 |      2014-02-13          30.0              NaN       low
 |      2014-02-14           NaN              NaN       NaN
 |      2014-02-15          35.1              NaN    medium
 |  
 |  rename_axis(self, mapper: 'IndexLabel | lib.NoDefault' = <no_default>, *, index=<no_default>, columns=<no_default>, axis: 'Axis' = 0, copy: 'bool_t | None' = None, inplace: 'bool_t' = False) -> 'Self | None'
 |      Set the name of the axis for the index or columns.
 |      
 |      Parameters
 |      ----------
 |      mapper : scalar, list-like, optional
 |          Value to set the axis name attribute.
 |      index, columns : scalar, list-like, dict-like or function, optional
 |          A scalar, list-like, dict-like or functions transformations to
 |          apply to that axis' values.
 |          Note that the ``columns`` parameter is not allowed if the
 |          object is a Series. This parameter only apply for DataFrame
 |          type objects.
 |      
 |          Use either ``mapper`` and ``axis`` to
 |          specify the axis to target with ``mapper``, or ``index``
 |          and/or ``columns``.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to rename. For `Series` this parameter is unused and defaults to 0.
 |      copy : bool, default None
 |          Also copy underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      inplace : bool, default False
 |          Modifies the object directly, instead of creating a new Series
 |          or DataFrame.
 |      
 |      Returns
 |      -------
 |      Series, DataFrame, or None
 |          The same type as the caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.rename : Alter Series index labels or name.
 |      DataFrame.rename : Alter DataFrame index labels or name.
 |      Index.rename : Set new names on index.
 |      
 |      Notes
 |      -----
 |      ``DataFrame.rename_axis`` supports two calling conventions
 |      
 |      * ``(index=index_mapper, columns=columns_mapper, ...)``
 |      * ``(mapper, axis={'index', 'columns'}, ...)``
 |      
 |      The first calling convention will only modify the names of
 |      the index and/or the names of the Index object that is the columns.
 |      In this case, the parameter ``copy`` is ignored.
 |      
 |      The second calling convention will modify the names of the
 |      corresponding index if mapper is a list or a scalar.
 |      However, if mapper is dict-like or a function, it will use the
 |      deprecated behavior of modifying the axis *labels*.
 |      
 |      We *highly* recommend using keyword arguments to clarify your
 |      intent.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series(["dog", "cat", "monkey"])
 |      >>> s
 |      0       dog
 |      1       cat
 |      2    monkey
 |      dtype: object
 |      >>> s.rename_axis("animal")
 |      animal
 |      0    dog
 |      1    cat
 |      2    monkey
 |      dtype: object
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame({"num_legs": [4, 4, 2],
 |      ...                    "num_arms": [0, 0, 2]},
 |      ...                   ["dog", "cat", "monkey"])
 |      >>> df
 |              num_legs  num_arms
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      >>> df = df.rename_axis("animal")
 |      >>> df
 |              num_legs  num_arms
 |      animal
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      >>> df = df.rename_axis("limbs", axis="columns")
 |      >>> df
 |      limbs   num_legs  num_arms
 |      animal
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      
 |      **MultiIndex**
 |      
 |      >>> df.index = pd.MultiIndex.from_product([['mammal'],
 |      ...                                        ['dog', 'cat', 'monkey']],
 |      ...                                       names=['type', 'name'])
 |      >>> df
 |      limbs          num_legs  num_arms
 |      type   name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |      
 |      >>> df.rename_axis(index={'type': 'class'})
 |      limbs          num_legs  num_arms
 |      class  name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |      
 |      >>> df.rename_axis(columns=str.upper)
 |      LIMBS          num_legs  num_arms
 |      type   name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |  
 |  replace(self, to_replace=None, value=<no_default>, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: "Literal['pad', 'ffill', 'bfill'] | lib.NoDefault" = <no_default>) -> 'Self | None'
 |      Replace values given in `to_replace` with `value`.
 |      
 |      Values of the Series/DataFrame are replaced with other values dynamically.
 |      This differs from updating with ``.loc`` or ``.iloc``, which require
 |      you to specify a location to update with some value.
 |      
 |      Parameters
 |      ----------
 |      to_replace : str, regex, list, dict, Series, int, float, or None
 |          How to find the values that will be replaced.
 |      
 |          * numeric, str or regex:
 |      
 |              - numeric: numeric values equal to `to_replace` will be
 |                replaced with `value`
 |              - str: string exactly matching `to_replace` will be replaced
 |                with `value`
 |              - regex: regexs matching `to_replace` will be replaced with
 |                `value`
 |      
 |          * list of str, regex, or numeric:
 |      
 |              - First, if `to_replace` and `value` are both lists, they
 |                **must** be the same length.
 |              - Second, if ``regex=True`` then all of the strings in **both**
 |                lists will be interpreted as regexs otherwise they will match
 |                directly. This doesn't matter much for `value` since there
 |                are only a few possible substitution regexes you can use.
 |              - str, regex and numeric rules apply as above.
 |      
 |          * dict:
 |      
 |              - Dicts can be used to specify different replacement values
 |                for different existing values. For example,
 |                ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and
 |                'y' with 'z'. To use a dict in this way, the optional `value`
 |                parameter should not be given.
 |              - For a DataFrame a dict can specify that different values
 |                should be replaced in different columns. For example,
 |                ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'
 |                and the value 'z' in column 'b' and replaces these values
 |                with whatever is specified in `value`. The `value` parameter
 |                should not be ``None`` in this case. You can treat this as a
 |                special case of passing two lists except that you are
 |                specifying the column to search in.
 |              - For a DataFrame nested dictionaries, e.g.,
 |                ``{'a': {'b': np.nan}}``, are read as follows: look in column
 |                'a' for the value 'b' and replace it with NaN. The optional `value`
 |                parameter should not be specified to use a nested dict in this
 |                way. You can nest regular expressions as well. Note that
 |                column names (the top-level dictionary keys in a nested
 |                dictionary) **cannot** be regular expressions.
 |      
 |          * None:
 |      
 |              - This means that the `regex` argument must be a string,
 |                compiled regular expression, or list, dict, ndarray or
 |                Series of such elements. If `value` is also ``None`` then
 |                this **must** be a nested dictionary or Series.
 |      
 |          See the examples section for examples of each of these.
 |      value : scalar, dict, list, str, regex, default None
 |          Value to replace any values matching `to_replace` with.
 |          For a DataFrame a dict of values can be used to specify which
 |          value to use for each column (columns not in the dict will not be
 |          filled). Regular expressions, strings and lists or dicts of such
 |          objects are also allowed.
 |      
 |      inplace : bool, default False
 |          If True, performs operation inplace and returns None.
 |      limit : int, default None
 |          Maximum size gap to forward or backward fill.
 |      
 |          .. deprecated:: 2.1.0
 |      regex : bool or same types as `to_replace`, default False
 |          Whether to interpret `to_replace` and/or `value` as regular
 |          expressions. Alternatively, this could be a regular expression or a
 |          list, dict, or array of regular expressions in which case
 |          `to_replace` must be ``None``.
 |      method : {'pad', 'ffill', 'bfill'}
 |          The method to use when for replacement, when `to_replace` is a
 |          scalar, list or tuple and `value` is ``None``.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Object after replacement.
 |      
 |      Raises
 |      ------
 |      AssertionError
 |          * If `regex` is not a ``bool`` and `to_replace` is not
 |            ``None``.
 |      
 |      TypeError
 |          * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``
 |          * If `to_replace` is a ``dict`` and `value` is not a ``list``,
 |            ``dict``, ``ndarray``, or ``Series``
 |          * If `to_replace` is ``None`` and `regex` is not compilable
 |            into a regular expression or is a list, dict, ndarray, or
 |            Series.
 |          * When replacing multiple ``bool`` or ``datetime64`` objects and
 |            the arguments to `to_replace` does not match the type of the
 |            value being replaced
 |      
 |      ValueError
 |          * If a ``list`` or an ``ndarray`` is passed to `to_replace` and
 |            `value` but they are not the same length.
 |      
 |      See Also
 |      --------
 |      Series.fillna : Fill NA values.
 |      DataFrame.fillna : Fill NA values.
 |      Series.where : Replace values based on boolean condition.
 |      DataFrame.where : Replace values based on boolean condition.
 |      DataFrame.map: Apply a function to a Dataframe elementwise.
 |      Series.map: Map values of Series according to an input mapping or function.
 |      Series.str.replace : Simple string replacement.
 |      
 |      Notes
 |      -----
 |      * Regex substitution is performed under the hood with ``re.sub``. The
 |        rules for substitution for ``re.sub`` are the same.
 |      * Regular expressions will only substitute on strings, meaning you
 |        cannot provide, for example, a regular expression matching floating
 |        point numbers and expect the columns in your frame that have a
 |        numeric dtype to be matched. However, if those floating point
 |        numbers *are* strings, then you can do this.
 |      * This method has *a lot* of options. You are encouraged to experiment
 |        and play with this method to gain intuition about how it works.
 |      * When dict is used as the `to_replace` value, it is like
 |        key(s) in the dict are the to_replace part and
 |        value(s) in the dict are the value parameter.
 |      
 |      Examples
 |      --------
 |      
 |      **Scalar `to_replace` and `value`**
 |      
 |      >>> s = pd.Series([1, 2, 3, 4, 5])
 |      >>> s.replace(1, 5)
 |      0    5
 |      1    2
 |      2    3
 |      3    4
 |      4    5
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
 |      ...                    'B': [5, 6, 7, 8, 9],
 |      ...                    'C': ['a', 'b', 'c', 'd', 'e']})
 |      >>> df.replace(0, 5)
 |          A  B  C
 |      0  5  5  a
 |      1  1  6  b
 |      2  2  7  c
 |      3  3  8  d
 |      4  4  9  e
 |      
 |      **List-like `to_replace`**
 |      
 |      >>> df.replace([0, 1, 2, 3], 4)
 |          A  B  C
 |      0  4  5  a
 |      1  4  6  b
 |      2  4  7  c
 |      3  4  8  d
 |      4  4  9  e
 |      
 |      >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])
 |          A  B  C
 |      0  4  5  a
 |      1  3  6  b
 |      2  2  7  c
 |      3  1  8  d
 |      4  4  9  e
 |      
 |      >>> s.replace([1, 2], method='bfill')
 |      0    3
 |      1    3
 |      2    3
 |      3    4
 |      4    5
 |      dtype: int64
 |      
 |      **dict-like `to_replace`**
 |      
 |      >>> df.replace({0: 10, 1: 100})
 |              A  B  C
 |      0   10  5  a
 |      1  100  6  b
 |      2    2  7  c
 |      3    3  8  d
 |      4    4  9  e
 |      
 |      >>> df.replace({'A': 0, 'B': 5}, 100)
 |              A    B  C
 |      0  100  100  a
 |      1    1    6  b
 |      2    2    7  c
 |      3    3    8  d
 |      4    4    9  e
 |      
 |      >>> df.replace({'A': {0: 100, 4: 400}})
 |              A  B  C
 |      0  100  5  a
 |      1    1  6  b
 |      2    2  7  c
 |      3    3  8  d
 |      4  400  9  e
 |      
 |      **Regular expression `to_replace`**
 |      
 |      >>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],
 |      ...                    'B': ['abc', 'bar', 'xyz']})
 |      >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)
 |              A    B
 |      0   new  abc
 |      1   foo  new
 |      2  bait  xyz
 |      
 |      >>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)
 |              A    B
 |      0   new  abc
 |      1   foo  bar
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex=r'^ba.$', value='new')
 |              A    B
 |      0   new  abc
 |      1   foo  new
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})
 |              A    B
 |      0   new  abc
 |      1   xyz  new
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')
 |              A    B
 |      0   new  abc
 |      1   new  new
 |      2  bait  xyz
 |      
 |      Compare the behavior of ``s.replace({'a': None})`` and
 |      ``s.replace('a', None)`` to understand the peculiarities
 |      of the `to_replace` parameter:
 |      
 |      >>> s = pd.Series([10, 'a', 'a', 'b', 'a'])
 |      
 |      When one uses a dict as the `to_replace` value, it is like the
 |      value(s) in the dict are equal to the `value` parameter.
 |      ``s.replace({'a': None})`` is equivalent to
 |      ``s.replace(to_replace={'a': None}, value=None, method=None)``:
 |      
 |      >>> s.replace({'a': None})
 |      0      10
 |      1    None
 |      2    None
 |      3       b
 |      4    None
 |      dtype: object
 |      
 |      When ``value`` is not explicitly passed and `to_replace` is a scalar, list
 |      or tuple, `replace` uses the method parameter (default 'pad') to do the
 |      replacement. So this is why the 'a' values are being replaced by 10
 |      in rows 1 and 2 and 'b' in row 4 in this case.
 |      
 |      >>> s.replace('a')
 |      0    10
 |      1    10
 |      2    10
 |      3     b
 |      4     b
 |      dtype: object
 |      
 |          .. deprecated:: 2.1.0
 |              The 'method' parameter and padding behavior are deprecated.
 |      
 |      On the other hand, if ``None`` is explicitly passed for ``value``, it will
 |      be respected:
 |      
 |      >>> s.replace('a', None)
 |      0      10
 |      1    None
 |      2    None
 |      3       b
 |      4    None
 |      dtype: object
 |      
 |          .. versionchanged:: 1.4.0
 |              Previously the explicit ``None`` was silently ignored.
 |      
 |      When ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,
 |      the replacement will be applied in all columns of the DataFrame.
 |      
 |      >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
 |      ...                    'B': ['a', 'b', 'c', 'd', 'e'],
 |      ...                    'C': ['f', 'g', 'h', 'i', 'j']})
 |      
 |      >>> df.replace(to_replace='^[a-g]', value='e', regex=True)
 |          A  B  C
 |      0  0  e  e
 |      1  1  e  e
 |      2  2  e  h
 |      3  3  e  i
 |      4  4  e  j
 |      
 |      If ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary
 |      keys will be the DataFrame columns that the replacement will be applied.
 |      
 |      >>> df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)
 |          A  B  C
 |      0  0  e  f
 |      1  1  e  g
 |      2  2  e  e
 |      3  3  d  e
 |      4  4  e  e
 |  
 |  resample(self, rule, axis: 'Axis | lib.NoDefault' = <no_default>, closed: "Literal['right', 'left'] | None" = None, label: "Literal['right', 'left'] | None" = None, convention: "Literal['start', 'end', 's', 'e']" = 'start', kind: "Literal['timestamp', 'period'] | None | lib.NoDefault" = <no_default>, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -> 'Resampler'
 |      Resample time-series data.
 |      
 |      Convenience method for frequency conversion and resampling of time series.
 |      The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,
 |      or `TimedeltaIndex`), or the caller must pass the label of a datetime-like
 |      series/index to the ``on``/``level`` keyword parameter.
 |      
 |      Parameters
 |      ----------
 |      rule : DateOffset, Timedelta or str
 |          The offset string or object representing target conversion.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Which axis to use for up- or down-sampling. For `Series` this parameter
 |          is unused and defaults to 0. Must be
 |          `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.
 |      
 |          .. deprecated:: 2.0.0
 |              Use frame.T.resample(...) instead.
 |      closed : {'right', 'left'}, default None
 |          Which side of bin interval is closed. The default is 'left'
 |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',
 |          'BA', 'BQE', and 'W' which all have a default of 'right'.
 |      label : {'right', 'left'}, default None
 |          Which bin edge label to label bucket with. The default is 'left'
 |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',
 |          'BA', 'BQE', and 'W' which all have a default of 'right'.
 |      convention : {'start', 'end', 's', 'e'}, default 'start'
 |          For `PeriodIndex` only, controls whether to use the start or
 |          end of `rule`.
 |      
 |      kind : {'timestamp', 'period'}, optional, default None
 |          Pass 'timestamp' to convert the resulting index to a
 |          `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.
 |          By default the input representation is retained.
 |      
 |          .. deprecated:: 2.2.0
 |              Convert index to desired type explicitly instead.
 |      
 |      on : str, optional
 |          For a DataFrame, column to use instead of index for resampling.
 |          Column must be datetime-like.
 |      level : str or int, optional
 |          For a MultiIndex, level (name or number) to use for
 |          resampling. `level` must be datetime-like.
 |      origin : Timestamp or str, default 'start_day'
 |          The timestamp on which to adjust the grouping. The timezone of origin
 |          must match the timezone of the index.
 |          If string, must be one of the following:
 |      
 |          - 'epoch': `origin` is 1970-01-01
 |          - 'start': `origin` is the first value of the timeseries
 |          - 'start_day': `origin` is the first day at midnight of the timeseries
 |      
 |          - 'end': `origin` is the last value of the timeseries
 |          - 'end_day': `origin` is the ceiling midnight of the last day
 |      
 |          .. versionadded:: 1.3.0
 |      
 |          .. note::
 |      
 |              Only takes effect for Tick-frequencies (i.e. fixed frequencies like
 |              days, hours, and minutes, rather than months or quarters).
 |      offset : Timedelta or str, default is None
 |          An offset timedelta added to the origin.
 |      
 |      group_keys : bool, default False
 |          Whether to include the group keys in the result index when using
 |          ``.apply()`` on the resampled object.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |              Not specifying ``group_keys`` will retain values-dependent behavior
 |              from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes
 |              <whatsnew_150.enhancements.resample_group_keys>` for examples).
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              ``group_keys`` now defaults to ``False``.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Resampler
 |          :class:`~pandas.core.Resampler` object.
 |      
 |      See Also
 |      --------
 |      Series.resample : Resample a Series.
 |      DataFrame.resample : Resample a DataFrame.
 |      groupby : Group Series/DataFrame by mapping, function, label, or list of labels.
 |      asfreq : Reindex a Series/DataFrame with the given frequency without grouping.
 |      
 |      Notes
 |      -----
 |      See the `user guide
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__
 |      for more.
 |      
 |      To learn more about the offset strings, please see `this link
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.
 |      
 |      Examples
 |      --------
 |      Start by creating a series with 9 one minute timestamps.
 |      
 |      >>> index = pd.date_range('1/1/2000', periods=9, freq='min')
 |      >>> series = pd.Series(range(9), index=index)
 |      >>> series
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:02:00    2
 |      2000-01-01 00:03:00    3
 |      2000-01-01 00:04:00    4
 |      2000-01-01 00:05:00    5
 |      2000-01-01 00:06:00    6
 |      2000-01-01 00:07:00    7
 |      2000-01-01 00:08:00    8
 |      Freq: min, dtype: int64
 |      
 |      Downsample the series into 3 minute bins and sum the values
 |      of the timestamps falling into a bin.
 |      
 |      >>> series.resample('3min').sum()
 |      2000-01-01 00:00:00     3
 |      2000-01-01 00:03:00    12
 |      2000-01-01 00:06:00    21
 |      Freq: 3min, dtype: int64
 |      
 |      Downsample the series into 3 minute bins as above, but label each
 |      bin using the right edge instead of the left. Please note that the
 |      value in the bucket used as the label is not included in the bucket,
 |      which it labels. For example, in the original series the
 |      bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed
 |      value in the resampled bucket with the label ``2000-01-01 00:03:00``
 |      does not include 3 (if it did, the summed value would be 6, not 3).
 |      
 |      >>> series.resample('3min', label='right').sum()
 |      2000-01-01 00:03:00     3
 |      2000-01-01 00:06:00    12
 |      2000-01-01 00:09:00    21
 |      Freq: 3min, dtype: int64
 |      
 |      To include this value close the right side of the bin interval,
 |      as shown below.
 |      
 |      >>> series.resample('3min', label='right', closed='right').sum()
 |      2000-01-01 00:00:00     0
 |      2000-01-01 00:03:00     6
 |      2000-01-01 00:06:00    15
 |      2000-01-01 00:09:00    15
 |      Freq: 3min, dtype: int64
 |      
 |      Upsample the series into 30 second bins.
 |      
 |      >>> series.resample('30s').asfreq()[0:5]   # Select first 5 rows
 |      2000-01-01 00:00:00   0.0
 |      2000-01-01 00:00:30   NaN
 |      2000-01-01 00:01:00   1.0
 |      2000-01-01 00:01:30   NaN
 |      2000-01-01 00:02:00   2.0
 |      Freq: 30s, dtype: float64
 |      
 |      Upsample the series into 30 second bins and fill the ``NaN``
 |      values using the ``ffill`` method.
 |      
 |      >>> series.resample('30s').ffill()[0:5]
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:00:30    0
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:01:30    1
 |      2000-01-01 00:02:00    2
 |      Freq: 30s, dtype: int64
 |      
 |      Upsample the series into 30 second bins and fill the
 |      ``NaN`` values using the ``bfill`` method.
 |      
 |      >>> series.resample('30s').bfill()[0:5]
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:00:30    1
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:01:30    2
 |      2000-01-01 00:02:00    2
 |      Freq: 30s, dtype: int64
 |      
 |      Pass a custom function via ``apply``
 |      
 |      >>> def custom_resampler(arraylike):
 |      ...     return np.sum(arraylike) + 5
 |      ...
 |      >>> series.resample('3min').apply(custom_resampler)
 |      2000-01-01 00:00:00     8
 |      2000-01-01 00:03:00    17
 |      2000-01-01 00:06:00    26
 |      Freq: 3min, dtype: int64
 |      
 |      For a Series with a PeriodIndex, the keyword `convention` can be
 |      used to control whether to use the start or end of `rule`.
 |      
 |      Resample a year by quarter using 'start' `convention`. Values are
 |      assigned to the first quarter of the period.
 |      
 |      >>> s = pd.Series(
 |      ...     [1, 2], index=pd.period_range("2012-01-01", freq="Y", periods=2)
 |      ... )
 |      >>> s
 |      2012    1
 |      2013    2
 |      Freq: Y-DEC, dtype: int64
 |      >>> s.resample("Q", convention="start").asfreq()
 |      2012Q1    1.0
 |      2012Q2    NaN
 |      2012Q3    NaN
 |      2012Q4    NaN
 |      2013Q1    2.0
 |      2013Q2    NaN
 |      2013Q3    NaN
 |      2013Q4    NaN
 |      Freq: Q-DEC, dtype: float64
 |      
 |      Resample quarters by month using 'end' `convention`. Values are
 |      assigned to the last month of the period.
 |      
 |      >>> q = pd.Series(
 |      ...     [1, 2, 3, 4], index=pd.period_range("2018-01-01", freq="Q", periods=4)
 |      ... )
 |      >>> q
 |      2018Q1    1
 |      2018Q2    2
 |      2018Q3    3
 |      2018Q4    4
 |      Freq: Q-DEC, dtype: int64
 |      >>> q.resample("M", convention="end").asfreq()
 |      2018-03    1.0
 |      2018-04    NaN
 |      2018-05    NaN
 |      2018-06    2.0
 |      2018-07    NaN
 |      2018-08    NaN
 |      2018-09    3.0
 |      2018-10    NaN
 |      2018-11    NaN
 |      2018-12    4.0
 |      Freq: M, dtype: float64
 |      
 |      For DataFrame objects, the keyword `on` can be used to specify the
 |      column instead of the index for resampling.
 |      
 |      >>> d = {'price': [10, 11, 9, 13, 14, 18, 17, 19],
 |      ...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}
 |      >>> df = pd.DataFrame(d)
 |      >>> df['week_starting'] = pd.date_range('01/01/2018',
 |      ...                                     periods=8,
 |      ...                                     freq='W')
 |      >>> df
 |         price  volume week_starting
 |      0     10      50    2018-01-07
 |      1     11      60    2018-01-14
 |      2      9      40    2018-01-21
 |      3     13     100    2018-01-28
 |      4     14      50    2018-02-04
 |      5     18     100    2018-02-11
 |      6     17      40    2018-02-18
 |      7     19      50    2018-02-25
 |      >>> df.resample('ME', on='week_starting').mean()
 |                     price  volume
 |      week_starting
 |      2018-01-31     10.75    62.5
 |      2018-02-28     17.00    60.0
 |      
 |      For a DataFrame with MultiIndex, the keyword `level` can be used to
 |      specify on which level the resampling needs to take place.
 |      
 |      >>> days = pd.date_range('1/1/2000', periods=4, freq='D')
 |      >>> d2 = {'price': [10, 11, 9, 13, 14, 18, 17, 19],
 |      ...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}
 |      >>> df2 = pd.DataFrame(
 |      ...     d2,
 |      ...     index=pd.MultiIndex.from_product(
 |      ...         [days, ['morning', 'afternoon']]
 |      ...     )
 |      ... )
 |      >>> df2
 |                            price  volume
 |      2000-01-01 morning       10      50
 |                 afternoon     11      60
 |      2000-01-02 morning        9      40
 |                 afternoon     13     100
 |      2000-01-03 morning       14      50
 |                 afternoon     18     100
 |      2000-01-04 morning       17      40
 |                 afternoon     19      50
 |      >>> df2.resample('D', level=0).sum()
 |                  price  volume
 |      2000-01-01     21     110
 |      2000-01-02     22     140
 |      2000-01-03     32     150
 |      2000-01-04     36      90
 |      
 |      If you want to adjust the start of the bins based on a fixed timestamp:
 |      
 |      >>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'
 |      >>> rng = pd.date_range(start, end, freq='7min')
 |      >>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)
 |      >>> ts
 |      2000-10-01 23:30:00     0
 |      2000-10-01 23:37:00     3
 |      2000-10-01 23:44:00     6
 |      2000-10-01 23:51:00     9
 |      2000-10-01 23:58:00    12
 |      2000-10-02 00:05:00    15
 |      2000-10-02 00:12:00    18
 |      2000-10-02 00:19:00    21
 |      2000-10-02 00:26:00    24
 |      Freq: 7min, dtype: int64
 |      
 |      >>> ts.resample('17min').sum()
 |      2000-10-01 23:14:00     0
 |      2000-10-01 23:31:00     9
 |      2000-10-01 23:48:00    21
 |      2000-10-02 00:05:00    54
 |      2000-10-02 00:22:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', origin='epoch').sum()
 |      2000-10-01 23:18:00     0
 |      2000-10-01 23:35:00    18
 |      2000-10-01 23:52:00    27
 |      2000-10-02 00:09:00    39
 |      2000-10-02 00:26:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', origin='2000-01-01').sum()
 |      2000-10-01 23:24:00     3
 |      2000-10-01 23:41:00    15
 |      2000-10-01 23:58:00    45
 |      2000-10-02 00:15:00    45
 |      Freq: 17min, dtype: int64
 |      
 |      If you want to adjust the start of the bins with an `offset` Timedelta, the two
 |      following lines are equivalent:
 |      
 |      >>> ts.resample('17min', origin='start').sum()
 |      2000-10-01 23:30:00     9
 |      2000-10-01 23:47:00    21
 |      2000-10-02 00:04:00    54
 |      2000-10-02 00:21:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', offset='23h30min').sum()
 |      2000-10-01 23:30:00     9
 |      2000-10-01 23:47:00    21
 |      2000-10-02 00:04:00    54
 |      2000-10-02 00:21:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      If you want to take the largest Timestamp as the end of the bins:
 |      
 |      >>> ts.resample('17min', origin='end').sum()
 |      2000-10-01 23:35:00     0
 |      2000-10-01 23:52:00    18
 |      2000-10-02 00:09:00    27
 |      2000-10-02 00:26:00    63
 |      Freq: 17min, dtype: int64
 |      
 |      In contrast with the `start_day`, you can use `end_day` to take the ceiling
 |      midnight of the largest Timestamp as the end of the bins and drop the bins
 |      not containing data:
 |      
 |      >>> ts.resample('17min', origin='end_day').sum()
 |      2000-10-01 23:38:00     3
 |      2000-10-01 23:55:00    15
 |      2000-10-02 00:12:00    45
 |      2000-10-02 00:29:00    45
 |      Freq: 17min, dtype: int64
 |  
 |  rolling(self, window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = <no_default>, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -> 'Window | Rolling'
 |      Provide rolling window calculations.
 |      
 |      Parameters
 |      ----------
 |      window : int, timedelta, str, offset, or BaseIndexer subclass
 |          Size of the moving window.
 |      
 |          If an integer, the fixed number of observations used for
 |          each window.
 |      
 |          If a timedelta, str, or offset, the time period of each window. Each
 |          window will be a variable sized based on the observations included in
 |          the time-period. This is only valid for datetimelike indexes.
 |          To learn more about the offsets & frequency strings, please see `this link
 |          <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
 |      
 |          If a BaseIndexer subclass, the window boundaries
 |          based on the defined ``get_window_bounds`` method. Additional rolling
 |          keyword arguments, namely ``min_periods``, ``center``, ``closed`` and
 |          ``step`` will be passed to ``get_window_bounds``.
 |      
 |      min_periods : int, default None
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |          For a window that is specified by an offset, ``min_periods`` will default to 1.
 |      
 |          For a window that is specified by an integer, ``min_periods`` will default
 |          to the size of the window.
 |      
 |      center : bool, default False
 |          If False, set the window labels as the right edge of the window index.
 |      
 |          If True, set the window labels as the center of the window index.
 |      
 |      win_type : str, default None
 |          If ``None``, all points are evenly weighted.
 |      
 |          If a string, it must be a valid `scipy.signal window function
 |          <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`__.
 |      
 |          Certain Scipy window types require additional parameters to be passed
 |          in the aggregation function. The additional parameters must match
 |          the keywords specified in the Scipy window type method signature.
 |      
 |      on : str, optional
 |          For a DataFrame, a column label or Index level on which
 |          to calculate the rolling window, rather than the DataFrame's index.
 |      
 |          Provided integer column is ignored and excluded from result since
 |          an integer index is not used to calculate the rolling window.
 |      
 |      axis : int or str, default 0
 |          If ``0`` or ``'index'``, roll across the rows.
 |      
 |          If ``1`` or ``'columns'``, roll across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              The axis keyword is deprecated. For ``axis=1``,
 |              transpose the DataFrame first instead.
 |      
 |      closed : str, default None
 |          If ``'right'``, the first point in the window is excluded from calculations.
 |      
 |          If ``'left'``, the last point in the window is excluded from calculations.
 |      
 |          If ``'both'``, the no points in the window are excluded from calculations.
 |      
 |          If ``'neither'``, the first and last points in the window are excluded
 |          from calculations.
 |      
 |          Default ``None`` (``'right'``).
 |      
 |      step : int, default None
 |      
 |          .. versionadded:: 1.5.0
 |      
 |          Evaluate the window at every ``step`` result, equivalent to slicing as
 |          ``[::step]``. ``window`` must be an integer. Using a step argument other
 |          than None or 1 will produce a result with a different shape than the input.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |      
 |          .. versionadded:: 1.3.0
 |      
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Window or pandas.api.typing.Rolling
 |          An instance of Window is returned if ``win_type`` is passed. Otherwise,
 |          an instance of Rolling is returned.
 |      
 |      See Also
 |      --------
 |      expanding : Provides expanding transformations.
 |      ewm : Provides exponential weighted functions.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.generic>` for further usage details
 |      and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      **window**
 |      
 |      Rolling sum with a window length of 2 observations.
 |      
 |      >>> df.rolling(2).sum()
 |           B
 |      0  NaN
 |      1  1.0
 |      2  3.0
 |      3  NaN
 |      4  NaN
 |      
 |      Rolling sum with a window span of 2 seconds.
 |      
 |      >>> df_time = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},
 |      ...                        index=[pd.Timestamp('20130101 09:00:00'),
 |      ...                               pd.Timestamp('20130101 09:00:02'),
 |      ...                               pd.Timestamp('20130101 09:00:03'),
 |      ...                               pd.Timestamp('20130101 09:00:05'),
 |      ...                               pd.Timestamp('20130101 09:00:06')])
 |      
 |      >>> df_time
 |                             B
 |      2013-01-01 09:00:00  0.0
 |      2013-01-01 09:00:02  1.0
 |      2013-01-01 09:00:03  2.0
 |      2013-01-01 09:00:05  NaN
 |      2013-01-01 09:00:06  4.0
 |      
 |      >>> df_time.rolling('2s').sum()
 |                             B
 |      2013-01-01 09:00:00  0.0
 |      2013-01-01 09:00:02  1.0
 |      2013-01-01 09:00:03  3.0
 |      2013-01-01 09:00:05  NaN
 |      2013-01-01 09:00:06  4.0
 |      
 |      Rolling sum with forward looking windows with 2 observations.
 |      
 |      >>> indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)
 |      >>> df.rolling(window=indexer, min_periods=1).sum()
 |           B
 |      0  1.0
 |      1  3.0
 |      2  2.0
 |      3  4.0
 |      4  4.0
 |      
 |      **min_periods**
 |      
 |      Rolling sum with a window length of 2 observations, but only needs a minimum of 1
 |      observation to calculate a value.
 |      
 |      >>> df.rolling(2, min_periods=1).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  2.0
 |      4  4.0
 |      
 |      **center**
 |      
 |      Rolling sum with the result assigned to the center of the window index.
 |      
 |      >>> df.rolling(3, min_periods=1, center=True).sum()
 |           B
 |      0  1.0
 |      1  3.0
 |      2  3.0
 |      3  6.0
 |      4  4.0
 |      
 |      >>> df.rolling(3, min_periods=1, center=False).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  3.0
 |      4  6.0
 |      
 |      **step**
 |      
 |      Rolling sum with a window length of 2 observations, minimum of 1 observation to
 |      calculate a value, and a step of 2.
 |      
 |      >>> df.rolling(2, min_periods=1, step=2).sum()
 |           B
 |      0  0.0
 |      2  3.0
 |      4  4.0
 |      
 |      **win_type**
 |      
 |      Rolling sum with a window length of 2, using the Scipy ``'gaussian'``
 |      window type. ``std`` is required in the aggregation function.
 |      
 |      >>> df.rolling(2, win_type='gaussian').sum(std=3)
 |                B
 |      0       NaN
 |      1  0.986207
 |      2  2.958621
 |      3       NaN
 |      4       NaN
 |      
 |      **on**
 |      
 |      Rolling sum with a window length of 2 days.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'A': [pd.to_datetime('2020-01-01'),
 |      ...           pd.to_datetime('2020-01-01'),
 |      ...           pd.to_datetime('2020-01-02'),],
 |      ...     'B': [1, 2, 3], },
 |      ...     index=pd.date_range('2020', periods=3))
 |      
 |      >>> df
 |                          A  B
 |      2020-01-01 2020-01-01  1
 |      2020-01-02 2020-01-01  2
 |      2020-01-03 2020-01-02  3
 |      
 |      >>> df.rolling('2D', on='A').sum()
 |                          A    B
 |      2020-01-01 2020-01-01  1.0
 |      2020-01-02 2020-01-01  3.0
 |      2020-01-03 2020-01-02  6.0
 |  
 |  sample(self, n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'Self'
 |      Return a random sample of items from an axis of object.
 |      
 |      You can use `random_state` for reproducibility.
 |      
 |      Parameters
 |      ----------
 |      n : int, optional
 |          Number of items from axis to return. Cannot be used with `frac`.
 |          Default = 1 if `frac` = None.
 |      frac : float, optional
 |          Fraction of axis items to return. Cannot be used with `n`.
 |      replace : bool, default False
 |          Allow or disallow sampling of the same row more than once.
 |      weights : str or ndarray-like, optional
 |          Default 'None' results in equal probability weighting.
 |          If passed a Series, will align with target object on index. Index
 |          values in weights not found in sampled object will be ignored and
 |          index values in sampled object not in weights will be assigned
 |          weights of zero.
 |          If called on a DataFrame, will accept the name of a column
 |          when axis = 0.
 |          Unless weights are a Series, weights must be same length as axis
 |          being sampled.
 |          If weights do not sum to 1, they will be normalized to sum to 1.
 |          Missing values in the weights column will be treated as zero.
 |          Infinite values not allowed.
 |      random_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional
 |          If int, array-like, or BitGenerator, seed for random number generator.
 |          If np.random.RandomState or np.random.Generator, use as given.
 |      
 |          .. versionchanged:: 1.4.0
 |      
 |              np.random.Generator objects now accepted
 |      
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to sample. Accepts axis number or name. Default is stat axis
 |          for given data type. For `Series` this parameter is unused and defaults to `None`.
 |      ignore_index : bool, default False
 |          If True, the resulting index will be labeled 0, 1, …, n - 1.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A new object of same type as caller containing `n` items randomly
 |          sampled from the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrameGroupBy.sample: Generates random samples from each group of a
 |          DataFrame object.
 |      SeriesGroupBy.sample: Generates random samples from each group of a
 |          Series object.
 |      numpy.random.choice: Generates a random sample from a given 1-D numpy
 |          array.
 |      
 |      Notes
 |      -----
 |      If `frac` > 1, `replacement` should be set to `True`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],
 |      ...                    'num_wings': [2, 0, 0, 0],
 |      ...                    'num_specimen_seen': [10, 2, 1, 8]},
 |      ...                   index=['falcon', 'dog', 'spider', 'fish'])
 |      >>> df
 |              num_legs  num_wings  num_specimen_seen
 |      falcon         2          2                 10
 |      dog            4          0                  2
 |      spider         8          0                  1
 |      fish           0          0                  8
 |      
 |      Extract 3 random elements from the ``Series`` ``df['num_legs']``:
 |      Note that we use `random_state` to ensure the reproducibility of
 |      the examples.
 |      
 |      >>> df['num_legs'].sample(n=3, random_state=1)
 |      fish      0
 |      spider    8
 |      falcon    2
 |      Name: num_legs, dtype: int64
 |      
 |      A random 50% sample of the ``DataFrame`` with replacement:
 |      
 |      >>> df.sample(frac=0.5, replace=True, random_state=1)
 |            num_legs  num_wings  num_specimen_seen
 |      dog          4          0                  2
 |      fish         0          0                  8
 |      
 |      An upsample sample of the ``DataFrame`` with replacement:
 |      Note that `replace` parameter has to be `True` for `frac` parameter > 1.
 |      
 |      >>> df.sample(frac=2, replace=True, random_state=1)
 |              num_legs  num_wings  num_specimen_seen
 |      dog            4          0                  2
 |      fish           0          0                  8
 |      falcon         2          2                 10
 |      falcon         2          2                 10
 |      fish           0          0                  8
 |      dog            4          0                  2
 |      fish           0          0                  8
 |      dog            4          0                  2
 |      
 |      Using a DataFrame column as weights. Rows with larger value in the
 |      `num_specimen_seen` column are more likely to be sampled.
 |      
 |      >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)
 |              num_legs  num_wings  num_specimen_seen
 |      falcon         2          2                 10
 |      fish           0          0                  8
 |  
 |  set_flags(self, *, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -> 'Self'
 |      Return a new object with updated flags.
 |      
 |      Parameters
 |      ----------
 |      copy : bool, default False
 |          Specify if a copy of the object should be made.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      allows_duplicate_labels : bool, optional
 |          Whether the returned object allows duplicate labels.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          The same type as the caller.
 |      
 |      See Also
 |      --------
 |      DataFrame.attrs : Global metadata applying to this dataset.
 |      DataFrame.flags : Global flags applying to this object.
 |      
 |      Notes
 |      -----
 |      This method returns a new object that's a view on the same data
 |      as the input. Mutating the input or the output values will be reflected
 |      in the other.
 |      
 |      This method is intended to be used in method chains.
 |      
 |      "Flags" differ from "metadata". Flags reflect properties of the
 |      pandas object (the Series or DataFrame). Metadata refer to properties
 |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": [1, 2]})
 |      >>> df.flags.allows_duplicate_labels
 |      True
 |      >>> df2 = df.set_flags(allows_duplicate_labels=False)
 |      >>> df2.flags.allows_duplicate_labels
 |      False
 |  
 |  squeeze(self, axis: 'Axis | None' = None)
 |      Squeeze 1 dimensional axis objects into scalars.
 |      
 |      Series or DataFrames with a single element are squeezed to a scalar.
 |      DataFrames with a single column or a single row are squeezed to a
 |      Series. Otherwise the object is unchanged.
 |      
 |      This method is most useful when you don't know if your
 |      object is a Series or DataFrame, but you do know it has just a single
 |      column. In that case you can safely call `squeeze` to ensure you have a
 |      Series.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          A specific axis to squeeze. By default, all length-1 axes are
 |          squeezed. For `Series` this parameter is unused and defaults to `None`.
 |      
 |      Returns
 |      -------
 |      DataFrame, Series, or scalar
 |          The projection after squeezing `axis` or all the axes.
 |      
 |      See Also
 |      --------
 |      Series.iloc : Integer-location based indexing for selecting scalars.
 |      DataFrame.iloc : Integer-location based indexing for selecting Series.
 |      Series.to_frame : Inverse of DataFrame.squeeze for a
 |          single-column DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> primes = pd.Series([2, 3, 5, 7])
 |      
 |      Slicing might produce a Series with a single value:
 |      
 |      >>> even_primes = primes[primes % 2 == 0]
 |      >>> even_primes
 |      0    2
 |      dtype: int64
 |      
 |      >>> even_primes.squeeze()
 |      2
 |      
 |      Squeezing objects with more than one value in every axis does nothing:
 |      
 |      >>> odd_primes = primes[primes % 2 == 1]
 |      >>> odd_primes
 |      1    3
 |      2    5
 |      3    7
 |      dtype: int64
 |      
 |      >>> odd_primes.squeeze()
 |      1    3
 |      2    5
 |      3    7
 |      dtype: int64
 |      
 |      Squeezing is even more effective when used with DataFrames.
 |      
 |      >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])
 |      >>> df
 |         a  b
 |      0  1  2
 |      1  3  4
 |      
 |      Slicing a single column will produce a DataFrame with the columns
 |      having only one value:
 |      
 |      >>> df_a = df[['a']]
 |      >>> df_a
 |         a
 |      0  1
 |      1  3
 |      
 |      So the columns can be squeezed down, resulting in a Series:
 |      
 |      >>> df_a.squeeze('columns')
 |      0    1
 |      1    3
 |      Name: a, dtype: int64
 |      
 |      Slicing a single row from a single column will produce a single
 |      scalar DataFrame:
 |      
 |      >>> df_0a = df.loc[df.index < 1, ['a']]
 |      >>> df_0a
 |         a
 |      0  1
 |      
 |      Squeezing the rows produces a single scalar Series:
 |      
 |      >>> df_0a.squeeze('rows')
 |      a    1
 |      Name: 0, dtype: int64
 |      
 |      Squeezing all axes will project directly into a scalar:
 |      
 |      >>> df_0a.squeeze()
 |      1
 |  
 |  swapaxes(self, axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -> 'Self'
 |      Interchange axes and swap values axes appropriately.
 |      
 |      .. deprecated:: 2.1.0
 |          ``swapaxes`` is deprecated and will be removed.
 |          Please use ``transpose`` instead.
 |      
 |      Returns
 |      -------
 |      same as input
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.transpose`.
 |  
 |  tail(self, n: 'int' = 5) -> 'Self'
 |      Return the last `n` rows.
 |      
 |      This function returns last `n` rows from the object based on
 |      position. It is useful for quickly verifying data, for example,
 |      after sorting or appending rows.
 |      
 |      For negative values of `n`, this function returns all rows except
 |      the first `|n|` rows, equivalent to ``df[|n|:]``.
 |      
 |      If n is larger than the number of rows, this function returns all rows.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Number of rows to select.
 |      
 |      Returns
 |      -------
 |      type of caller
 |          The last `n` rows of the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrame.head : The first `n` rows of the caller object.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',
 |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})
 |      >>> df
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |      6      shark
 |      7      whale
 |      8      zebra
 |      
 |      Viewing the last 5 lines
 |      
 |      >>> df.tail()
 |         animal
 |      4  monkey
 |      5  parrot
 |      6   shark
 |      7   whale
 |      8   zebra
 |      
 |      Viewing the last `n` lines (three in this case)
 |      
 |      >>> df.tail(3)
 |        animal
 |      6  shark
 |      7  whale
 |      8  zebra
 |      
 |      For negative values of `n`
 |      
 |      >>> df.tail(-3)
 |         animal
 |      3    lion
 |      4  monkey
 |      5  parrot
 |      6   shark
 |      7   whale
 |      8   zebra
 |  
 |  take(self, indices, axis: 'Axis' = 0, **kwargs) -> 'Self'
 |      Return the elements in the given *positional* indices along an axis.
 |      
 |      This means that we are not indexing according to actual values in
 |      the index attribute of the object. We are indexing according to the
 |      actual position of the element in the object.
 |      
 |      Parameters
 |      ----------
 |      indices : array-like
 |          An array of ints indicating which positions to take.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          The axis on which to select elements. ``0`` means that we are
 |          selecting rows, ``1`` means that we are selecting columns.
 |          For `Series` this parameter is unused and defaults to 0.
 |      **kwargs
 |          For compatibility with :meth:`numpy.take`. Has no effect on the
 |          output.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          An array-like containing the elements taken from the object.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Select a subset of a DataFrame by labels.
 |      DataFrame.iloc : Select a subset of a DataFrame by positions.
 |      numpy.take : Take elements from an array along an axis.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('falcon', 'bird', 389.0),
 |      ...                    ('parrot', 'bird', 24.0),
 |      ...                    ('lion', 'mammal', 80.5),
 |      ...                    ('monkey', 'mammal', np.nan)],
 |      ...                   columns=['name', 'class', 'max_speed'],
 |      ...                   index=[0, 2, 3, 1])
 |      >>> df
 |           name   class  max_speed
 |      0  falcon    bird      389.0
 |      2  parrot    bird       24.0
 |      3    lion  mammal       80.5
 |      1  monkey  mammal        NaN
 |      
 |      Take elements at positions 0 and 3 along the axis 0 (default).
 |      
 |      Note how the actual indices selected (0 and 1) do not correspond to
 |      our selected indices 0 and 3. That's because we are selecting the 0th
 |      and 3rd rows, not rows whose indices equal 0 and 3.
 |      
 |      >>> df.take([0, 3])
 |           name   class  max_speed
 |      0  falcon    bird      389.0
 |      1  monkey  mammal        NaN
 |      
 |      Take elements at indices 1 and 2 along the axis 1 (column selection).
 |      
 |      >>> df.take([1, 2], axis=1)
 |          class  max_speed
 |      0    bird      389.0
 |      2    bird       24.0
 |      3  mammal       80.5
 |      1  mammal        NaN
 |      
 |      We may take elements using negative integers for positive indices,
 |      starting from the end of the object, just like with Python lists.
 |      
 |      >>> df.take([-1, -2])
 |           name   class  max_speed
 |      1  monkey  mammal        NaN
 |      3    lion  mammal       80.5
 |  
 |  to_clipboard(self, *, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -> 'None'
 |      Copy object to the system clipboard.
 |      
 |      Write a text representation of object to the system clipboard.
 |      This can be pasted into Excel, for example.
 |      
 |      Parameters
 |      ----------
 |      excel : bool, default True
 |          Produce output in a csv format for easy pasting into excel.
 |      
 |          - True, use the provided separator for csv pasting.
 |          - False, write a string representation of the object to the clipboard.
 |      
 |      sep : str, default ``'\t'``
 |          Field delimiter.
 |      **kwargs
 |          These parameters will be passed to DataFrame.to_csv.
 |      
 |      See Also
 |      --------
 |      DataFrame.to_csv : Write a DataFrame to a comma-separated values
 |          (csv) file.
 |      read_clipboard : Read text from clipboard and pass to read_csv.
 |      
 |      Notes
 |      -----
 |      Requirements for your platform.
 |      
 |        - Linux : `xclip`, or `xsel` (with `PyQt4` modules)
 |        - Windows : none
 |        - macOS : none
 |      
 |      This method uses the processes developed for the package `pyperclip`. A
 |      solution to render any output string format is given in the examples.
 |      
 |      Examples
 |      --------
 |      Copy the contents of a DataFrame to the clipboard.
 |      
 |      >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])
 |      
 |      >>> df.to_clipboard(sep=',')  # doctest: +SKIP
 |      ... # Wrote the following to the system clipboard:
 |      ... # ,A,B,C
 |      ... # 0,1,2,3
 |      ... # 1,4,5,6
 |      
 |      We can omit the index by passing the keyword `index` and setting
 |      it to false.
 |      
 |      >>> df.to_clipboard(sep=',', index=False)  # doctest: +SKIP
 |      ... # Wrote the following to the system clipboard:
 |      ... # A,B,C
 |      ... # 1,2,3
 |      ... # 4,5,6
 |      
 |      Using the original `pyperclip` package for any string output format.
 |      
 |      .. code-block:: python
 |      
 |         import pyperclip
 |         html = df.style.to_html()
 |         pyperclip.copy(html)
 |  
 |  to_csv(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -> 'str | None'
 |      Write object to a comma-separated values (csv) file.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str, path object, file-like object, or None, default None
 |          String, path object (implementing os.PathLike[str]), or file-like
 |          object implementing a write() function. If None, the result is
 |          returned as a string. If a non-binary file object is passed, it should
 |          be opened with `newline=''`, disabling universal newlines. If a binary
 |          file object is passed, `mode` might need to contain a `'b'`.
 |      sep : str, default ','
 |          String of length 1. Field delimiter for the output file.
 |      na_rep : str, default ''
 |          Missing data representation.
 |      float_format : str, Callable, default None
 |          Format string for floating point numbers. If a Callable is given, it takes
 |          precedence over other numeric formatting parameters, like decimal.
 |      columns : sequence, optional
 |          Columns to write.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of strings is given it is
 |          assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      index_label : str or sequence, or False, default None
 |          Column label for index column(s) if desired. If None is given, and
 |          `header` and `index` are True, then the index names are used. A
 |          sequence should be given if the object uses MultiIndex. If
 |          False do not print fields for index names. Use index_label=False
 |          for easier importing in R.
 |      mode : {'w', 'x', 'a'}, default 'w'
 |          Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control
 |          the file opening. Typical values include:
 |      
 |          - 'w', truncate the file first.
 |          - 'x', exclusive creation, failing if the file already exists.
 |          - 'a', append to the end of file if it exists.
 |      
 |      encoding : str, optional
 |          A string representing the encoding to use in the output file,
 |          defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`
 |          is a non-binary file object.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      
 |             May be a dict with key 'method' as compression mode
 |             and other entries as additional compression options if
 |             compression mode is 'zip'.
 |      
 |             Passing compression options as keys in dict is
 |             supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.
 |      quoting : optional constant from csv module
 |          Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`
 |          then floats are converted to strings and thus csv.QUOTE_NONNUMERIC
 |          will treat them as non-numeric.
 |      quotechar : str, default '\"'
 |          String of length 1. Character used to quote fields.
 |      lineterminator : str, optional
 |          The newline character or character sequence to use in the output
 |          file. Defaults to `os.linesep`, which depends on the OS in which
 |          this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).
 |      
 |          .. versionchanged:: 1.5.0
 |      
 |              Previously was line_terminator, changed for consistency with
 |              read_csv and the standard library 'csv' module.
 |      
 |      chunksize : int or None
 |          Rows to write at a time.
 |      date_format : str, default None
 |          Format string for datetime objects.
 |      doublequote : bool, default True
 |          Control quoting of `quotechar` inside a field.
 |      escapechar : str, default None
 |          String of length 1. Character used to escape `sep` and `quotechar`
 |          when appropriate.
 |      decimal : str, default '.'
 |          Character recognized as decimal separator. E.g. use ',' for
 |          European data.
 |      errors : str, default 'strict'
 |          Specifies how encoding and decoding errors are to be handled.
 |          See the errors argument for :func:`open` for a full list
 |          of options.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      Returns
 |      -------
 |      None or str
 |          If path_or_buf is None, returns the resulting csv format as a
 |          string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      read_csv : Load a CSV file into a DataFrame.
 |      to_excel : Write DataFrame to an Excel file.
 |      
 |      Examples
 |      --------
 |      Create 'out.csv' containing 'df' without indices
 |      
 |      >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],
 |      ...                    'mask': ['red', 'purple'],
 |      ...                    'weapon': ['sai', 'bo staff']})
 |      >>> df.to_csv('out.csv', index=False)  # doctest: +SKIP
 |      
 |      Create 'out.zip' containing 'out.csv'
 |      
 |      >>> df.to_csv(index=False)
 |      'name,mask,weapon\nRaphael,red,sai\nDonatello,purple,bo staff\n'
 |      >>> compression_opts = dict(method='zip',
 |      ...                         archive_name='out.csv')  # doctest: +SKIP
 |      >>> df.to_csv('out.zip', index=False,
 |      ...           compression=compression_opts)  # doctest: +SKIP
 |      
 |      To write a csv file to a new folder or nested folder you will first
 |      need to create it using either Pathlib or os:
 |      
 |      >>> from pathlib import Path  # doctest: +SKIP
 |      >>> filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP
 |      >>> filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP
 |      >>> df.to_csv(filepath)  # doctest: +SKIP
 |      
 |      >>> import os  # doctest: +SKIP
 |      >>> os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP
 |      >>> df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP
 |  
 |  to_excel(self, excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: "Literal['openpyxl', 'xlsxwriter'] | None" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'None'
 |      Write object to an Excel sheet.
 |      
 |      To write a single object to an Excel .xlsx file it is only necessary to
 |      specify a target file name. To write to multiple sheets it is necessary to
 |      create an `ExcelWriter` object with a target file name, and specify a sheet
 |      in the file to write to.
 |      
 |      Multiple sheets may be written to by specifying unique `sheet_name`.
 |      With all data written to the file it is necessary to save the changes.
 |      Note that creating an `ExcelWriter` object with a file name that already
 |      exists will result in the contents of the existing file being erased.
 |      
 |      Parameters
 |      ----------
 |      excel_writer : path-like, file-like, or ExcelWriter object
 |          File path or existing ExcelWriter.
 |      sheet_name : str, default 'Sheet1'
 |          Name of sheet which will contain DataFrame.
 |      na_rep : str, default ''
 |          Missing data representation.
 |      float_format : str, optional
 |          Format string for floating point numbers. For example
 |          ``float_format="%.2f"`` will format 0.1234 to 0.12.
 |      columns : sequence or list of str, optional
 |          Columns to write.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of string is given it is
 |          assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      index_label : str or sequence, optional
 |          Column label for index column(s) if desired. If not specified, and
 |          `header` and `index` are True, then the index names are used. A
 |          sequence should be given if the DataFrame uses MultiIndex.
 |      startrow : int, default 0
 |          Upper left cell row to dump data frame.
 |      startcol : int, default 0
 |          Upper left cell column to dump data frame.
 |      engine : str, optional
 |          Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this
 |          via the options ``io.excel.xlsx.writer`` or
 |          ``io.excel.xlsm.writer``.
 |      
 |      merge_cells : bool, default True
 |          Write MultiIndex and Hierarchical Rows as merged cells.
 |      inf_rep : str, default 'inf'
 |          Representation for infinity (there is no native representation for
 |          infinity in Excel).
 |      freeze_panes : tuple of int (length 2), optional
 |          Specifies the one-based bottommost row and rightmost column that
 |          is to be frozen.
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |          .. versionadded:: 1.2.0
 |      engine_kwargs : dict, optional
 |          Arbitrary keyword arguments passed to excel engine.
 |      
 |      See Also
 |      --------
 |      to_csv : Write DataFrame to a comma-separated values (csv) file.
 |      ExcelWriter : Class for writing DataFrame objects into excel sheets.
 |      read_excel : Read an Excel file into a pandas DataFrame.
 |      read_csv : Read a comma-separated values (csv) file into DataFrame.
 |      io.formats.style.Styler.to_excel : Add styles to Excel sheet.
 |      
 |      Notes
 |      -----
 |      For compatibility with :meth:`~DataFrame.to_csv`,
 |      to_excel serializes lists and dicts to strings before writing.
 |      
 |      Once a workbook has been saved it is not possible to write further
 |      data without rewriting the whole workbook.
 |      
 |      Examples
 |      --------
 |      
 |      Create, write to and save a workbook:
 |      
 |      >>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],
 |      ...                    index=['row 1', 'row 2'],
 |      ...                    columns=['col 1', 'col 2'])
 |      >>> df1.to_excel("output.xlsx")  # doctest: +SKIP
 |      
 |      To specify the sheet name:
 |      
 |      >>> df1.to_excel("output.xlsx",
 |      ...              sheet_name='Sheet_name_1')  # doctest: +SKIP
 |      
 |      If you wish to write to more than one sheet in the workbook, it is
 |      necessary to specify an ExcelWriter object:
 |      
 |      >>> df2 = df1.copy()
 |      >>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP
 |      ...     df1.to_excel(writer, sheet_name='Sheet_name_1')
 |      ...     df2.to_excel(writer, sheet_name='Sheet_name_2')
 |      
 |      ExcelWriter can also be used to append to an existing Excel file:
 |      
 |      >>> with pd.ExcelWriter('output.xlsx',
 |      ...                     mode='a') as writer:  # doctest: +SKIP
 |      ...     df1.to_excel(writer, sheet_name='Sheet_name_3')
 |      
 |      To set the library that is used to write the Excel file,
 |      you can pass the `engine` keyword (the default engine is
 |      automatically chosen depending on the file extension):
 |      
 |      >>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP
 |  
 |  to_hdf(self, path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: "Literal['a', 'w', 'r+']" = 'a', complevel: 'int | None' = None, complib: "Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None" = None, append: 'bool_t' = False, format: "Literal['fixed', 'table'] | None" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -> 'None'
 |      Write the contained data to an HDF5 file using HDFStore.
 |      
 |      Hierarchical Data Format (HDF) is self-describing, allowing an
 |      application to interpret the structure and contents of a file with
 |      no outside information. One HDF file can hold a mix of related objects
 |      which can be accessed as a group or as individual objects.
 |      
 |      In order to add another DataFrame or Series to an existing HDF file
 |      please use append mode and a different a key.
 |      
 |      .. warning::
 |      
 |         One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,
 |         but the type of the subclass is lost upon storing.
 |      
 |      For more information see the :ref:`user guide <io.hdf5>`.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str or pandas.HDFStore
 |          File path or HDFStore object.
 |      key : str
 |          Identifier for the group in the store.
 |      mode : {'a', 'w', 'r+'}, default 'a'
 |          Mode to open file:
 |      
 |          - 'w': write, a new file is created (an existing file with
 |            the same name would be deleted).
 |          - 'a': append, an existing file is opened for reading and
 |            writing, and if the file does not exist it is created.
 |          - 'r+': similar to 'a', but the file must already exist.
 |      complevel : {0-9}, default None
 |          Specifies a compression level for data.
 |          A value of 0 or None disables compression.
 |      complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'
 |          Specifies the compression library to be used.
 |          These additional compressors for Blosc are supported
 |          (default if no compressor specified: 'blosc:blosclz'):
 |          {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',
 |          'blosc:zlib', 'blosc:zstd'}.
 |          Specifying a compression library which is not available issues
 |          a ValueError.
 |      append : bool, default False
 |          For Table formats, append the input data to the existing.
 |      format : {'fixed', 'table', None}, default 'fixed'
 |          Possible values:
 |      
 |          - 'fixed': Fixed format. Fast writing/reading. Not-appendable,
 |            nor searchable.
 |          - 'table': Table format. Write as a PyTables Table structure
 |            which may perform worse but allow more flexible operations
 |            like searching / selecting subsets of the data.
 |          - If None, pd.get_option('io.hdf.default_format') is checked,
 |            followed by fallback to "fixed".
 |      index : bool, default True
 |          Write DataFrame index as a column.
 |      min_itemsize : dict or int, optional
 |          Map column names to minimum string sizes for columns.
 |      nan_rep : Any, optional
 |          How to represent null values as str.
 |          Not allowed with append=True.
 |      dropna : bool, default False, optional
 |          Remove missing values.
 |      data_columns : list of columns or True, optional
 |          List of columns to create as indexed data columns for on-disk
 |          queries, or True to use all columns. By default only the axes
 |          of the object are indexed. See
 |          :ref:`Query via data columns<io.hdf5-query-data-columns>`. for
 |          more information.
 |          Applicable only to format='table'.
 |      errors : str, default 'strict'
 |          Specifies how encoding and decoding errors are to be handled.
 |          See the errors argument for :func:`open` for a full list
 |          of options.
 |      encoding : str, default "UTF-8"
 |      
 |      See Also
 |      --------
 |      read_hdf : Read from HDF file.
 |      DataFrame.to_orc : Write a DataFrame to the binary orc format.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      DataFrame.to_sql : Write to a SQL table.
 |      DataFrame.to_feather : Write out feather-format for DataFrames.
 |      DataFrame.to_csv : Write out to a csv file.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},
 |      ...                   index=['a', 'b', 'c'])  # doctest: +SKIP
 |      >>> df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP
 |      
 |      We can add another object to the same file:
 |      
 |      >>> s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP
 |      >>> s.to_hdf('data.h5', key='s')  # doctest: +SKIP
 |      
 |      Reading from HDF file:
 |      
 |      >>> pd.read_hdf('data.h5', 'df')  # doctest: +SKIP
 |      A  B
 |      a  1  4
 |      b  2  5
 |      c  3  6
 |      >>> pd.read_hdf('data.h5', 's')  # doctest: +SKIP
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |  
 |  to_json(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: "Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: "Literal['a', 'w']" = 'w') -> 'str | None'
 |      Convert the object to a JSON string.
 |      
 |      Note NaN's and None will be converted to null and datetime objects
 |      will be converted to UNIX timestamps.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str, path object, file-like object, or None, default None
 |          String, path object (implementing os.PathLike[str]), or file-like
 |          object implementing a write() function. If None, the result is
 |          returned as a string.
 |      orient : str
 |          Indication of expected JSON string format.
 |      
 |          * Series:
 |      
 |              - default is 'index'
 |              - allowed values are: {'split', 'records', 'index', 'table'}.
 |      
 |          * DataFrame:
 |      
 |              - default is 'columns'
 |              - allowed values are: {'split', 'records', 'index', 'columns',
 |                'values', 'table'}.
 |      
 |          * The format of the JSON string:
 |      
 |              - 'split' : dict like {'index' -> [index], 'columns' -> [columns],
 |                'data' -> [values]}
 |              - 'records' : list like [{column -> value}, ... , {column -> value}]
 |              - 'index' : dict like {index -> {column -> value}}
 |              - 'columns' : dict like {column -> {index -> value}}
 |              - 'values' : just the values array
 |              - 'table' : dict like {'schema': {schema}, 'data': {data}}
 |      
 |              Describing the data, where data component is like ``orient='records'``.
 |      
 |      date_format : {None, 'epoch', 'iso'}
 |          Type of date conversion. 'epoch' = epoch milliseconds,
 |          'iso' = ISO8601. The default depends on the `orient`. For
 |          ``orient='table'``, the default is 'iso'. For all other orients,
 |          the default is 'epoch'.
 |      double_precision : int, default 10
 |          The number of decimal places to use when encoding
 |          floating point values. The possible maximal value is 15.
 |          Passing double_precision greater than 15 will raise a ValueError.
 |      force_ascii : bool, default True
 |          Force encoded string to be ASCII.
 |      date_unit : str, default 'ms' (milliseconds)
 |          The time unit to encode to, governs timestamp and ISO8601
 |          precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,
 |          microsecond, and nanosecond respectively.
 |      default_handler : callable, default None
 |          Handler to call if object cannot otherwise be converted to a
 |          suitable format for JSON. Should receive a single argument which is
 |          the object to convert and return a serialisable object.
 |      lines : bool, default False
 |          If 'orient' is 'records' write out line-delimited json format. Will
 |          throw ValueError if incorrect 'orient' since others are not
 |          list-like.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      
 |          .. versionchanged:: 1.4.0 Zstandard support.
 |      
 |      index : bool or None, default None
 |          The index is only used when 'orient' is 'split', 'index', 'column',
 |          or 'table'. Of these, 'index' and 'column' do not support
 |          `index=False`.
 |      
 |      indent : int, optional
 |         Length of whitespace used to indent each record.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      mode : str, default 'w' (writing)
 |          Specify the IO mode for output when supplying a path_or_buf.
 |          Accepted args are 'w' (writing) and 'a' (append) only.
 |          mode='a' is only supported when lines is True and orient is 'records'.
 |      
 |      Returns
 |      -------
 |      None or str
 |          If path_or_buf is None, returns the resulting json format as a
 |          string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      read_json : Convert a JSON string to pandas object.
 |      
 |      Notes
 |      -----
 |      The behavior of ``indent=0`` varies from the stdlib, which does not
 |      indent the output but does insert newlines. Currently, ``indent=0``
 |      and the default ``indent=None`` are equivalent in pandas, though this
 |      may change in a future release.
 |      
 |      ``orient='table'`` contains a 'pandas_version' field under 'schema'.
 |      This stores the version of `pandas` used in the latest revision of the
 |      schema.
 |      
 |      Examples
 |      --------
 |      >>> from json import loads, dumps
 |      >>> df = pd.DataFrame(
 |      ...     [["a", "b"], ["c", "d"]],
 |      ...     index=["row 1", "row 2"],
 |      ...     columns=["col 1", "col 2"],
 |      ... )
 |      
 |      >>> result = df.to_json(orient="split")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "columns": [
 |              "col 1",
 |              "col 2"
 |          ],
 |          "index": [
 |              "row 1",
 |              "row 2"
 |          ],
 |          "data": [
 |              [
 |                  "a",
 |                  "b"
 |              ],
 |              [
 |                  "c",
 |                  "d"
 |              ]
 |          ]
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'records'`` formatted JSON.
 |      Note that index labels are not preserved with this encoding.
 |      
 |      >>> result = df.to_json(orient="records")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      [
 |          {
 |              "col 1": "a",
 |              "col 2": "b"
 |          },
 |          {
 |              "col 1": "c",
 |              "col 2": "d"
 |          }
 |      ]
 |      
 |      Encoding/decoding a Dataframe using ``'index'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="index")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "row 1": {
 |              "col 1": "a",
 |              "col 2": "b"
 |          },
 |          "row 2": {
 |              "col 1": "c",
 |              "col 2": "d"
 |          }
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="columns")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "col 1": {
 |              "row 1": "a",
 |              "row 2": "c"
 |          },
 |          "col 2": {
 |              "row 1": "b",
 |              "row 2": "d"
 |          }
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'values'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="values")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      [
 |          [
 |              "a",
 |              "b"
 |          ],
 |          [
 |              "c",
 |              "d"
 |          ]
 |      ]
 |      
 |      Encoding with Table Schema:
 |      
 |      >>> result = df.to_json(orient="table")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "schema": {
 |              "fields": [
 |                  {
 |                      "name": "index",
 |                      "type": "string"
 |                  },
 |                  {
 |                      "name": "col 1",
 |                      "type": "string"
 |                  },
 |                  {
 |                      "name": "col 2",
 |                      "type": "string"
 |                  }
 |              ],
 |              "primaryKey": [
 |                  "index"
 |              ],
 |              "pandas_version": "1.4.0"
 |          },
 |          "data": [
 |              {
 |                  "index": "row 1",
 |                  "col 1": "a",
 |                  "col 2": "b"
 |              },
 |              {
 |                  "index": "row 2",
 |                  "col 1": "c",
 |                  "col 2": "d"
 |              }
 |          ]
 |      }
 |  
 |  to_latex(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -> 'str | None'
 |      Render object to a LaTeX tabular, longtable, or nested table.
 |      
 |      Requires ``\usepackage{{booktabs}}``.  The output can be copy/pasted
 |      into a main LaTeX document or read from an external file
 |      with ``\input{{table.tex}}``.
 |      
 |      .. versionchanged:: 2.0.0
 |         Refactored to use the Styler implementation via jinja2 templating.
 |      
 |      Parameters
 |      ----------
 |      buf : str, Path or StringIO-like, optional, default None
 |          Buffer to write to. If None, the output is returned as a string.
 |      columns : list of label, optional
 |          The subset of columns to write. Writes all columns by default.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of strings is given,
 |          it is assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      na_rep : str, default 'NaN'
 |          Missing data representation.
 |      formatters : list of functions or dict of {{str: function}}, optional
 |          Formatter functions to apply to columns' elements by position or
 |          name. The result of each function must be a unicode string.
 |          List must be of length equal to the number of columns.
 |      float_format : one-parameter function or str, optional, default None
 |          Formatter for floating point numbers. For example
 |          ``float_format="%.2f"`` and ``float_format="{{:0.2f}}".format`` will
 |          both result in 0.1234 being formatted as 0.12.
 |      sparsify : bool, optional
 |          Set to False for a DataFrame with a hierarchical index to print
 |          every multiindex key at each row. By default, the value will be
 |          read from the config module.
 |      index_names : bool, default True
 |          Prints the names of the indexes.
 |      bold_rows : bool, default False
 |          Make the row labels bold in the output.
 |      column_format : str, optional
 |          The columns format as specified in `LaTeX table format
 |          <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3
 |          columns. By default, 'l' will be used for all columns except
 |          columns of numbers, which default to 'r'.
 |      longtable : bool, optional
 |          Use a longtable environment instead of tabular. Requires
 |          adding a \usepackage{{longtable}} to your LaTeX preamble.
 |          By default, the value will be read from the pandas config
 |          module, and set to `True` if the option ``styler.latex.environment`` is
 |          `"longtable"`.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed.
 |      escape : bool, optional
 |          By default, the value will be read from the pandas config
 |          module and set to `True` if the option ``styler.format.escape`` is
 |          `"latex"`. When set to False prevents from escaping latex special
 |          characters in column names.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to `False`.
 |      encoding : str, optional
 |          A string representing the encoding to use in the output file,
 |          defaults to 'utf-8'.
 |      decimal : str, default '.'
 |          Character recognized as decimal separator, e.g. ',' in Europe.
 |      multicolumn : bool, default True
 |          Use \multicolumn to enhance MultiIndex columns.
 |          The default will be read from the config module, and is set
 |          as the option ``styler.sparse.columns``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed.
 |      multicolumn_format : str, default 'r'
 |          The alignment for multicolumns, similar to `column_format`
 |          The default will be read from the config module, and is set as the option
 |          ``styler.latex.multicol_align``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to "r".
 |      multirow : bool, default True
 |          Use \multirow to enhance MultiIndex rows. Requires adding a
 |          \usepackage{{multirow}} to your LaTeX preamble. Will print
 |          centered labels (instead of top-aligned) across the contained
 |          rows, separating groups via clines. The default will be read
 |          from the pandas config module, and is set as the option
 |          ``styler.sparse.index``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to `True`.
 |      caption : str or tuple, optional
 |          Tuple (full_caption, short_caption),
 |          which results in ``\caption[short_caption]{{full_caption}}``;
 |          if a single string is passed, no short caption will be set.
 |      label : str, optional
 |          The LaTeX label to be placed inside ``\label{{}}`` in the output.
 |          This is used with ``\ref{{}}`` in the main ``.tex`` file.
 |      
 |      position : str, optional
 |          The LaTeX positional argument for tables, to be placed after
 |          ``\begin{{}}`` in the output.
 |      
 |      Returns
 |      -------
 |      str or None
 |          If buf is None, returns the result as a string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      io.formats.style.Styler.to_latex : Render a DataFrame to LaTeX
 |          with conditional formatting.
 |      DataFrame.to_string : Render a DataFrame to a console-friendly
 |          tabular output.
 |      DataFrame.to_html : Render a DataFrame as an HTML table.
 |      
 |      Notes
 |      -----
 |      As of v2.0.0 this method has changed to use the Styler implementation as
 |      part of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means
 |      that ``jinja2`` is a requirement, and needs to be installed, for this method
 |      to function. It is advised that users switch to using Styler, since that
 |      implementation is more frequently updated and contains much more
 |      flexibility with the output.
 |      
 |      Examples
 |      --------
 |      Convert a general DataFrame to LaTeX with formatting:
 |      
 |      >>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],
 |      ...                        age=[26, 45],
 |      ...                        height=[181.23, 177.65]))
 |      >>> print(df.to_latex(index=False,
 |      ...                   formatters={"name": str.upper},
 |      ...                   float_format="{:.1f}".format,
 |      ... ))  # doctest: +SKIP
 |      \begin{tabular}{lrr}
 |      \toprule
 |      name & age & height \\
 |      \midrule
 |      RAPHAEL & 26 & 181.2 \\
 |      DONATELLO & 45 & 177.7 \\
 |      \bottomrule
 |      \end{tabular}
 |  
 |  to_pickle(self, path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -> 'None'
 |      Pickle (serialize) object to file.
 |      
 |      Parameters
 |      ----------
 |      path : str, path object, or file-like object
 |          String, path object (implementing ``os.PathLike[str]``), or file-like
 |          object implementing a binary ``write()`` function. File path where
 |          the pickled object will be stored.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      protocol : int
 |          Int which indicates which protocol should be used by the pickler,
 |          default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible
 |          values are 0, 1, 2, 3, 4, 5. A negative value for the protocol
 |          parameter is equivalent to setting its value to HIGHEST_PROTOCOL.
 |      
 |          .. [1] https://docs.python.org/3/library/pickle.html.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      See Also
 |      --------
 |      read_pickle : Load pickled pandas object (or any object) from file.
 |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.
 |      DataFrame.to_sql : Write DataFrame to a SQL database.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      
 |      Examples
 |      --------
 |      >>> original_df = pd.DataFrame({"foo": range(5), "bar": range(5, 10)})  # doctest: +SKIP
 |      >>> original_df  # doctest: +SKIP
 |         foo  bar
 |      0    0    5
 |      1    1    6
 |      2    2    7
 |      3    3    8
 |      4    4    9
 |      >>> original_df.to_pickle("./dummy.pkl")  # doctest: +SKIP
 |      
 |      >>> unpickled_df = pd.read_pickle("./dummy.pkl")  # doctest: +SKIP
 |      >>> unpickled_df  # doctest: +SKIP
 |         foo  bar
 |      0    0    5
 |      1    1    6
 |      2    2    7
 |      3    3    8
 |      4    4    9
 |  
 |  to_sql(self, name: 'str', con, *, schema: 'str | None' = None, if_exists: "Literal['fail', 'replace', 'append']" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: "Literal['multi'] | Callable | None" = None) -> 'int | None'
 |      Write records stored in a DataFrame to a SQL database.
 |      
 |      Databases supported by SQLAlchemy [1]_ are supported. Tables can be
 |      newly created, appended to, or overwritten.
 |      
 |      Parameters
 |      ----------
 |      name : str
 |          Name of SQL table.
 |      con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection
 |          Using SQLAlchemy makes it possible to use any DB supported by that
 |          library. Legacy support is provided for sqlite3.Connection objects. The user
 |          is responsible for engine disposal and connection closure for the SQLAlchemy
 |          connectable. See `here                 <https://docs.sqlalchemy.org/en/20/core/connections.html>`_.
 |          If passing a sqlalchemy.engine.Connection which is already in a transaction,
 |          the transaction will not be committed.  If passing a sqlite3.Connection,
 |          it will not be possible to roll back the record insertion.
 |      
 |      schema : str, optional
 |          Specify the schema (if database flavor supports this). If None, use
 |          default schema.
 |      if_exists : {'fail', 'replace', 'append'}, default 'fail'
 |          How to behave if the table already exists.
 |      
 |          * fail: Raise a ValueError.
 |          * replace: Drop the table before inserting new values.
 |          * append: Insert new values to the existing table.
 |      
 |      index : bool, default True
 |          Write DataFrame index as a column. Uses `index_label` as the column
 |          name in the table. Creates a table index for this column.
 |      index_label : str or sequence, default None
 |          Column label for index column(s). If None is given (default) and
 |          `index` is True, then the index names are used.
 |          A sequence should be given if the DataFrame uses MultiIndex.
 |      chunksize : int, optional
 |          Specify the number of rows in each batch to be written at a time.
 |          By default, all rows will be written at once.
 |      dtype : dict or scalar, optional
 |          Specifying the datatype for columns. If a dictionary is used, the
 |          keys should be the column names and the values should be the
 |          SQLAlchemy types or strings for the sqlite3 legacy mode. If a
 |          scalar is provided, it will be applied to all columns.
 |      method : {None, 'multi', callable}, optional
 |          Controls the SQL insertion clause used:
 |      
 |          * None : Uses standard SQL ``INSERT`` clause (one per row).
 |          * 'multi': Pass multiple values in a single ``INSERT`` clause.
 |          * callable with signature ``(pd_table, conn, keys, data_iter)``.
 |      
 |          Details and a sample callable implementation can be found in the
 |          section :ref:`insert method <io.sql.method>`.
 |      
 |      Returns
 |      -------
 |      None or int
 |          Number of rows affected by to_sql. None is returned if the callable
 |          passed into ``method`` does not return an integer number of rows.
 |      
 |          The number of returned rows affected is the sum of the ``rowcount``
 |          attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not
 |          reflect the exact number of written rows as stipulated in the
 |          `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or
 |          `SQLAlchemy <https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount>`__.
 |      
 |          .. versionadded:: 1.4.0
 |      
 |      Raises
 |      ------
 |      ValueError
 |          When the table already exists and `if_exists` is 'fail' (the
 |          default).
 |      
 |      See Also
 |      --------
 |      read_sql : Read a DataFrame from a table.
 |      
 |      Notes
 |      -----
 |      Timezone aware datetime columns will be written as
 |      ``Timestamp with timezone`` type with SQLAlchemy if supported by the
 |      database. Otherwise, the datetimes will be stored as timezone unaware
 |      timestamps local to the original timezone.
 |      
 |      Not all datastores support ``method="multi"``. Oracle, for example,
 |      does not support multi-value insert.
 |      
 |      References
 |      ----------
 |      .. [1] https://docs.sqlalchemy.org
 |      .. [2] https://www.python.org/dev/peps/pep-0249/
 |      
 |      Examples
 |      --------
 |      Create an in-memory SQLite database.
 |      
 |      >>> from sqlalchemy import create_engine
 |      >>> engine = create_engine('sqlite://', echo=False)
 |      
 |      Create a table from scratch with 3 rows.
 |      
 |      >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})
 |      >>> df
 |           name
 |      0  User 1
 |      1  User 2
 |      2  User 3
 |      
 |      >>> df.to_sql(name='users', con=engine)
 |      3
 |      >>> from sqlalchemy import text
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]
 |      
 |      An `sqlalchemy.engine.Connection` can also be passed to `con`:
 |      
 |      >>> with engine.begin() as connection:
 |      ...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})
 |      ...     df1.to_sql(name='users', con=connection, if_exists='append')
 |      2
 |      
 |      This is allowed to support operations that require that the same
 |      DBAPI connection is used for the entire operation.
 |      
 |      >>> df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})
 |      >>> df2.to_sql(name='users', con=engine, if_exists='append')
 |      2
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),
 |       (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),
 |       (1, 'User 7')]
 |      
 |      Overwrite the table with just ``df2``.
 |      
 |      >>> df2.to_sql(name='users', con=engine, if_exists='replace',
 |      ...            index_label='id')
 |      2
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 6'), (1, 'User 7')]
 |      
 |      Use ``method`` to define a callable insertion method to do nothing
 |      if there's a primary key conflict on a table in a PostgreSQL database.
 |      
 |      >>> from sqlalchemy.dialects.postgresql import insert
 |      >>> def insert_on_conflict_nothing(table, conn, keys, data_iter):
 |      ...     # "a" is the primary key in "conflict_table"
 |      ...     data = [dict(zip(keys, row)) for row in data_iter]
 |      ...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=["a"])
 |      ...     result = conn.execute(stmt)
 |      ...     return result.rowcount
 |      >>> df_conflict.to_sql(name="conflict_table", con=conn, if_exists="append", method=insert_on_conflict_nothing)  # doctest: +SKIP
 |      0
 |      
 |      For MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict
 |      on a primary key.
 |      
 |      >>> from sqlalchemy.dialects.mysql import insert
 |      >>> def insert_on_conflict_update(table, conn, keys, data_iter):
 |      ...     # update columns "b" and "c" on primary key conflict
 |      ...     data = [dict(zip(keys, row)) for row in data_iter]
 |      ...     stmt = (
 |      ...         insert(table.table)
 |      ...         .values(data)
 |      ...     )
 |      ...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)
 |      ...     result = conn.execute(stmt)
 |      ...     return result.rowcount
 |      >>> df_conflict.to_sql(name="conflict_table", con=conn, if_exists="append", method=insert_on_conflict_update)  # doctest: +SKIP
 |      2
 |      
 |      Specify the dtype (especially useful for integers with missing values).
 |      Notice that while pandas is forced to store the data as floating point,
 |      the database supports nullable integers. When fetching the data with
 |      Python, we get back integer scalars.
 |      
 |      >>> df = pd.DataFrame({"A": [1, None, 2]})
 |      >>> df
 |           A
 |      0  1.0
 |      1  NaN
 |      2  2.0
 |      
 |      >>> from sqlalchemy.types import Integer
 |      >>> df.to_sql(name='integers', con=engine, index=False,
 |      ...           dtype={"A": Integer()})
 |      3
 |      
 |      >>> with engine.connect() as conn:
 |      ...   conn.execute(text("SELECT * FROM integers")).fetchall()
 |      [(1,), (None,), (2,)]
 |  
 |  to_xarray(self)
 |      Return an xarray object from the pandas object.
 |      
 |      Returns
 |      -------
 |      xarray.DataArray or xarray.Dataset
 |          Data in the pandas structure converted to Dataset if the object is
 |          a DataFrame, or a DataArray if the object is a Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      
 |      Notes
 |      -----
 |      See the `xarray docs <https://xarray.pydata.org/en/stable/>`__
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),
 |      ...                    ('parrot', 'bird', 24.0, 2),
 |      ...                    ('lion', 'mammal', 80.5, 4),
 |      ...                    ('monkey', 'mammal', np.nan, 4)],
 |      ...                   columns=['name', 'class', 'max_speed',
 |      ...                            'num_legs'])
 |      >>> df
 |           name   class  max_speed  num_legs
 |      0  falcon    bird      389.0         2
 |      1  parrot    bird       24.0         2
 |      2    lion  mammal       80.5         4
 |      3  monkey  mammal        NaN         4
 |      
 |      >>> df.to_xarray()  # doctest: +SKIP
 |      <xarray.Dataset>
 |      Dimensions:    (index: 4)
 |      Coordinates:
 |        * index      (index) int64 32B 0 1 2 3
 |      Data variables:
 |          name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'
 |          class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'
 |          max_speed  (index) float64 32B 389.0 24.0 80.5 nan
 |          num_legs   (index) int64 32B 2 2 4 4
 |      
 |      >>> df['max_speed'].to_xarray()  # doctest: +SKIP
 |      <xarray.DataArray 'max_speed' (index: 4)>
 |      array([389. ,  24. ,  80.5,   nan])
 |      Coordinates:
 |        * index    (index) int64 0 1 2 3
 |      
 |      >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',
 |      ...                         '2018-01-02', '2018-01-02'])
 |      >>> df_multiindex = pd.DataFrame({'date': dates,
 |      ...                               'animal': ['falcon', 'parrot',
 |      ...                                          'falcon', 'parrot'],
 |      ...                               'speed': [350, 18, 361, 15]})
 |      >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])
 |      
 |      >>> df_multiindex
 |                         speed
 |      date       animal
 |      2018-01-01 falcon    350
 |                 parrot     18
 |      2018-01-02 falcon    361
 |                 parrot     15
 |      
 |      >>> df_multiindex.to_xarray()  # doctest: +SKIP
 |      <xarray.Dataset>
 |      Dimensions:  (date: 2, animal: 2)
 |      Coordinates:
 |        * date     (date) datetime64[ns] 2018-01-01 2018-01-02
 |        * animal   (animal) object 'falcon' 'parrot'
 |      Data variables:
 |          speed    (date, animal) int64 350 18 361 15
 |  
 |  truncate(self, before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -> 'Self'
 |      Truncate a Series or DataFrame before and after some index value.
 |      
 |      This is a useful shorthand for boolean indexing based on index
 |      values above or below certain thresholds.
 |      
 |      Parameters
 |      ----------
 |      before : date, str, int
 |          Truncate all rows before this index value.
 |      after : date, str, int
 |          Truncate all rows after this index value.
 |      axis : {0 or 'index', 1 or 'columns'}, optional
 |          Axis to truncate. Truncates the index (rows) by default.
 |          For `Series` this parameter is unused and defaults to 0.
 |      copy : bool, default is True,
 |          Return a copy of the truncated section.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      type of caller
 |          The truncated Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Select a subset of a DataFrame by label.
 |      DataFrame.iloc : Select a subset of a DataFrame by position.
 |      
 |      Notes
 |      -----
 |      If the index being truncated contains only datetime values,
 |      `before` and `after` may be specified as strings instead of
 |      Timestamps.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],
 |      ...                    'B': ['f', 'g', 'h', 'i', 'j'],
 |      ...                    'C': ['k', 'l', 'm', 'n', 'o']},
 |      ...                   index=[1, 2, 3, 4, 5])
 |      >>> df
 |         A  B  C
 |      1  a  f  k
 |      2  b  g  l
 |      3  c  h  m
 |      4  d  i  n
 |      5  e  j  o
 |      
 |      >>> df.truncate(before=2, after=4)
 |         A  B  C
 |      2  b  g  l
 |      3  c  h  m
 |      4  d  i  n
 |      
 |      The columns of a DataFrame can be truncated.
 |      
 |      >>> df.truncate(before="A", after="B", axis="columns")
 |         A  B
 |      1  a  f
 |      2  b  g
 |      3  c  h
 |      4  d  i
 |      5  e  j
 |      
 |      For Series, only rows can be truncated.
 |      
 |      >>> df['A'].truncate(before=2, after=4)
 |      2    b
 |      3    c
 |      4    d
 |      Name: A, dtype: object
 |      
 |      The index values in ``truncate`` can be datetimes or string
 |      dates.
 |      
 |      >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')
 |      >>> df = pd.DataFrame(index=dates, data={'A': 1})
 |      >>> df.tail()
 |                           A
 |      2016-01-31 23:59:56  1
 |      2016-01-31 23:59:57  1
 |      2016-01-31 23:59:58  1
 |      2016-01-31 23:59:59  1
 |      2016-02-01 00:00:00  1
 |      
 |      >>> df.truncate(before=pd.Timestamp('2016-01-05'),
 |      ...             after=pd.Timestamp('2016-01-10')).tail()
 |                           A
 |      2016-01-09 23:59:56  1
 |      2016-01-09 23:59:57  1
 |      2016-01-09 23:59:58  1
 |      2016-01-09 23:59:59  1
 |      2016-01-10 00:00:00  1
 |      
 |      Because the index is a DatetimeIndex containing only dates, we can
 |      specify `before` and `after` as strings. They will be coerced to
 |      Timestamps before truncation.
 |      
 |      >>> df.truncate('2016-01-05', '2016-01-10').tail()
 |                           A
 |      2016-01-09 23:59:56  1
 |      2016-01-09 23:59:57  1
 |      2016-01-09 23:59:58  1
 |      2016-01-09 23:59:59  1
 |      2016-01-10 00:00:00  1
 |      
 |      Note that ``truncate`` assumes a 0 value for any unspecified time
 |      component (midnight). This differs from partial string slicing, which
 |      returns any partially matching dates.
 |      
 |      >>> df.loc['2016-01-05':'2016-01-10', :].tail()
 |                           A
 |      2016-01-10 23:59:55  1
 |      2016-01-10 23:59:56  1
 |      2016-01-10 23:59:57  1
 |      2016-01-10 23:59:58  1
 |      2016-01-10 23:59:59  1
 |  
 |  tz_convert(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -> 'Self'
 |      Convert tz-aware axis to target time zone.
 |      
 |      Parameters
 |      ----------
 |      tz : str or tzinfo object or None
 |          Target time zone. Passing ``None`` will convert to
 |          UTC and remove the timezone information.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to convert
 |      level : int, str, default None
 |          If axis is a MultiIndex, convert a specific level. Otherwise
 |          must be None.
 |      copy : bool, default True
 |          Also make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Object with time zone converted axis.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the axis is tz-naive.
 |      
 |      Examples
 |      --------
 |      Change to another time zone:
 |      
 |      >>> s = pd.Series(
 |      ...     [1],
 |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']),
 |      ... )
 |      >>> s.tz_convert('Asia/Shanghai')
 |      2018-09-15 07:30:00+08:00    1
 |      dtype: int64
 |      
 |      Pass None to convert to UTC and get a tz-naive index:
 |      
 |      >>> s = pd.Series([1],
 |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))
 |      >>> s.tz_convert(None)
 |      2018-09-14 23:30:00    1
 |      dtype: int64
 |  
 |  tz_localize(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -> 'Self'
 |      Localize tz-naive index of a Series or DataFrame to target time zone.
 |      
 |      This operation localizes the Index. To localize the values in a
 |      timezone-naive Series, use :meth:`Series.dt.tz_localize`.
 |      
 |      Parameters
 |      ----------
 |      tz : str or tzinfo or None
 |          Time zone to localize. Passing ``None`` will remove the
 |          time zone information and preserve local time.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to localize
 |      level : int, str, default None
 |          If axis ia a MultiIndex, localize a specific level. Otherwise
 |          must be None.
 |      copy : bool, default True
 |          Also make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'
 |          When clocks moved backward due to DST, ambiguous times may arise.
 |          For example in Central European Time (UTC+01), when going from
 |          03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at
 |          00:30:00 UTC and at 01:30:00 UTC. In such a situation, the
 |          `ambiguous` parameter dictates how ambiguous times should be
 |          handled.
 |      
 |          - 'infer' will attempt to infer fall dst-transition hours based on
 |            order
 |          - bool-ndarray where True signifies a DST time, False designates
 |            a non-DST time (note that this flag is only applicable for
 |            ambiguous times)
 |          - 'NaT' will return NaT where there are ambiguous times
 |          - 'raise' will raise an AmbiguousTimeError if there are ambiguous
 |            times.
 |      nonexistent : str, default 'raise'
 |          A nonexistent time does not exist in a particular timezone
 |          where clocks moved forward due to DST. Valid values are:
 |      
 |          - 'shift_forward' will shift the nonexistent time forward to the
 |            closest existing time
 |          - 'shift_backward' will shift the nonexistent time backward to the
 |            closest existing time
 |          - 'NaT' will return NaT where there are nonexistent times
 |          - timedelta objects will shift nonexistent times by the timedelta
 |          - 'raise' will raise an NonExistentTimeError if there are
 |            nonexistent times.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Same type as the input.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the TimeSeries is tz-aware and tz is not None.
 |      
 |      Examples
 |      --------
 |      Localize local times:
 |      
 |      >>> s = pd.Series(
 |      ...     [1],
 |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00']),
 |      ... )
 |      >>> s.tz_localize('CET')
 |      2018-09-15 01:30:00+02:00    1
 |      dtype: int64
 |      
 |      Pass None to convert to tz-naive index and preserve local time:
 |      
 |      >>> s = pd.Series([1],
 |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))
 |      >>> s.tz_localize(None)
 |      2018-09-15 01:30:00    1
 |      dtype: int64
 |      
 |      Be careful with DST changes. When there is sequential data, pandas
 |      can infer the DST time:
 |      
 |      >>> s = pd.Series(range(7),
 |      ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',
 |      ...                                       '2018-10-28 02:00:00',
 |      ...                                       '2018-10-28 02:30:00',
 |      ...                                       '2018-10-28 02:00:00',
 |      ...                                       '2018-10-28 02:30:00',
 |      ...                                       '2018-10-28 03:00:00',
 |      ...                                       '2018-10-28 03:30:00']))
 |      >>> s.tz_localize('CET', ambiguous='infer')
 |      2018-10-28 01:30:00+02:00    0
 |      2018-10-28 02:00:00+02:00    1
 |      2018-10-28 02:30:00+02:00    2
 |      2018-10-28 02:00:00+01:00    3
 |      2018-10-28 02:30:00+01:00    4
 |      2018-10-28 03:00:00+01:00    5
 |      2018-10-28 03:30:00+01:00    6
 |      dtype: int64
 |      
 |      In some cases, inferring the DST is impossible. In such cases, you can
 |      pass an ndarray to the ambiguous parameter to set the DST explicitly
 |      
 |      >>> s = pd.Series(range(3),
 |      ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',
 |      ...                                       '2018-10-28 02:36:00',
 |      ...                                       '2018-10-28 03:46:00']))
 |      >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))
 |      2018-10-28 01:20:00+02:00    0
 |      2018-10-28 02:36:00+02:00    1
 |      2018-10-28 03:46:00+01:00    2
 |      dtype: int64
 |      
 |      If the DST transition causes nonexistent times, you can shift these
 |      dates forward or backward with a timedelta object or `'shift_forward'`
 |      or `'shift_backward'`.
 |      
 |      >>> s = pd.Series(range(2),
 |      ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',
 |      ...                                       '2015-03-29 03:30:00']))
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')
 |      2015-03-29 03:00:00+02:00    0
 |      2015-03-29 03:30:00+02:00    1
 |      dtype: int64
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')
 |      2015-03-29 01:59:59.999999999+01:00    0
 |      2015-03-29 03:30:00+02:00              1
 |      dtype: int64
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))
 |      2015-03-29 03:30:00+02:00    0
 |      2015-03-29 03:30:00+02:00    1
 |      dtype: int64
 |  
 |  where(self, cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'
 |      Replace values where the condition is False.
 |      
 |      Parameters
 |      ----------
 |      cond : bool Series/DataFrame, array-like, or callable
 |          Where `cond` is True, keep the original value. Where
 |          False, replace with corresponding value from `other`.
 |          If `cond` is callable, it is computed on the Series/DataFrame and
 |          should return boolean Series/DataFrame or array. The callable must
 |          not change input Series/DataFrame (though pandas doesn't check it).
 |      other : scalar, Series/DataFrame, or callable
 |          Entries where `cond` is False are replaced with
 |          corresponding value from `other`.
 |          If other is callable, it is computed on the Series/DataFrame and
 |          should return scalar or Series/DataFrame. The callable must not
 |          change input Series/DataFrame (though pandas doesn't check it).
 |          If not specified, entries will be filled with the corresponding
 |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension
 |          dtypes).
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      axis : int, default None
 |          Alignment axis if needed. For `Series` this parameter is
 |          unused and defaults to 0.
 |      level : int, default None
 |          Alignment level if needed.
 |      
 |      Returns
 |      -------
 |      Same type as caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      :func:`DataFrame.mask` : Return an object of same shape as
 |          self.
 |      
 |      Notes
 |      -----
 |      The where method is an application of the if-then idiom. For each
 |      element in the calling DataFrame, if ``cond`` is ``True`` the
 |      element is used; otherwise the corresponding element from the DataFrame
 |      ``other`` is used. If the axis of ``other`` does not align with axis of
 |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with
 |      False.
 |      
 |      The signature for :func:`DataFrame.where` differs from
 |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to
 |      ``np.where(m, df1, df2)``.
 |      
 |      For further details and examples see the ``where`` documentation in
 |      :ref:`indexing <indexing.where_mask>`.
 |      
 |      The dtype of the object takes precedence. The fill value is casted to
 |      the object's dtype, if this can be done losslessly.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(range(5))
 |      >>> s.where(s > 0)
 |      0    NaN
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      4    4.0
 |      dtype: float64
 |      >>> s.mask(s > 0)
 |      0    0.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      >>> s = pd.Series(range(5))
 |      >>> t = pd.Series([True, False])
 |      >>> s.where(t, 99)
 |      0     0
 |      1    99
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      >>> s.mask(t, 99)
 |      0    99
 |      1     1
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      
 |      >>> s.where(s > 1, 10)
 |      0    10
 |      1    10
 |      2    2
 |      3    3
 |      4    4
 |      dtype: int64
 |      >>> s.mask(s > 1, 10)
 |      0     0
 |      1     1
 |      2    10
 |      3    10
 |      4    10
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  2  3
 |      2  4  5
 |      3  6  7
 |      4  8  9
 |      >>> m = df % 3 == 0
 |      >>> df.where(m, -df)
 |         A  B
 |      0  0 -1
 |      1 -2  3
 |      2 -4 -5
 |      3  6 -7
 |      4 -8  9
 |      >>> df.where(m, -df) == np.where(m, df, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |      >>> df.where(m, -df) == df.mask(~m, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |  
 |  xs(self, key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -> 'Self'
 |      Return cross-section from the Series/DataFrame.
 |      
 |      This method takes a `key` argument to select data at a particular
 |      level of a MultiIndex.
 |      
 |      Parameters
 |      ----------
 |      key : label or tuple of label
 |          Label contained in the index, or partially in a MultiIndex.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Axis to retrieve cross-section on.
 |      level : object, defaults to first n levels (n=1 or len(key))
 |          In case of a key partially contained in a MultiIndex, indicate
 |          which levels are used. Levels can be referred by label or position.
 |      drop_level : bool, default True
 |          If False, returns object with same levels as self.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Cross-section from the original Series or DataFrame
 |          corresponding to the selected index levels.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Access a group of rows and columns
 |          by label(s) or a boolean array.
 |      DataFrame.iloc : Purely integer-location based indexing
 |          for selection by position.
 |      
 |      Notes
 |      -----
 |      `xs` can not be used to set values.
 |      
 |      MultiIndex Slicers is a generic way to get/set values on
 |      any level or levels.
 |      It is a superset of `xs` functionality, see
 |      :ref:`MultiIndex Slicers <advanced.mi_slicers>`.
 |      
 |      Examples
 |      --------
 |      >>> d = {'num_legs': [4, 4, 2, 2],
 |      ...      'num_wings': [0, 0, 2, 2],
 |      ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],
 |      ...      'animal': ['cat', 'dog', 'bat', 'penguin'],
 |      ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}
 |      >>> df = pd.DataFrame(data=d)
 |      >>> df = df.set_index(['class', 'animal', 'locomotion'])
 |      >>> df
 |                                 num_legs  num_wings
 |      class  animal  locomotion
 |      mammal cat     walks              4          0
 |             dog     walks              4          0
 |             bat     flies              2          2
 |      bird   penguin walks              2          2
 |      
 |      Get values at specified index
 |      
 |      >>> df.xs('mammal')
 |                         num_legs  num_wings
 |      animal locomotion
 |      cat    walks              4          0
 |      dog    walks              4          0
 |      bat    flies              2          2
 |      
 |      Get values at several indexes
 |      
 |      >>> df.xs(('mammal', 'dog', 'walks'))
 |      num_legs     4
 |      num_wings    0
 |      Name: (mammal, dog, walks), dtype: int64
 |      
 |      Get values at specified index and level
 |      
 |      >>> df.xs('cat', level=1)
 |                         num_legs  num_wings
 |      class  locomotion
 |      mammal walks              4          0
 |      
 |      Get values at several indexes and levels
 |      
 |      >>> df.xs(('bird', 'walks'),
 |      ...       level=[0, 'locomotion'])
 |               num_legs  num_wings
 |      animal
 |      penguin         2          2
 |      
 |      Get values at specified column and axis
 |      
 |      >>> df.xs('num_wings', axis=1)
 |      class   animal   locomotion
 |      mammal  cat      walks         0
 |              dog      walks         0
 |              bat      flies         2
 |      bird    penguin  walks         2
 |      Name: num_wings, dtype: int64
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.generic.NDFrame:
 |  
 |  dtypes
 |      Return the dtypes in the DataFrame.
 |      
 |      This returns a Series with the data type of each column.
 |      The result's index is the original DataFrame's columns. Columns
 |      with mixed types are stored with the ``object`` dtype. See
 |      :ref:`the User Guide <basics.dtypes>` for more.
 |      
 |      Returns
 |      -------
 |      pandas.Series
 |          The data type of each column.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'float': [1.0],
 |      ...                    'int': [1],
 |      ...                    'datetime': [pd.Timestamp('20180310')],
 |      ...                    'string': ['foo']})
 |      >>> df.dtypes
 |      float              float64
 |      int                  int64
 |      datetime    datetime64[ns]
 |      string              object
 |      dtype: object
 |  
 |  empty
 |      Indicator whether Series/DataFrame is empty.
 |      
 |      True if Series/DataFrame is entirely empty (no items), meaning any of the
 |      axes are of length 0.
 |      
 |      Returns
 |      -------
 |      bool
 |          If Series/DataFrame is empty, return True, if not return False.
 |      
 |      See Also
 |      --------
 |      Series.dropna : Return series without null values.
 |      DataFrame.dropna : Return DataFrame with labels on given axis omitted
 |          where (all or any) data are missing.
 |      
 |      Notes
 |      -----
 |      If Series/DataFrame contains only NaNs, it is still not considered empty. See
 |      the example below.
 |      
 |      Examples
 |      --------
 |      An example of an actual empty DataFrame. Notice the index is empty:
 |      
 |      >>> df_empty = pd.DataFrame({'A' : []})
 |      >>> df_empty
 |      Empty DataFrame
 |      Columns: [A]
 |      Index: []
 |      >>> df_empty.empty
 |      True
 |      
 |      If we only have NaNs in our DataFrame, it is not considered empty! We
 |      will need to drop the NaNs to make the DataFrame empty:
 |      
 |      >>> df = pd.DataFrame({'A' : [np.nan]})
 |      >>> df
 |          A
 |      0 NaN
 |      >>> df.empty
 |      False
 |      >>> df.dropna().empty
 |      True
 |      
 |      >>> ser_empty = pd.Series({'A' : []})
 |      >>> ser_empty
 |      A    []
 |      dtype: object
 |      >>> ser_empty.empty
 |      False
 |      >>> ser_empty = pd.Series()
 |      >>> ser_empty.empty
 |      True
 |  
 |  flags
 |      Get the properties associated with this pandas object.
 |      
 |      The available flags are
 |      
 |      * :attr:`Flags.allows_duplicate_labels`
 |      
 |      See Also
 |      --------
 |      Flags : Flags that apply to pandas objects.
 |      DataFrame.attrs : Global metadata applying to this dataset.
 |      
 |      Notes
 |      -----
 |      "Flags" differ from "metadata". Flags reflect properties of the
 |      pandas object (the Series or DataFrame). Metadata refer to properties
 |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": [1, 2]})
 |      >>> df.flags
 |      <Flags(allows_duplicate_labels=True)>
 |      
 |      Flags can be get or set using ``.``
 |      
 |      >>> df.flags.allows_duplicate_labels
 |      True
 |      >>> df.flags.allows_duplicate_labels = False
 |      
 |      Or by slicing with a key
 |      
 |      >>> df.flags["allows_duplicate_labels"]
 |      False
 |      >>> df.flags["allows_duplicate_labels"] = True
 |  
 |  ndim
 |      Return an int representing the number of axes / array dimensions.
 |      
 |      Return 1 if Series. Otherwise return 2 if DataFrame.
 |      
 |      See Also
 |      --------
 |      ndarray.ndim : Number of array dimensions.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})
 |      >>> s.ndim
 |      1
 |      
 |      >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
 |      >>> df.ndim
 |      2
 |  
 |  size
 |      Return an int representing the number of elements in this object.
 |      
 |      Return the number of rows if Series. Otherwise return the number of
 |      rows times number of columns if DataFrame.
 |      
 |      See Also
 |      --------
 |      ndarray.size : Number of elements in the array.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})
 |      >>> s.size
 |      3
 |      
 |      >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
 |      >>> df.size
 |      4
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.generic.NDFrame:
 |  
 |  attrs
 |      Dictionary of global attributes of this dataset.
 |      
 |      .. warning::
 |      
 |         attrs is experimental and may change without warning.
 |      
 |      See Also
 |      --------
 |      DataFrame.flags : Global flags applying to this object.
 |      
 |      Notes
 |      -----
 |      Many operations that create new datasets will copy ``attrs``. Copies
 |      are always deep so that changing ``attrs`` will only affect the
 |      present dataset. ``pandas.concat`` copies ``attrs`` only if all input
 |      datasets have the same ``attrs``.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> ser.attrs = {"A": [10, 20, 30]}
 |      >>> ser.attrs
 |      {'A': [10, 20, 30]}
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> df.attrs = {"A": [10, 20, 30]}
 |      >>> df.attrs
 |      {'A': [10, 20, 30]}
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.generic.NDFrame:
 |  
 |  __array_priority__ = 1000
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.PandasObject:
 |  
 |  __sizeof__(self) -> 'int'
 |      Generates the total memory usage for an object that returns
 |      either a value or Series of values
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  __dir__(self) -> 'list[str]'
 |      Provide method name lookup and completion.
 |      
 |      Notes
 |      -----
 |      Only provide 'public' methods.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.indexing.IndexingMixin:
 |  
 |  at
 |      Access a single value for a row/column label pair.
 |      
 |      Similar to ``loc``, in that both provide label-based lookups. Use
 |      ``at`` if you only need to get or set a single value in a DataFrame
 |      or Series.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If getting a value and 'label' does not exist in a DataFrame or Series.
 |      
 |      ValueError
 |          If row/column label pair is not a tuple or if any label
 |          from the pair is not a scalar for DataFrame.
 |          If label is list-like (*excluding* NamedTuple) for Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column pair by label.
 |      DataFrame.iat : Access a single value for a row/column pair by integer
 |          position.
 |      DataFrame.loc : Access a group of rows and columns by label(s).
 |      DataFrame.iloc : Access a group of rows and columns by integer
 |          position(s).
 |      Series.at : Access a single value by label.
 |      Series.iat : Access a single value by integer position.
 |      Series.loc : Access a group of rows by label(s).
 |      Series.iloc : Access a group of rows by integer position(s).
 |      
 |      Notes
 |      -----
 |      See :ref:`Fast scalar value getting and setting <indexing.basics.get_value>`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
 |      ...                   index=[4, 5, 6], columns=['A', 'B', 'C'])
 |      >>> df
 |          A   B   C
 |      4   0   2   3
 |      5   0   4   1
 |      6  10  20  30
 |      
 |      Get value at specified row/column pair
 |      
 |      >>> df.at[4, 'B']
 |      2
 |      
 |      Set value at specified row/column pair
 |      
 |      >>> df.at[4, 'B'] = 10
 |      >>> df.at[4, 'B']
 |      10
 |      
 |      Get value within a Series
 |      
 |      >>> df.loc[5].at['B']
 |      4
 |  
 |  iat
 |      Access a single value for a row/column pair by integer position.
 |      
 |      Similar to ``iloc``, in that both provide integer-based lookups. Use
 |      ``iat`` if you only need to get or set a single value in a DataFrame
 |      or Series.
 |      
 |      Raises
 |      ------
 |      IndexError
 |          When integer position is out of bounds.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column label pair.
 |      DataFrame.loc : Access a group of rows and columns by label(s).
 |      DataFrame.iloc : Access a group of rows and columns by integer position(s).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
 |      ...                   columns=['A', 'B', 'C'])
 |      >>> df
 |          A   B   C
 |      0   0   2   3
 |      1   0   4   1
 |      2  10  20  30
 |      
 |      Get value at specified row/column pair
 |      
 |      >>> df.iat[1, 2]
 |      1
 |      
 |      Set value at specified row/column pair
 |      
 |      >>> df.iat[1, 2] = 10
 |      >>> df.iat[1, 2]
 |      10
 |      
 |      Get value within a series
 |      
 |      >>> df.loc[0].iat[1]
 |      2
 |  
 |  iloc
 |      Purely integer-location based indexing for selection by position.
 |      
 |      .. deprecated:: 2.2.0
 |      
 |         Returning a tuple from a callable is deprecated.
 |      
 |      ``.iloc[]`` is primarily integer position based (from ``0`` to
 |      ``length-1`` of the axis), but may also be used with a boolean
 |      array.
 |      
 |      Allowed inputs are:
 |      
 |      - An integer, e.g. ``5``.
 |      - A list or array of integers, e.g. ``[4, 3, 0]``.
 |      - A slice object with ints, e.g. ``1:7``.
 |      - A boolean array.
 |      - A ``callable`` function with one argument (the calling Series or
 |        DataFrame) and that returns valid output for indexing (one of the above).
 |        This is useful in method chains, when you don't have a reference to the
 |        calling object, but would like to base your selection on
 |        some value.
 |      - A tuple of row and column indexes. The tuple elements consist of one of the
 |        above inputs, e.g. ``(0, 1)``.
 |      
 |      ``.iloc`` will raise ``IndexError`` if a requested indexer is
 |      out-of-bounds, except *slice* indexers which allow out-of-bounds
 |      indexing (this conforms with python/numpy *slice* semantics).
 |      
 |      See more at :ref:`Selection by Position <indexing.integer>`.
 |      
 |      See Also
 |      --------
 |      DataFrame.iat : Fast integer location scalar accessor.
 |      DataFrame.loc : Purely label-location based indexer for selection by label.
 |      Series.iloc : Purely integer-location based indexing for
 |                     selection by position.
 |      
 |      Examples
 |      --------
 |      >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},
 |      ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},
 |      ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000}]
 |      >>> df = pd.DataFrame(mydict)
 |      >>> df
 |            a     b     c     d
 |      0     1     2     3     4
 |      1   100   200   300   400
 |      2  1000  2000  3000  4000
 |      
 |      **Indexing just the rows**
 |      
 |      With a scalar integer.
 |      
 |      >>> type(df.iloc[0])
 |      <class 'pandas.core.series.Series'>
 |      >>> df.iloc[0]
 |      a    1
 |      b    2
 |      c    3
 |      d    4
 |      Name: 0, dtype: int64
 |      
 |      With a list of integers.
 |      
 |      >>> df.iloc[[0]]
 |         a  b  c  d
 |      0  1  2  3  4
 |      >>> type(df.iloc[[0]])
 |      <class 'pandas.core.frame.DataFrame'>
 |      
 |      >>> df.iloc[[0, 1]]
 |           a    b    c    d
 |      0    1    2    3    4
 |      1  100  200  300  400
 |      
 |      With a `slice` object.
 |      
 |      >>> df.iloc[:3]
 |            a     b     c     d
 |      0     1     2     3     4
 |      1   100   200   300   400
 |      2  1000  2000  3000  4000
 |      
 |      With a boolean mask the same length as the index.
 |      
 |      >>> df.iloc[[True, False, True]]
 |            a     b     c     d
 |      0     1     2     3     4
 |      2  1000  2000  3000  4000
 |      
 |      With a callable, useful in method chains. The `x` passed
 |      to the ``lambda`` is the DataFrame being sliced. This selects
 |      the rows whose index label even.
 |      
 |      >>> df.iloc[lambda x: x.index % 2 == 0]
 |            a     b     c     d
 |      0     1     2     3     4
 |      2  1000  2000  3000  4000
 |      
 |      **Indexing both axes**
 |      
 |      You can mix the indexer types for the index and columns. Use ``:`` to
 |      select the entire axis.
 |      
 |      With scalar integers.
 |      
 |      >>> df.iloc[0, 1]
 |      2
 |      
 |      With lists of integers.
 |      
 |      >>> df.iloc[[0, 2], [1, 3]]
 |            b     d
 |      0     2     4
 |      2  2000  4000
 |      
 |      With `slice` objects.
 |      
 |      >>> df.iloc[1:3, 0:3]
 |            a     b     c
 |      1   100   200   300
 |      2  1000  2000  3000
 |      
 |      With a boolean array whose length matches the columns.
 |      
 |      >>> df.iloc[:, [True, False, True, False]]
 |            a     c
 |      0     1     3
 |      1   100   300
 |      2  1000  3000
 |      
 |      With a callable function that expects the Series or DataFrame.
 |      
 |      >>> df.iloc[:, lambda df: [0, 2]]
 |            a     c
 |      0     1     3
 |      1   100   300
 |      2  1000  3000
 |  
 |  loc
 |      Access a group of rows and columns by label(s) or a boolean array.
 |      
 |      ``.loc[]`` is primarily label based, but may also be used with a
 |      boolean array.
 |      
 |      Allowed inputs are:
 |      
 |      - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is
 |        interpreted as a *label* of the index, and **never** as an
 |        integer position along the index).
 |      - A list or array of labels, e.g. ``['a', 'b', 'c']``.
 |      - A slice object with labels, e.g. ``'a':'f'``.
 |      
 |        .. warning:: Note that contrary to usual python slices, **both** the
 |            start and the stop are included
 |      
 |      - A boolean array of the same length as the axis being sliced,
 |        e.g. ``[True, False, True]``.
 |      - An alignable boolean Series. The index of the key will be aligned before
 |        masking.
 |      - An alignable Index. The Index of the returned selection will be the input.
 |      - A ``callable`` function with one argument (the calling Series or
 |        DataFrame) and that returns valid output for indexing (one of the above)
 |      
 |      See more at :ref:`Selection by Label <indexing.label>`.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If any items are not found.
 |      IndexingError
 |          If an indexed key is passed and its index is unalignable to the frame index.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column label pair.
 |      DataFrame.iloc : Access group of rows and columns by integer position(s).
 |      DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the
 |                     Series/DataFrame.
 |      Series.loc : Access group of values using labels.
 |      
 |      Examples
 |      --------
 |      **Getting values**
 |      
 |      >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
 |      ...                   index=['cobra', 'viper', 'sidewinder'],
 |      ...                   columns=['max_speed', 'shield'])
 |      >>> df
 |                  max_speed  shield
 |      cobra               1       2
 |      viper               4       5
 |      sidewinder          7       8
 |      
 |      Single label. Note this returns the row as a Series.
 |      
 |      >>> df.loc['viper']
 |      max_speed    4
 |      shield       5
 |      Name: viper, dtype: int64
 |      
 |      List of labels. Note using ``[[]]`` returns a DataFrame.
 |      
 |      >>> df.loc[['viper', 'sidewinder']]
 |                  max_speed  shield
 |      viper               4       5
 |      sidewinder          7       8
 |      
 |      Single label for row and column
 |      
 |      >>> df.loc['cobra', 'shield']
 |      2
 |      
 |      Slice with labels for row and single label for column. As mentioned
 |      above, note that both the start and stop of the slice are included.
 |      
 |      >>> df.loc['cobra':'viper', 'max_speed']
 |      cobra    1
 |      viper    4
 |      Name: max_speed, dtype: int64
 |      
 |      Boolean list with the same length as the row axis
 |      
 |      >>> df.loc[[False, False, True]]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      Alignable boolean Series:
 |      
 |      >>> df.loc[pd.Series([False, True, False],
 |      ...                  index=['viper', 'sidewinder', 'cobra'])]
 |                           max_speed  shield
 |      sidewinder          7       8
 |      
 |      Index (same behavior as ``df.reindex``)
 |      
 |      >>> df.loc[pd.Index(["cobra", "viper"], name="foo")]
 |             max_speed  shield
 |      foo
 |      cobra          1       2
 |      viper          4       5
 |      
 |      Conditional that returns a boolean Series
 |      
 |      >>> df.loc[df['shield'] > 6]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      Conditional that returns a boolean Series with column labels specified
 |      
 |      >>> df.loc[df['shield'] > 6, ['max_speed']]
 |                  max_speed
 |      sidewinder          7
 |      
 |      Multiple conditional using ``&`` that returns a boolean Series
 |      
 |      >>> df.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]
 |                  max_speed  shield
 |      viper          4       5
 |      
 |      Multiple conditional using ``|`` that returns a boolean Series
 |      
 |      >>> df.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]
 |                  max_speed  shield
 |      cobra               1       2
 |      sidewinder          7       8
 |      
 |      Please ensure that each condition is wrapped in parentheses ``()``.
 |      See the :ref:`user guide<indexing.boolean>`
 |      for more details and explanations of Boolean indexing.
 |      
 |      .. note::
 |          If you find yourself using 3 or more conditionals in ``.loc[]``,
 |          consider using :ref:`advanced indexing<advanced.advanced_hierarchical>`.
 |      
 |          See below for using ``.loc[]`` on MultiIndex DataFrames.
 |      
 |      Callable that returns a boolean Series
 |      
 |      >>> df.loc[lambda df: df['shield'] == 8]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      **Setting values**
 |      
 |      Set value for all items matching the list of labels
 |      
 |      >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50
 |      >>> df
 |                  max_speed  shield
 |      cobra               1       2
 |      viper               4      50
 |      sidewinder          7      50
 |      
 |      Set value for an entire row
 |      
 |      >>> df.loc['cobra'] = 10
 |      >>> df
 |                  max_speed  shield
 |      cobra              10      10
 |      viper               4      50
 |      sidewinder          7      50
 |      
 |      Set value for an entire column
 |      
 |      >>> df.loc[:, 'max_speed'] = 30
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper              30      50
 |      sidewinder         30      50
 |      
 |      Set value for rows matching callable condition
 |      
 |      >>> df.loc[df['shield'] > 35] = 0
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper               0       0
 |      sidewinder          0       0
 |      
 |      Add value matching location
 |      
 |      >>> df.loc["viper", "shield"] += 5
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper               0       5
 |      sidewinder          0       0
 |      
 |      Setting using a ``Series`` or a ``DataFrame`` sets the values matching the
 |      index labels, not the index positions.
 |      
 |      >>> shuffled_df = df.loc[["viper", "cobra", "sidewinder"]]
 |      >>> df.loc[:] += shuffled_df
 |      >>> df
 |                  max_speed  shield
 |      cobra              60      20
 |      viper               0      10
 |      sidewinder          0       0
 |      
 |      **Getting values on a DataFrame with an index that has integer labels**
 |      
 |      Another example using integers for the index
 |      
 |      >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
 |      ...                   index=[7, 8, 9], columns=['max_speed', 'shield'])
 |      >>> df
 |         max_speed  shield
 |      7          1       2
 |      8          4       5
 |      9          7       8
 |      
 |      Slice with integer labels for rows. As mentioned above, note that both
 |      the start and stop of the slice are included.
 |      
 |      >>> df.loc[7:9]
 |         max_speed  shield
 |      7          1       2
 |      8          4       5
 |      9          7       8
 |      
 |      **Getting values with a MultiIndex**
 |      
 |      A number of examples using a DataFrame with a MultiIndex
 |      
 |      >>> tuples = [
 |      ...     ('cobra', 'mark i'), ('cobra', 'mark ii'),
 |      ...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),
 |      ...     ('viper', 'mark ii'), ('viper', 'mark iii')
 |      ... ]
 |      >>> index = pd.MultiIndex.from_tuples(tuples)
 |      >>> values = [[12, 2], [0, 4], [10, 20],
 |      ...           [1, 4], [7, 1], [16, 36]]
 |      >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)
 |      >>> df
 |                           max_speed  shield
 |      cobra      mark i           12       2
 |                 mark ii           0       4
 |      sidewinder mark i           10      20
 |                 mark ii           1       4
 |      viper      mark ii           7       1
 |                 mark iii         16      36
 |      
 |      Single label. Note this returns a DataFrame with a single index.
 |      
 |      >>> df.loc['cobra']
 |               max_speed  shield
 |      mark i          12       2
 |      mark ii          0       4
 |      
 |      Single index tuple. Note this returns a Series.
 |      
 |      >>> df.loc[('cobra', 'mark ii')]
 |      max_speed    0
 |      shield       4
 |      Name: (cobra, mark ii), dtype: int64
 |      
 |      Single label for row and column. Similar to passing in a tuple, this
 |      returns a Series.
 |      
 |      >>> df.loc['cobra', 'mark i']
 |      max_speed    12
 |      shield        2
 |      Name: (cobra, mark i), dtype: int64
 |      
 |      Single tuple. Note using ``[[]]`` returns a DataFrame.
 |      
 |      >>> df.loc[[('cobra', 'mark ii')]]
 |                     max_speed  shield
 |      cobra mark ii          0       4
 |      
 |      Single tuple for the index with a single label for the column
 |      
 |      >>> df.loc[('cobra', 'mark i'), 'shield']
 |      2
 |      
 |      Slice from index tuple to single label
 |      
 |      >>> df.loc[('cobra', 'mark i'):'viper']
 |                           max_speed  shield
 |      cobra      mark i           12       2
 |                 mark ii           0       4
 |      sidewinder mark i           10      20
 |                 mark ii           1       4
 |      viper      mark ii           7       1
 |                 mark iii         16      36
 |      
 |      Slice from index tuple to index tuple
 |      
 |      >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]
 |                          max_speed  shield
 |      cobra      mark i          12       2
 |                 mark ii          0       4
 |      sidewinder mark i          10      20
 |                 mark ii          1       4
 |      viper      mark ii          7       1
 |      
 |      Please see the :ref:`user guide<advanced.advanced_hierarchical>`
 |      for more details and explanations of advanced indexing.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __add__(self, other)
 |      Get Addition of DataFrame and other, column-wise.
 |      
 |      Equivalent to ``DataFrame.add(other)``.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Object to be added to the DataFrame.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The result of adding ``other`` to DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add a DataFrame and another object, with option for index-
 |          or column-oriented addition.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'height': [1.5, 2.6], 'weight': [500, 800]},
 |      ...                   index=['elk', 'moose'])
 |      >>> df
 |             height  weight
 |      elk       1.5     500
 |      moose     2.6     800
 |      
 |      Adding a scalar affects all rows and columns.
 |      
 |      >>> df[['height', 'weight']] + 1.5
 |             height  weight
 |      elk       3.0   501.5
 |      moose     4.1   801.5
 |      
 |      Each element of a list is added to a column of the DataFrame, in order.
 |      
 |      >>> df[['height', 'weight']] + [0.5, 1.5]
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      Keys of a dictionary are aligned to the DataFrame, based on column names;
 |      each value in the dictionary is added to the corresponding column.
 |      
 |      >>> df[['height', 'weight']] + {'height': 0.5, 'weight': 1.5}
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      When `other` is a :class:`Series`, the index of `other` is aligned with the
 |      columns of the DataFrame.
 |      
 |      >>> s1 = pd.Series([0.5, 1.5], index=['weight', 'height'])
 |      >>> df[['height', 'weight']] + s1
 |             height  weight
 |      elk       3.0   500.5
 |      moose     4.1   800.5
 |      
 |      Even when the index of `other` is the same as the index of the DataFrame,
 |      the :class:`Series` will not be reoriented. If index-wise alignment is desired,
 |      :meth:`DataFrame.add` should be used with `axis='index'`.
 |      
 |      >>> s2 = pd.Series([0.5, 1.5], index=['elk', 'moose'])
 |      >>> df[['height', 'weight']] + s2
 |             elk  height  moose  weight
 |      elk    NaN     NaN    NaN     NaN
 |      moose  NaN     NaN    NaN     NaN
 |      
 |      >>> df[['height', 'weight']].add(s2, axis='index')
 |             height  weight
 |      elk       2.0   500.5
 |      moose     4.1   801.5
 |      
 |      When `other` is a :class:`DataFrame`, both columns names and the
 |      index are aligned.
 |      
 |      >>> other = pd.DataFrame({'height': [0.2, 0.4, 0.6]},
 |      ...                      index=['elk', 'moose', 'deer'])
 |      >>> df[['height', 'weight']] + other
 |             height  weight
 |      deer      NaN     NaN
 |      elk       1.7     NaN
 |      moose     3.0     NaN
 |  
 |  __and__(self, other)
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __floordiv__(self, other)
 |  
 |  __ge__(self, other)
 |      Return self>=value.
 |  
 |  __gt__(self, other)
 |      Return self>value.
 |  
 |  __le__(self, other)
 |      Return self<=value.
 |  
 |  __lt__(self, other)
 |      Return self<value.
 |  
 |  __mod__(self, other)
 |  
 |  __mul__(self, other)
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __or__(self, other)
 |  
 |  __pow__(self, other)
 |  
 |  __radd__(self, other)
 |  
 |  __rand__(self, other)
 |  
 |  __rfloordiv__(self, other)
 |  
 |  __rmod__(self, other)
 |  
 |  __rmul__(self, other)
 |  
 |  __ror__(self, other)
 |  
 |  __rpow__(self, other)
 |  
 |  __rsub__(self, other)
 |  
 |  __rtruediv__(self, other)
 |  
 |  __rxor__(self, other)
 |  
 |  __sub__(self, other)
 |  
 |  __truediv__(self, other)
 |  
 |  __xor__(self, other)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __hash__ = None

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& abs &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method abs in module pandas.core.generic:

abs() -> 'Self' method of pandas.core.frame.DataFrame instance
    Return a Series/DataFrame with absolute numeric value of each element.
    
    This function only applies to elements that are all numeric.
    
    Returns
    -------
    abs
        Series/DataFrame containing the absolute value of each element.
    
    See Also
    --------
    numpy.absolute : Calculate the absolute value element-wise.
    
    Notes
    -----
    For ``complex`` inputs, ``1.2 + 1j``, the absolute value is
    :math:`\sqrt{ a^2 + b^2 }`.
    
    Examples
    --------
    Absolute numeric values in a Series.
    
    >>> s = pd.Series([-1.10, 2, -3.33, 4])
    >>> s.abs()
    0    1.10
    1    2.00
    2    3.33
    3    4.00
    dtype: float64
    
    Absolute numeric values in a Series with complex numbers.
    
    >>> s = pd.Series([1.2 + 1j])
    >>> s.abs()
    0    1.56205
    dtype: float64
    
    Absolute numeric values in a Series with a Timedelta element.
    
    >>> s = pd.Series([pd.Timedelta('1 days')])
    >>> s.abs()
    0   1 days
    dtype: timedelta64[ns]
    
    Select rows with data closest to certain value using argsort (from
    `StackOverflow <https://stackoverflow.com/a/17758115>`__).
    
    >>> df = pd.DataFrame({
    ...     'a': [4, 5, 6, 7],
    ...     'b': [10, 20, 30, 40],
    ...     'c': [100, 50, -30, -50]
    ... })
    >>> df
         a    b    c
    0    4   10  100
    1    5   20   50
    2    6   30  -30
    3    7   40  -50
    >>> df.loc[(df.c - 43).abs().argsort()]
         a    b    c
    1    5   20   50
    0    4   10  100
    2    6   30  -30
    3    7   40  -50

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& add &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method add in module pandas.core.frame:

add(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Addition of dataframe and other, element-wise (binary operator `add`).
    
    Equivalent to ``dataframe + other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `radd`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& add_prefix &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method add_prefix in module pandas.core.generic:

add_prefix(prefix: 'str', axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Prefix labels with string `prefix`.
    
    For Series, the row labels are prefixed.
    For DataFrame, the column labels are prefixed.
    
    Parameters
    ----------
    prefix : str
        The string to add before each label.
    axis : {0 or 'index', 1 or 'columns', None}, default None
        Axis to add prefix on
    
        .. versionadded:: 2.0.0
    
    Returns
    -------
    Series or DataFrame
        New Series or DataFrame with updated labels.
    
    See Also
    --------
    Series.add_suffix: Suffix row labels with string `suffix`.
    DataFrame.add_suffix: Suffix column labels with string `suffix`.
    
    Examples
    --------
    >>> s = pd.Series([1, 2, 3, 4])
    >>> s
    0    1
    1    2
    2    3
    3    4
    dtype: int64
    
    >>> s.add_prefix('item_')
    item_0    1
    item_1    2
    item_2    3
    item_3    4
    dtype: int64
    
    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
    >>> df
       A  B
    0  1  3
    1  2  4
    2  3  5
    3  4  6
    
    >>> df.add_prefix('col_')
         col_A  col_B
    0       1       3
    1       2       4
    2       3       5
    3       4       6

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& add_suffix &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method add_suffix in module pandas.core.generic:

add_suffix(suffix: 'str', axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Suffix labels with string `suffix`.
    
    For Series, the row labels are suffixed.
    For DataFrame, the column labels are suffixed.
    
    Parameters
    ----------
    suffix : str
        The string to add after each label.
    axis : {0 or 'index', 1 or 'columns', None}, default None
        Axis to add suffix on
    
        .. versionadded:: 2.0.0
    
    Returns
    -------
    Series or DataFrame
        New Series or DataFrame with updated labels.
    
    See Also
    --------
    Series.add_prefix: Prefix row labels with string `prefix`.
    DataFrame.add_prefix: Prefix column labels with string `prefix`.
    
    Examples
    --------
    >>> s = pd.Series([1, 2, 3, 4])
    >>> s
    0    1
    1    2
    2    3
    3    4
    dtype: int64
    
    >>> s.add_suffix('_item')
    0_item    1
    1_item    2
    2_item    3
    3_item    4
    dtype: int64
    
    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
    >>> df
       A  B
    0  1  3
    1  2  4
    2  3  5
    3  4  6
    
    >>> df.add_suffix('_col')
         A_col  B_col
    0       1       3
    1       2       4
    2       3       5
    3       4       6

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& agg &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method aggregate in module pandas.core.frame:

aggregate(func=None, axis: 'Axis' = 0, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Aggregate using one or more operations over the specified axis.
    
    Parameters
    ----------
    func : function, str, list or dict
        Function to use for aggregating the data. If a function, must either
        work when passed a DataFrame or when passed to DataFrame.apply.
    
        Accepted combinations are:
    
        - function
        - string function name
        - list of functions and/or function names, e.g. ``[np.sum, 'mean']``
        - dict of axis labels -> functions, function names or list of such.
    axis : {0 or 'index', 1 or 'columns'}, default 0
            If 0 or 'index': apply function to each column.
            If 1 or 'columns': apply function to each row.
    *args
        Positional arguments to pass to `func`.
    **kwargs
        Keyword arguments to pass to `func`.
    
    Returns
    -------
    scalar, Series or DataFrame
    
        The return can be:
    
        * scalar : when Series.agg is called with single function
        * Series : when DataFrame.agg is called with a single function
        * DataFrame : when DataFrame.agg is called with several functions
    
    See Also
    --------
    DataFrame.apply : Perform any type of operations.
    DataFrame.transform : Perform transformation type operations.
    pandas.DataFrame.groupby : Perform operations over groups.
    pandas.DataFrame.resample : Perform operations over resampled bins.
    pandas.DataFrame.rolling : Perform operations over rolling window.
    pandas.DataFrame.expanding : Perform operations over expanding window.
    pandas.core.window.ewm.ExponentialMovingWindow : Perform operation over exponential
        weighted window.
    
    Notes
    -----
    The aggregation operations are always performed over an axis, either the
    index (default) or the column axis. This behavior is different from
    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,
    `var`), where the default is to compute the aggregation of the flattened
    array, e.g., ``numpy.mean(arr_2d)`` as opposed to
    ``numpy.mean(arr_2d, axis=0)``.
    
    `agg` is an alias for `aggregate`. Use the alias.
    
    Functions that mutate the passed object can produce unexpected
    behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
    for more details.
    
    A passed user-defined-function will be passed a Series for evaluation.
    
    Examples
    --------
    >>> df = pd.DataFrame([[1, 2, 3],
    ...                    [4, 5, 6],
    ...                    [7, 8, 9],
    ...                    [np.nan, np.nan, np.nan]],
    ...                   columns=['A', 'B', 'C'])
    
    Aggregate these functions over the rows.
    
    >>> df.agg(['sum', 'min'])
            A     B     C
    sum  12.0  15.0  18.0
    min   1.0   2.0   3.0
    
    Different aggregations per column.
    
    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})
            A    B
    sum  12.0  NaN
    min   1.0  2.0
    max   NaN  8.0
    
    Aggregate different functions over the columns and rename the index of the resulting
    DataFrame.
    
    >>> df.agg(x=('A', 'max'), y=('B', 'min'), z=('C', 'mean'))
         A    B    C
    x  7.0  NaN  NaN
    y  NaN  2.0  NaN
    z  NaN  NaN  6.0
    
    Aggregate over the columns.
    
    >>> df.agg("mean", axis="columns")
    0    2.0
    1    5.0
    2    8.0
    3    NaN
    dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& aggregate &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method aggregate in module pandas.core.frame:

aggregate(func=None, axis: 'Axis' = 0, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Aggregate using one or more operations over the specified axis.
    
    Parameters
    ----------
    func : function, str, list or dict
        Function to use for aggregating the data. If a function, must either
        work when passed a DataFrame or when passed to DataFrame.apply.
    
        Accepted combinations are:
    
        - function
        - string function name
        - list of functions and/or function names, e.g. ``[np.sum, 'mean']``
        - dict of axis labels -> functions, function names or list of such.
    axis : {0 or 'index', 1 or 'columns'}, default 0
            If 0 or 'index': apply function to each column.
            If 1 or 'columns': apply function to each row.
    *args
        Positional arguments to pass to `func`.
    **kwargs
        Keyword arguments to pass to `func`.
    
    Returns
    -------
    scalar, Series or DataFrame
    
        The return can be:
    
        * scalar : when Series.agg is called with single function
        * Series : when DataFrame.agg is called with a single function
        * DataFrame : when DataFrame.agg is called with several functions
    
    See Also
    --------
    DataFrame.apply : Perform any type of operations.
    DataFrame.transform : Perform transformation type operations.
    pandas.DataFrame.groupby : Perform operations over groups.
    pandas.DataFrame.resample : Perform operations over resampled bins.
    pandas.DataFrame.rolling : Perform operations over rolling window.
    pandas.DataFrame.expanding : Perform operations over expanding window.
    pandas.core.window.ewm.ExponentialMovingWindow : Perform operation over exponential
        weighted window.
    
    Notes
    -----
    The aggregation operations are always performed over an axis, either the
    index (default) or the column axis. This behavior is different from
    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,
    `var`), where the default is to compute the aggregation of the flattened
    array, e.g., ``numpy.mean(arr_2d)`` as opposed to
    ``numpy.mean(arr_2d, axis=0)``.
    
    `agg` is an alias for `aggregate`. Use the alias.
    
    Functions that mutate the passed object can produce unexpected
    behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
    for more details.
    
    A passed user-defined-function will be passed a Series for evaluation.
    
    Examples
    --------
    >>> df = pd.DataFrame([[1, 2, 3],
    ...                    [4, 5, 6],
    ...                    [7, 8, 9],
    ...                    [np.nan, np.nan, np.nan]],
    ...                   columns=['A', 'B', 'C'])
    
    Aggregate these functions over the rows.
    
    >>> df.agg(['sum', 'min'])
            A     B     C
    sum  12.0  15.0  18.0
    min   1.0   2.0   3.0
    
    Different aggregations per column.
    
    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})
            A    B
    sum  12.0  NaN
    min   1.0  2.0
    max   NaN  8.0
    
    Aggregate different functions over the columns and rename the index of the resulting
    DataFrame.
    
    >>> df.agg(x=('A', 'max'), y=('B', 'min'), z=('C', 'mean'))
         A    B    C
    x  7.0  NaN  NaN
    y  NaN  2.0  NaN
    z  NaN  NaN  6.0
    
    Aggregate over the columns.
    
    >>> df.agg("mean", axis="columns")
    0    2.0
    1    5.0
    2    8.0
    3    NaN
    dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& align &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method align in module pandas.core.generic:

align(other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, fill_axis: 'Axis | lib.NoDefault' = <no_default>, broadcast_axis: 'Axis | None | lib.NoDefault' = <no_default>) -> 'tuple[Self, NDFrameT]' method of pandas.core.frame.DataFrame instance
    Align two objects on their axes with the specified join method.
    
    Join method is specified for each axis Index.
    
    Parameters
    ----------
    other : DataFrame or Series
    join : {'outer', 'inner', 'left', 'right'}, default 'outer'
        Type of alignment to be performed.
    
        * left: use only keys from left frame, preserve key order.
        * right: use only keys from right frame, preserve key order.
        * outer: use union of keys from both frames, sort keys lexicographically.
        * inner: use intersection of keys from both frames,
          preserve the order of the left keys.
    
    axis : allowed axis of the other object, default None
        Align on index (0), columns (1), or both (None).
    level : int or level name, default None
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    copy : bool, default True
        Always returns new objects. If copy=False and no reindexing is
        required then original objects are returned.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    fill_value : scalar, default np.nan
        Value to use for missing values. Defaults to NaN, but can be any
        "compatible" value.
    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None
        Method to use for filling holes in reindexed Series:
    
        - pad / ffill: propagate last valid observation forward to next valid.
        - backfill / bfill: use NEXT valid observation to fill gap.
    
        .. deprecated:: 2.1
    
    limit : int, default None
        If method is specified, this is the maximum number of consecutive
        NaN values to forward/backward fill. In other words, if there is
        a gap with more than this number of consecutive NaNs, it will only
        be partially filled. If method is not specified, this is the
        maximum number of entries along the entire axis where NaNs will be
        filled. Must be greater than 0 if not None.
    
        .. deprecated:: 2.1
    
    fill_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default 0
        Filling axis, method and limit.
    
        .. deprecated:: 2.1
    
    broadcast_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default None
        Broadcast values along this axis, if aligning two objects of
        different dimensions.
    
        .. deprecated:: 2.1
    
    Returns
    -------
    tuple of (Series/DataFrame, type of other)
        Aligned objects.
    
    Examples
    --------
    >>> df = pd.DataFrame(
    ...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=["D", "B", "E", "A"], index=[1, 2]
    ... )
    >>> other = pd.DataFrame(
    ...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],
    ...     columns=["A", "B", "C", "D"],
    ...     index=[2, 3, 4],
    ... )
    >>> df
       D  B  E  A
    1  1  2  3  4
    2  6  7  8  9
    >>> other
        A    B    C    D
    2   10   20   30   40
    3   60   70   80   90
    4  600  700  800  900
    
    Align on columns:
    
    >>> left, right = df.align(other, join="outer", axis=1)
    >>> left
       A  B   C  D  E
    1  4  2 NaN  1  3
    2  9  7 NaN  6  8
    >>> right
        A    B    C    D   E
    2   10   20   30   40 NaN
    3   60   70   80   90 NaN
    4  600  700  800  900 NaN
    
    We can also align on the index:
    
    >>> left, right = df.align(other, join="outer", axis=0)
    >>> left
        D    B    E    A
    1  1.0  2.0  3.0  4.0
    2  6.0  7.0  8.0  9.0
    3  NaN  NaN  NaN  NaN
    4  NaN  NaN  NaN  NaN
    >>> right
        A      B      C      D
    1    NaN    NaN    NaN    NaN
    2   10.0   20.0   30.0   40.0
    3   60.0   70.0   80.0   90.0
    4  600.0  700.0  800.0  900.0
    
    Finally, the default `axis=None` will align on both index and columns:
    
    >>> left, right = df.align(other, join="outer", axis=None)
    >>> left
         A    B   C    D    E
    1  4.0  2.0 NaN  1.0  3.0
    2  9.0  7.0 NaN  6.0  8.0
    3  NaN  NaN NaN  NaN  NaN
    4  NaN  NaN NaN  NaN  NaN
    >>> right
           A      B      C      D   E
    1    NaN    NaN    NaN    NaN NaN
    2   10.0   20.0   30.0   40.0 NaN
    3   60.0   70.0   80.0   90.0 NaN
    4  600.0  700.0  800.0  900.0 NaN

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& all &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method all in module pandas.core.frame:

all(axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'Series | bool' method of pandas.core.frame.DataFrame instance
    Return whether all elements are True, potentially over an axis.
    
    Returns True unless there at least one element within a series or
    along a Dataframe axis that is False or equivalent (e.g. zero or
    empty).
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns', None}, default 0
        Indicate which axis or axes should be reduced. For `Series` this parameter
        is unused and defaults to 0.
    
        * 0 / 'index' : reduce the index, return a Series whose index is the
          original column labels.
        * 1 / 'columns' : reduce the columns, return a Series whose index is the
          original index.
        * None : reduce all axes, return a scalar.
    
    bool_only : bool, default False
        Include only boolean columns. Not implemented for Series.
    skipna : bool, default True
        Exclude NA/null values. If the entire row/column is NA and skipna is
        True, then the result will be True, as for an empty row/column.
        If skipna is False, then NA are treated as True, because these are not
        equal to zero.
    **kwargs : any, default None
        Additional keywords have no effect but might be accepted for
        compatibility with NumPy.
    
    Returns
    -------
    Series or DataFrame
        If level is specified, then, DataFrame is returned; otherwise, Series
        is returned.
    
    See Also
    --------
    Series.all : Return True if all elements are True.
    DataFrame.any : Return True if one (or more) elements are True.
    
    Examples
    --------
    **Series**
    
    >>> pd.Series([True, True]).all()
    True
    >>> pd.Series([True, False]).all()
    False
    >>> pd.Series([], dtype="float64").all()
    True
    >>> pd.Series([np.nan]).all()
    True
    >>> pd.Series([np.nan]).all(skipna=False)
    True
    
    **DataFrames**
    
    Create a dataframe from a dictionary.
    
    >>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})
    >>> df
       col1   col2
    0  True   True
    1  True  False
    
    Default behaviour checks if values in each column all return True.
    
    >>> df.all()
    col1     True
    col2    False
    dtype: bool
    
    Specify ``axis='columns'`` to check if values in each row all return True.
    
    >>> df.all(axis='columns')
    0     True
    1    False
    dtype: bool
    
    Or ``axis=None`` for whether every value is True.
    
    >>> df.all(axis=None)
    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& any &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method any in module pandas.core.frame:

any(*, axis: 'Axis | None' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'Series | bool' method of pandas.core.frame.DataFrame instance
    Return whether any element is True, potentially over an axis.
    
    Returns False unless there is at least one element within a series or
    along a Dataframe axis that is True or equivalent (e.g. non-zero or
    non-empty).
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns', None}, default 0
        Indicate which axis or axes should be reduced. For `Series` this parameter
        is unused and defaults to 0.
    
        * 0 / 'index' : reduce the index, return a Series whose index is the
          original column labels.
        * 1 / 'columns' : reduce the columns, return a Series whose index is the
          original index.
        * None : reduce all axes, return a scalar.
    
    bool_only : bool, default False
        Include only boolean columns. Not implemented for Series.
    skipna : bool, default True
        Exclude NA/null values. If the entire row/column is NA and skipna is
        True, then the result will be False, as for an empty row/column.
        If skipna is False, then NA are treated as True, because these are not
        equal to zero.
    **kwargs : any, default None
        Additional keywords have no effect but might be accepted for
        compatibility with NumPy.
    
    Returns
    -------
    Series or DataFrame
        If level is specified, then, DataFrame is returned; otherwise, Series
        is returned.
    
    See Also
    --------
    numpy.any : Numpy version of this method.
    Series.any : Return whether any element is True.
    Series.all : Return whether all elements are True.
    DataFrame.any : Return whether any element is True over requested axis.
    DataFrame.all : Return whether all elements are True over requested axis.
    
    Examples
    --------
    **Series**
    
    For Series input, the output is a scalar indicating whether any element
    is True.
    
    >>> pd.Series([False, False]).any()
    False
    >>> pd.Series([True, False]).any()
    True
    >>> pd.Series([], dtype="float64").any()
    False
    >>> pd.Series([np.nan]).any()
    False
    >>> pd.Series([np.nan]).any(skipna=False)
    True
    
    **DataFrame**
    
    Whether each column contains at least one True element (the default).
    
    >>> df = pd.DataFrame({"A": [1, 2], "B": [0, 2], "C": [0, 0]})
    >>> df
       A  B  C
    0  1  0  0
    1  2  2  0
    
    >>> df.any()
    A     True
    B     True
    C    False
    dtype: bool
    
    Aggregating over the columns.
    
    >>> df = pd.DataFrame({"A": [True, False], "B": [1, 2]})
    >>> df
           A  B
    0   True  1
    1  False  2
    
    >>> df.any(axis='columns')
    0    True
    1    True
    dtype: bool
    
    >>> df = pd.DataFrame({"A": [True, False], "B": [1, 0]})
    >>> df
           A  B
    0   True  1
    1  False  0
    
    >>> df.any(axis='columns')
    0    True
    1    False
    dtype: bool
    
    Aggregating over the entire DataFrame with ``axis=None``.
    
    >>> df.any(axis=None)
    True
    
    `any` for an empty DataFrame is an empty Series.
    
    >>> pd.DataFrame([]).any()
    Series([], dtype: bool)

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& apply &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method apply in module pandas.core.frame:

apply(func: 'AggFuncType', axis: 'Axis' = 0, raw: 'bool' = False, result_type: "Literal['expand', 'reduce', 'broadcast'] | None" = None, args=(), by_row: "Literal[False, 'compat']" = 'compat', engine: "Literal['python', 'numba']" = 'python', engine_kwargs: 'dict[str, bool] | None' = None, **kwargs) method of pandas.core.frame.DataFrame instance
    Apply a function along an axis of the DataFrame.
    
    Objects passed to the function are Series objects whose index is
    either the DataFrame's index (``axis=0``) or the DataFrame's columns
    (``axis=1``). By default (``result_type=None``), the final return type
    is inferred from the return type of the applied function. Otherwise,
    it depends on the `result_type` argument.
    
    Parameters
    ----------
    func : function
        Function to apply to each column or row.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Axis along which the function is applied:
    
        * 0 or 'index': apply function to each column.
        * 1 or 'columns': apply function to each row.
    
    raw : bool, default False
        Determines if row or column is passed as a Series or ndarray object:
    
        * ``False`` : passes each row or column as a Series to the
          function.
        * ``True`` : the passed function will receive ndarray objects
          instead.
          If you are just applying a NumPy reduction function this will
          achieve much better performance.
    
    result_type : {'expand', 'reduce', 'broadcast', None}, default None
        These only act when ``axis=1`` (columns):
    
        * 'expand' : list-like results will be turned into columns.
        * 'reduce' : returns a Series if possible rather than expanding
          list-like results. This is the opposite of 'expand'.
        * 'broadcast' : results will be broadcast to the original shape
          of the DataFrame, the original index and columns will be
          retained.
    
        The default behaviour (None) depends on the return value of the
        applied function: list-like results will be returned as a Series
        of those. However if the apply function returns a Series these
        are expanded to columns.
    args : tuple
        Positional arguments to pass to `func` in addition to the
        array/series.
    by_row : False or "compat", default "compat"
        Only has an effect when ``func`` is a listlike or dictlike of funcs
        and the func isn't a string.
        If "compat", will if possible first translate the func into pandas
        methods (e.g. ``Series().apply(np.sum)`` will be translated to
        ``Series().sum()``). If that doesn't work, will try call to apply again with
        ``by_row=True`` and if that fails, will call apply again with
        ``by_row=False`` (backward compatible).
        If False, the funcs will be passed the whole Series at once.
    
        .. versionadded:: 2.1.0
    
    engine : {'python', 'numba'}, default 'python'
        Choose between the python (default) engine or the numba engine in apply.
    
        The numba engine will attempt to JIT compile the passed function,
        which may result in speedups for large DataFrames.
        It also supports the following engine_kwargs :
    
        - nopython (compile the function in nopython mode)
        - nogil (release the GIL inside the JIT compiled function)
        - parallel (try to apply the function in parallel over the DataFrame)
    
          Note: Due to limitations within numba/how pandas interfaces with numba,
          you should only use this if raw=True
    
        Note: The numba compiler only supports a subset of
        valid Python/numpy operations.
    
        Please read more about the `supported python features
        <https://numba.pydata.org/numba-doc/dev/reference/pysupported.html>`_
        and `supported numpy features
        <https://numba.pydata.org/numba-doc/dev/reference/numpysupported.html>`_
        in numba to learn what you can or cannot use in the passed function.
    
        .. versionadded:: 2.2.0
    
    engine_kwargs : dict
        Pass keyword arguments to the engine.
        This is currently only used by the numba engine,
        see the documentation for the engine argument for more information.
    **kwargs
        Additional keyword arguments to pass as keywords arguments to
        `func`.
    
    Returns
    -------
    Series or DataFrame
        Result of applying ``func`` along the given axis of the
        DataFrame.
    
    See Also
    --------
    DataFrame.map: For elementwise operations.
    DataFrame.aggregate: Only perform aggregating type operations.
    DataFrame.transform: Only perform transforming type operations.
    
    Notes
    -----
    Functions that mutate the passed object can produce unexpected
    behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
    for more details.
    
    Examples
    --------
    >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])
    >>> df
       A  B
    0  4  9
    1  4  9
    2  4  9
    
    Using a numpy universal function (in this case the same as
    ``np.sqrt(df)``):
    
    >>> df.apply(np.sqrt)
         A    B
    0  2.0  3.0
    1  2.0  3.0
    2  2.0  3.0
    
    Using a reducing function on either axis
    
    >>> df.apply(np.sum, axis=0)
    A    12
    B    27
    dtype: int64
    
    >>> df.apply(np.sum, axis=1)
    0    13
    1    13
    2    13
    dtype: int64
    
    Returning a list-like will result in a Series
    
    >>> df.apply(lambda x: [1, 2], axis=1)
    0    [1, 2]
    1    [1, 2]
    2    [1, 2]
    dtype: object
    
    Passing ``result_type='expand'`` will expand list-like results
    to columns of a Dataframe
    
    >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')
       0  1
    0  1  2
    1  1  2
    2  1  2
    
    Returning a Series inside the function is similar to passing
    ``result_type='expand'``. The resulting column names
    will be the Series index.
    
    >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)
       foo  bar
    0    1    2
    1    1    2
    2    1    2
    
    Passing ``result_type='broadcast'`` will ensure the same shape
    result, whether list-like or scalar is returned by the function,
    and broadcast it along the axis. The resulting column names will
    be the originals.
    
    >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')
       A  B
    0  1  2
    1  1  2
    2  1  2

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& applymap &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method applymap in module pandas.core.frame:

applymap(func: 'PythonFuncType', na_action: 'NaAction | None' = None, **kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Apply a function to a Dataframe elementwise.
    
    .. deprecated:: 2.1.0
    
       DataFrame.applymap has been deprecated. Use DataFrame.map instead.
    
    This method applies a function that accepts and returns a scalar
    to every element of a DataFrame.
    
    Parameters
    ----------
    func : callable
        Python function, returns a single value from a single value.
    na_action : {None, 'ignore'}, default None
        If 'ignore', propagate NaN values, without passing them to func.
    **kwargs
        Additional keyword arguments to pass as keywords arguments to
        `func`.
    
    Returns
    -------
    DataFrame
        Transformed DataFrame.
    
    See Also
    --------
    DataFrame.apply : Apply a function along input axis of DataFrame.
    DataFrame.map : Apply a function along input axis of DataFrame.
    DataFrame.replace: Replace values given in `to_replace` with `value`.
    
    Examples
    --------
    >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])
    >>> df
           0      1
    0  1.000  2.120
    1  3.356  4.567
    
    >>> df.map(lambda x: len(str(x)))
       0  1
    0  3  4
    1  5  5

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& asfreq &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method asfreq in module pandas.core.generic:

asfreq(freq: 'Frequency', method: 'FillnaOptions | None' = None, how: "Literal['start', 'end'] | None" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Convert time series to specified frequency.
    
    Returns the original data conformed to a new index with the specified
    frequency.
    
    If the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index
    is the result of transforming the original index with
    :meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index
    will map one-to-one to the new index).
    
    Otherwise, the new index will be equivalent to ``pd.date_range(start, end,
    freq=freq)`` where ``start`` and ``end`` are, respectively, the first and
    last entries in the original index (see :func:`pandas.date_range`). The
    values corresponding to any timesteps in the new index which were not present
    in the original index will be null (``NaN``), unless a method for filling
    such unknowns is provided (see the ``method`` parameter below).
    
    The :meth:`resample` method is more appropriate if an operation on each group of
    timesteps (such as an aggregate) is necessary to represent the data at the new
    frequency.
    
    Parameters
    ----------
    freq : DateOffset or str
        Frequency DateOffset or string.
    method : {'backfill'/'bfill', 'pad'/'ffill'}, default None
        Method to use for filling holes in reindexed Series (note this
        does not fill NaNs that already were present):
    
        * 'pad' / 'ffill': propagate last valid observation forward to next
          valid
        * 'backfill' / 'bfill': use NEXT valid observation to fill.
    how : {'start', 'end'}, default end
        For PeriodIndex only (see PeriodIndex.asfreq).
    normalize : bool, default False
        Whether to reset output index to midnight.
    fill_value : scalar, optional
        Value to use for missing values, applied during upsampling (note
        this does not fill NaNs that already were present).
    
    Returns
    -------
    Series/DataFrame
        Series/DataFrame object reindexed to the specified frequency.
    
    See Also
    --------
    reindex : Conform DataFrame to new index with optional filling logic.
    
    Notes
    -----
    To learn more about the frequency strings, please see `this link
    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
    
    Examples
    --------
    Start by creating a series with 4 one minute timestamps.
    
    >>> index = pd.date_range('1/1/2000', periods=4, freq='min')
    >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)
    >>> df = pd.DataFrame({'s': series})
    >>> df
                           s
    2000-01-01 00:00:00    0.0
    2000-01-01 00:01:00    NaN
    2000-01-01 00:02:00    2.0
    2000-01-01 00:03:00    3.0
    
    Upsample the series into 30 second bins.
    
    >>> df.asfreq(freq='30s')
                           s
    2000-01-01 00:00:00    0.0
    2000-01-01 00:00:30    NaN
    2000-01-01 00:01:00    NaN
    2000-01-01 00:01:30    NaN
    2000-01-01 00:02:00    2.0
    2000-01-01 00:02:30    NaN
    2000-01-01 00:03:00    3.0
    
    Upsample again, providing a ``fill value``.
    
    >>> df.asfreq(freq='30s', fill_value=9.0)
                           s
    2000-01-01 00:00:00    0.0
    2000-01-01 00:00:30    9.0
    2000-01-01 00:01:00    NaN
    2000-01-01 00:01:30    9.0
    2000-01-01 00:02:00    2.0
    2000-01-01 00:02:30    9.0
    2000-01-01 00:03:00    3.0
    
    Upsample again, providing a ``method``.
    
    >>> df.asfreq(freq='30s', method='bfill')
                           s
    2000-01-01 00:00:00    0.0
    2000-01-01 00:00:30    NaN
    2000-01-01 00:01:00    NaN
    2000-01-01 00:01:30    2.0
    2000-01-01 00:02:00    2.0
    2000-01-01 00:02:30    3.0
    2000-01-01 00:03:00    3.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& asof &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method asof in module pandas.core.generic:

asof(where, subset=None) method of pandas.core.frame.DataFrame instance
    Return the last row(s) without any NaNs before `where`.
    
    The last row (for each element in `where`, if list) without any
    NaN is taken.
    In case of a :class:`~pandas.DataFrame`, the last row without NaN
    considering only the subset of columns (if not `None`)
    
    If there is no good value, NaN is returned for a Series or
    a Series of NaN values for a DataFrame
    
    Parameters
    ----------
    where : date or array-like of dates
        Date(s) before which the last row(s) are returned.
    subset : str or array-like of str, default `None`
        For DataFrame, if not `None`, only use these columns to
        check for NaNs.
    
    Returns
    -------
    scalar, Series, or DataFrame
    
        The return can be:
    
        * scalar : when `self` is a Series and `where` is a scalar
        * Series: when `self` is a Series and `where` is an array-like,
          or when `self` is a DataFrame and `where` is a scalar
        * DataFrame : when `self` is a DataFrame and `where` is an
          array-like
    
    See Also
    --------
    merge_asof : Perform an asof merge. Similar to left join.
    
    Notes
    -----
    Dates are assumed to be sorted. Raises if this is not the case.
    
    Examples
    --------
    A Series and a scalar `where`.
    
    >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])
    >>> s
    10    1.0
    20    2.0
    30    NaN
    40    4.0
    dtype: float64
    
    >>> s.asof(20)
    2.0
    
    For a sequence `where`, a Series is returned. The first value is
    NaN, because the first element of `where` is before the first
    index value.
    
    >>> s.asof([5, 20])
    5     NaN
    20    2.0
    dtype: float64
    
    Missing values are not considered. The following is ``2.0``, not
    NaN, even though NaN is at the index location for ``30``.
    
    >>> s.asof(30)
    2.0
    
    Take all columns into consideration
    
    >>> df = pd.DataFrame({'a': [10., 20., 30., 40., 50.],
    ...                    'b': [None, None, None, None, 500]},
    ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',
    ...                                           '2018-02-27 09:02:00',
    ...                                           '2018-02-27 09:03:00',
    ...                                           '2018-02-27 09:04:00',
    ...                                           '2018-02-27 09:05:00']))
    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',
    ...                           '2018-02-27 09:04:30']))
                          a   b
    2018-02-27 09:03:30 NaN NaN
    2018-02-27 09:04:30 NaN NaN
    
    Take a single column into consideration
    
    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',
    ...                           '2018-02-27 09:04:30']),
    ...         subset=['a'])
                            a   b
    2018-02-27 09:03:30  30.0 NaN
    2018-02-27 09:04:30  40.0 NaN

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& assign &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method assign in module pandas.core.frame:

assign(**kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Assign new columns to a DataFrame.
    
    Returns a new object with all original columns in addition to new ones.
    Existing columns that are re-assigned will be overwritten.
    
    Parameters
    ----------
    **kwargs : dict of {str: callable or Series}
        The column names are keywords. If the values are
        callable, they are computed on the DataFrame and
        assigned to the new columns. The callable must not
        change input DataFrame (though pandas doesn't check it).
        If the values are not callable, (e.g. a Series, scalar, or array),
        they are simply assigned.
    
    Returns
    -------
    DataFrame
        A new DataFrame with the new columns in addition to
        all the existing columns.
    
    Notes
    -----
    Assigning multiple columns within the same ``assign`` is possible.
    Later items in '\*\*kwargs' may refer to newly created or modified
    columns in 'df'; items are computed and assigned into 'df' in order.
    
    Examples
    --------
    >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},
    ...                   index=['Portland', 'Berkeley'])
    >>> df
              temp_c
    Portland    17.0
    Berkeley    25.0
    
    Where the value is a callable, evaluated on `df`:
    
    >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)
              temp_c  temp_f
    Portland    17.0    62.6
    Berkeley    25.0    77.0
    
    Alternatively, the same behavior can be achieved by directly
    referencing an existing Series or sequence:
    
    >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)
              temp_c  temp_f
    Portland    17.0    62.6
    Berkeley    25.0    77.0
    
    You can create multiple columns within the same assign where one
    of the columns depends on another one defined within the same assign:
    
    >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,
    ...           temp_k=lambda x: (x['temp_f'] + 459.67) * 5 / 9)
              temp_c  temp_f  temp_k
    Portland    17.0    62.6  290.15
    Berkeley    25.0    77.0  298.15

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& astype &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method astype in module pandas.core.generic:

astype(dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -> 'Self' method of pandas.core.frame.DataFrame instance
    Cast a pandas object to a specified dtype ``dtype``.
    
    Parameters
    ----------
    dtype : str, data type, Series or Mapping of column name -> data type
        Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to
        cast entire pandas object to the same type. Alternatively, use a
        mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is
        a numpy.dtype or Python type to cast one or more of the DataFrame's
        columns to column-specific types.
    copy : bool, default True
        Return a copy when ``copy=True`` (be very careful setting
        ``copy=False`` as changes to values then may propagate to other
        pandas objects).
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    errors : {'raise', 'ignore'}, default 'raise'
        Control raising of exceptions on invalid data for provided dtype.
    
        - ``raise`` : allow exceptions to be raised
        - ``ignore`` : suppress exceptions. On error return original object.
    
    Returns
    -------
    same type as caller
    
    See Also
    --------
    to_datetime : Convert argument to datetime.
    to_timedelta : Convert argument to timedelta.
    to_numeric : Convert argument to a numeric type.
    numpy.ndarray.astype : Cast a numpy array to a specified type.
    
    Notes
    -----
    .. versionchanged:: 2.0.0
    
        Using ``astype`` to convert from timezone-naive dtype to
        timezone-aware dtype will raise an exception.
        Use :meth:`Series.dt.tz_localize` instead.
    
    Examples
    --------
    Create a DataFrame:
    
    >>> d = {'col1': [1, 2], 'col2': [3, 4]}
    >>> df = pd.DataFrame(data=d)
    >>> df.dtypes
    col1    int64
    col2    int64
    dtype: object
    
    Cast all columns to int32:
    
    >>> df.astype('int32').dtypes
    col1    int32
    col2    int32
    dtype: object
    
    Cast col1 to int32 using a dictionary:
    
    >>> df.astype({'col1': 'int32'}).dtypes
    col1    int32
    col2    int64
    dtype: object
    
    Create a series:
    
    >>> ser = pd.Series([1, 2], dtype='int32')
    >>> ser
    0    1
    1    2
    dtype: int32
    >>> ser.astype('int64')
    0    1
    1    2
    dtype: int64
    
    Convert to categorical type:
    
    >>> ser.astype('category')
    0    1
    1    2
    dtype: category
    Categories (2, int32): [1, 2]
    
    Convert to ordered categorical type with custom ordering:
    
    >>> from pandas.api.types import CategoricalDtype
    >>> cat_dtype = CategoricalDtype(
    ...     categories=[2, 1], ordered=True)
    >>> ser.astype(cat_dtype)
    0    1
    1    2
    dtype: category
    Categories (2, int64): [2 < 1]
    
    Create a series of dates:
    
    >>> ser_date = pd.Series(pd.date_range('20200101', periods=3))
    >>> ser_date
    0   2020-01-01
    1   2020-01-02
    2   2020-01-03
    dtype: datetime64[ns]

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& at &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on _AtIndexer in module pandas.core.indexing object:

class _AtIndexer(_ScalarAccessIndexer)
 |  Access a single value for a row/column label pair.
 |  
 |  Similar to ``loc``, in that both provide label-based lookups. Use
 |  ``at`` if you only need to get or set a single value in a DataFrame
 |  or Series.
 |  
 |  Raises
 |  ------
 |  KeyError
 |      If getting a value and 'label' does not exist in a DataFrame or Series.
 |  
 |  ValueError
 |      If row/column label pair is not a tuple or if any label
 |      from the pair is not a scalar for DataFrame.
 |      If label is list-like (*excluding* NamedTuple) for Series.
 |  
 |  See Also
 |  --------
 |  DataFrame.at : Access a single value for a row/column pair by label.
 |  DataFrame.iat : Access a single value for a row/column pair by integer
 |      position.
 |  DataFrame.loc : Access a group of rows and columns by label(s).
 |  DataFrame.iloc : Access a group of rows and columns by integer
 |      position(s).
 |  Series.at : Access a single value by label.
 |  Series.iat : Access a single value by integer position.
 |  Series.loc : Access a group of rows by label(s).
 |  Series.iloc : Access a group of rows by integer position(s).
 |  
 |  Notes
 |  -----
 |  See :ref:`Fast scalar value getting and setting <indexing.basics.get_value>`
 |  for more details.
 |  
 |  Examples
 |  --------
 |  >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
 |  ...                   index=[4, 5, 6], columns=['A', 'B', 'C'])
 |  >>> df
 |      A   B   C
 |  4   0   2   3
 |  5   0   4   1
 |  6  10  20  30
 |  
 |  Get value at specified row/column pair
 |  
 |  >>> df.at[4, 'B']
 |  2
 |  
 |  Set value at specified row/column pair
 |  
 |  >>> df.at[4, 'B'] = 10
 |  >>> df.at[4, 'B']
 |  10
 |  
 |  Get value within a Series
 |  
 |  >>> df.loc[5].at['B']
 |  4
 |  
 |  Method resolution order:
 |      _AtIndexer
 |      _ScalarAccessIndexer
 |      pandas._libs.indexing.NDFrameIndexerBase
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getitem__(self, key)
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _ScalarAccessIndexer:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from _ScalarAccessIndexer:
 |  
 |  __annotations__ = {'_takeable': 'bool'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__ = __reduce_cython__(...)
 |  
 |  __reduce_cython__(self)
 |  
 |  __setstate__ = __setstate_cython__(...)
 |  
 |  __setstate_cython__(self, __pyx_state)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  name
 |  
 |  ndim
 |  
 |  obj

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& at_time &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method at_time in module pandas.core.generic:

at_time(time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Select values at particular time of day (e.g., 9:30AM).
    
    Parameters
    ----------
    time : datetime.time or str
        The values to select.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        For `Series` this parameter is unused and defaults to 0.
    
    Returns
    -------
    Series or DataFrame
    
    Raises
    ------
    TypeError
        If the index is not  a :class:`DatetimeIndex`
    
    See Also
    --------
    between_time : Select values between particular times of the day.
    first : Select initial periods of time series based on a date offset.
    last : Select final periods of time series based on a date offset.
    DatetimeIndex.indexer_at_time : Get just the index locations for
        values at particular time of the day.
    
    Examples
    --------
    >>> i = pd.date_range('2018-04-09', periods=4, freq='12h')
    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
    >>> ts
                         A
    2018-04-09 00:00:00  1
    2018-04-09 12:00:00  2
    2018-04-10 00:00:00  3
    2018-04-10 12:00:00  4
    
    >>> ts.at_time('12:00')
                         A
    2018-04-09 12:00:00  2
    2018-04-10 12:00:00  4

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& attrs &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on dict object:

class dict(object)
 |  dict() -> new empty dictionary
 |  dict(mapping) -> new dictionary initialized from a mapping object's
 |      (key, value) pairs
 |  dict(iterable) -> new dictionary initialized as if via:
 |      d = {}
 |      for k, v in iterable:
 |          d[k] = v
 |  dict(**kwargs) -> new dictionary initialized with the name=value pairs
 |      in the keyword argument list.  For example:  dict(one=1, two=2)
 |  
 |  Built-in subclasses:
 |      StgDict
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, key, /)
 |      True if the dictionary has the specified key, else False.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ior__(self, value, /)
 |      Return self|=value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(self, /)
 |      Return a reverse iterator over the dict keys.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      D.__sizeof__() -> size of D in memory, in bytes
 |  
 |  clear(...)
 |      D.clear() -> None.  Remove all items from D.
 |  
 |  copy(...)
 |      D.copy() -> a shallow copy of D
 |  
 |  get(self, key, default=None, /)
 |      Return the value for key if key is in the dictionary, else default.
 |  
 |  items(...)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(...)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  pop(...)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |      
 |      If key is not found, default is returned if given, otherwise KeyError is raised
 |  
 |  popitem(self, /)
 |      Remove and return a (key, value) pair as a 2-tuple.
 |      
 |      Pairs are returned in LIFO (last-in, first-out) order.
 |      Raises KeyError if the dict is empty.
 |  
 |  setdefault(self, key, default=None, /)
 |      Insert key with a value of default if key is not in the dictionary.
 |      
 |      Return the value for key if key is in the dictionary, else default.
 |  
 |  update(...)
 |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |  
 |  values(...)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  fromkeys(iterable, value=None, /) from builtins.type
 |      Create a new dictionary with keys from iterable and values set to value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& axes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on list object:

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(self, /)
 |      Return a reverse iterator over the list.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(self, /)
 |      Return the size of the list in memory, in bytes.
 |  
 |  append(self, object, /)
 |      Append object to the end of the list.
 |  
 |  clear(self, /)
 |      Remove all items from list.
 |  
 |  copy(self, /)
 |      Return a shallow copy of the list.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  extend(self, iterable, /)
 |      Extend list by appending elements from the iterable.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  insert(self, index, object, /)
 |      Insert object before index.
 |  
 |  pop(self, index=-1, /)
 |      Remove and return item at index (default last).
 |      
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(self, value, /)
 |      Remove first occurrence of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(self, /)
 |      Reverse *IN PLACE*.
 |  
 |  sort(self, /, *, key=None, reverse=False)
 |      Sort the list in ascending order and return None.
 |      
 |      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
 |      order of two equal elements is maintained).
 |      
 |      If a key function is given, apply it once to each list item and sort them,
 |      ascending or descending, according to their function values.
 |      
 |      The reverse flag can be set to sort in descending order.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& backfill &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method backfill in module pandas.core.generic:

backfill(*, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values by using the next valid observation to fill the gap.
    
    .. deprecated:: 2.0
    
        Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.
    
    Returns
    -------
    Series/DataFrame or None
        Object with missing values filled or None if ``inplace=True``.
    
    Examples
    --------
    Please see examples for :meth:`DataFrame.bfill` or :meth:`Series.bfill`.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& between_time &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method between_time in module pandas.core.generic:

between_time(start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Select values between particular times of the day (e.g., 9:00-9:30 AM).
    
    By setting ``start_time`` to be later than ``end_time``,
    you can get the times that are *not* between the two times.
    
    Parameters
    ----------
    start_time : datetime.time or str
        Initial time as a time filter limit.
    end_time : datetime.time or str
        End time as a time filter limit.
    inclusive : {"both", "neither", "left", "right"}, default "both"
        Include boundaries; whether to set each bound as closed or open.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Determine range time on index or columns value.
        For `Series` this parameter is unused and defaults to 0.
    
    Returns
    -------
    Series or DataFrame
        Data from the original object filtered to the specified dates range.
    
    Raises
    ------
    TypeError
        If the index is not  a :class:`DatetimeIndex`
    
    See Also
    --------
    at_time : Select values at a particular time of the day.
    first : Select initial periods of time series based on a date offset.
    last : Select final periods of time series based on a date offset.
    DatetimeIndex.indexer_between_time : Get just the index locations for
        values between particular times of the day.
    
    Examples
    --------
    >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')
    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
    >>> ts
                         A
    2018-04-09 00:00:00  1
    2018-04-10 00:20:00  2
    2018-04-11 00:40:00  3
    2018-04-12 01:00:00  4
    
    >>> ts.between_time('0:15', '0:45')
                         A
    2018-04-10 00:20:00  2
    2018-04-11 00:40:00  3
    
    You get the times that are *not* between two times by setting
    ``start_time`` later than ``end_time``:
    
    >>> ts.between_time('0:45', '0:15')
                         A
    2018-04-09 00:00:00  1
    2018-04-12 01:00:00  4

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& bfill &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method bfill in module pandas.core.generic:

bfill(*, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values by using the next valid observation to fill the gap.
    
    Parameters
    ----------
    axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
        Axis along which to fill missing values. For `Series`
        this parameter is unused and defaults to 0.
    inplace : bool, default False
        If True, fill in-place. Note: this will modify any
        other views on this object (e.g., a no-copy slice for a column in a
        DataFrame).
    limit : int, default None
        If method is specified, this is the maximum number of consecutive
        NaN values to forward/backward fill. In other words, if there is
        a gap with more than this number of consecutive NaNs, it will only
        be partially filled. If method is not specified, this is the
        maximum number of entries along the entire axis where NaNs will be
        filled. Must be greater than 0 if not None.
    limit_area : {`None`, 'inside', 'outside'}, default None
        If limit is specified, consecutive NaNs will be filled with this
        restriction.
    
        * ``None``: No fill restriction.
        * 'inside': Only fill NaNs surrounded by valid values
          (interpolate).
        * 'outside': Only fill NaNs outside valid values (extrapolate).
    
        .. versionadded:: 2.2.0
    
    downcast : dict, default is None
        A dict of item->dtype of what to downcast if possible,
        or the string 'infer' which will try to downcast to an appropriate
        equal type (e.g. float64 to int64 if possible).
    
        .. deprecated:: 2.2.0
    
    Returns
    -------
    Series/DataFrame or None
        Object with missing values filled or None if ``inplace=True``.
    
    Examples
    --------
    For Series:
    
    >>> s = pd.Series([1, None, None, 2])
    >>> s.bfill()
    0    1.0
    1    2.0
    2    2.0
    3    2.0
    dtype: float64
    >>> s.bfill(limit=1)
    0    1.0
    1    NaN
    2    2.0
    3    2.0
    dtype: float64
    
    With DataFrame:
    
    >>> df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})
    >>> df
          A     B
    0   1.0   NaN
    1   NaN   5.0
    2   NaN   NaN
    3   4.0   7.0
    >>> df.bfill()
          A     B
    0   1.0   5.0
    1   4.0   5.0
    2   4.0   7.0
    3   4.0   7.0
    >>> df.bfill(limit=1)
          A     B
    0   1.0   5.0
    1   NaN   5.0
    2   4.0   7.0
    3   4.0   7.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& bool &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method bool in module pandas.core.generic:

bool() -> 'bool_t' method of pandas.core.frame.DataFrame instance
    Return the bool of a single element Series or DataFrame.
    
    .. deprecated:: 2.1.0
    
       bool is deprecated and will be removed in future version of pandas.
       For ``Series`` use ``pandas.Series.item``.
    
    This must be a boolean scalar value, either True or False. It will raise a
    ValueError if the Series or DataFrame does not have exactly 1 element, or that
    element is not boolean (integer values 0 and 1 will also raise an exception).
    
    Returns
    -------
    bool
        The value in the Series or DataFrame.
    
    See Also
    --------
    Series.astype : Change the data type of a Series, including to boolean.
    DataFrame.astype : Change the data type of a DataFrame, including to boolean.
    numpy.bool_ : NumPy boolean data type, used by pandas for boolean values.
    
    Examples
    --------
    The method will only work for single element objects with a boolean value:
    
    >>> pd.Series([True]).bool()  # doctest: +SKIP
    True
    >>> pd.Series([False]).bool()  # doctest: +SKIP
    False
    
    >>> pd.DataFrame({'col': [True]}).bool()  # doctest: +SKIP
    True
    >>> pd.DataFrame({'col': [False]}).bool()  # doctest: +SKIP
    False
    
    This is an alternative method and will only work
    for single element objects with a boolean value:
    
    >>> pd.Series([True]).item()  # doctest: +SKIP
    True
    >>> pd.Series([False]).item()  # doctest: +SKIP
    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& boxplot &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method boxplot_frame in module pandas.plotting._core:

boxplot_frame(column=None, by=None, ax=None, fontsize: 'int | None' = None, rot: 'int' = 0, grid: 'bool' = True, figsize: 'tuple[float, float] | None' = None, layout=None, return_type=None, backend=None, **kwargs) method of pandas.core.frame.DataFrame instance
    Make a box plot from DataFrame columns.
    
    Make a box-and-whisker plot from DataFrame columns, optionally grouped
    by some other columns. A box plot is a method for graphically depicting
    groups of numerical data through their quartiles.
    The box extends from the Q1 to Q3 quartile values of the data,
    with a line at the median (Q2). The whiskers extend from the edges
    of box to show the range of the data. By default, they extend no more than
    `1.5 * IQR (IQR = Q3 - Q1)` from the edges of the box, ending at the farthest
    data point within that interval. Outliers are plotted as separate dots.
    
    For further details see
    Wikipedia's entry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`_.
    
    Parameters
    ----------
    column : str or list of str, optional
        Column name or list of names, or vector.
        Can be any valid input to :meth:`pandas.DataFrame.groupby`.
    by : str or array-like, optional
        Column in the DataFrame to :meth:`pandas.DataFrame.groupby`.
        One box-plot will be done per value of columns in `by`.
    ax : object of class matplotlib.axes.Axes, optional
        The matplotlib axes to be used by boxplot.
    fontsize : float or str
        Tick label font size in points or as a string (e.g., `large`).
    rot : float, default 0
        The rotation angle of labels (in degrees)
        with respect to the screen coordinate system.
    grid : bool, default True
        Setting this to True will show the grid.
    figsize : A tuple (width, height) in inches
        The size of the figure to create in matplotlib.
    layout : tuple (rows, columns), optional
        For example, (3, 5) will display the subplots
        using 3 rows and 5 columns, starting from the top-left.
    return_type : {'axes', 'dict', 'both'} or None, default 'axes'
        The kind of object to return. The default is ``axes``.
    
        * 'axes' returns the matplotlib axes the boxplot is drawn on.
        * 'dict' returns a dictionary whose values are the matplotlib
          Lines of the boxplot.
        * 'both' returns a namedtuple with the axes and dict.
        * when grouping with ``by``, a Series mapping columns to
          ``return_type`` is returned.
    
          If ``return_type`` is `None`, a NumPy array
          of axes with the same shape as ``layout`` is returned.
    backend : str, default None
        Backend to use instead of the backend specified in the option
        ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
        specify the ``plotting.backend`` for the whole session, set
        ``pd.options.plotting.backend``.
    
    **kwargs
        All other plotting keyword arguments to be passed to
        :func:`matplotlib.pyplot.boxplot`.
    
    Returns
    -------
    result
        See Notes.
    
    See Also
    --------
    pandas.Series.plot.hist: Make a histogram.
    matplotlib.pyplot.boxplot : Matplotlib equivalent plot.
    
    Notes
    -----
    The return type depends on the `return_type` parameter:
    
    * 'axes' : object of class matplotlib.axes.Axes
    * 'dict' : dict of matplotlib.lines.Line2D objects
    * 'both' : a namedtuple with structure (ax, lines)
    
    For data grouped with ``by``, return a Series of the above or a numpy
    array:
    
    * :class:`~pandas.Series`
    * :class:`~numpy.array` (for ``return_type = None``)
    
    Use ``return_type='dict'`` when you want to tweak the appearance
    of the lines after plotting. In this case a dict containing the Lines
    making up the boxes, caps, fliers, medians, and whiskers is returned.
    
    Examples
    --------
    
    Boxplots can be created for every column in the dataframe
    by ``df.boxplot()`` or indicating the columns to be used:
    
    .. plot::
        :context: close-figs
    
        >>> np.random.seed(1234)
        >>> df = pd.DataFrame(np.random.randn(10, 4),
        ...                   columns=['Col1', 'Col2', 'Col3', 'Col4'])
        >>> boxplot = df.boxplot(column=['Col1', 'Col2', 'Col3'])  # doctest: +SKIP
    
    Boxplots of variables distributions grouped by the values of a third
    variable can be created using the option ``by``. For instance:
    
    .. plot::
        :context: close-figs
    
        >>> df = pd.DataFrame(np.random.randn(10, 2),
        ...                   columns=['Col1', 'Col2'])
        >>> df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',
        ...                      'B', 'B', 'B', 'B', 'B'])
        >>> boxplot = df.boxplot(by='X')
    
    A list of strings (i.e. ``['X', 'Y']``) can be passed to boxplot
    in order to group the data by combination of the variables in the x-axis:
    
    .. plot::
        :context: close-figs
    
        >>> df = pd.DataFrame(np.random.randn(10, 3),
        ...                   columns=['Col1', 'Col2', 'Col3'])
        >>> df['X'] = pd.Series(['A', 'A', 'A', 'A', 'A',
        ...                      'B', 'B', 'B', 'B', 'B'])
        >>> df['Y'] = pd.Series(['A', 'B', 'A', 'B', 'A',
        ...                      'B', 'A', 'B', 'A', 'B'])
        >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by=['X', 'Y'])
    
    The layout of boxplot can be adjusted giving a tuple to ``layout``:
    
    .. plot::
        :context: close-figs
    
        >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',
        ...                      layout=(2, 1))
    
    Additional formatting can be done to the boxplot, like suppressing the grid
    (``grid=False``), rotating the labels in the x-axis (i.e. ``rot=45``)
    or changing the fontsize (i.e. ``fontsize=15``):
    
    .. plot::
        :context: close-figs
    
        >>> boxplot = df.boxplot(grid=False, rot=45, fontsize=15)  # doctest: +SKIP
    
    The parameter ``return_type`` can be used to select the type of element
    returned by `boxplot`.  When ``return_type='axes'`` is selected,
    the matplotlib axes on which the boxplot is drawn are returned:
    
        >>> boxplot = df.boxplot(column=['Col1', 'Col2'], return_type='axes')
        >>> type(boxplot)
        <class 'matplotlib.axes._axes.Axes'>
    
    When grouping with ``by``, a Series mapping columns to ``return_type``
    is returned:
    
        >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',
        ...                      return_type='axes')
        >>> type(boxplot)
        <class 'pandas.core.series.Series'>
    
    If ``return_type`` is `None`, a NumPy array of axes with the same shape
    as ``layout`` is returned:
    
        >>> boxplot = df.boxplot(column=['Col1', 'Col2'], by='X',
        ...                      return_type=None)
        >>> type(boxplot)
        <class 'numpy.ndarray'>

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& clip &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method clip in module pandas.core.generic:

clip(lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Trim values at input threshold(s).
    
    Assigns values outside boundary to boundary values. Thresholds
    can be singular values or array like, and in the latter case
    the clipping is performed element-wise in the specified axis.
    
    Parameters
    ----------
    lower : float or array-like, default None
        Minimum threshold value. All values below this
        threshold will be set to it. A missing
        threshold (e.g `NA`) will not clip the value.
    upper : float or array-like, default None
        Maximum threshold value. All values above this
        threshold will be set to it. A missing
        threshold (e.g `NA`) will not clip the value.
    axis : {{0 or 'index', 1 or 'columns', None}}, default None
        Align object with lower and upper along the given axis.
        For `Series` this parameter is unused and defaults to `None`.
    inplace : bool, default False
        Whether to perform the operation in place on the data.
    *args, **kwargs
        Additional keywords have no effect but might be accepted
        for compatibility with numpy.
    
    Returns
    -------
    Series or DataFrame or None
        Same type as calling object with the values outside the
        clip boundaries replaced or None if ``inplace=True``.
    
    See Also
    --------
    Series.clip : Trim values at input threshold in series.
    DataFrame.clip : Trim values at input threshold in dataframe.
    numpy.clip : Clip (limit) the values in an array.
    
    Examples
    --------
    >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}
    >>> df = pd.DataFrame(data)
    >>> df
       col_0  col_1
    0      9     -2
    1     -3     -7
    2      0      6
    3     -1      8
    4      5     -5
    
    Clips per column using lower and upper thresholds:
    
    >>> df.clip(-4, 6)
       col_0  col_1
    0      6     -2
    1     -3     -4
    2      0      6
    3     -1      6
    4      5     -4
    
    Clips using specific lower and upper thresholds per column:
    
    >>> df.clip([-2, -1], [4, 5])
        col_0  col_1
    0      4     -1
    1     -2     -1
    2      0      5
    3     -1      5
    4      4     -1
    
    Clips using specific lower and upper thresholds per column element:
    
    >>> t = pd.Series([2, -4, -1, 6, 3])
    >>> t
    0    2
    1   -4
    2   -1
    3    6
    4    3
    dtype: int64
    
    >>> df.clip(t, t + 4, axis=0)
       col_0  col_1
    0      6      2
    1     -3     -4
    2      0      3
    3      6      8
    4      5      3
    
    Clips using specific lower threshold per column element, with missing values:
    
    >>> t = pd.Series([2, -4, np.nan, 6, 3])
    >>> t
    0    2.0
    1   -4.0
    2    NaN
    3    6.0
    4    3.0
    dtype: float64
    
    >>> df.clip(t, axis=0)
    col_0  col_1
    0      9      2
    1     -3     -4
    2      0      6
    3      6      8
    4      5      3

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& columns &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Index in module pandas.core.indexes.base object:

class Index(pandas.core.base.IndexOpsMixin, pandas.core.base.PandasObject)
 |  Index(data=None, dtype=None, copy: 'bool' = False, name=None, tupleize_cols: 'bool' = True) -> 'Self'
 |  
 |  Immutable sequence used for indexing and alignment.
 |  
 |  The basic object storing axis labels for all pandas objects.
 |  
 |  .. versionchanged:: 2.0.0
 |  
 |     Index can hold all numpy numeric dtypes (except float16). Previously only
 |     int64/uint64/float64 dtypes were accepted.
 |  
 |  Parameters
 |  ----------
 |  data : array-like (1-dimensional)
 |  dtype : str, numpy.dtype, or ExtensionDtype, optional
 |      Data type for the output Index. If not specified, this will be
 |      inferred from `data`.
 |      See the :ref:`user guide <basics.dtypes>` for more usages.
 |  copy : bool, default False
 |      Copy input data.
 |  name : object
 |      Name to be stored in the index.
 |  tupleize_cols : bool (default: True)
 |      When True, attempt to create a MultiIndex if possible.
 |  
 |  See Also
 |  --------
 |  RangeIndex : Index implementing a monotonic integer range.
 |  CategoricalIndex : Index of :class:`Categorical` s.
 |  MultiIndex : A multi-level, or hierarchical Index.
 |  IntervalIndex : An Index of :class:`Interval` s.
 |  DatetimeIndex : Index of datetime64 data.
 |  TimedeltaIndex : Index of timedelta64 data.
 |  PeriodIndex : Index of Period data.
 |  
 |  Notes
 |  -----
 |  An Index instance can **only** contain hashable objects.
 |  An Index instance *can not* hold numpy float16 dtype.
 |  
 |  Examples
 |  --------
 |  >>> pd.Index([1, 2, 3])
 |  Index([1, 2, 3], dtype='int64')
 |  
 |  >>> pd.Index(list('abc'))
 |  Index(['a', 'b', 'c'], dtype='object')
 |  
 |  >>> pd.Index([1, 2, 3], dtype="uint8")
 |  Index([1, 2, 3], dtype='uint8')
 |  
 |  Method resolution order:
 |      Index
 |      pandas.core.base.IndexOpsMixin
 |      pandas.core.arraylike.OpsMixin
 |      pandas.core.base.PandasObject
 |      pandas.core.accessor.DirNamesMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __abs__(self) -> 'Index'
 |  
 |  __array__(self, dtype=None, copy=None) -> 'np.ndarray'
 |      The array interface, return my values.
 |  
 |  __array_ufunc__(self, ufunc: 'np.ufunc', method: 'str_t', *inputs, **kwargs)
 |  
 |  __array_wrap__(self, result, context=None, return_scalar=False)
 |      Gets called after a ufunc and other functions e.g. np.split.
 |  
 |  __bool__ = __nonzero__(self) -> 'NoReturn'
 |  
 |  __contains__(self, key: 'Any') -> 'bool'
 |      Return a boolean indicating whether the provided key is in the index.
 |      
 |      Parameters
 |      ----------
 |      key : label
 |          The key to check if it is present in the index.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether the key search is in the index.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the key is not hashable.
 |      
 |      See Also
 |      --------
 |      Index.isin : Returns an ndarray of boolean dtype indicating whether the
 |          list-like key is in the index.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx
 |      Index([1, 2, 3, 4], dtype='int64')
 |      
 |      >>> 2 in idx
 |      True
 |      >>> 6 in idx
 |      False
 |  
 |  __copy__(self, **kwargs) -> 'Self'
 |  
 |  __deepcopy__(self, memo=None) -> 'Self'
 |      Parameters
 |      ----------
 |      memo, default None
 |          Standard signature. Unused
 |  
 |  __getitem__(self, key)
 |      Override numpy.ndarray's __getitem__ method to work as desired.
 |      
 |      This function adds lists and Series as valid boolean indexers
 |      (ndarrays only supports ndarray with dtype=bool).
 |      
 |      If resulting ndim != 1, plain ndarray is returned instead of
 |      corresponding `Index` subclass.
 |  
 |  __iadd__(self, other)
 |  
 |  __invert__(self) -> 'Index'
 |  
 |  __len__(self) -> 'int'
 |      Return the length of the Index.
 |  
 |  __neg__(self) -> 'Index'
 |  
 |  __nonzero__(self) -> 'NoReturn'
 |  
 |  __pos__(self) -> 'Index'
 |  
 |  __reduce__(self)
 |      Helper for pickle.
 |  
 |  __repr__(self) -> 'str_t'
 |      Return a string representation for this object.
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  all(self, *args, **kwargs)
 |      Return whether all elements are Truthy.
 |      
 |      Parameters
 |      ----------
 |      *args
 |          Required for compatibility with numpy.
 |      **kwargs
 |          Required for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      bool or array-like (if axis is specified)
 |          A single element array-like may be converted to bool.
 |      
 |      See Also
 |      --------
 |      Index.any : Return whether any element in an Index is True.
 |      Series.any : Return whether any element in a Series is True.
 |      Series.all : Return whether all elements in a Series are True.
 |      
 |      Notes
 |      -----
 |      Not a Number (NaN), positive infinity and negative infinity
 |      evaluate to True because these are not equal to zero.
 |      
 |      Examples
 |      --------
 |      True, because nonzero integers are considered True.
 |      
 |      >>> pd.Index([1, 2, 3]).all()
 |      True
 |      
 |      False, because ``0`` is considered False.
 |      
 |      >>> pd.Index([0, 1, 2]).all()
 |      False
 |  
 |  any(self, *args, **kwargs)
 |      Return whether any element is Truthy.
 |      
 |      Parameters
 |      ----------
 |      *args
 |          Required for compatibility with numpy.
 |      **kwargs
 |          Required for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      bool or array-like (if axis is specified)
 |          A single element array-like may be converted to bool.
 |      
 |      See Also
 |      --------
 |      Index.all : Return whether all elements are True.
 |      Series.all : Return whether all elements are True.
 |      
 |      Notes
 |      -----
 |      Not a Number (NaN), positive infinity and negative infinity
 |      evaluate to True because these are not equal to zero.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index([0, 1, 2])
 |      >>> index.any()
 |      True
 |      
 |      >>> index = pd.Index([0, 0, 0])
 |      >>> index.any()
 |      False
 |  
 |  append(self, other: 'Index | Sequence[Index]') -> 'Index'
 |      Append a collection of Index options together.
 |      
 |      Parameters
 |      ----------
 |      other : Index or list/tuple of indices
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.append(pd.Index([4]))
 |      Index([1, 2, 3, 4], dtype='int64')
 |  
 |  argmax(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      Return int position of the largest value in the Series.
 |      
 |      If the maximum is achieved in multiple locations,
 |      the first row position is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      int
 |          Row position of the maximum value.
 |      
 |      See Also
 |      --------
 |      Series.argmax : Return position of the maximum value.
 |      Series.argmin : Return position of the minimum value.
 |      numpy.ndarray.argmax : Equivalent method for numpy arrays.
 |      Series.idxmax : Return index label of the maximum values.
 |      Series.idxmin : Return index label of the minimum values.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing cereal calories
 |      
 |      >>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,
 |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})
 |      >>> s
 |      Corn Flakes              100.0
 |      Almond Delight           110.0
 |      Cinnamon Toast Crunch    120.0
 |      Cocoa Puff               110.0
 |      dtype: float64
 |      
 |      >>> s.argmax()
 |      2
 |      >>> s.argmin()
 |      0
 |      
 |      The maximum cereal calories is the third element and
 |      the minimum cereal calories is the first element,
 |      since series is zero-indexed.
 |  
 |  argmin(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      Return int position of the smallest value in the Series.
 |      
 |      If the minimum is achieved in multiple locations,
 |      the first row position is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      int
 |          Row position of the minimum value.
 |      
 |      See Also
 |      --------
 |      Series.argmin : Return position of the minimum value.
 |      Series.argmax : Return position of the maximum value.
 |      numpy.ndarray.argmin : Equivalent method for numpy arrays.
 |      Series.idxmax : Return index label of the maximum values.
 |      Series.idxmin : Return index label of the minimum values.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing cereal calories
 |      
 |      >>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,
 |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})
 |      >>> s
 |      Corn Flakes              100.0
 |      Almond Delight           110.0
 |      Cinnamon Toast Crunch    120.0
 |      Cocoa Puff               110.0
 |      dtype: float64
 |      
 |      >>> s.argmax()
 |      2
 |      >>> s.argmin()
 |      0
 |      
 |      The maximum cereal calories is the third element and
 |      the minimum cereal calories is the first element,
 |      since series is zero-indexed.
 |  
 |  argsort(self, *args, **kwargs) -> 'npt.NDArray[np.intp]'
 |      Return the integer indices that would sort the index.
 |      
 |      Parameters
 |      ----------
 |      *args
 |          Passed to `numpy.ndarray.argsort`.
 |      **kwargs
 |          Passed to `numpy.ndarray.argsort`.
 |      
 |      Returns
 |      -------
 |      np.ndarray[np.intp]
 |          Integer indices that would sort the index if used as
 |          an indexer.
 |      
 |      See Also
 |      --------
 |      numpy.argsort : Similar method for NumPy arrays.
 |      Index.sort_values : Return sorted copy of Index.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['b', 'a', 'd', 'c'])
 |      >>> idx
 |      Index(['b', 'a', 'd', 'c'], dtype='object')
 |      
 |      >>> order = idx.argsort()
 |      >>> order
 |      array([1, 0, 3, 2])
 |      
 |      >>> idx[order]
 |      Index(['a', 'b', 'c', 'd'], dtype='object')
 |  
 |  asof(self, label)
 |      Return the label from the index, or, if not present, the previous one.
 |      
 |      Assuming that the index is sorted, return the passed index label if it
 |      is in the index, or return the previous index label if the passed one
 |      is not in the index.
 |      
 |      Parameters
 |      ----------
 |      label : object
 |          The label up to which the method returns the latest index label.
 |      
 |      Returns
 |      -------
 |      object
 |          The passed label if it is in the index. The previous label if the
 |          passed label is not in the sorted index or `NaN` if there is no
 |          such label.
 |      
 |      See Also
 |      --------
 |      Series.asof : Return the latest value in a Series up to the
 |          passed index.
 |      merge_asof : Perform an asof merge (similar to left join but it
 |          matches on nearest key rather than equal key).
 |      Index.get_loc : An `asof` is a thin wrapper around `get_loc`
 |          with method='pad'.
 |      
 |      Examples
 |      --------
 |      `Index.asof` returns the latest index label up to the passed label.
 |      
 |      >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])
 |      >>> idx.asof('2014-01-01')
 |      '2013-12-31'
 |      
 |      If the label is in the index, the method returns the passed label.
 |      
 |      >>> idx.asof('2014-01-02')
 |      '2014-01-02'
 |      
 |      If all of the labels in the index are later than the passed label,
 |      NaN is returned.
 |      
 |      >>> idx.asof('1999-01-02')
 |      nan
 |      
 |      If the index is not sorted, an error is raised.
 |      
 |      >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',
 |      ...                            '2014-01-03'])
 |      >>> idx_not_sorted.asof('2013-12-31')
 |      Traceback (most recent call last):
 |      ValueError: index must be monotonic increasing or decreasing
 |  
 |  asof_locs(self, where: 'Index', mask: 'npt.NDArray[np.bool_]') -> 'npt.NDArray[np.intp]'
 |      Return the locations (indices) of labels in the index.
 |      
 |      As in the :meth:`pandas.Index.asof`, if the label (a particular entry in
 |      ``where``) is not in the index, the latest index label up to the
 |      passed label is chosen and its index returned.
 |      
 |      If all of the labels in the index are later than a label in ``where``,
 |      -1 is returned.
 |      
 |      ``mask`` is used to ignore ``NA`` values in the index during calculation.
 |      
 |      Parameters
 |      ----------
 |      where : Index
 |          An Index consisting of an array of timestamps.
 |      mask : np.ndarray[bool]
 |          Array of booleans denoting where values in the original
 |          data are not ``NA``.
 |      
 |      Returns
 |      -------
 |      np.ndarray[np.intp]
 |          An array of locations (indices) of the labels from the index
 |          which correspond to the return values of :meth:`pandas.Index.asof`
 |          for every element in ``where``.
 |      
 |      See Also
 |      --------
 |      Index.asof : Return the label from the index, or, if not present, the
 |          previous one.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.date_range('2023-06-01', periods=3, freq='D')
 |      >>> where = pd.DatetimeIndex(['2023-05-30 00:12:00', '2023-06-01 00:00:00',
 |      ...                           '2023-06-02 23:59:59'])
 |      >>> mask = np.ones(3, dtype=bool)
 |      >>> idx.asof_locs(where, mask)
 |      array([-1,  0,  1])
 |      
 |      We can use ``mask`` to ignore certain values in the index during calculation.
 |      
 |      >>> mask[1] = False
 |      >>> idx.asof_locs(where, mask)
 |      array([-1,  0,  0])
 |  
 |  astype(self, dtype, copy: 'bool' = True)
 |      Create an Index with values cast to dtypes.
 |      
 |      The class of a new Index is determined by dtype. When conversion is
 |      impossible, a TypeError exception is raised.
 |      
 |      Parameters
 |      ----------
 |      dtype : numpy dtype or pandas type
 |          Note that any signed integer `dtype` is treated as ``'int64'``,
 |          and any unsigned integer `dtype` is treated as ``'uint64'``,
 |          regardless of the size.
 |      copy : bool, default True
 |          By default, astype always returns a newly allocated object.
 |          If copy is set to False and internal requirements on dtype are
 |          satisfied, the original data is used to create a new Index
 |          or the original Index is returned.
 |      
 |      Returns
 |      -------
 |      Index
 |          Index with values cast to specified dtype.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.astype('float')
 |      Index([1.0, 2.0, 3.0], dtype='float64')
 |  
 |  copy(self, name: 'Hashable | None' = None, deep: 'bool' = False) -> 'Self'
 |      Make a copy of this object.
 |      
 |      Name is set on the new object.
 |      
 |      Parameters
 |      ----------
 |      name : Label, optional
 |          Set name for new object.
 |      deep : bool, default False
 |      
 |      Returns
 |      -------
 |      Index
 |          Index refer to new object which is a copy of this object.
 |      
 |      Notes
 |      -----
 |      In most cases, there should be no functional difference from using
 |      ``deep``, but if ``deep`` is passed it will attempt to deepcopy.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> new_idx = idx.copy()
 |      >>> idx is new_idx
 |      False
 |  
 |  delete(self, loc) -> 'Self'
 |      Make new Index with passed location(-s) deleted.
 |      
 |      Parameters
 |      ----------
 |      loc : int or list of int
 |          Location of item(-s) which will be deleted.
 |          Use a list of locations to delete more than one value at the same time.
 |      
 |      Returns
 |      -------
 |      Index
 |          Will be same type as self, except for RangeIndex.
 |      
 |      See Also
 |      --------
 |      numpy.delete : Delete any rows and column from NumPy array (ndarray).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.delete(1)
 |      Index(['a', 'c'], dtype='object')
 |      
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.delete([0, 2])
 |      Index(['b'], dtype='object')
 |  
 |  diff(self, periods: 'int' = 1) -> 'Index'
 |      Computes the difference between consecutive values in the Index object.
 |      
 |      If periods is greater than 1, computes the difference between values that
 |      are `periods` number of positions apart.
 |      
 |      Parameters
 |      ----------
 |      periods : int, optional
 |          The number of positions between the current and previous
 |          value to compute the difference with. Default is 1.
 |      
 |      Returns
 |      -------
 |      Index
 |          A new Index object with the computed differences.
 |      
 |      Examples
 |      --------
 |      >>> import pandas as pd
 |      >>> idx = pd.Index([10, 20, 30, 40, 50])
 |      >>> idx.diff()
 |      Index([nan, 10.0, 10.0, 10.0, 10.0], dtype='float64')
 |  
 |  difference(self, other, sort=None)
 |      Return a new Index with elements of index not in `other`.
 |      
 |      This is the set difference of two Index objects.
 |      
 |      Parameters
 |      ----------
 |      other : Index or array-like
 |      sort : bool or None, default None
 |          Whether to sort the resulting index. By default, the
 |          values are attempted to be sorted, but any TypeError from
 |          incomparable elements is caught by pandas.
 |      
 |          * None : Attempt to sort the result, but catch any TypeErrors
 |            from comparing incomparable elements.
 |          * False : Do not sort the result.
 |          * True : Sort the result (which may raise TypeError).
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([2, 1, 3, 4])
 |      >>> idx2 = pd.Index([3, 4, 5, 6])
 |      >>> idx1.difference(idx2)
 |      Index([1, 2], dtype='int64')
 |      >>> idx1.difference(idx2, sort=False)
 |      Index([2, 1], dtype='int64')
 |  
 |  drop(self, labels: 'Index | np.ndarray | Iterable[Hashable]', errors: 'IgnoreRaise' = 'raise') -> 'Index'
 |      Make new Index with passed list of labels deleted.
 |      
 |      Parameters
 |      ----------
 |      labels : array-like or scalar
 |      errors : {'ignore', 'raise'}, default 'raise'
 |          If 'ignore', suppress error and existing labels are dropped.
 |      
 |      Returns
 |      -------
 |      Index
 |          Will be same type as self, except for RangeIndex.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If not all of the labels are found in the selected axis
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.drop(['a'])
 |      Index(['b', 'c'], dtype='object')
 |  
 |  drop_duplicates(self, *, keep: 'DropKeep' = 'first') -> 'Self'
 |      Return Index with duplicate values removed.
 |      
 |      Parameters
 |      ----------
 |      keep : {'first', 'last', ``False``}, default 'first'
 |          - 'first' : Drop duplicates except for the first occurrence.
 |          - 'last' : Drop duplicates except for the last occurrence.
 |          - ``False`` : Drop all duplicates.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      Series.drop_duplicates : Equivalent method on Series.
 |      DataFrame.drop_duplicates : Equivalent method on DataFrame.
 |      Index.duplicated : Related method on Index, indicating duplicate
 |          Index values.
 |      
 |      Examples
 |      --------
 |      Generate an pandas.Index with duplicate values.
 |      
 |      >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])
 |      
 |      The `keep` parameter controls  which duplicate values are removed.
 |      The value 'first' keeps the first occurrence for each
 |      set of duplicated entries. The default value of keep is 'first'.
 |      
 |      >>> idx.drop_duplicates(keep='first')
 |      Index(['lama', 'cow', 'beetle', 'hippo'], dtype='object')
 |      
 |      The value 'last' keeps the last occurrence for each set of duplicated
 |      entries.
 |      
 |      >>> idx.drop_duplicates(keep='last')
 |      Index(['cow', 'beetle', 'lama', 'hippo'], dtype='object')
 |      
 |      The value ``False`` discards all sets of duplicated entries.
 |      
 |      >>> idx.drop_duplicates(keep=False)
 |      Index(['cow', 'beetle', 'hippo'], dtype='object')
 |  
 |  droplevel(self, level: 'IndexLabel' = 0)
 |      Return index with requested level(s) removed.
 |      
 |      If resulting index has only 1 level left, the result will be
 |      of Index type, not MultiIndex. The original index is not modified inplace.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, or list-like, default 0
 |          If a string is given, must be the name of a level
 |          If list-like, elements must be names or indexes of levels.
 |      
 |      Returns
 |      -------
 |      Index or MultiIndex
 |      
 |      Examples
 |      --------
 |      >>> mi = pd.MultiIndex.from_arrays(
 |      ... [[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])
 |      >>> mi
 |      MultiIndex([(1, 3, 5),
 |                  (2, 4, 6)],
 |                 names=['x', 'y', 'z'])
 |      
 |      >>> mi.droplevel()
 |      MultiIndex([(3, 5),
 |                  (4, 6)],
 |                 names=['y', 'z'])
 |      
 |      >>> mi.droplevel(2)
 |      MultiIndex([(1, 3),
 |                  (2, 4)],
 |                 names=['x', 'y'])
 |      
 |      >>> mi.droplevel('z')
 |      MultiIndex([(1, 3),
 |                  (2, 4)],
 |                 names=['x', 'y'])
 |      
 |      >>> mi.droplevel(['x', 'y'])
 |      Index([5, 6], dtype='int64', name='z')
 |  
 |  dropna(self, how: 'AnyAll' = 'any') -> 'Self'
 |      Return Index without NA/NaN values.
 |      
 |      Parameters
 |      ----------
 |      how : {'any', 'all'}, default 'any'
 |          If the Index is a MultiIndex, drop the value when any or all levels
 |          are NaN.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, np.nan, 3])
 |      >>> idx.dropna()
 |      Index([1.0, 3.0], dtype='float64')
 |  
 |  duplicated(self, keep: 'DropKeep' = 'first') -> 'npt.NDArray[np.bool_]'
 |      Indicate duplicate index values.
 |      
 |      Duplicated values are indicated as ``True`` values in the resulting
 |      array. Either all duplicates, all except the first, or all except the
 |      last occurrence of duplicates can be indicated.
 |      
 |      Parameters
 |      ----------
 |      keep : {'first', 'last', False}, default 'first'
 |          The value or values in a set of duplicates to mark as missing.
 |      
 |          - 'first' : Mark duplicates as ``True`` except for the first
 |            occurrence.
 |          - 'last' : Mark duplicates as ``True`` except for the last
 |            occurrence.
 |          - ``False`` : Mark all duplicates as ``True``.
 |      
 |      Returns
 |      -------
 |      np.ndarray[bool]
 |      
 |      See Also
 |      --------
 |      Series.duplicated : Equivalent method on pandas.Series.
 |      DataFrame.duplicated : Equivalent method on pandas.DataFrame.
 |      Index.drop_duplicates : Remove duplicate values from Index.
 |      
 |      Examples
 |      --------
 |      By default, for each set of duplicated values, the first occurrence is
 |      set to False and all others to True:
 |      
 |      >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])
 |      >>> idx.duplicated()
 |      array([False, False,  True, False,  True])
 |      
 |      which is equivalent to
 |      
 |      >>> idx.duplicated(keep='first')
 |      array([False, False,  True, False,  True])
 |      
 |      By using 'last', the last occurrence of each set of duplicated values
 |      is set on False and all others on True:
 |      
 |      >>> idx.duplicated(keep='last')
 |      array([ True, False,  True, False, False])
 |      
 |      By setting keep on ``False``, all duplicates are True:
 |      
 |      >>> idx.duplicated(keep=False)
 |      array([ True, False,  True, False,  True])
 |  
 |  equals(self, other: 'Any') -> 'bool'
 |      Determine if two Index object are equal.
 |      
 |      The things that are being compared are:
 |      
 |      * The elements inside the Index object.
 |      * The order of the elements inside the Index object.
 |      
 |      Parameters
 |      ----------
 |      other : Any
 |          The other object to compare against.
 |      
 |      Returns
 |      -------
 |      bool
 |          True if "other" is an Index and it has the same elements and order
 |          as the calling index; False otherwise.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3])
 |      >>> idx1
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx1.equals(pd.Index([1, 2, 3]))
 |      True
 |      
 |      The elements inside are compared
 |      
 |      >>> idx2 = pd.Index(["1", "2", "3"])
 |      >>> idx2
 |      Index(['1', '2', '3'], dtype='object')
 |      
 |      >>> idx1.equals(idx2)
 |      False
 |      
 |      The order is compared
 |      
 |      >>> ascending_idx = pd.Index([1, 2, 3])
 |      >>> ascending_idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> descending_idx = pd.Index([3, 2, 1])
 |      >>> descending_idx
 |      Index([3, 2, 1], dtype='int64')
 |      >>> ascending_idx.equals(descending_idx)
 |      False
 |      
 |      The dtype is *not* compared
 |      
 |      >>> int64_idx = pd.Index([1, 2, 3], dtype='int64')
 |      >>> int64_idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> uint64_idx = pd.Index([1, 2, 3], dtype='uint64')
 |      >>> uint64_idx
 |      Index([1, 2, 3], dtype='uint64')
 |      >>> int64_idx.equals(uint64_idx)
 |      True
 |  
 |  fillna(self, value=None, downcast=<no_default>)
 |      Fill NA/NaN values with the specified value.
 |      
 |      Parameters
 |      ----------
 |      value : scalar
 |          Scalar value to use to fill holes (e.g. 0).
 |          This value cannot be a list-likes.
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.1.0
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      DataFrame.fillna : Fill NaN values of a DataFrame.
 |      Series.fillna : Fill NaN Values of a Series.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([np.nan, np.nan, 3])
 |      >>> idx.fillna(0)
 |      Index([0.0, 0.0, 3.0], dtype='float64')
 |  
 |  format(self, name: 'bool' = False, formatter: 'Callable | None' = None, na_rep: 'str_t' = 'NaN') -> 'list[str_t]'
 |      Render a string representation of the Index.
 |  
 |  get_indexer(self, target, method: 'ReindexMethod | None' = None, limit: 'int | None' = None, tolerance=None) -> 'npt.NDArray[np.intp]'
 |      Compute indexer and mask for new index given the current index.
 |      
 |      The indexer should be then used as an input to ndarray.take to align the
 |      current data to the new index.
 |      
 |      Parameters
 |      ----------
 |      target : Index
 |      method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional
 |          * default: exact matches only.
 |          * pad / ffill: find the PREVIOUS index value if no exact match.
 |          * backfill / bfill: use NEXT index value if no exact match
 |          * nearest: use the NEAREST index value if no exact match. Tied
 |            distances are broken by preferring the larger index value.
 |      limit : int, optional
 |          Maximum number of consecutive labels in ``target`` to match for
 |          inexact matches.
 |      tolerance : optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations must
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      np.ndarray[np.intp]
 |          Integers from 0 to n - 1 indicating that the index at these
 |          positions matches the corresponding target values. Missing values
 |          in the target are marked by -1.
 |      
 |      Notes
 |      -----
 |      Returns -1 for unmatched values, for further explanation see the
 |      example below.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index(['c', 'a', 'b'])
 |      >>> index.get_indexer(['a', 'b', 'x'])
 |      array([ 1,  2, -1])
 |      
 |      Notice that the return value is an array of locations in ``index``
 |      and ``x`` is marked by -1, as it is not in ``index``.
 |  
 |  get_indexer_for(self, target) -> 'npt.NDArray[np.intp]'
 |      Guaranteed return of an indexer even when non-unique.
 |      
 |      This dispatches to get_indexer or get_indexer_non_unique
 |      as appropriate.
 |      
 |      Returns
 |      -------
 |      np.ndarray[np.intp]
 |          List of indices.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([np.nan, 'var1', np.nan])
 |      >>> idx.get_indexer_for([np.nan])
 |      array([0, 2])
 |  
 |  get_indexer_non_unique(self, target) -> 'tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]'
 |      Compute indexer and mask for new index given the current index.
 |      
 |      The indexer should be then used as an input to ndarray.take to align the
 |      current data to the new index.
 |      
 |      Parameters
 |      ----------
 |      target : Index
 |      
 |      Returns
 |      -------
 |      indexer : np.ndarray[np.intp]
 |          Integers from 0 to n - 1 indicating that the index at these
 |          positions matches the corresponding target values. Missing values
 |          in the target are marked by -1.
 |      missing : np.ndarray[np.intp]
 |          An indexer into the target of the values not found.
 |          These correspond to the -1 in the indexer array.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])
 |      >>> index.get_indexer_non_unique(['b', 'b'])
 |      (array([1, 3, 4, 1, 3, 4]), array([], dtype=int64))
 |      
 |      In the example below there are no matched values.
 |      
 |      >>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])
 |      >>> index.get_indexer_non_unique(['q', 'r', 't'])
 |      (array([-1, -1, -1]), array([0, 1, 2]))
 |      
 |      For this reason, the returned ``indexer`` contains only integers equal to -1.
 |      It demonstrates that there's no match between the index and the ``target``
 |      values at these positions. The mask [0, 1, 2] in the return value shows that
 |      the first, second, and third elements are missing.
 |      
 |      Notice that the return value is a tuple contains two items. In the example
 |      below the first item is an array of locations in ``index``. The second
 |      item is a mask shows that the first and third elements are missing.
 |      
 |      >>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])
 |      >>> index.get_indexer_non_unique(['f', 'b', 's'])
 |      (array([-1,  1,  3,  4, -1]), array([0, 2]))
 |  
 |  get_level_values = _get_level_values(self, level) -> 'Index'
 |  
 |  get_loc(self, key)
 |      Get integer location, slice or boolean mask for requested label.
 |      
 |      Parameters
 |      ----------
 |      key : label
 |      
 |      Returns
 |      -------
 |      int if unique index, slice if monotonic index, else mask
 |      
 |      Examples
 |      --------
 |      >>> unique_index = pd.Index(list('abc'))
 |      >>> unique_index.get_loc('b')
 |      1
 |      
 |      >>> monotonic_index = pd.Index(list('abbc'))
 |      >>> monotonic_index.get_loc('b')
 |      slice(1, 3, None)
 |      
 |      >>> non_monotonic_index = pd.Index(list('abcb'))
 |      >>> non_monotonic_index.get_loc('b')
 |      array([False,  True, False,  True])
 |  
 |  get_slice_bound(self, label, side: "Literal['left', 'right']") -> 'int'
 |      Calculate slice bound that corresponds to given label.
 |      
 |      Returns leftmost (one-past-the-rightmost if ``side=='right'``) position
 |      of given label.
 |      
 |      Parameters
 |      ----------
 |      label : object
 |      side : {'left', 'right'}
 |      
 |      Returns
 |      -------
 |      int
 |          Index of label.
 |      
 |      See Also
 |      --------
 |      Index.get_loc : Get integer location, slice or boolean mask for requested
 |          label.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.RangeIndex(5)
 |      >>> idx.get_slice_bound(3, 'left')
 |      3
 |      
 |      >>> idx.get_slice_bound(3, 'right')
 |      4
 |      
 |      If ``label`` is non-unique in the index, an error will be raised.
 |      
 |      >>> idx_duplicate = pd.Index(['a', 'b', 'a', 'c', 'd'])
 |      >>> idx_duplicate.get_slice_bound('a', 'left')
 |      Traceback (most recent call last):
 |      KeyError: Cannot get left slice bound for non-unique label: 'a'
 |  
 |  groupby(self, values) -> 'PrettyDict[Hashable, np.ndarray]'
 |      Group the index labels by a given array of values.
 |      
 |      Parameters
 |      ----------
 |      values : array
 |          Values used to determine the groups.
 |      
 |      Returns
 |      -------
 |      dict
 |          {group name -> group labels}
 |  
 |  holds_integer(self) -> 'bool'
 |      Whether the type is an integer type.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.infer_dtype` instead
 |  
 |  identical(self, other) -> 'bool'
 |      Similar to equals, but checks that object attributes and types are also equal.
 |      
 |      Returns
 |      -------
 |      bool
 |          If two Index objects have equal elements and same type True,
 |          otherwise False.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index(['1', '2', '3'])
 |      >>> idx2 = pd.Index(['1', '2', '3'])
 |      >>> idx2.identical(idx1)
 |      True
 |      
 |      >>> idx1 = pd.Index(['1', '2', '3'], name="A")
 |      >>> idx2 = pd.Index(['1', '2', '3'], name="B")
 |      >>> idx2.identical(idx1)
 |      False
 |  
 |  infer_objects(self, copy: 'bool' = True) -> 'Index'
 |      If we have an object dtype, try to infer a non-object dtype.
 |      
 |      Parameters
 |      ----------
 |      copy : bool, default True
 |          Whether to make a copy in cases where no inference occurs.
 |  
 |  insert(self, loc: 'int', item) -> 'Index'
 |      Make new Index inserting new item at location.
 |      
 |      Follows Python numpy.insert semantics for negative values.
 |      
 |      Parameters
 |      ----------
 |      loc : int
 |      item : object
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.insert(1, 'x')
 |      Index(['a', 'x', 'b', 'c'], dtype='object')
 |  
 |  intersection(self, other, sort: 'bool' = False)
 |      Form the intersection of two Index objects.
 |      
 |      This returns a new Index with elements common to the index and `other`.
 |      
 |      Parameters
 |      ----------
 |      other : Index or array-like
 |      sort : True, False or None, default False
 |          Whether to sort the resulting index.
 |      
 |          * None : sort the result, except when `self` and `other` are equal
 |            or when the values cannot be compared.
 |          * False : do not sort the result.
 |          * True : Sort the result (which may raise TypeError).
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3, 4])
 |      >>> idx2 = pd.Index([3, 4, 5, 6])
 |      >>> idx1.intersection(idx2)
 |      Index([3, 4], dtype='int64')
 |  
 |  is_(self, other) -> 'bool'
 |      More flexible, faster check like ``is`` but that works through views.
 |      
 |      Note: this is *not* the same as ``Index.identical()``, which checks
 |      that metadata is also the same.
 |      
 |      Parameters
 |      ----------
 |      other : object
 |          Other object to compare against.
 |      
 |      Returns
 |      -------
 |      bool
 |          True if both have same underlying data, False otherwise.
 |      
 |      See Also
 |      --------
 |      Index.identical : Works like ``Index.is_`` but also checks metadata.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index(['1', '2', '3'])
 |      >>> idx1.is_(idx1.view())
 |      True
 |      
 |      >>> idx1.is_(idx1.copy())
 |      False
 |  
 |  is_boolean(self) -> 'bool'
 |      Check if the Index only consists of booleans.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.is_bool_dtype` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index only consists of booleans.
 |      
 |      See Also
 |      --------
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype (deprecated).
 |      is_categorical : Check if the Index holds categorical data.
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([True, False, True])
 |      >>> idx.is_boolean()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index(["True", "False", "True"])
 |      >>> idx.is_boolean()  # doctest: +SKIP
 |      False
 |      
 |      >>> idx = pd.Index([True, False, "True"])
 |      >>> idx.is_boolean()  # doctest: +SKIP
 |      False
 |  
 |  is_categorical(self) -> 'bool'
 |      Check if the Index holds categorical data.
 |      
 |      .. deprecated:: 2.0.0
 |            Use `isinstance(index.dtype, pd.CategoricalDtype)` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          True if the Index is categorical.
 |      
 |      See Also
 |      --------
 |      CategoricalIndex : Index for categorical data.
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(["Watermelon", "Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.is_categorical()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 3, 5, 7])
 |      >>> idx.is_categorical()  # doctest: +SKIP
 |      False
 |      
 |      >>> s = pd.Series(["Peter", "Victor", "Elisabeth", "Mar"])
 |      >>> s
 |      0        Peter
 |      1       Victor
 |      2    Elisabeth
 |      3          Mar
 |      dtype: object
 |      >>> s.index.is_categorical()  # doctest: +SKIP
 |      False
 |  
 |  is_floating(self) -> 'bool'
 |      Check if the Index is a floating type.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.is_float_dtype` instead
 |      
 |      The Index may consist of only floats, NaNs, or a mix of floats,
 |      integers, or NaNs.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index only consists of only consists of floats, NaNs, or
 |          a mix of floats, integers, or NaNs.
 |      
 |      See Also
 |      --------
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])
 |      >>> idx.is_floating()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])
 |      >>> idx.is_floating()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4, np.nan])
 |      >>> idx.is_floating()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx.is_floating()  # doctest: +SKIP
 |      False
 |  
 |  is_integer(self) -> 'bool'
 |      Check if the Index only consists of integers.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.is_integer_dtype` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index only consists of integers.
 |      
 |      See Also
 |      --------
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx.is_integer()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])
 |      >>> idx.is_integer()  # doctest: +SKIP
 |      False
 |      
 |      >>> idx = pd.Index(["Apple", "Mango", "Watermelon"])
 |      >>> idx.is_integer()  # doctest: +SKIP
 |      False
 |  
 |  is_interval(self) -> 'bool'
 |      Check if the Index holds Interval objects.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `isinstance(index.dtype, pd.IntervalDtype)` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index holds Interval objects.
 |      
 |      See Also
 |      --------
 |      IntervalIndex : Index for Interval objects.
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([pd.Interval(left=0, right=5),
 |      ...                 pd.Interval(left=5, right=10)])
 |      >>> idx.is_interval()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 3, 5, 7])
 |      >>> idx.is_interval()  # doctest: +SKIP
 |      False
 |  
 |  is_numeric(self) -> 'bool'
 |      Check if the Index only consists of numeric data.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.is_numeric_dtype` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index only consists of numeric data.
 |      
 |      See Also
 |      --------
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4.0])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4.0, np.nan])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4.0, np.nan, "Apple"])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      False
 |  
 |  is_object(self) -> 'bool'
 |      Check if the Index is of the object dtype.
 |      
 |      .. deprecated:: 2.0.0
 |         Use `pandas.api.types.is_object_dtype` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index is of the object dtype.
 |      
 |      See Also
 |      --------
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(["Apple", "Mango", "Watermelon"])
 |      >>> idx.is_object()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index(["Apple", "Mango", 2.0])
 |      >>> idx.is_object()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index(["Watermelon", "Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.is_object()  # doctest: +SKIP
 |      False
 |      
 |      >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])
 |      >>> idx.is_object()  # doctest: +SKIP
 |      False
 |  
 |  isin(self, values, level=None) -> 'npt.NDArray[np.bool_]'
 |      Return a boolean array where the index values are in `values`.
 |      
 |      Compute boolean array of whether each index value is found in the
 |      passed set of values. The length of the returned boolean array matches
 |      the length of the index.
 |      
 |      Parameters
 |      ----------
 |      values : set or list-like
 |          Sought values.
 |      level : str or int, optional
 |          Name or position of the index level to use (if the index is a
 |          `MultiIndex`).
 |      
 |      Returns
 |      -------
 |      np.ndarray[bool]
 |          NumPy array of boolean values.
 |      
 |      See Also
 |      --------
 |      Series.isin : Same for Series.
 |      DataFrame.isin : Same method for DataFrames.
 |      
 |      Notes
 |      -----
 |      In the case of `MultiIndex` you must either specify `values` as a
 |      list-like object containing tuples that are the same length as the
 |      number of levels, or specify `level`. Otherwise it will raise a
 |      ``ValueError``.
 |      
 |      If `level` is specified:
 |      
 |      - if it is the name of one *and only one* index level, use that level;
 |      - otherwise it should be a number indicating level position.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1,2,3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      
 |      Check whether each index value in a list of values.
 |      
 |      >>> idx.isin([1, 4])
 |      array([ True, False, False])
 |      
 |      >>> midx = pd.MultiIndex.from_arrays([[1,2,3],
 |      ...                                  ['red', 'blue', 'green']],
 |      ...                                  names=('number', 'color'))
 |      >>> midx
 |      MultiIndex([(1,   'red'),
 |                  (2,  'blue'),
 |                  (3, 'green')],
 |                 names=['number', 'color'])
 |      
 |      Check whether the strings in the 'color' level of the MultiIndex
 |      are in a list of colors.
 |      
 |      >>> midx.isin(['red', 'orange', 'yellow'], level='color')
 |      array([ True, False, False])
 |      
 |      To check across the levels of a MultiIndex, pass a list of tuples:
 |      
 |      >>> midx.isin([(1, 'red'), (3, 'red')])
 |      array([ True, False, False])
 |  
 |  isna(self) -> 'npt.NDArray[np.bool_]'
 |      Detect missing values.
 |      
 |      Return a boolean same-sized object indicating if the values are NA.
 |      NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get
 |      mapped to ``True`` values.
 |      Everything else get mapped to ``False`` values. Characters such as
 |      empty strings `''` or :attr:`numpy.inf` are not considered NA values.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray[bool]
 |          A boolean array of whether my values are NA.
 |      
 |      See Also
 |      --------
 |      Index.notna : Boolean inverse of isna.
 |      Index.dropna : Omit entries with missing values.
 |      isna : Top-level isna.
 |      Series.isna : Detect missing values in Series object.
 |      
 |      Examples
 |      --------
 |      Show which entries in a pandas.Index are NA. The result is an
 |      array.
 |      
 |      >>> idx = pd.Index([5.2, 6.0, np.nan])
 |      >>> idx
 |      Index([5.2, 6.0, nan], dtype='float64')
 |      >>> idx.isna()
 |      array([False, False,  True])
 |      
 |      Empty strings are not considered NA values. None is considered an NA
 |      value.
 |      
 |      >>> idx = pd.Index(['black', '', 'red', None])
 |      >>> idx
 |      Index(['black', '', 'red', None], dtype='object')
 |      >>> idx.isna()
 |      array([False, False, False,  True])
 |      
 |      For datetimes, `NaT` (Not a Time) is considered as an NA value.
 |      
 |      >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),
 |      ...                         pd.Timestamp(''), None, pd.NaT])
 |      >>> idx
 |      DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],
 |                    dtype='datetime64[ns]', freq=None)
 |      >>> idx.isna()
 |      array([False,  True,  True,  True])
 |  
 |  isnull = isna(self) -> 'npt.NDArray[np.bool_]'
 |  
 |  join(self, other: 'Index', *, how: 'JoinHow' = 'left', level: 'Level | None' = None, return_indexers: 'bool' = False, sort: 'bool' = False) -> 'Index | tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]'
 |      Compute join_index and indexers to conform data structures to the new index.
 |      
 |      Parameters
 |      ----------
 |      other : Index
 |      how : {'left', 'right', 'inner', 'outer'}
 |      level : int or level name, default None
 |      return_indexers : bool, default False
 |      sort : bool, default False
 |          Sort the join keys lexicographically in the result Index. If False,
 |          the order of the join keys depends on the join type (how keyword).
 |      
 |      Returns
 |      -------
 |      join_index, (left_indexer, right_indexer)
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3])
 |      >>> idx2 = pd.Index([4, 5, 6])
 |      >>> idx1.join(idx2, how='outer')
 |      Index([1, 2, 3, 4, 5, 6], dtype='int64')
 |  
 |  map(self, mapper, na_action: "Literal['ignore'] | None" = None)
 |      Map values using an input mapping or function.
 |      
 |      Parameters
 |      ----------
 |      mapper : function, dict, or Series
 |          Mapping correspondence.
 |      na_action : {None, 'ignore'}
 |          If 'ignore', propagate NA values, without passing them to the
 |          mapping correspondence.
 |      
 |      Returns
 |      -------
 |      Union[Index, MultiIndex]
 |          The output of the mapping function applied to the index.
 |          If the function returns a tuple with more than one element
 |          a MultiIndex will be returned.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.map({1: 'a', 2: 'b', 3: 'c'})
 |      Index(['a', 'b', 'c'], dtype='object')
 |      
 |      Using `map` with a function:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.map('I am a {}'.format)
 |      Index(['I am a 1', 'I am a 2', 'I am a 3'], dtype='object')
 |      
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.map(lambda x: x.upper())
 |      Index(['A', 'B', 'C'], dtype='object')
 |  
 |  max(self, axis=None, skipna: 'bool' = True, *args, **kwargs)
 |      Return the maximum value of the Index.
 |      
 |      Parameters
 |      ----------
 |      axis : int, optional
 |          For compatibility with NumPy. Only 0 or None are allowed.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar
 |          Maximum value.
 |      
 |      See Also
 |      --------
 |      Index.min : Return the minimum value in an Index.
 |      Series.max : Return the maximum value in a Series.
 |      DataFrame.max : Return the maximum values in a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([3, 2, 1])
 |      >>> idx.max()
 |      3
 |      
 |      >>> idx = pd.Index(['c', 'b', 'a'])
 |      >>> idx.max()
 |      'c'
 |      
 |      For a MultiIndex, the maximum is determined lexicographically.
 |      
 |      >>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])
 |      >>> idx.max()
 |      ('b', 2)
 |  
 |  memory_usage(self, deep: 'bool' = False) -> 'int'
 |      Memory usage of the values.
 |      
 |      Parameters
 |      ----------
 |      deep : bool, default False
 |          Introspect the data deeply, interrogate
 |          `object` dtypes for system-level memory consumption.
 |      
 |      Returns
 |      -------
 |      bytes used
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.nbytes : Total bytes consumed by the elements of the
 |          array.
 |      
 |      Notes
 |      -----
 |      Memory usage does not include memory consumed by elements that
 |      are not components of the array if deep=False or if used on PyPy
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.memory_usage()
 |      24
 |  
 |  min(self, axis=None, skipna: 'bool' = True, *args, **kwargs)
 |      Return the minimum value of the Index.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Dummy argument for consistency with Series.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar
 |          Minimum value.
 |      
 |      See Also
 |      --------
 |      Index.max : Return the maximum value of the object.
 |      Series.min : Return the minimum value in a Series.
 |      DataFrame.min : Return the minimum values in a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([3, 2, 1])
 |      >>> idx.min()
 |      1
 |      
 |      >>> idx = pd.Index(['c', 'b', 'a'])
 |      >>> idx.min()
 |      'a'
 |      
 |      For a MultiIndex, the minimum is determined lexicographically.
 |      
 |      >>> idx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])
 |      >>> idx.min()
 |      ('a', 1)
 |  
 |  notna(self) -> 'npt.NDArray[np.bool_]'
 |      Detect existing (non-missing) values.
 |      
 |      Return a boolean same-sized object indicating if the values are not NA.
 |      Non-missing values get mapped to ``True``. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values.
 |      NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``
 |      values.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray[bool]
 |          Boolean array to indicate which entries are not NA.
 |      
 |      See Also
 |      --------
 |      Index.notnull : Alias of notna.
 |      Index.isna: Inverse of notna.
 |      notna : Top-level notna.
 |      
 |      Examples
 |      --------
 |      Show which entries in an Index are not NA. The result is an
 |      array.
 |      
 |      >>> idx = pd.Index([5.2, 6.0, np.nan])
 |      >>> idx
 |      Index([5.2, 6.0, nan], dtype='float64')
 |      >>> idx.notna()
 |      array([ True,  True, False])
 |      
 |      Empty strings are not considered NA values. None is considered a NA
 |      value.
 |      
 |      >>> idx = pd.Index(['black', '', 'red', None])
 |      >>> idx
 |      Index(['black', '', 'red', None], dtype='object')
 |      >>> idx.notna()
 |      array([ True,  True,  True, False])
 |  
 |  notnull = notna(self) -> 'npt.NDArray[np.bool_]'
 |  
 |  putmask(self, mask, value) -> 'Index'
 |      Return a new Index of the values set with the mask.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.putmask : Changes elements of an array
 |          based on conditional and input values.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3])
 |      >>> idx2 = pd.Index([5, 6, 7])
 |      >>> idx1.putmask([True, False, False], idx2)
 |      Index([5, 2, 3], dtype='int64')
 |  
 |  ravel(self, order: 'str_t' = 'C') -> 'Self'
 |      Return a view on self.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.ravel : Return a flattened array.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3], index=['a', 'b', 'c'])
 |      >>> s.index.ravel()
 |      Index(['a', 'b', 'c'], dtype='object')
 |  
 |  reindex(self, target, method: 'ReindexMethod | None' = None, level=None, limit: 'int | None' = None, tolerance: 'float | None' = None) -> 'tuple[Index, npt.NDArray[np.intp] | None]'
 |      Create index with target's values.
 |      
 |      Parameters
 |      ----------
 |      target : an iterable
 |      method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional
 |          * default: exact matches only.
 |          * pad / ffill: find the PREVIOUS index value if no exact match.
 |          * backfill / bfill: use NEXT index value if no exact match
 |          * nearest: use the NEAREST index value if no exact match. Tied
 |            distances are broken by preferring the larger index value.
 |      level : int, optional
 |          Level of multiindex.
 |      limit : int, optional
 |          Maximum number of consecutive labels in ``target`` to match for
 |          inexact matches.
 |      tolerance : int or float, optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations must
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      new_index : pd.Index
 |          Resulting index.
 |      indexer : np.ndarray[np.intp] or None
 |          Indices of output values in original index.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If ``method`` passed along with ``level``.
 |      ValueError
 |          If non-unique multi-index
 |      ValueError
 |          If non-unique index and ``method`` or ``limit`` passed.
 |      
 |      See Also
 |      --------
 |      Series.reindex : Conform Series to new index with optional filling logic.
 |      DataFrame.reindex : Conform DataFrame to new index with optional filling logic.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])
 |      >>> idx
 |      Index(['car', 'bike', 'train', 'tractor'], dtype='object')
 |      >>> idx.reindex(['car', 'bike'])
 |      (Index(['car', 'bike'], dtype='object'), array([0, 1]))
 |  
 |  rename(self, name, *, inplace: 'bool' = False) -> 'Self | None'
 |      Alter Index or MultiIndex name.
 |      
 |      Able to set new names without level. Defaults to returning new index.
 |      Length of names must match number of levels in MultiIndex.
 |      
 |      Parameters
 |      ----------
 |      name : label or list of labels
 |          Name(s) to set.
 |      inplace : bool, default False
 |          Modifies the object directly, instead of creating a new Index or
 |          MultiIndex.
 |      
 |      Returns
 |      -------
 |      Index or None
 |          The same type as the caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Index.set_names : Able to set new names partially and by level.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')
 |      >>> idx.rename('grade')
 |      Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')
 |      
 |      >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],
 |      ...                                   [2018, 2019]],
 |      ...                                   names=['kind', 'year'])
 |      >>> idx
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 names=['kind', 'year'])
 |      >>> idx.rename(['species', 'year'])
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 names=['species', 'year'])
 |      >>> idx.rename('species')
 |      Traceback (most recent call last):
 |      TypeError: Must pass list-like as `names`.
 |  
 |  repeat(self, repeats, axis: 'None' = None) -> 'Self'
 |      Repeat elements of a Index.
 |      
 |      Returns a new Index where each element of the current Index
 |      is repeated consecutively a given number of times.
 |      
 |      Parameters
 |      ----------
 |      repeats : int or array of ints
 |          The number of repetitions for each element. This should be a
 |          non-negative integer. Repeating 0 times will return an empty
 |          Index.
 |      axis : None
 |          Must be ``None``. Has no effect but is accepted for compatibility
 |          with numpy.
 |      
 |      Returns
 |      -------
 |      Index
 |          Newly created Index with repeated elements.
 |      
 |      See Also
 |      --------
 |      Series.repeat : Equivalent function for Series.
 |      numpy.repeat : Similar method for :class:`numpy.ndarray`.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx
 |      Index(['a', 'b', 'c'], dtype='object')
 |      >>> idx.repeat(2)
 |      Index(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object')
 |      >>> idx.repeat([1, 2, 3])
 |      Index(['a', 'b', 'b', 'c', 'c', 'c'], dtype='object')
 |  
 |  round(self, decimals: 'int' = 0) -> 'Self'
 |      Round each value in the Index to the given number of decimals.
 |      
 |      Parameters
 |      ----------
 |      decimals : int, optional
 |          Number of decimal places to round to. If decimals is negative,
 |          it specifies the number of positions to the left of the decimal point.
 |      
 |      Returns
 |      -------
 |      Index
 |          A new Index with the rounded values.
 |      
 |      Examples
 |      --------
 |      >>> import pandas as pd
 |      >>> idx = pd.Index([10.1234, 20.5678, 30.9123, 40.4567, 50.7890])
 |      >>> idx.round(decimals=2)
 |      Index([10.12, 20.57, 30.91, 40.46, 50.79], dtype='float64')
 |  
 |  set_names(self, names, *, level=None, inplace: 'bool' = False) -> 'Self | None'
 |      Set Index or MultiIndex name.
 |      
 |      Able to set new names partially and by level.
 |      
 |      Parameters
 |      ----------
 |      
 |      names : label or list of label or dict-like for MultiIndex
 |          Name(s) to set.
 |      
 |          .. versionchanged:: 1.3.0
 |      
 |      level : int, label or list of int or label, optional
 |          If the index is a MultiIndex and names is not dict-like, level(s) to set
 |          (None for all levels). Otherwise level must be None.
 |      
 |          .. versionchanged:: 1.3.0
 |      
 |      inplace : bool, default False
 |          Modifies the object directly, instead of creating a new Index or
 |          MultiIndex.
 |      
 |      Returns
 |      -------
 |      Index or None
 |          The same type as the caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Index.rename : Able to set new names without level.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx
 |      Index([1, 2, 3, 4], dtype='int64')
 |      >>> idx.set_names('quarter')
 |      Index([1, 2, 3, 4], dtype='int64', name='quarter')
 |      
 |      >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],
 |      ...                                   [2018, 2019]])
 |      >>> idx
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 )
 |      >>> idx = idx.set_names(['kind', 'year'])
 |      >>> idx.set_names('species', level=0)
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 names=['species', 'year'])
 |      
 |      When renaming levels with a dict, levels can not be passed.
 |      
 |      >>> idx.set_names({'kind': 'snake'})
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 names=['snake', 'year'])
 |  
 |  shift(self, periods: 'int' = 1, freq=None)
 |      Shift index by desired number of time frequency increments.
 |      
 |      This method is for shifting the values of datetime-like indexes
 |      by a specified time increment a given number of times.
 |      
 |      Parameters
 |      ----------
 |      periods : int, default 1
 |          Number of periods (or increments) to shift by,
 |          can be positive or negative.
 |      freq : pandas.DateOffset, pandas.Timedelta or str, optional
 |          Frequency increment to shift by.
 |          If None, the index is shifted by its own `freq` attribute.
 |          Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.
 |      
 |      Returns
 |      -------
 |      pandas.Index
 |          Shifted index.
 |      
 |      See Also
 |      --------
 |      Series.shift : Shift values of Series.
 |      
 |      Notes
 |      -----
 |      This method is only implemented for datetime-like index classes,
 |      i.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.
 |      
 |      Examples
 |      --------
 |      Put the first 5 month starts of 2011 into an index.
 |      
 |      >>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')
 |      >>> month_starts
 |      DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',
 |                     '2011-05-01'],
 |                    dtype='datetime64[ns]', freq='MS')
 |      
 |      Shift the index by 10 days.
 |      
 |      >>> month_starts.shift(10, freq='D')
 |      DatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',
 |                     '2011-05-11'],
 |                    dtype='datetime64[ns]', freq=None)
 |      
 |      The default value of `freq` is the `freq` attribute of the index,
 |      which is 'MS' (month start) in this example.
 |      
 |      >>> month_starts.shift(10)
 |      DatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',
 |                     '2012-03-01'],
 |                    dtype='datetime64[ns]', freq='MS')
 |  
 |  slice_indexer(self, start: 'Hashable | None' = None, end: 'Hashable | None' = None, step: 'int | None' = None) -> 'slice'
 |      Compute the slice indexer for input labels and step.
 |      
 |      Index needs to be ordered and unique.
 |      
 |      Parameters
 |      ----------
 |      start : label, default None
 |          If None, defaults to the beginning.
 |      end : label, default None
 |          If None, defaults to the end.
 |      step : int, default None
 |      
 |      Returns
 |      -------
 |      slice
 |      
 |      Raises
 |      ------
 |      KeyError : If key does not exist, or key is not unique and index is
 |          not ordered.
 |      
 |      Notes
 |      -----
 |      This function assumes that the data is sorted, so use at your own peril
 |      
 |      Examples
 |      --------
 |      This is a method on all index types. For example you can do:
 |      
 |      >>> idx = pd.Index(list('abcd'))
 |      >>> idx.slice_indexer(start='b', end='c')
 |      slice(1, 3, None)
 |      
 |      >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])
 |      >>> idx.slice_indexer(start='b', end=('c', 'g'))
 |      slice(1, 3, None)
 |  
 |  slice_locs(self, start=None, end=None, step=None) -> 'tuple[int, int]'
 |      Compute slice locations for input labels.
 |      
 |      Parameters
 |      ----------
 |      start : label, default None
 |          If None, defaults to the beginning.
 |      end : label, default None
 |          If None, defaults to the end.
 |      step : int, defaults None
 |          If None, defaults to 1.
 |      
 |      Returns
 |      -------
 |      tuple[int, int]
 |      
 |      See Also
 |      --------
 |      Index.get_loc : Get location for a single label.
 |      
 |      Notes
 |      -----
 |      This method only works if the index is monotonic or unique.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(list('abcd'))
 |      >>> idx.slice_locs(start='b', end='c')
 |      (1, 3)
 |  
 |  sort(self, *args, **kwargs)
 |      Use sort_values instead.
 |  
 |  sort_values(self, *, return_indexer: 'bool' = False, ascending: 'bool' = True, na_position: 'NaPosition' = 'last', key: 'Callable | None' = None) -> 'Self | tuple[Self, np.ndarray]'
 |      Return a sorted copy of the index.
 |      
 |      Return a sorted copy of the index, and optionally return the indices
 |      that sorted the index itself.
 |      
 |      Parameters
 |      ----------
 |      return_indexer : bool, default False
 |          Should the indices that would sort the index be returned.
 |      ascending : bool, default True
 |          Should the index values be sorted in an ascending order.
 |      na_position : {'first' or 'last'}, default 'last'
 |          Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at
 |          the end.
 |      key : callable, optional
 |          If not None, apply the key function to the index values
 |          before sorting. This is similar to the `key` argument in the
 |          builtin :meth:`sorted` function, with the notable difference that
 |          this `key` function should be *vectorized*. It should expect an
 |          ``Index`` and return an ``Index`` of the same shape.
 |      
 |      Returns
 |      -------
 |      sorted_index : pandas.Index
 |          Sorted copy of the index.
 |      indexer : numpy.ndarray, optional
 |          The indices that the index itself was sorted by.
 |      
 |      See Also
 |      --------
 |      Series.sort_values : Sort values of a Series.
 |      DataFrame.sort_values : Sort values in a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([10, 100, 1, 1000])
 |      >>> idx
 |      Index([10, 100, 1, 1000], dtype='int64')
 |      
 |      Sort values in ascending order (default behavior).
 |      
 |      >>> idx.sort_values()
 |      Index([1, 10, 100, 1000], dtype='int64')
 |      
 |      Sort values in descending order, and also get the indices `idx` was
 |      sorted by.
 |      
 |      >>> idx.sort_values(ascending=False, return_indexer=True)
 |      (Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))
 |  
 |  sortlevel(self, level=None, ascending: 'bool | list[bool]' = True, sort_remaining=None, na_position: 'NaPosition' = 'first')
 |      For internal compatibility with the Index API.
 |      
 |      Sort the Index. This is for compat with MultiIndex
 |      
 |      Parameters
 |      ----------
 |      ascending : bool, default True
 |          False to sort in descending order
 |      na_position : {'first' or 'last'}, default 'first'
 |          Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at
 |          the end.
 |      
 |          .. versionadded:: 2.1.0
 |      
 |      level, sort_remaining are compat parameters
 |      
 |      Returns
 |      -------
 |      Index
 |  
 |  symmetric_difference(self, other, result_name=None, sort=None)
 |      Compute the symmetric difference of two Index objects.
 |      
 |      Parameters
 |      ----------
 |      other : Index or array-like
 |      result_name : str
 |      sort : bool or None, default None
 |          Whether to sort the resulting index. By default, the
 |          values are attempted to be sorted, but any TypeError from
 |          incomparable elements is caught by pandas.
 |      
 |          * None : Attempt to sort the result, but catch any TypeErrors
 |            from comparing incomparable elements.
 |          * False : Do not sort the result.
 |          * True : Sort the result (which may raise TypeError).
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Notes
 |      -----
 |      ``symmetric_difference`` contains elements that appear in either
 |      ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by
 |      ``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates
 |      dropped.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3, 4])
 |      >>> idx2 = pd.Index([2, 3, 4, 5])
 |      >>> idx1.symmetric_difference(idx2)
 |      Index([1, 5], dtype='int64')
 |  
 |  take(self, indices, axis: 'Axis' = 0, allow_fill: 'bool' = True, fill_value=None, **kwargs) -> 'Self'
 |      Return a new Index of the values selected by the indices.
 |      
 |      For internal compatibility with numpy arrays.
 |      
 |      Parameters
 |      ----------
 |      indices : array-like
 |          Indices to be taken.
 |      axis : int, optional
 |          The axis over which to select values, always 0.
 |      allow_fill : bool, default True
 |      fill_value : scalar, default None
 |          If allow_fill=True and fill_value is not None, indices specified by
 |          -1 are regarded as NA. If Index doesn't hold NA, raise ValueError.
 |      
 |      Returns
 |      -------
 |      Index
 |          An index formed of elements at the given indices. Will be the same
 |          type as self, except for RangeIndex.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.take: Return an array formed from the
 |          elements of a at the given indices.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.take([2, 2, 1, 2])
 |      Index(['c', 'c', 'b', 'c'], dtype='object')
 |  
 |  to_flat_index(self) -> 'Self'
 |      Identity method.
 |      
 |      This is implemented for compatibility with subclass implementations
 |      when chaining.
 |      
 |      Returns
 |      -------
 |      pd.Index
 |          Caller.
 |      
 |      See Also
 |      --------
 |      MultiIndex.to_flat_index : Subclass implementation.
 |  
 |  to_frame(self, index: 'bool' = True, name: 'Hashable' = <no_default>) -> 'DataFrame'
 |      Create a DataFrame with a column containing the Index.
 |      
 |      Parameters
 |      ----------
 |      index : bool, default True
 |          Set the index of the returned DataFrame as the original Index.
 |      
 |      name : object, defaults to index.name
 |          The passed name should substitute for the index name (if it has
 |          one).
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          DataFrame containing the original Index data.
 |      
 |      See Also
 |      --------
 |      Index.to_series : Convert an Index to a Series.
 |      Series.to_frame : Convert Series to DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')
 |      >>> idx.to_frame()
 |             animal
 |      animal
 |      Ant       Ant
 |      Bear     Bear
 |      Cow       Cow
 |      
 |      By default, the original Index is reused. To enforce a new Index:
 |      
 |      >>> idx.to_frame(index=False)
 |          animal
 |      0   Ant
 |      1  Bear
 |      2   Cow
 |      
 |      To override the name of the resulting column, specify `name`:
 |      
 |      >>> idx.to_frame(index=False, name='zoo')
 |          zoo
 |      0   Ant
 |      1  Bear
 |      2   Cow
 |  
 |  to_series(self, index=None, name: 'Hashable | None' = None) -> 'Series'
 |      Create a Series with both index and values equal to the index keys.
 |      
 |      Useful with map for returning an indexer based on an index.
 |      
 |      Parameters
 |      ----------
 |      index : Index, optional
 |          Index of resulting Series. If None, defaults to original index.
 |      name : str, optional
 |          Name of resulting Series. If None, defaults to name of original
 |          index.
 |      
 |      Returns
 |      -------
 |      Series
 |          The dtype will be based on the type of the Index values.
 |      
 |      See Also
 |      --------
 |      Index.to_frame : Convert an Index to a DataFrame.
 |      Series.to_frame : Convert Series to DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')
 |      
 |      By default, the original index and original name is reused.
 |      
 |      >>> idx.to_series()
 |      animal
 |      Ant      Ant
 |      Bear    Bear
 |      Cow      Cow
 |      Name: animal, dtype: object
 |      
 |      To enforce a new index, specify new labels to ``index``:
 |      
 |      >>> idx.to_series(index=[0, 1, 2])
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      Name: animal, dtype: object
 |      
 |      To override the name of the resulting column, specify ``name``:
 |      
 |      >>> idx.to_series(name='zoo')
 |      animal
 |      Ant      Ant
 |      Bear    Bear
 |      Cow      Cow
 |      Name: zoo, dtype: object
 |  
 |  union(self, other, sort=None)
 |      Form the union of two Index objects.
 |      
 |      If the Index objects are incompatible, both Index objects will be
 |      cast to dtype('object') first.
 |      
 |      Parameters
 |      ----------
 |      other : Index or array-like
 |      sort : bool or None, default None
 |          Whether to sort the resulting Index.
 |      
 |          * None : Sort the result, except when
 |      
 |            1. `self` and `other` are equal.
 |            2. `self` or `other` has length 0.
 |            3. Some values in `self` or `other` cannot be compared.
 |               A RuntimeWarning is issued in this case.
 |      
 |          * False : do not sort the result.
 |          * True : Sort the result (which may raise TypeError).
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      Union matching dtypes
 |      
 |      >>> idx1 = pd.Index([1, 2, 3, 4])
 |      >>> idx2 = pd.Index([3, 4, 5, 6])
 |      >>> idx1.union(idx2)
 |      Index([1, 2, 3, 4, 5, 6], dtype='int64')
 |      
 |      Union mismatched dtypes
 |      
 |      >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])
 |      >>> idx2 = pd.Index([1, 2, 3, 4])
 |      >>> idx1.union(idx2)
 |      Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')
 |      
 |      MultiIndex case
 |      
 |      >>> idx1 = pd.MultiIndex.from_arrays(
 |      ...     [[1, 1, 2, 2], ["Red", "Blue", "Red", "Blue"]]
 |      ... )
 |      >>> idx1
 |      MultiIndex([(1,  'Red'),
 |          (1, 'Blue'),
 |          (2,  'Red'),
 |          (2, 'Blue')],
 |         )
 |      >>> idx2 = pd.MultiIndex.from_arrays(
 |      ...     [[3, 3, 2, 2], ["Red", "Green", "Red", "Green"]]
 |      ... )
 |      >>> idx2
 |      MultiIndex([(3,   'Red'),
 |          (3, 'Green'),
 |          (2,   'Red'),
 |          (2, 'Green')],
 |         )
 |      >>> idx1.union(idx2)
 |      MultiIndex([(1,  'Blue'),
 |          (1,   'Red'),
 |          (2,  'Blue'),
 |          (2, 'Green'),
 |          (2,   'Red'),
 |          (3, 'Green'),
 |          (3,   'Red')],
 |         )
 |      >>> idx1.union(idx2, sort=False)
 |      MultiIndex([(1,   'Red'),
 |          (1,  'Blue'),
 |          (2,   'Red'),
 |          (2,  'Blue'),
 |          (3,   'Red'),
 |          (3, 'Green'),
 |          (2, 'Green')],
 |         )
 |  
 |  unique(self, level: 'Hashable | None' = None) -> 'Self'
 |      Return unique values in the index.
 |      
 |      Unique values are returned in order of appearance, this does NOT sort.
 |      
 |      Parameters
 |      ----------
 |      level : int or hashable, optional
 |          Only return values from specified level (for MultiIndex).
 |          If int, gets the level by integer position, else by level name.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      unique : Numpy array of unique values in that column.
 |      Series.unique : Return unique values of Series object.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 1, 2, 3, 3])
 |      >>> idx.unique()
 |      Index([1, 2, 3], dtype='int64')
 |  
 |  view(self, cls=None)
 |  
 |  where(self, cond, other=None) -> 'Index'
 |      Replace values where the condition is False.
 |      
 |      The replacement is taken from other.
 |      
 |      Parameters
 |      ----------
 |      cond : bool array-like with the same length as self
 |          Condition to select the values on.
 |      other : scalar, or array-like, default None
 |          Replacement if the condition is False.
 |      
 |      Returns
 |      -------
 |      pandas.Index
 |          A copy of self with values replaced from other
 |          where the condition is False.
 |      
 |      See Also
 |      --------
 |      Series.where : Same method for Series.
 |      DataFrame.where : Same method for DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])
 |      >>> idx
 |      Index(['car', 'bike', 'train', 'tractor'], dtype='object')
 |      >>> idx.where(idx.isin(['car', 'train']), 'other')
 |      Index(['car', 'other', 'train', 'other'], dtype='object')
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(cls, data=None, dtype=None, copy: 'bool' = False, name=None, tupleize_cols: 'bool' = True) -> 'Self'
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  has_duplicates
 |      Check if the Index has duplicate values.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index has duplicate values.
 |      
 |      See Also
 |      --------
 |      Index.is_unique : Inverse method that checks if it has unique values.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 5, 7, 7])
 |      >>> idx.has_duplicates
 |      True
 |      
 |      >>> idx = pd.Index([1, 5, 7])
 |      >>> idx.has_duplicates
 |      False
 |      
 |      >>> idx = pd.Index(["Watermelon", "Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.has_duplicates
 |      True
 |      
 |      >>> idx = pd.Index(["Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.has_duplicates
 |      False
 |  
 |  is_monotonic_decreasing
 |      Return a boolean if the values are equal or decreasing.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      See Also
 |      --------
 |      Index.is_monotonic_increasing : Check if the values are equal or increasing.
 |      
 |      Examples
 |      --------
 |      >>> pd.Index([3, 2, 1]).is_monotonic_decreasing
 |      True
 |      >>> pd.Index([3, 2, 2]).is_monotonic_decreasing
 |      True
 |      >>> pd.Index([3, 1, 2]).is_monotonic_decreasing
 |      False
 |  
 |  is_monotonic_increasing
 |      Return a boolean if the values are equal or increasing.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      See Also
 |      --------
 |      Index.is_monotonic_decreasing : Check if the values are equal or decreasing.
 |      
 |      Examples
 |      --------
 |      >>> pd.Index([1, 2, 3]).is_monotonic_increasing
 |      True
 |      >>> pd.Index([1, 2, 2]).is_monotonic_increasing
 |      True
 |      >>> pd.Index([1, 3, 2]).is_monotonic_increasing
 |      False
 |  
 |  nlevels
 |      Number of levels.
 |  
 |  shape
 |      Return a tuple of the shape of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.shape
 |      (3,)
 |  
 |  values
 |      Return an array representing the data in the Index.
 |      
 |      .. warning::
 |      
 |         We recommend using :attr:`Index.array` or
 |         :meth:`Index.to_numpy`, depending on whether you need
 |         a reference to the underlying data or a NumPy array.
 |      
 |      Returns
 |      -------
 |      array: numpy.ndarray or ExtensionArray
 |      
 |      See Also
 |      --------
 |      Index.array : Reference to the underlying data.
 |      Index.to_numpy : A NumPy array representing the underlying data.
 |      
 |      Examples
 |      --------
 |      For :class:`pandas.Index`:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.values
 |      array([1, 2, 3])
 |      
 |      For :class:`pandas.IntervalIndex`:
 |      
 |      >>> idx = pd.interval_range(start=0, end=5)
 |      >>> idx.values
 |      <IntervalArray>
 |      [(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]]
 |      Length: 5, dtype: interval[int64, right]
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  array
 |      The ExtensionArray of the data backing this Series or Index.
 |      
 |      Returns
 |      -------
 |      ExtensionArray
 |          An ExtensionArray of the values stored within. For extension
 |          types, this is the actual array. For NumPy native types, this
 |          is a thin (no copy) wrapper around :class:`numpy.ndarray`.
 |      
 |          ``.array`` differs from ``.values``, which may require converting
 |          the data to a different form.
 |      
 |      See Also
 |      --------
 |      Index.to_numpy : Similar method that always returns a NumPy array.
 |      Series.to_numpy : Similar method that always returns a NumPy array.
 |      
 |      Notes
 |      -----
 |      This table lays out the different array types for each extension
 |      dtype within pandas.
 |      
 |      ================== =============================
 |      dtype              array type
 |      ================== =============================
 |      category           Categorical
 |      period             PeriodArray
 |      interval           IntervalArray
 |      IntegerNA          IntegerArray
 |      string             StringArray
 |      boolean            BooleanArray
 |      datetime64[ns, tz] DatetimeArray
 |      ================== =============================
 |      
 |      For any 3rd-party extension types, the array type will be an
 |      ExtensionArray.
 |      
 |      For all remaining dtypes ``.array`` will be a
 |      :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray
 |      stored within. If you absolutely need a NumPy array (possibly with
 |      copying / coercing data), then use :meth:`Series.to_numpy` instead.
 |      
 |      Examples
 |      --------
 |      For regular NumPy types like int, and float, a NumpyExtensionArray
 |      is returned.
 |      
 |      >>> pd.Series([1, 2, 3]).array
 |      <NumpyExtensionArray>
 |      [1, 2, 3]
 |      Length: 3, dtype: int64
 |      
 |      For extension types, like Categorical, the actual ExtensionArray
 |      is returned
 |      
 |      >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))
 |      >>> ser.array
 |      ['a', 'b', 'a']
 |      Categories (2, object): ['a', 'b']
 |  
 |  dtype
 |      Return the dtype object of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.dtype
 |      dtype('int64')
 |  
 |  hasnans
 |      Return True if there are any NaNs.
 |      
 |      Enables various performance speedups.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3], index=['a', 'b', None])
 |      >>> s
 |      a    1
 |      b    2
 |      None 3
 |      dtype: int64
 |      >>> s.index.hasnans
 |      True
 |  
 |  inferred_type
 |      Return a string of the type inferred from the values.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.inferred_type
 |      'integer'
 |  
 |  is_unique
 |      Return if the index has unique values.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      See Also
 |      --------
 |      Index.has_duplicates : Inverse method that checks if it has duplicate values.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 5, 7, 7])
 |      >>> idx.is_unique
 |      False
 |      
 |      >>> idx = pd.Index([1, 5, 7])
 |      >>> idx.is_unique
 |      True
 |      
 |      >>> idx = pd.Index(["Watermelon", "Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.is_unique
 |      False
 |      
 |      >>> idx = pd.Index(["Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.is_unique
 |      True
 |  
 |  name
 |      Return Index or MultiIndex name.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3], name='x')
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64',  name='x')
 |      >>> idx.name
 |      'x'
 |  
 |  names
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'__hash__': 'ClassVar[None]', '_attributes': 'list[...
 |  
 |  __pandas_priority__ = 2000
 |  
 |  str = <class 'pandas.core.strings.accessor.StringMethods'>
 |      Vectorized string functions for Series and Index.
 |      
 |      NAs stay NA unless handled otherwise by a particular method.
 |      Patterned after Python's string methods, with some inspiration from
 |      R's stringr package.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(["A_Str_Series"])
 |      >>> s
 |      0    A_Str_Series
 |      dtype: object
 |      
 |      >>> s.str.split("_")
 |      0    [A, Str, Series]
 |      dtype: object
 |      
 |      >>> s.str.replace("_", "")
 |      0    AStrSeries
 |      dtype: object
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  __iter__(self) -> 'Iterator'
 |      Return an iterator of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      iterator
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> for x in s:
 |      ...     print(x)
 |      1
 |      2
 |      3
 |  
 |  factorize(self, sort: 'bool' = False, use_na_sentinel: 'bool' = True) -> 'tuple[npt.NDArray[np.intp], Index]'
 |      Encode the object as an enumerated type or categorical variable.
 |      
 |      This method is useful for obtaining a numeric representation of an
 |      array when all that matters is identifying distinct values. `factorize`
 |      is available as both a top-level function :func:`pandas.factorize`,
 |      and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.
 |      
 |      Parameters
 |      ----------
 |      sort : bool, default False
 |          Sort `uniques` and shuffle `codes` to maintain the
 |          relationship.
 |      
 |      use_na_sentinel : bool, default True
 |          If True, the sentinel -1 will be used for NaN values. If False,
 |          NaN values will be encoded as non-negative integers and will not drop the
 |          NaN from the uniques of the values.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      codes : ndarray
 |          An integer ndarray that's an indexer into `uniques`.
 |          ``uniques.take(codes)`` will have the same values as `values`.
 |      uniques : ndarray, Index, or Categorical
 |          The unique valid values. When `values` is Categorical, `uniques`
 |          is a Categorical. When `values` is some other pandas object, an
 |          `Index` is returned. Otherwise, a 1-D ndarray is returned.
 |      
 |          .. note::
 |      
 |             Even if there's a missing value in `values`, `uniques` will
 |             *not* contain an entry for it.
 |      
 |      See Also
 |      --------
 |      cut : Discretize continuous-valued array.
 |      unique : Find the unique value in an array.
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.factorize>` for more examples.
 |      
 |      Examples
 |      --------
 |      These examples all show factorize as a top-level method like
 |      ``pd.factorize(values)``. The results are identical for methods like
 |      :meth:`Series.factorize`.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype="O"))
 |      >>> codes
 |      array([0, 0, 1, 2, 0])
 |      >>> uniques
 |      array(['b', 'a', 'c'], dtype=object)
 |      
 |      With ``sort=True``, the `uniques` will be sorted, and `codes` will be
 |      shuffled so that the relationship is the maintained.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype="O"),
 |      ...                               sort=True)
 |      >>> codes
 |      array([1, 1, 0, 2, 1])
 |      >>> uniques
 |      array(['a', 'b', 'c'], dtype=object)
 |      
 |      When ``use_na_sentinel=True`` (the default), missing values are indicated in
 |      the `codes` with the sentinel value ``-1`` and missing values are not
 |      included in `uniques`.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype="O"))
 |      >>> codes
 |      array([ 0, -1,  1,  2,  0])
 |      >>> uniques
 |      array(['b', 'a', 'c'], dtype=object)
 |      
 |      Thus far, we've only factorized lists (which are internally coerced to
 |      NumPy arrays). When factorizing pandas objects, the type of `uniques`
 |      will differ. For Categoricals, a `Categorical` is returned.
 |      
 |      >>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])
 |      >>> codes, uniques = pd.factorize(cat)
 |      >>> codes
 |      array([0, 0, 1])
 |      >>> uniques
 |      ['a', 'c']
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      Notice that ``'b'`` is in ``uniques.categories``, despite not being
 |      present in ``cat.values``.
 |      
 |      For all other pandas objects, an Index of the appropriate type is
 |      returned.
 |      
 |      >>> cat = pd.Series(['a', 'a', 'c'])
 |      >>> codes, uniques = pd.factorize(cat)
 |      >>> codes
 |      array([0, 0, 1])
 |      >>> uniques
 |      Index(['a', 'c'], dtype='object')
 |      
 |      If NaN is in the values, and we want to include NaN in the uniques of the
 |      values, it can be achieved by setting ``use_na_sentinel=False``.
 |      
 |      >>> values = np.array([1, 2, 1, np.nan])
 |      >>> codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True
 |      >>> codes
 |      array([ 0,  1,  0, -1])
 |      >>> uniques
 |      array([1., 2.])
 |      
 |      >>> codes, uniques = pd.factorize(values, use_na_sentinel=False)
 |      >>> codes
 |      array([0, 1, 0, 2])
 |      >>> uniques
 |      array([ 1.,  2., nan])
 |  
 |  item(self)
 |      Return the first element of the underlying data as a Python scalar.
 |      
 |      Returns
 |      -------
 |      scalar
 |          The first element of Series or Index.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If the data is not length = 1.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1])
 |      >>> s.item()
 |      1
 |      
 |      For an index:
 |      
 |      >>> s = pd.Series([1], index=['a'])
 |      >>> s.index.item()
 |      'a'
 |  
 |  nunique(self, dropna: 'bool' = True) -> 'int'
 |      Return number of unique elements in the object.
 |      
 |      Excludes NA values by default.
 |      
 |      Parameters
 |      ----------
 |      dropna : bool, default True
 |          Don't include NaN in the count.
 |      
 |      Returns
 |      -------
 |      int
 |      
 |      See Also
 |      --------
 |      DataFrame.nunique: Method nunique for DataFrame.
 |      Series.count: Count non-NA/null observations in the Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 3, 5, 7, 7])
 |      >>> s
 |      0    1
 |      1    3
 |      2    5
 |      3    7
 |      4    7
 |      dtype: int64
 |      
 |      >>> s.nunique()
 |      4
 |  
 |  searchsorted(self, value: 'NumpyValueArrayLike | ExtensionArray', side: "Literal['left', 'right']" = 'left', sorter: 'NumpySorter | None' = None) -> 'npt.NDArray[np.intp] | np.intp'
 |      Find indices where elements should be inserted to maintain order.
 |      
 |      Find the indices into a sorted Index `self` such that, if the
 |      corresponding elements in `value` were inserted before the indices,
 |      the order of `self` would be preserved.
 |      
 |      .. note::
 |      
 |          The Index *must* be monotonically sorted, otherwise
 |          wrong locations will likely be returned. Pandas does *not*
 |          check this for you.
 |      
 |      Parameters
 |      ----------
 |      value : array-like or scalar
 |          Values to insert into `self`.
 |      side : {'left', 'right'}, optional
 |          If 'left', the index of the first suitable location found is given.
 |          If 'right', return the last such index.  If there is no suitable
 |          index, return either 0 or N (where N is the length of `self`).
 |      sorter : 1-D array-like, optional
 |          Optional array of integer indices that sort `self` into ascending
 |          order. They are typically the result of ``np.argsort``.
 |      
 |      Returns
 |      -------
 |      int or array of int
 |          A scalar or array of insertion points with the
 |          same shape as `value`.
 |      
 |      See Also
 |      --------
 |      sort_values : Sort by the values along either axis.
 |      numpy.searchsorted : Similar method from NumPy.
 |      
 |      Notes
 |      -----
 |      Binary search is used to find the required insertion points.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> ser
 |      0    1
 |      1    2
 |      2    3
 |      dtype: int64
 |      
 |      >>> ser.searchsorted(4)
 |      3
 |      
 |      >>> ser.searchsorted([0, 4])
 |      array([0, 3])
 |      
 |      >>> ser.searchsorted([1, 3], side='left')
 |      array([0, 2])
 |      
 |      >>> ser.searchsorted([1, 3], side='right')
 |      array([1, 3])
 |      
 |      >>> ser = pd.Series(pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000']))
 |      >>> ser
 |      0   2000-03-11
 |      1   2000-03-12
 |      2   2000-03-13
 |      dtype: datetime64[ns]
 |      
 |      >>> ser.searchsorted('3/14/2000')
 |      3
 |      
 |      >>> ser = pd.Categorical(
 |      ...     ['apple', 'bread', 'bread', 'cheese', 'milk'], ordered=True
 |      ... )
 |      >>> ser
 |      ['apple', 'bread', 'bread', 'cheese', 'milk']
 |      Categories (4, object): ['apple' < 'bread' < 'cheese' < 'milk']
 |      
 |      >>> ser.searchsorted('bread')
 |      1
 |      
 |      >>> ser.searchsorted(['bread'], side='right')
 |      array([3])
 |      
 |      If the values are not monotonically sorted, wrong locations
 |      may be returned:
 |      
 |      >>> ser = pd.Series([2, 1, 3])
 |      >>> ser
 |      0    2
 |      1    1
 |      2    3
 |      dtype: int64
 |      
 |      >>> ser.searchsorted(1)  # doctest: +SKIP
 |      0  # wrong result, correct would be 1
 |  
 |  to_list = tolist(self)
 |  
 |  to_numpy(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>, **kwargs) -> 'np.ndarray'
 |      A NumPy ndarray representing the values in this Series or Index.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or numpy.dtype, optional
 |          The dtype to pass to :meth:`numpy.asarray`.
 |      copy : bool, default False
 |          Whether to ensure that the returned value is not a view on
 |          another array. Note that ``copy=False`` does not *ensure* that
 |          ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that
 |          a copy is made, even if not strictly necessary.
 |      na_value : Any, optional
 |          The value to use for missing values. The default value depends
 |          on `dtype` and the type of the array.
 |      **kwargs
 |          Additional keywords passed through to the ``to_numpy`` method
 |          of the underlying array (for extension arrays).
 |      
 |      Returns
 |      -------
 |      numpy.ndarray
 |      
 |      See Also
 |      --------
 |      Series.array : Get the actual data stored within.
 |      Index.array : Get the actual data stored within.
 |      DataFrame.to_numpy : Similar method for DataFrame.
 |      
 |      Notes
 |      -----
 |      The returned array will be the same up to equality (values equal
 |      in `self` will be equal in the returned array; likewise for values
 |      that are not equal). When `self` contains an ExtensionArray, the
 |      dtype may be different. For example, for a category-dtype Series,
 |      ``to_numpy()`` will return a NumPy array and the categorical dtype
 |      will be lost.
 |      
 |      For NumPy dtypes, this will be a reference to the actual data stored
 |      in this Series or Index (assuming ``copy=False``). Modifying the result
 |      in place will modify the data stored in the Series or Index (not that
 |      we recommend doing that).
 |      
 |      For extension types, ``to_numpy()`` *may* require copying data and
 |      coercing the result to a NumPy type (possibly object), which may be
 |      expensive. When you need a no-copy reference to the underlying data,
 |      :attr:`Series.array` should be used instead.
 |      
 |      This table lays out the different dtypes and default return types of
 |      ``to_numpy()`` for various dtypes within pandas.
 |      
 |      ================== ================================
 |      dtype              array type
 |      ================== ================================
 |      category[T]        ndarray[T] (same dtype as input)
 |      period             ndarray[object] (Periods)
 |      interval           ndarray[object] (Intervals)
 |      IntegerNA          ndarray[object]
 |      datetime64[ns]     datetime64[ns]
 |      datetime64[ns, tz] ndarray[object] (Timestamps)
 |      ================== ================================
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))
 |      >>> ser.to_numpy()
 |      array(['a', 'b', 'a'], dtype=object)
 |      
 |      Specify the `dtype` to control how datetime-aware data is represented.
 |      Use ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`
 |      objects, each with the correct ``tz``.
 |      
 |      >>> ser = pd.Series(pd.date_range('2000', periods=2, tz="CET"))
 |      >>> ser.to_numpy(dtype=object)
 |      array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),
 |             Timestamp('2000-01-02 00:00:00+0100', tz='CET')],
 |            dtype=object)
 |      
 |      Or ``dtype='datetime64[ns]'`` to return an ndarray of native
 |      datetime64 values. The values are converted to UTC and the timezone
 |      info is dropped.
 |      
 |      >>> ser.to_numpy(dtype="datetime64[ns]")
 |      ... # doctest: +ELLIPSIS
 |      array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],
 |            dtype='datetime64[ns]')
 |  
 |  tolist(self)
 |      Return a list of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      list
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.tolist : Return the array as an a.ndim-levels deep
 |          nested list of Python scalars.
 |      
 |      Examples
 |      --------
 |      For Series
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.to_list()
 |      [1, 2, 3]
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      
 |      >>> idx.to_list()
 |      [1, 2, 3]
 |  
 |  transpose(self, *args, **kwargs) -> 'Self'
 |      Return the transpose, which is by definition self.
 |      
 |      Returns
 |      -------
 |      %(klass)s
 |  
 |  value_counts(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True) -> 'Series'
 |      Return a Series containing counts of unique values.
 |      
 |      The resulting object will be in descending order so that the
 |      first element is the most frequently-occurring element.
 |      Excludes NA values by default.
 |      
 |      Parameters
 |      ----------
 |      normalize : bool, default False
 |          If True then the object returned will contain the relative
 |          frequencies of the unique values.
 |      sort : bool, default True
 |          Sort by frequencies when True. Preserve the order of the data when False.
 |      ascending : bool, default False
 |          Sort in ascending order.
 |      bins : int, optional
 |          Rather than count values, group them into half-open bins,
 |          a convenience for ``pd.cut``, only works with numeric data.
 |      dropna : bool, default True
 |          Don't include counts of NaN.
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      See Also
 |      --------
 |      Series.count: Number of non-NA elements in a Series.
 |      DataFrame.count: Number of non-NA elements in a DataFrame.
 |      DataFrame.value_counts: Equivalent method on DataFrames.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index([3, 1, 2, 3, 4, np.nan])
 |      >>> index.value_counts()
 |      3.0    2
 |      1.0    1
 |      2.0    1
 |      4.0    1
 |      Name: count, dtype: int64
 |      
 |      With `normalize` set to `True`, returns the relative frequency by
 |      dividing all values by the sum of values.
 |      
 |      >>> s = pd.Series([3, 1, 2, 3, 4, np.nan])
 |      >>> s.value_counts(normalize=True)
 |      3.0    0.4
 |      1.0    0.2
 |      2.0    0.2
 |      4.0    0.2
 |      Name: proportion, dtype: float64
 |      
 |      **bins**
 |      
 |      Bins can be useful for going from a continuous variable to a
 |      categorical variable; instead of counting unique
 |      apparitions of values, divide the index in the specified
 |      number of half-open bins.
 |      
 |      >>> s.value_counts(bins=3)
 |      (0.996, 2.0]    2
 |      (2.0, 3.0]      2
 |      (3.0, 4.0]      1
 |      Name: count, dtype: int64
 |      
 |      **dropna**
 |      
 |      With `dropna` set to `False` we can also see NaN index values.
 |      
 |      >>> s.value_counts(dropna=False)
 |      3.0    2
 |      1.0    1
 |      2.0    1
 |      4.0    1
 |      NaN    1
 |      Name: count, dtype: int64
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  T
 |      Return the transpose, which is by definition self.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.T
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.T
 |      Index([1, 2, 3], dtype='int64')
 |  
 |  empty
 |  
 |  nbytes
 |      Return the number of bytes in the underlying data.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.nbytes
 |      24
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.nbytes
 |      24
 |  
 |  ndim
 |      Number of dimensions of the underlying data, by definition 1.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.ndim
 |      1
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.ndim
 |      1
 |  
 |  size
 |      Return the number of elements in the underlying data.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.size
 |      3
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.size
 |      3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  __array_priority__ = 1000
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __add__(self, other)
 |      Get Addition of DataFrame and other, column-wise.
 |      
 |      Equivalent to ``DataFrame.add(other)``.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Object to be added to the DataFrame.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The result of adding ``other`` to DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add a DataFrame and another object, with option for index-
 |          or column-oriented addition.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'height': [1.5, 2.6], 'weight': [500, 800]},
 |      ...                   index=['elk', 'moose'])
 |      >>> df
 |             height  weight
 |      elk       1.5     500
 |      moose     2.6     800
 |      
 |      Adding a scalar affects all rows and columns.
 |      
 |      >>> df[['height', 'weight']] + 1.5
 |             height  weight
 |      elk       3.0   501.5
 |      moose     4.1   801.5
 |      
 |      Each element of a list is added to a column of the DataFrame, in order.
 |      
 |      >>> df[['height', 'weight']] + [0.5, 1.5]
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      Keys of a dictionary are aligned to the DataFrame, based on column names;
 |      each value in the dictionary is added to the corresponding column.
 |      
 |      >>> df[['height', 'weight']] + {'height': 0.5, 'weight': 1.5}
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      When `other` is a :class:`Series`, the index of `other` is aligned with the
 |      columns of the DataFrame.
 |      
 |      >>> s1 = pd.Series([0.5, 1.5], index=['weight', 'height'])
 |      >>> df[['height', 'weight']] + s1
 |             height  weight
 |      elk       3.0   500.5
 |      moose     4.1   800.5
 |      
 |      Even when the index of `other` is the same as the index of the DataFrame,
 |      the :class:`Series` will not be reoriented. If index-wise alignment is desired,
 |      :meth:`DataFrame.add` should be used with `axis='index'`.
 |      
 |      >>> s2 = pd.Series([0.5, 1.5], index=['elk', 'moose'])
 |      >>> df[['height', 'weight']] + s2
 |             elk  height  moose  weight
 |      elk    NaN     NaN    NaN     NaN
 |      moose  NaN     NaN    NaN     NaN
 |      
 |      >>> df[['height', 'weight']].add(s2, axis='index')
 |             height  weight
 |      elk       2.0   500.5
 |      moose     4.1   801.5
 |      
 |      When `other` is a :class:`DataFrame`, both columns names and the
 |      index are aligned.
 |      
 |      >>> other = pd.DataFrame({'height': [0.2, 0.4, 0.6]},
 |      ...                      index=['elk', 'moose', 'deer'])
 |      >>> df[['height', 'weight']] + other
 |             height  weight
 |      deer      NaN     NaN
 |      elk       1.7     NaN
 |      moose     3.0     NaN
 |  
 |  __and__(self, other)
 |  
 |  __divmod__(self, other)
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __floordiv__(self, other)
 |  
 |  __ge__(self, other)
 |      Return self>=value.
 |  
 |  __gt__(self, other)
 |      Return self>value.
 |  
 |  __le__(self, other)
 |      Return self<=value.
 |  
 |  __lt__(self, other)
 |      Return self<value.
 |  
 |  __mod__(self, other)
 |  
 |  __mul__(self, other)
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __or__(self, other)
 |  
 |  __pow__(self, other)
 |  
 |  __radd__(self, other)
 |  
 |  __rand__(self, other)
 |  
 |  __rdivmod__(self, other)
 |  
 |  __rfloordiv__(self, other)
 |  
 |  __rmod__(self, other)
 |  
 |  __rmul__(self, other)
 |  
 |  __ror__(self, other)
 |  
 |  __rpow__(self, other)
 |  
 |  __rsub__(self, other)
 |  
 |  __rtruediv__(self, other)
 |  
 |  __rxor__(self, other)
 |  
 |  __sub__(self, other)
 |  
 |  __truediv__(self, other)
 |  
 |  __xor__(self, other)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __hash__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.PandasObject:
 |  
 |  __sizeof__(self) -> 'int'
 |      Generates the total memory usage for an object that returns
 |      either a value or Series of values
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  __dir__(self) -> 'list[str]'
 |      Provide method name lookup and completion.
 |      
 |      Notes
 |      -----
 |      Only provide 'public' methods.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& combine &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method combine in module pandas.core.frame:

combine(other: 'DataFrame', func: 'Callable[[Series, Series], Series | Hashable]', fill_value=None, overwrite: 'bool' = True) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Perform column-wise combine with another DataFrame.
    
    Combines a DataFrame with `other` DataFrame using `func`
    to element-wise combine columns. The row and column indexes of the
    resulting DataFrame will be the union of the two.
    
    Parameters
    ----------
    other : DataFrame
        The DataFrame to merge column-wise.
    func : function
        Function that takes two series as inputs and return a Series or a
        scalar. Used to merge the two dataframes column by columns.
    fill_value : scalar value, default None
        The value to fill NaNs with prior to passing any column to the
        merge func.
    overwrite : bool, default True
        If True, columns in `self` that do not exist in `other` will be
        overwritten with NaNs.
    
    Returns
    -------
    DataFrame
        Combination of the provided DataFrames.
    
    See Also
    --------
    DataFrame.combine_first : Combine two DataFrame objects and default to
        non-null values in frame calling the method.
    
    Examples
    --------
    Combine using a simple function that chooses the smaller column.
    
    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})
    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
    >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2
    >>> df1.combine(df2, take_smaller)
       A  B
    0  0  3
    1  0  3
    
    Example using a true element-wise combine function.
    
    >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})
    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
    >>> df1.combine(df2, np.minimum)
       A  B
    0  1  2
    1  0  3
    
    Using `fill_value` fills Nones prior to passing the column to the
    merge function.
    
    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})
    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
    >>> df1.combine(df2, take_smaller, fill_value=-5)
       A    B
    0  0 -5.0
    1  0  4.0
    
    However, if the same element in both dataframes is None, that None
    is preserved
    
    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})
    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})
    >>> df1.combine(df2, take_smaller, fill_value=-5)
        A    B
    0  0 -5.0
    1  0  3.0
    
    Example that demonstrates the use of `overwrite` and behavior when
    the axis differ between the dataframes.
    
    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})
    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])
    >>> df1.combine(df2, take_smaller)
         A    B     C
    0  NaN  NaN   NaN
    1  NaN  3.0 -10.0
    2  NaN  3.0   1.0
    
    >>> df1.combine(df2, take_smaller, overwrite=False)
         A    B     C
    0  0.0  NaN   NaN
    1  0.0  3.0 -10.0
    2  NaN  3.0   1.0
    
    Demonstrating the preference of the passed in dataframe.
    
    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])
    >>> df2.combine(df1, take_smaller)
       A    B   C
    0  0.0  NaN NaN
    1  0.0  3.0 NaN
    2  NaN  3.0 NaN
    
    >>> df2.combine(df1, take_smaller, overwrite=False)
         A    B   C
    0  0.0  NaN NaN
    1  0.0  3.0 1.0
    2  NaN  3.0 1.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& combine_first &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method combine_first in module pandas.core.frame:

combine_first(other: 'DataFrame') -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Update null elements with value in the same location in `other`.
    
    Combine two DataFrame objects by filling null values in one DataFrame
    with non-null values from other DataFrame. The row and column indexes
    of the resulting DataFrame will be the union of the two. The resulting
    dataframe contains the 'first' dataframe values and overrides the
    second one values where both first.loc[index, col] and
    second.loc[index, col] are not missing values, upon calling
    first.combine_first(second).
    
    Parameters
    ----------
    other : DataFrame
        Provided DataFrame to use to fill null values.
    
    Returns
    -------
    DataFrame
        The result of combining the provided DataFrame with the other object.
    
    See Also
    --------
    DataFrame.combine : Perform series-wise operation on two DataFrames
        using a given function.
    
    Examples
    --------
    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})
    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
    >>> df1.combine_first(df2)
         A    B
    0  1.0  3.0
    1  0.0  4.0
    
    Null values still persist if the location of that null value
    does not exist in `other`
    
    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})
    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])
    >>> df1.combine_first(df2)
         A    B    C
    0  NaN  4.0  NaN
    1  0.0  3.0  1.0
    2  NaN  3.0  1.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& compare &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method compare in module pandas.core.frame:

compare(other: 'DataFrame', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Compare to another DataFrame and show the differences.
    
    Parameters
    ----------
    other : DataFrame
        Object to compare with.
    
    align_axis : {0 or 'index', 1 or 'columns'}, default 1
        Determine which axis to align the comparison on.
    
        * 0, or 'index' : Resulting differences are stacked vertically
            with rows drawn alternately from self and other.
        * 1, or 'columns' : Resulting differences are aligned horizontally
            with columns drawn alternately from self and other.
    
    keep_shape : bool, default False
        If true, all rows and columns are kept.
        Otherwise, only the ones with different values are kept.
    
    keep_equal : bool, default False
        If true, the result keeps values that are equal.
        Otherwise, equal values are shown as NaNs.
    
    result_names : tuple, default ('self', 'other')
        Set the dataframes names in the comparison.
    
        .. versionadded:: 1.5.0
    
    Returns
    -------
    DataFrame
        DataFrame that shows the differences stacked side by side.
    
        The resulting index will be a MultiIndex with 'self' and 'other'
        stacked alternately at the inner level.
    
    Raises
    ------
    ValueError
        When the two DataFrames don't have identical labels or shape.
    
    See Also
    --------
    Series.compare : Compare with another Series and show differences.
    DataFrame.equals : Test whether two objects contain the same elements.
    
    Notes
    -----
    Matching NaNs will not appear as a difference.
    
    Can only compare identically-labeled
    (i.e. same shape, identical row and column labels) DataFrames
    
    Examples
    --------
    >>> df = pd.DataFrame(
    ...     {
    ...         "col1": ["a", "a", "b", "b", "a"],
    ...         "col2": [1.0, 2.0, 3.0, np.nan, 5.0],
    ...         "col3": [1.0, 2.0, 3.0, 4.0, 5.0]
    ...     },
    ...     columns=["col1", "col2", "col3"],
    ... )
    >>> df
      col1  col2  col3
    0    a   1.0   1.0
    1    a   2.0   2.0
    2    b   3.0   3.0
    3    b   NaN   4.0
    4    a   5.0   5.0
    
    >>> df2 = df.copy()
    >>> df2.loc[0, 'col1'] = 'c'
    >>> df2.loc[2, 'col3'] = 4.0
    >>> df2
      col1  col2  col3
    0    c   1.0   1.0
    1    a   2.0   2.0
    2    b   3.0   4.0
    3    b   NaN   4.0
    4    a   5.0   5.0
    
    Align the differences on columns
    
    >>> df.compare(df2)
      col1       col3
      self other self other
    0    a     c  NaN   NaN
    2  NaN   NaN  3.0   4.0
    
    Assign result_names
    
    >>> df.compare(df2, result_names=("left", "right"))
      col1       col3
      left right left right
    0    a     c  NaN   NaN
    2  NaN   NaN  3.0   4.0
    
    Stack the differences on rows
    
    >>> df.compare(df2, align_axis=0)
            col1  col3
    0 self     a   NaN
      other    c   NaN
    2 self   NaN   3.0
      other  NaN   4.0
    
    Keep the equal values
    
    >>> df.compare(df2, keep_equal=True)
      col1       col3
      self other self other
    0    a     c  1.0   1.0
    2    b     b  3.0   4.0
    
    Keep all original rows and columns
    
    >>> df.compare(df2, keep_shape=True)
      col1       col2       col3
      self other self other self other
    0    a     c  NaN   NaN  NaN   NaN
    1  NaN   NaN  NaN   NaN  NaN   NaN
    2  NaN   NaN  NaN   NaN  3.0   4.0
    3  NaN   NaN  NaN   NaN  NaN   NaN
    4  NaN   NaN  NaN   NaN  NaN   NaN
    
    Keep all original rows and columns and also all original values
    
    >>> df.compare(df2, keep_shape=True, keep_equal=True)
      col1       col2       col3
      self other self other self other
    0    a     c  1.0   1.0  1.0   1.0
    1    a     a  2.0   2.0  2.0   2.0
    2    b     b  3.0   3.0  3.0   4.0
    3    b     b  NaN   NaN  4.0   4.0
    4    a     a  5.0   5.0  5.0   5.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& convert_dtypes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method convert_dtypes in module pandas.core.generic:

convert_dtypes(infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -> 'Self' method of pandas.core.frame.DataFrame instance
    Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.
    
    Parameters
    ----------
    infer_objects : bool, default True
        Whether object dtypes should be converted to the best possible types.
    convert_string : bool, default True
        Whether object dtypes should be converted to ``StringDtype()``.
    convert_integer : bool, default True
        Whether, if possible, conversion can be done to integer extension types.
    convert_boolean : bool, defaults True
        Whether object dtypes should be converted to ``BooleanDtypes()``.
    convert_floating : bool, defaults True
        Whether, if possible, conversion can be done to floating extension types.
        If `convert_integer` is also True, preference will be give to integer
        dtypes if the floats can be faithfully casted to integers.
    dtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'
        Back-end data type applied to the resultant :class:`DataFrame`
        (still experimental). Behaviour is as follows:
    
        * ``"numpy_nullable"``: returns nullable-dtype-backed :class:`DataFrame`
          (default).
        * ``"pyarrow"``: returns pyarrow-backed nullable :class:`ArrowDtype`
          DataFrame.
    
        .. versionadded:: 2.0
    
    Returns
    -------
    Series or DataFrame
        Copy of input object with new dtype.
    
    See Also
    --------
    infer_objects : Infer dtypes of objects.
    to_datetime : Convert argument to datetime.
    to_timedelta : Convert argument to timedelta.
    to_numeric : Convert argument to a numeric type.
    
    Notes
    -----
    By default, ``convert_dtypes`` will attempt to convert a Series (or each
    Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options
    ``convert_string``, ``convert_integer``, ``convert_boolean`` and
    ``convert_floating``, it is possible to turn off individual conversions
    to ``StringDtype``, the integer extension types, ``BooleanDtype``
    or floating extension types, respectively.
    
    For object-dtyped columns, if ``infer_objects`` is ``True``, use the inference
    rules as during normal Series/DataFrame construction.  Then, if possible,
    convert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer
    or floating extension type, otherwise leave as ``object``.
    
    If the dtype is integer, convert to an appropriate integer extension type.
    
    If the dtype is numeric, and consists of all integers, convert to an
    appropriate integer extension type. Otherwise, convert to an
    appropriate floating extension type.
    
    In the future, as new dtypes are added that support ``pd.NA``, the results
    of this method will change to support those new dtypes.
    
    Examples
    --------
    >>> df = pd.DataFrame(
    ...     {
    ...         "a": pd.Series([1, 2, 3], dtype=np.dtype("int32")),
    ...         "b": pd.Series(["x", "y", "z"], dtype=np.dtype("O")),
    ...         "c": pd.Series([True, False, np.nan], dtype=np.dtype("O")),
    ...         "d": pd.Series(["h", "i", np.nan], dtype=np.dtype("O")),
    ...         "e": pd.Series([10, np.nan, 20], dtype=np.dtype("float")),
    ...         "f": pd.Series([np.nan, 100.5, 200], dtype=np.dtype("float")),
    ...     }
    ... )
    
    Start with a DataFrame with default dtypes.
    
    >>> df
       a  b      c    d     e      f
    0  1  x   True    h  10.0    NaN
    1  2  y  False    i   NaN  100.5
    2  3  z    NaN  NaN  20.0  200.0
    
    >>> df.dtypes
    a      int32
    b     object
    c     object
    d     object
    e    float64
    f    float64
    dtype: object
    
    Convert the DataFrame to use best possible dtypes.
    
    >>> dfn = df.convert_dtypes()
    >>> dfn
       a  b      c     d     e      f
    0  1  x   True     h    10   <NA>
    1  2  y  False     i  <NA>  100.5
    2  3  z   <NA>  <NA>    20  200.0
    
    >>> dfn.dtypes
    a             Int32
    b    string[python]
    c           boolean
    d    string[python]
    e             Int64
    f           Float64
    dtype: object
    
    Start with a Series of strings and missing data represented by ``np.nan``.
    
    >>> s = pd.Series(["a", "b", np.nan])
    >>> s
    0      a
    1      b
    2    NaN
    dtype: object
    
    Obtain a Series with dtype ``StringDtype``.
    
    >>> s.convert_dtypes()
    0       a
    1       b
    2    <NA>
    dtype: string

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& copy &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method copy in module pandas.core.generic:

copy(deep: 'bool_t | None' = True) -> 'Self' method of pandas.core.frame.DataFrame instance
    Make a copy of this object's indices and data.
    
    When ``deep=True`` (default), a new object will be created with a
    copy of the calling object's data and indices. Modifications to
    the data or indices of the copy will not be reflected in the
    original object (see notes below).
    
    When ``deep=False``, a new object will be created without copying
    the calling object's data or index (only references to the data
    and index are copied). Any changes to the data of the original
    will be reflected in the shallow copy (and vice versa).
    
    .. note::
        The ``deep=False`` behaviour as described above will change
        in pandas 3.0. `Copy-on-Write
        <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
        will be enabled by default, which means that the "shallow" copy
        is that is returned with ``deep=False`` will still avoid making
        an eager copy, but changes to the data of the original will *no*
        longer be reflected in the shallow copy (or vice versa). Instead,
        it makes use of a lazy (deferred) copy mechanism that will copy
        the data only when any changes to the original or shallow copy is
        made.
    
        You can already get the future behavior and improvements through
        enabling copy on write ``pd.options.mode.copy_on_write = True``
    
    Parameters
    ----------
    deep : bool, default True
        Make a deep copy, including a copy of the data and the indices.
        With ``deep=False`` neither the indices nor the data are copied.
    
    Returns
    -------
    Series or DataFrame
        Object type matches caller.
    
    Notes
    -----
    When ``deep=True``, data is copied but actual Python objects
    will not be copied recursively, only the reference to the object.
    This is in contrast to `copy.deepcopy` in the Standard Library,
    which recursively copies object data (see examples below).
    
    While ``Index`` objects are copied when ``deep=True``, the underlying
    numpy array is not copied for performance reasons. Since ``Index`` is
    immutable, the underlying data can be safely shared and a copy
    is not needed.
    
    Since pandas is not thread safe, see the
    :ref:`gotchas <gotchas.thread-safety>` when copying in a threading
    environment.
    
    When ``copy_on_write`` in pandas config is set to ``True``, the
    ``copy_on_write`` config takes effect even when ``deep=False``.
    This means that any changes to the copied data would make a new copy
    of the data upon write (and vice versa). Changes made to either the
    original or copied variable would not be reflected in the counterpart.
    See :ref:`Copy_on_Write <copy_on_write>` for more information.
    
    Examples
    --------
    >>> s = pd.Series([1, 2], index=["a", "b"])
    >>> s
    a    1
    b    2
    dtype: int64
    
    >>> s_copy = s.copy()
    >>> s_copy
    a    1
    b    2
    dtype: int64
    
    **Shallow copy versus default (deep) copy:**
    
    >>> s = pd.Series([1, 2], index=["a", "b"])
    >>> deep = s.copy()
    >>> shallow = s.copy(deep=False)
    
    Shallow copy shares data and index with original.
    
    >>> s is shallow
    False
    >>> s.values is shallow.values and s.index is shallow.index
    True
    
    Deep copy has own copy of data and index.
    
    >>> s is deep
    False
    >>> s.values is deep.values or s.index is deep.index
    False
    
    Updates to the data shared by shallow copy and original is reflected
    in both (NOTE: this will no longer be true for pandas >= 3.0);
    deep copy remains unchanged.
    
    >>> s.iloc[0] = 3
    >>> shallow.iloc[1] = 4
    >>> s
    a    3
    b    4
    dtype: int64
    >>> shallow
    a    3
    b    4
    dtype: int64
    >>> deep
    a    1
    b    2
    dtype: int64
    
    Note that when copying an object containing Python objects, a deep copy
    will copy the data, but will not do so recursively. Updating a nested
    data object will be reflected in the deep copy.
    
    >>> s = pd.Series([[1, 2], [3, 4]])
    >>> deep = s.copy()
    >>> s[0][0] = 10
    >>> s
    0    [10, 2]
    1     [3, 4]
    dtype: object
    >>> deep
    0    [10, 2]
    1     [3, 4]
    dtype: object
    
    **Copy-on-Write is set to true**, the shallow copy is not modified
    when the original data is changed:
    
    >>> with pd.option_context("mode.copy_on_write", True):
    ...     s = pd.Series([1, 2], index=["a", "b"])
    ...     copy = s.copy(deep=False)
    ...     s.iloc[0] = 100
    ...     s
    a    100
    b      2
    dtype: int64
    >>> copy
    a    1
    b    2
    dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& corr &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method corr in module pandas.core.frame:

corr(method: 'CorrelationMethod' = 'pearson', min_periods: 'int' = 1, numeric_only: 'bool' = False) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Compute pairwise correlation of columns, excluding NA/null values.
    
    Parameters
    ----------
    method : {'pearson', 'kendall', 'spearman'} or callable
        Method of correlation:
    
        * pearson : standard correlation coefficient
        * kendall : Kendall Tau correlation coefficient
        * spearman : Spearman rank correlation
        * callable: callable with input two 1d ndarrays
            and returning a float. Note that the returned matrix from corr
            will have 1 along the diagonals and will be symmetric
            regardless of the callable's behavior.
    min_periods : int, optional
        Minimum number of observations required per pair of columns
        to have a valid result. Currently only available for Pearson
        and Spearman correlation.
    numeric_only : bool, default False
        Include only `float`, `int` or `boolean` data.
    
        .. versionadded:: 1.5.0
    
        .. versionchanged:: 2.0.0
            The default value of ``numeric_only`` is now ``False``.
    
    Returns
    -------
    DataFrame
        Correlation matrix.
    
    See Also
    --------
    DataFrame.corrwith : Compute pairwise correlation with another
        DataFrame or Series.
    Series.corr : Compute the correlation between two Series.
    
    Notes
    -----
    Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.
    
    * `Pearson correlation coefficient <https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_
    * `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_
    * `Spearman's rank correlation coefficient <https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_
    
    Examples
    --------
    >>> def histogram_intersection(a, b):
    ...     v = np.minimum(a, b).sum().round(decimals=1)
    ...     return v
    >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],
    ...                   columns=['dogs', 'cats'])
    >>> df.corr(method=histogram_intersection)
          dogs  cats
    dogs   1.0   0.3
    cats   0.3   1.0
    
    >>> df = pd.DataFrame([(1, 1), (2, np.nan), (np.nan, 3), (4, 4)],
    ...                   columns=['dogs', 'cats'])
    >>> df.corr(min_periods=3)
          dogs  cats
    dogs   1.0   NaN
    cats   NaN   1.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& corrwith &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method corrwith in module pandas.core.frame:

corrwith(other: 'DataFrame | Series', axis: 'Axis' = 0, drop: 'bool' = False, method: 'CorrelationMethod' = 'pearson', numeric_only: 'bool' = False) -> 'Series' method of pandas.core.frame.DataFrame instance
    Compute pairwise correlation.
    
    Pairwise correlation is computed between rows or columns of
    DataFrame with rows or columns of Series or DataFrame. DataFrames
    are first aligned along both axes before computing the
    correlations.
    
    Parameters
    ----------
    other : DataFrame, Series
        Object with which to compute correlations.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to use. 0 or 'index' to compute row-wise, 1 or 'columns' for
        column-wise.
    drop : bool, default False
        Drop missing indices from result.
    method : {'pearson', 'kendall', 'spearman'} or callable
        Method of correlation:
    
        * pearson : standard correlation coefficient
        * kendall : Kendall Tau correlation coefficient
        * spearman : Spearman rank correlation
        * callable: callable with input two 1d ndarrays
            and returning a float.
    
    numeric_only : bool, default False
        Include only `float`, `int` or `boolean` data.
    
        .. versionadded:: 1.5.0
    
        .. versionchanged:: 2.0.0
            The default value of ``numeric_only`` is now ``False``.
    
    Returns
    -------
    Series
        Pairwise correlations.
    
    See Also
    --------
    DataFrame.corr : Compute pairwise correlation of columns.
    
    Examples
    --------
    >>> index = ["a", "b", "c", "d", "e"]
    >>> columns = ["one", "two", "three", "four"]
    >>> df1 = pd.DataFrame(np.arange(20).reshape(5, 4), index=index, columns=columns)
    >>> df2 = pd.DataFrame(np.arange(16).reshape(4, 4), index=index[:4], columns=columns)
    >>> df1.corrwith(df2)
    one      1.0
    two      1.0
    three    1.0
    four     1.0
    dtype: float64
    
    >>> df2.corrwith(df1, axis=1)
    a    1.0
    b    1.0
    c    1.0
    d    1.0
    e    NaN
    dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& count &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method count in module pandas.core.frame:

count(axis: 'Axis' = 0, numeric_only: 'bool' = False) method of pandas.core.frame.DataFrame instance
    Count non-NA cells for each column or row.
    
    The values `None`, `NaN`, `NaT`, ``pandas.NA`` are considered NA.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        If 0 or 'index' counts are generated for each column.
        If 1 or 'columns' counts are generated for each row.
    numeric_only : bool, default False
        Include only `float`, `int` or `boolean` data.
    
    Returns
    -------
    Series
        For each column/row the number of non-NA/null entries.
    
    See Also
    --------
    Series.count: Number of non-NA elements in a Series.
    DataFrame.value_counts: Count unique combinations of columns.
    DataFrame.shape: Number of DataFrame rows and columns (including NA
        elements).
    DataFrame.isna: Boolean same-sized DataFrame showing places of NA
        elements.
    
    Examples
    --------
    Constructing DataFrame from a dictionary:
    
    >>> df = pd.DataFrame({"Person":
    ...                    ["John", "Myla", "Lewis", "John", "Myla"],
    ...                    "Age": [24., np.nan, 21., 33, 26],
    ...                    "Single": [False, True, True, True, False]})
    >>> df
       Person   Age  Single
    0    John  24.0   False
    1    Myla   NaN    True
    2   Lewis  21.0    True
    3    John  33.0    True
    4    Myla  26.0   False
    
    Notice the uncounted NA values:
    
    >>> df.count()
    Person    5
    Age       4
    Single    5
    dtype: int64
    
    Counts for each **row**:
    
    >>> df.count(axis='columns')
    0    3
    1    2
    2    3
    3    3
    4    3
    dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& cov &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cov in module pandas.core.frame:

cov(min_periods: 'int | None' = None, ddof: 'int | None' = 1, numeric_only: 'bool' = False) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Compute pairwise covariance of columns, excluding NA/null values.
    
    Compute the pairwise covariance among the series of a DataFrame.
    The returned data frame is the `covariance matrix
    <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns
    of the DataFrame.
    
    Both NA and null values are automatically excluded from the
    calculation. (See the note below about bias from missing values.)
    A threshold can be set for the minimum number of
    observations for each value created. Comparisons with observations
    below this threshold will be returned as ``NaN``.
    
    This method is generally used for the analysis of time series data to
    understand the relationship between different measures
    across time.
    
    Parameters
    ----------
    min_periods : int, optional
        Minimum number of observations required per pair of columns
        to have a valid result.
    
    ddof : int, default 1
        Delta degrees of freedom.  The divisor used in calculations
        is ``N - ddof``, where ``N`` represents the number of elements.
        This argument is applicable only when no ``nan`` is in the dataframe.
    
    numeric_only : bool, default False
        Include only `float`, `int` or `boolean` data.
    
        .. versionadded:: 1.5.0
    
        .. versionchanged:: 2.0.0
            The default value of ``numeric_only`` is now ``False``.
    
    Returns
    -------
    DataFrame
        The covariance matrix of the series of the DataFrame.
    
    See Also
    --------
    Series.cov : Compute covariance with another Series.
    core.window.ewm.ExponentialMovingWindow.cov : Exponential weighted sample
        covariance.
    core.window.expanding.Expanding.cov : Expanding sample covariance.
    core.window.rolling.Rolling.cov : Rolling sample covariance.
    
    Notes
    -----
    Returns the covariance matrix of the DataFrame's time series.
    The covariance is normalized by N-ddof.
    
    For DataFrames that have Series that are missing data (assuming that
    data is `missing at random
    <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)
    the returned covariance matrix will be an unbiased estimate
    of the variance and covariance between the member Series.
    
    However, for many applications this estimate may not be acceptable
    because the estimate covariance matrix is not guaranteed to be positive
    semi-definite. This could lead to estimate correlations having
    absolute values which are greater than one, and/or a non-invertible
    covariance matrix. See `Estimation of covariance matrices
    <https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_
    matrices>`__ for more details.
    
    Examples
    --------
    >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],
    ...                   columns=['dogs', 'cats'])
    >>> df.cov()
              dogs      cats
    dogs  0.666667 -1.000000
    cats -1.000000  1.666667
    
    >>> np.random.seed(42)
    >>> df = pd.DataFrame(np.random.randn(1000, 5),
    ...                   columns=['a', 'b', 'c', 'd', 'e'])
    >>> df.cov()
              a         b         c         d         e
    a  0.998438 -0.020161  0.059277 -0.008943  0.014144
    b -0.020161  1.059352 -0.008543 -0.024738  0.009826
    c  0.059277 -0.008543  1.010670 -0.001486 -0.000271
    d -0.008943 -0.024738 -0.001486  0.921297 -0.013692
    e  0.014144  0.009826 -0.000271 -0.013692  0.977795
    
    **Minimum number of periods**
    
    This method also supports an optional ``min_periods`` keyword
    that specifies the required minimum number of non-NA observations for
    each column pair in order to have a valid result:
    
    >>> np.random.seed(42)
    >>> df = pd.DataFrame(np.random.randn(20, 3),
    ...                   columns=['a', 'b', 'c'])
    >>> df.loc[df.index[:5], 'a'] = np.nan
    >>> df.loc[df.index[5:10], 'b'] = np.nan
    >>> df.cov(min_periods=12)
              a         b         c
    a  0.316741       NaN -0.150812
    b       NaN  1.248003  0.191417
    c -0.150812  0.191417  0.895202

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& cummax &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cummax in module pandas.core.frame:

cummax(axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Return cumulative maximum over a DataFrame or Series axis.
    
    Returns a DataFrame or Series of the same size containing the cumulative
    maximum.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The index or the name of the axis. 0 is equivalent to None or 'index'.
        For `Series` this parameter is unused and defaults to 0.
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    *args, **kwargs
        Additional keywords have no effect but might be accepted for
        compatibility with NumPy.
    
    Returns
    -------
    Series or DataFrame
        Return cumulative maximum of Series or DataFrame.
    
    See Also
    --------
    core.window.expanding.Expanding.max : Similar functionality
        but ignores ``NaN`` values.
    DataFrame.max : Return the maximum over
        DataFrame axis.
    DataFrame.cummax : Return cumulative maximum over DataFrame axis.
    DataFrame.cummin : Return cumulative minimum over DataFrame axis.
    DataFrame.cumsum : Return cumulative sum over DataFrame axis.
    DataFrame.cumprod : Return cumulative product over DataFrame axis.
    
    Examples
    --------
    **Series**
    
    >>> s = pd.Series([2, np.nan, 5, -1, 0])
    >>> s
    0    2.0
    1    NaN
    2    5.0
    3   -1.0
    4    0.0
    dtype: float64
    
    By default, NA values are ignored.
    
    >>> s.cummax()
    0    2.0
    1    NaN
    2    5.0
    3    5.0
    4    5.0
    dtype: float64
    
    To include NA values in the operation, use ``skipna=False``
    
    >>> s.cummax(skipna=False)
    0    2.0
    1    NaN
    2    NaN
    3    NaN
    4    NaN
    dtype: float64
    
    **DataFrame**
    
    >>> df = pd.DataFrame([[2.0, 1.0],
    ...                    [3.0, np.nan],
    ...                    [1.0, 0.0]],
    ...                   columns=list('AB'))
    >>> df
         A    B
    0  2.0  1.0
    1  3.0  NaN
    2  1.0  0.0
    
    By default, iterates over rows and finds the maximum
    in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
    
    >>> df.cummax()
         A    B
    0  2.0  1.0
    1  3.0  NaN
    2  3.0  1.0
    
    To iterate over columns and find the maximum in each row,
    use ``axis=1``
    
    >>> df.cummax(axis=1)
         A    B
    0  2.0  2.0
    1  3.0  NaN
    2  1.0  1.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& cummin &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cummin in module pandas.core.frame:

cummin(axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Return cumulative minimum over a DataFrame or Series axis.
    
    Returns a DataFrame or Series of the same size containing the cumulative
    minimum.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The index or the name of the axis. 0 is equivalent to None or 'index'.
        For `Series` this parameter is unused and defaults to 0.
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    *args, **kwargs
        Additional keywords have no effect but might be accepted for
        compatibility with NumPy.
    
    Returns
    -------
    Series or DataFrame
        Return cumulative minimum of Series or DataFrame.
    
    See Also
    --------
    core.window.expanding.Expanding.min : Similar functionality
        but ignores ``NaN`` values.
    DataFrame.min : Return the minimum over
        DataFrame axis.
    DataFrame.cummax : Return cumulative maximum over DataFrame axis.
    DataFrame.cummin : Return cumulative minimum over DataFrame axis.
    DataFrame.cumsum : Return cumulative sum over DataFrame axis.
    DataFrame.cumprod : Return cumulative product over DataFrame axis.
    
    Examples
    --------
    **Series**
    
    >>> s = pd.Series([2, np.nan, 5, -1, 0])
    >>> s
    0    2.0
    1    NaN
    2    5.0
    3   -1.0
    4    0.0
    dtype: float64
    
    By default, NA values are ignored.
    
    >>> s.cummin()
    0    2.0
    1    NaN
    2    2.0
    3   -1.0
    4   -1.0
    dtype: float64
    
    To include NA values in the operation, use ``skipna=False``
    
    >>> s.cummin(skipna=False)
    0    2.0
    1    NaN
    2    NaN
    3    NaN
    4    NaN
    dtype: float64
    
    **DataFrame**
    
    >>> df = pd.DataFrame([[2.0, 1.0],
    ...                    [3.0, np.nan],
    ...                    [1.0, 0.0]],
    ...                   columns=list('AB'))
    >>> df
         A    B
    0  2.0  1.0
    1  3.0  NaN
    2  1.0  0.0
    
    By default, iterates over rows and finds the minimum
    in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
    
    >>> df.cummin()
         A    B
    0  2.0  1.0
    1  2.0  NaN
    2  1.0  0.0
    
    To iterate over columns and find the minimum in each row,
    use ``axis=1``
    
    >>> df.cummin(axis=1)
         A    B
    0  2.0  1.0
    1  3.0  NaN
    2  1.0  0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& cumprod &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cumprod in module pandas.core.frame:

cumprod(axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Return cumulative product over a DataFrame or Series axis.
    
    Returns a DataFrame or Series of the same size containing the cumulative
    product.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The index or the name of the axis. 0 is equivalent to None or 'index'.
        For `Series` this parameter is unused and defaults to 0.
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    *args, **kwargs
        Additional keywords have no effect but might be accepted for
        compatibility with NumPy.
    
    Returns
    -------
    Series or DataFrame
        Return cumulative product of Series or DataFrame.
    
    See Also
    --------
    core.window.expanding.Expanding.prod : Similar functionality
        but ignores ``NaN`` values.
    DataFrame.prod : Return the product over
        DataFrame axis.
    DataFrame.cummax : Return cumulative maximum over DataFrame axis.
    DataFrame.cummin : Return cumulative minimum over DataFrame axis.
    DataFrame.cumsum : Return cumulative sum over DataFrame axis.
    DataFrame.cumprod : Return cumulative product over DataFrame axis.
    
    Examples
    --------
    **Series**
    
    >>> s = pd.Series([2, np.nan, 5, -1, 0])
    >>> s
    0    2.0
    1    NaN
    2    5.0
    3   -1.0
    4    0.0
    dtype: float64
    
    By default, NA values are ignored.
    
    >>> s.cumprod()
    0     2.0
    1     NaN
    2    10.0
    3   -10.0
    4    -0.0
    dtype: float64
    
    To include NA values in the operation, use ``skipna=False``
    
    >>> s.cumprod(skipna=False)
    0    2.0
    1    NaN
    2    NaN
    3    NaN
    4    NaN
    dtype: float64
    
    **DataFrame**
    
    >>> df = pd.DataFrame([[2.0, 1.0],
    ...                    [3.0, np.nan],
    ...                    [1.0, 0.0]],
    ...                   columns=list('AB'))
    >>> df
         A    B
    0  2.0  1.0
    1  3.0  NaN
    2  1.0  0.0
    
    By default, iterates over rows and finds the product
    in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
    
    >>> df.cumprod()
         A    B
    0  2.0  1.0
    1  6.0  NaN
    2  6.0  0.0
    
    To iterate over columns and find the product in each row,
    use ``axis=1``
    
    >>> df.cumprod(axis=1)
         A    B
    0  2.0  2.0
    1  3.0  NaN
    2  1.0  0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& cumsum &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method cumsum in module pandas.core.frame:

cumsum(axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs) method of pandas.core.frame.DataFrame instance
    Return cumulative sum over a DataFrame or Series axis.
    
    Returns a DataFrame or Series of the same size containing the cumulative
    sum.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The index or the name of the axis. 0 is equivalent to None or 'index'.
        For `Series` this parameter is unused and defaults to 0.
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    *args, **kwargs
        Additional keywords have no effect but might be accepted for
        compatibility with NumPy.
    
    Returns
    -------
    Series or DataFrame
        Return cumulative sum of Series or DataFrame.
    
    See Also
    --------
    core.window.expanding.Expanding.sum : Similar functionality
        but ignores ``NaN`` values.
    DataFrame.sum : Return the sum over
        DataFrame axis.
    DataFrame.cummax : Return cumulative maximum over DataFrame axis.
    DataFrame.cummin : Return cumulative minimum over DataFrame axis.
    DataFrame.cumsum : Return cumulative sum over DataFrame axis.
    DataFrame.cumprod : Return cumulative product over DataFrame axis.
    
    Examples
    --------
    **Series**
    
    >>> s = pd.Series([2, np.nan, 5, -1, 0])
    >>> s
    0    2.0
    1    NaN
    2    5.0
    3   -1.0
    4    0.0
    dtype: float64
    
    By default, NA values are ignored.
    
    >>> s.cumsum()
    0    2.0
    1    NaN
    2    7.0
    3    6.0
    4    6.0
    dtype: float64
    
    To include NA values in the operation, use ``skipna=False``
    
    >>> s.cumsum(skipna=False)
    0    2.0
    1    NaN
    2    NaN
    3    NaN
    4    NaN
    dtype: float64
    
    **DataFrame**
    
    >>> df = pd.DataFrame([[2.0, 1.0],
    ...                    [3.0, np.nan],
    ...                    [1.0, 0.0]],
    ...                   columns=list('AB'))
    >>> df
         A    B
    0  2.0  1.0
    1  3.0  NaN
    2  1.0  0.0
    
    By default, iterates over rows and finds the sum
    in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
    
    >>> df.cumsum()
         A    B
    0  2.0  1.0
    1  5.0  NaN
    2  6.0  1.0
    
    To iterate over columns and find the sum in each row,
    use ``axis=1``
    
    >>> df.cumsum(axis=1)
         A    B
    0  2.0  3.0
    1  3.0  NaN
    2  1.0  1.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& describe &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method describe in module pandas.core.generic:

describe(percentiles=None, include=None, exclude=None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Generate descriptive statistics.
    
    Descriptive statistics include those that summarize the central
    tendency, dispersion and shape of a
    dataset's distribution, excluding ``NaN`` values.
    
    Analyzes both numeric and object series, as well
    as ``DataFrame`` column sets of mixed data types. The output
    will vary depending on what is provided. Refer to the notes
    below for more detail.
    
    Parameters
    ----------
    percentiles : list-like of numbers, optional
        The percentiles to include in the output. All should
        fall between 0 and 1. The default is
        ``[.25, .5, .75]``, which returns the 25th, 50th, and
        75th percentiles.
    include : 'all', list-like of dtypes or None (default), optional
        A white list of data types to include in the result. Ignored
        for ``Series``. Here are the options:
    
        - 'all' : All columns of the input will be included in the output.
        - A list-like of dtypes : Limits the results to the
          provided data types.
          To limit the result to numeric types submit
          ``numpy.number``. To limit it instead to object columns submit
          the ``numpy.object`` data type. Strings
          can also be used in the style of
          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To
          select pandas categorical columns, use ``'category'``
        - None (default) : The result will include all numeric columns.
    exclude : list-like of dtypes or None (default), optional,
        A black list of data types to omit from the result. Ignored
        for ``Series``. Here are the options:
    
        - A list-like of dtypes : Excludes the provided data types
          from the result. To exclude numeric types submit
          ``numpy.number``. To exclude object columns submit the data
          type ``numpy.object``. Strings can also be used in the style of
          ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To
          exclude pandas categorical columns, use ``'category'``
        - None (default) : The result will exclude nothing.
    
    Returns
    -------
    Series or DataFrame
        Summary statistics of the Series or Dataframe provided.
    
    See Also
    --------
    DataFrame.count: Count number of non-NA/null observations.
    DataFrame.max: Maximum of the values in the object.
    DataFrame.min: Minimum of the values in the object.
    DataFrame.mean: Mean of the values.
    DataFrame.std: Standard deviation of the observations.
    DataFrame.select_dtypes: Subset of a DataFrame including/excluding
        columns based on their dtype.
    
    Notes
    -----
    For numeric data, the result's index will include ``count``,
    ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and
    upper percentiles. By default the lower percentile is ``25`` and the
    upper percentile is ``75``. The ``50`` percentile is the
    same as the median.
    
    For object data (e.g. strings or timestamps), the result's index
    will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``
    is the most common value. The ``freq`` is the most common value's
    frequency. Timestamps also include the ``first`` and ``last`` items.
    
    If multiple object values have the highest count, then the
    ``count`` and ``top`` results will be arbitrarily chosen from
    among those with the highest count.
    
    For mixed data types provided via a ``DataFrame``, the default is to
    return only an analysis of numeric columns. If the dataframe consists
    only of object and categorical data without any numeric columns, the
    default is to return an analysis of both the object and categorical
    columns. If ``include='all'`` is provided as an option, the result
    will include a union of attributes of each type.
    
    The `include` and `exclude` parameters can be used to limit
    which columns in a ``DataFrame`` are analyzed for the output.
    The parameters are ignored when analyzing a ``Series``.
    
    Examples
    --------
    Describing a numeric ``Series``.
    
    >>> s = pd.Series([1, 2, 3])
    >>> s.describe()
    count    3.0
    mean     2.0
    std      1.0
    min      1.0
    25%      1.5
    50%      2.0
    75%      2.5
    max      3.0
    dtype: float64
    
    Describing a categorical ``Series``.
    
    >>> s = pd.Series(['a', 'a', 'b', 'c'])
    >>> s.describe()
    count     4
    unique    3
    top       a
    freq      2
    dtype: object
    
    Describing a timestamp ``Series``.
    
    >>> s = pd.Series([
    ...     np.datetime64("2000-01-01"),
    ...     np.datetime64("2010-01-01"),
    ...     np.datetime64("2010-01-01")
    ... ])
    >>> s.describe()
    count                      3
    mean     2006-09-01 08:00:00
    min      2000-01-01 00:00:00
    25%      2004-12-31 12:00:00
    50%      2010-01-01 00:00:00
    75%      2010-01-01 00:00:00
    max      2010-01-01 00:00:00
    dtype: object
    
    Describing a ``DataFrame``. By default only numeric fields
    are returned.
    
    >>> df = pd.DataFrame({'categorical': pd.Categorical(['d', 'e', 'f']),
    ...                    'numeric': [1, 2, 3],
    ...                    'object': ['a', 'b', 'c']
    ...                    })
    >>> df.describe()
           numeric
    count      3.0
    mean       2.0
    std        1.0
    min        1.0
    25%        1.5
    50%        2.0
    75%        2.5
    max        3.0
    
    Describing all columns of a ``DataFrame`` regardless of data type.
    
    >>> df.describe(include='all')  # doctest: +SKIP
           categorical  numeric object
    count            3      3.0      3
    unique           3      NaN      3
    top              f      NaN      a
    freq             1      NaN      1
    mean           NaN      2.0    NaN
    std            NaN      1.0    NaN
    min            NaN      1.0    NaN
    25%            NaN      1.5    NaN
    50%            NaN      2.0    NaN
    75%            NaN      2.5    NaN
    max            NaN      3.0    NaN
    
    Describing a column from a ``DataFrame`` by accessing it as
    an attribute.
    
    >>> df.numeric.describe()
    count    3.0
    mean     2.0
    std      1.0
    min      1.0
    25%      1.5
    50%      2.0
    75%      2.5
    max      3.0
    Name: numeric, dtype: float64
    
    Including only numeric columns in a ``DataFrame`` description.
    
    >>> df.describe(include=[np.number])
           numeric
    count      3.0
    mean       2.0
    std        1.0
    min        1.0
    25%        1.5
    50%        2.0
    75%        2.5
    max        3.0
    
    Including only string columns in a ``DataFrame`` description.
    
    >>> df.describe(include=[object])  # doctest: +SKIP
           object
    count       3
    unique      3
    top         a
    freq        1
    
    Including only categorical columns from a ``DataFrame`` description.
    
    >>> df.describe(include=['category'])
           categorical
    count            3
    unique           3
    top              d
    freq             1
    
    Excluding numeric columns from a ``DataFrame`` description.
    
    >>> df.describe(exclude=[np.number])  # doctest: +SKIP
           categorical object
    count            3      3
    unique           3      3
    top              f      a
    freq             1      1
    
    Excluding object columns from a ``DataFrame`` description.
    
    >>> df.describe(exclude=[object])  # doctest: +SKIP
           categorical  numeric
    count            3      3.0
    unique           3      NaN
    top              f      NaN
    freq             1      NaN
    mean           NaN      2.0
    std            NaN      1.0
    min            NaN      1.0
    25%            NaN      1.5
    50%            NaN      2.0
    75%            NaN      2.5
    max            NaN      3.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& diff &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method diff in module pandas.core.frame:

diff(periods: 'int' = 1, axis: 'Axis' = 0) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    First discrete difference of element.
    
    Calculates the difference of a DataFrame element compared with another
    element in the DataFrame (default is element in previous row).
    
    Parameters
    ----------
    periods : int, default 1
        Periods to shift for calculating difference, accepts negative
        values.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Take difference over rows (0) or columns (1).
    
    Returns
    -------
    DataFrame
        First differences of the Series.
    
    See Also
    --------
    DataFrame.pct_change: Percent change over given number of periods.
    DataFrame.shift: Shift index by desired number of periods with an
        optional time freq.
    Series.diff: First discrete difference of object.
    
    Notes
    -----
    For boolean dtypes, this uses :meth:`operator.xor` rather than
    :meth:`operator.sub`.
    The result is calculated according to current dtype in DataFrame,
    however dtype of the result is always float64.
    
    Examples
    --------
    
    Difference with previous row
    
    >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],
    ...                    'b': [1, 1, 2, 3, 5, 8],
    ...                    'c': [1, 4, 9, 16, 25, 36]})
    >>> df
       a  b   c
    0  1  1   1
    1  2  1   4
    2  3  2   9
    3  4  3  16
    4  5  5  25
    5  6  8  36
    
    >>> df.diff()
         a    b     c
    0  NaN  NaN   NaN
    1  1.0  0.0   3.0
    2  1.0  1.0   5.0
    3  1.0  1.0   7.0
    4  1.0  2.0   9.0
    5  1.0  3.0  11.0
    
    Difference with previous column
    
    >>> df.diff(axis=1)
        a  b   c
    0 NaN  0   0
    1 NaN -1   3
    2 NaN -1   7
    3 NaN -1  13
    4 NaN  0  20
    5 NaN  2  28
    
    Difference with 3rd previous row
    
    >>> df.diff(periods=3)
         a    b     c
    0  NaN  NaN   NaN
    1  NaN  NaN   NaN
    2  NaN  NaN   NaN
    3  3.0  2.0  15.0
    4  3.0  4.0  21.0
    5  3.0  6.0  27.0
    
    Difference with following row
    
    >>> df.diff(periods=-1)
         a    b     c
    0 -1.0  0.0  -3.0
    1 -1.0 -1.0  -5.0
    2 -1.0 -1.0  -7.0
    3 -1.0 -2.0  -9.0
    4 -1.0 -3.0 -11.0
    5  NaN  NaN   NaN
    
    Overflow in input dtype
    
    >>> df = pd.DataFrame({'a': [1, 0]}, dtype=np.uint8)
    >>> df.diff()
           a
    0    NaN
    1  255.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& div &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method truediv in module pandas.core.frame:

truediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `truediv`).
    
    Equivalent to ``dataframe / other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rtruediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& divide &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method truediv in module pandas.core.frame:

truediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `truediv`).
    
    Equivalent to ``dataframe / other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rtruediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& dot &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method dot in module pandas.core.frame:

dot(other: 'AnyArrayLike | DataFrame') -> 'DataFrame | Series' method of pandas.core.frame.DataFrame instance
    Compute the matrix multiplication between the DataFrame and other.
    
    This method computes the matrix product between the DataFrame and the
    values of an other Series, DataFrame or a numpy array.
    
    It can also be called using ``self @ other``.
    
    Parameters
    ----------
    other : Series, DataFrame or array-like
        The other object to compute the matrix product with.
    
    Returns
    -------
    Series or DataFrame
        If other is a Series, return the matrix product between self and
        other as a Series. If other is a DataFrame or a numpy.array, return
        the matrix product of self and other in a DataFrame of a np.array.
    
    See Also
    --------
    Series.dot: Similar method for Series.
    
    Notes
    -----
    The dimensions of DataFrame and other must be compatible in order to
    compute the matrix multiplication. In addition, the column names of
    DataFrame and the index of other must contain the same values, as they
    will be aligned prior to the multiplication.
    
    The dot method for Series computes the inner product, instead of the
    matrix product here.
    
    Examples
    --------
    Here we multiply a DataFrame with a Series.
    
    >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])
    >>> s = pd.Series([1, 1, 2, 1])
    >>> df.dot(s)
    0    -4
    1     5
    dtype: int64
    
    Here we multiply a DataFrame with another DataFrame.
    
    >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])
    >>> df.dot(other)
        0   1
    0   1   4
    1   2   2
    
    Note that the dot method give the same result as @
    
    >>> df @ other
        0   1
    0   1   4
    1   2   2
    
    The dot method works also if other is an np.array.
    
    >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])
    >>> df.dot(arr)
        0   1
    0   1   4
    1   2   2
    
    Note how shuffling of the objects does not change the result.
    
    >>> s2 = s.reindex([1, 0, 2, 3])
    >>> df.dot(s2)
    0    -4
    1     5
    dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& drop &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method drop in module pandas.core.frame:

drop(labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Drop specified labels from rows or columns.
    
    Remove rows or columns by specifying label names and corresponding
    axis, or by directly specifying index or column names. When using a
    multi-index, labels on different levels can be removed by specifying
    the level. See the :ref:`user guide <advanced.shown_levels>`
    for more information about the now unused levels.
    
    Parameters
    ----------
    labels : single label or list-like
        Index or column labels to drop. A tuple will be used as a single
        label and not treated as a list-like.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Whether to drop labels from the index (0 or 'index') or
        columns (1 or 'columns').
    index : single label or list-like
        Alternative to specifying axis (``labels, axis=0``
        is equivalent to ``index=labels``).
    columns : single label or list-like
        Alternative to specifying axis (``labels, axis=1``
        is equivalent to ``columns=labels``).
    level : int or level name, optional
        For MultiIndex, level from which the labels will be removed.
    inplace : bool, default False
        If False, return a copy. Otherwise, do operation
        in place and return None.
    errors : {'ignore', 'raise'}, default 'raise'
        If 'ignore', suppress error and only existing labels are
        dropped.
    
    Returns
    -------
    DataFrame or None
        Returns DataFrame or None DataFrame with the specified
        index or column labels removed or None if inplace=True.
    
    Raises
    ------
    KeyError
        If any of the labels is not found in the selected axis.
    
    See Also
    --------
    DataFrame.loc : Label-location based indexer for selection by label.
    DataFrame.dropna : Return DataFrame with labels on given axis omitted
        where (all or any) data are missing.
    DataFrame.drop_duplicates : Return DataFrame with duplicate rows
        removed, optionally only considering certain columns.
    Series.drop : Return Series with specified index labels removed.
    
    Examples
    --------
    >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),
    ...                   columns=['A', 'B', 'C', 'D'])
    >>> df
       A  B   C   D
    0  0  1   2   3
    1  4  5   6   7
    2  8  9  10  11
    
    Drop columns
    
    >>> df.drop(['B', 'C'], axis=1)
       A   D
    0  0   3
    1  4   7
    2  8  11
    
    >>> df.drop(columns=['B', 'C'])
       A   D
    0  0   3
    1  4   7
    2  8  11
    
    Drop a row by index
    
    >>> df.drop([0, 1])
       A  B   C   D
    2  8  9  10  11
    
    Drop columns and/or rows of MultiIndex DataFrame
    
    >>> midx = pd.MultiIndex(levels=[['llama', 'cow', 'falcon'],
    ...                              ['speed', 'weight', 'length']],
    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],
    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])
    >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],
    ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],
    ...                         [250, 150], [1.5, 0.8], [320, 250],
    ...                         [1, 0.8], [0.3, 0.2]])
    >>> df
                    big     small
    llama   speed   45.0    30.0
            weight  200.0   100.0
            length  1.5     1.0
    cow     speed   30.0    20.0
            weight  250.0   150.0
            length  1.5     0.8
    falcon  speed   320.0   250.0
            weight  1.0     0.8
            length  0.3     0.2
    
    Drop a specific index combination from the MultiIndex
    DataFrame, i.e., drop the combination ``'falcon'`` and
    ``'weight'``, which deletes only the corresponding row
    
    >>> df.drop(index=('falcon', 'weight'))
                    big     small
    llama   speed   45.0    30.0
            weight  200.0   100.0
            length  1.5     1.0
    cow     speed   30.0    20.0
            weight  250.0   150.0
            length  1.5     0.8
    falcon  speed   320.0   250.0
            length  0.3     0.2
    
    >>> df.drop(index='cow', columns='small')
                    big
    llama   speed   45.0
            weight  200.0
            length  1.5
    falcon  speed   320.0
            weight  1.0
            length  0.3
    
    >>> df.drop(index='length', level=1)
                    big     small
    llama   speed   45.0    30.0
            weight  200.0   100.0
    cow     speed   30.0    20.0
            weight  250.0   150.0
    falcon  speed   320.0   250.0
            weight  1.0     0.8

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& drop_duplicates &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method drop_duplicates in module pandas.core.frame:

drop_duplicates(subset: 'Hashable | Sequence[Hashable] | None' = None, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Return DataFrame with duplicate rows removed.
    
    Considering certain columns is optional. Indexes, including time indexes
    are ignored.
    
    Parameters
    ----------
    subset : column label or sequence of labels, optional
        Only consider certain columns for identifying duplicates, by
        default use all of the columns.
    keep : {'first', 'last', ``False``}, default 'first'
        Determines which duplicates (if any) to keep.
    
        - 'first' : Drop duplicates except for the first occurrence.
        - 'last' : Drop duplicates except for the last occurrence.
        - ``False`` : Drop all duplicates.
    
    inplace : bool, default ``False``
        Whether to modify the DataFrame rather than creating a new one.
    ignore_index : bool, default ``False``
        If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
    
    Returns
    -------
    DataFrame or None
        DataFrame with duplicates removed or None if ``inplace=True``.
    
    See Also
    --------
    DataFrame.value_counts: Count unique combinations of columns.
    
    Examples
    --------
    Consider dataset containing ramen rating.
    
    >>> df = pd.DataFrame({
    ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],
    ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],
    ...     'rating': [4, 4, 3.5, 15, 5]
    ... })
    >>> df
        brand style  rating
    0  Yum Yum   cup     4.0
    1  Yum Yum   cup     4.0
    2  Indomie   cup     3.5
    3  Indomie  pack    15.0
    4  Indomie  pack     5.0
    
    By default, it removes duplicate rows based on all columns.
    
    >>> df.drop_duplicates()
        brand style  rating
    0  Yum Yum   cup     4.0
    2  Indomie   cup     3.5
    3  Indomie  pack    15.0
    4  Indomie  pack     5.0
    
    To remove duplicates on specific column(s), use ``subset``.
    
    >>> df.drop_duplicates(subset=['brand'])
        brand style  rating
    0  Yum Yum   cup     4.0
    2  Indomie   cup     3.5
    
    To remove duplicates and keep last occurrences, use ``keep``.
    
    >>> df.drop_duplicates(subset=['brand', 'style'], keep='last')
        brand style  rating
    1  Yum Yum   cup     4.0
    2  Indomie   cup     3.5
    4  Indomie  pack     5.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& droplevel &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method droplevel in module pandas.core.generic:

droplevel(level: 'IndexLabel', axis: 'Axis' = 0) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return Series/DataFrame with requested index / column level(s) removed.
    
    Parameters
    ----------
    level : int, str, or list-like
        If a string is given, must be the name of a level
        If list-like, elements must be names or positional indexes
        of levels.
    
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Axis along which the level(s) is removed:
    
        * 0 or 'index': remove level(s) in column.
        * 1 or 'columns': remove level(s) in row.
    
        For `Series` this parameter is unused and defaults to 0.
    
    Returns
    -------
    Series/DataFrame
        Series/DataFrame with requested index / column level(s) removed.
    
    Examples
    --------
    >>> df = pd.DataFrame([
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7, 8],
    ...     [9, 10, 11, 12]
    ... ]).set_index([0, 1]).rename_axis(['a', 'b'])
    
    >>> df.columns = pd.MultiIndex.from_tuples([
    ...     ('c', 'e'), ('d', 'f')
    ... ], names=['level_1', 'level_2'])
    
    >>> df
    level_1   c   d
    level_2   e   f
    a b
    1 2      3   4
    5 6      7   8
    9 10    11  12
    
    >>> df.droplevel('a')
    level_1   c   d
    level_2   e   f
    b
    2        3   4
    6        7   8
    10      11  12
    
    >>> df.droplevel('level_2', axis=1)
    level_1   c   d
    a b
    1 2      3   4
    5 6      7   8
    9 10    11  12

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& dropna &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method dropna in module pandas.core.frame:

dropna(*, axis: 'Axis' = 0, how: 'AnyAll | lib.NoDefault' = <no_default>, thresh: 'int | lib.NoDefault' = <no_default>, subset: 'IndexLabel | None' = None, inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Remove missing values.
    
    See the :ref:`User Guide <missing_data>` for more on which values are
    considered missing, and how to work with missing data.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Determine if rows or columns which contain missing values are
        removed.
    
        * 0, or 'index' : Drop rows which contain missing values.
        * 1, or 'columns' : Drop columns which contain missing value.
    
        Only a single axis is allowed.
    
    how : {'any', 'all'}, default 'any'
        Determine if row or column is removed from DataFrame, when we have
        at least one NA or all NA.
    
        * 'any' : If any NA values are present, drop that row or column.
        * 'all' : If all values are NA, drop that row or column.
    
    thresh : int, optional
        Require that many non-NA values. Cannot be combined with how.
    subset : column label or sequence of labels, optional
        Labels along other axis to consider, e.g. if you are dropping rows
        these would be a list of columns to include.
    inplace : bool, default False
        Whether to modify the DataFrame rather than creating a new one.
    ignore_index : bool, default ``False``
        If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
    
        .. versionadded:: 2.0.0
    
    Returns
    -------
    DataFrame or None
        DataFrame with NA entries dropped from it or None if ``inplace=True``.
    
    See Also
    --------
    DataFrame.isna: Indicate missing values.
    DataFrame.notna : Indicate existing (non-missing) values.
    DataFrame.fillna : Replace missing values.
    Series.dropna : Drop missing values.
    Index.dropna : Drop missing indices.
    
    Examples
    --------
    >>> df = pd.DataFrame({"name": ['Alfred', 'Batman', 'Catwoman'],
    ...                    "toy": [np.nan, 'Batmobile', 'Bullwhip'],
    ...                    "born": [pd.NaT, pd.Timestamp("1940-04-25"),
    ...                             pd.NaT]})
    >>> df
           name        toy       born
    0    Alfred        NaN        NaT
    1    Batman  Batmobile 1940-04-25
    2  Catwoman   Bullwhip        NaT
    
    Drop the rows where at least one element is missing.
    
    >>> df.dropna()
         name        toy       born
    1  Batman  Batmobile 1940-04-25
    
    Drop the columns where at least one element is missing.
    
    >>> df.dropna(axis='columns')
           name
    0    Alfred
    1    Batman
    2  Catwoman
    
    Drop the rows where all elements are missing.
    
    >>> df.dropna(how='all')
           name        toy       born
    0    Alfred        NaN        NaT
    1    Batman  Batmobile 1940-04-25
    2  Catwoman   Bullwhip        NaT
    
    Keep only the rows with at least 2 non-NA values.
    
    >>> df.dropna(thresh=2)
           name        toy       born
    1    Batman  Batmobile 1940-04-25
    2  Catwoman   Bullwhip        NaT
    
    Define in which columns to look for missing values.
    
    >>> df.dropna(subset=['name', 'toy'])
           name        toy       born
    1    Batman  Batmobile 1940-04-25
    2  Catwoman   Bullwhip        NaT

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& dtypes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Series in module pandas.core.series object:

class Series(pandas.core.base.IndexOpsMixin, pandas.core.generic.NDFrame)
 |  Series(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'
 |  
 |  One-dimensional ndarray with axis labels (including time series).
 |  
 |  Labels need not be unique but must be a hashable type. The object
 |  supports both integer- and label-based indexing and provides a host of
 |  methods for performing operations involving the index. Statistical
 |  methods from ndarray have been overridden to automatically exclude
 |  missing data (currently represented as NaN).
 |  
 |  Operations between Series (+, -, /, \*, \*\*) align values based on their
 |  associated index values-- they need not be the same length. The result
 |  index will be the sorted union of the two indexes.
 |  
 |  Parameters
 |  ----------
 |  data : array-like, Iterable, dict, or scalar value
 |      Contains data stored in Series. If data is a dict, argument order is
 |      maintained.
 |  index : array-like or Index (1d)
 |      Values must be hashable and have the same length as `data`.
 |      Non-unique index values are allowed. Will default to
 |      RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like
 |      and index is None, then the keys in the data are used as the index. If the
 |      index is not None, the resulting Series is reindexed with the index values.
 |  dtype : str, numpy.dtype, or ExtensionDtype, optional
 |      Data type for the output Series. If not specified, this will be
 |      inferred from `data`.
 |      See the :ref:`user guide <basics.dtypes>` for more usages.
 |  name : Hashable, default None
 |      The name to give to the Series.
 |  copy : bool, default False
 |      Copy input data. Only affects Series or 1d ndarray input. See examples.
 |  
 |  Notes
 |  -----
 |  Please reference the :ref:`User Guide <basics.series>` for more information.
 |  
 |  Examples
 |  --------
 |  Constructing Series from a dictionary with an Index specified
 |  
 |  >>> d = {'a': 1, 'b': 2, 'c': 3}
 |  >>> ser = pd.Series(data=d, index=['a', 'b', 'c'])
 |  >>> ser
 |  a   1
 |  b   2
 |  c   3
 |  dtype: int64
 |  
 |  The keys of the dictionary match with the Index values, hence the Index
 |  values have no effect.
 |  
 |  >>> d = {'a': 1, 'b': 2, 'c': 3}
 |  >>> ser = pd.Series(data=d, index=['x', 'y', 'z'])
 |  >>> ser
 |  x   NaN
 |  y   NaN
 |  z   NaN
 |  dtype: float64
 |  
 |  Note that the Index is first build with the keys from the dictionary.
 |  After this the Series is reindexed with the given Index values, hence we
 |  get all NaN as a result.
 |  
 |  Constructing Series from a list with `copy=False`.
 |  
 |  >>> r = [1, 2]
 |  >>> ser = pd.Series(r, copy=False)
 |  >>> ser.iloc[0] = 999
 |  >>> r
 |  [1, 2]
 |  >>> ser
 |  0    999
 |  1      2
 |  dtype: int64
 |  
 |  Due to input data type the Series has a `copy` of
 |  the original data even though `copy=False`, so
 |  the data is unchanged.
 |  
 |  Constructing Series from a 1d ndarray with `copy=False`.
 |  
 |  >>> r = np.array([1, 2])
 |  >>> ser = pd.Series(r, copy=False)
 |  >>> ser.iloc[0] = 999
 |  >>> r
 |  array([999,   2])
 |  >>> ser
 |  0    999
 |  1      2
 |  dtype: int64
 |  
 |  Due to input data type the Series has a `view` on
 |  the original data, so
 |  the data is changed as well.
 |  
 |  Method resolution order:
 |      Series
 |      pandas.core.base.IndexOpsMixin
 |      pandas.core.arraylike.OpsMixin
 |      pandas.core.generic.NDFrame
 |      pandas.core.base.PandasObject
 |      pandas.core.accessor.DirNamesMixin
 |      pandas.core.indexing.IndexingMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __array__(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool | None' = None) -> 'np.ndarray'
 |      Return the values as a NumPy array.
 |      
 |      Users should not call this directly. Rather, it is invoked by
 |      :func:`numpy.array` and :func:`numpy.asarray`.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or numpy.dtype, optional
 |          The dtype to use for the resulting NumPy array. By default,
 |          the dtype is inferred from the data.
 |      
 |      copy : bool or None, optional
 |          See :func:`numpy.asarray`.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray
 |          The values in the series converted to a :class:`numpy.ndarray`
 |          with the specified `dtype`.
 |      
 |      See Also
 |      --------
 |      array : Create a new array from data.
 |      Series.array : Zero-copy view to the array backing the Series.
 |      Series.to_numpy : Series method for similar behavior.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> np.asarray(ser)
 |      array([1, 2, 3])
 |      
 |      For timezone-aware data, the timezones may be retained with
 |      ``dtype='object'``
 |      
 |      >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz="CET"))
 |      >>> np.asarray(tzser, dtype="object")
 |      array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),
 |             Timestamp('2000-01-02 00:00:00+0100', tz='CET')],
 |            dtype=object)
 |      
 |      Or the values may be localized to UTC and the tzinfo discarded with
 |      ``dtype='datetime64[ns]'``
 |      
 |      >>> np.asarray(tzser, dtype="datetime64[ns]")  # doctest: +ELLIPSIS
 |      array(['1999-12-31T23:00:00.000000000', ...],
 |            dtype='datetime64[ns]')
 |  
 |  __column_consortium_standard__(self, *, api_version: 'str | None' = None) -> 'Any'
 |      Provide entry point to the Consortium DataFrame Standard API.
 |      
 |      This is developed and maintained outside of pandas.
 |      Please report any issues to https://github.com/data-apis/dataframe-api-compat.
 |  
 |  __float__(self)
 |  
 |  __getitem__(self, key)
 |  
 |  __init__(self, data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __int__(self)
 |  
 |  __len__(self) -> 'int'
 |      Return the length of the Series.
 |  
 |  __matmul__(self, other)
 |      Matrix multiplication using binary `@` operator.
 |  
 |  __repr__(self) -> 'str'
 |      Return a string representation for a particular Series.
 |  
 |  __rmatmul__(self, other)
 |      Matrix multiplication using binary `@` operator.
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  add(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Addition of series and other, element-wise (binary operator `add`).
 |      
 |      Equivalent to ``series + other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.radd : Reverse of the Addition operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.add(b, fill_value=0)
 |      a    2.0
 |      b    1.0
 |      c    1.0
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  agg = aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)
 |  
 |  aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)
 |      Aggregate using one or more operations over the specified axis.
 |      
 |      Parameters
 |      ----------
 |      func : function, str, list or dict
 |          Function to use for aggregating the data. If a function, must either
 |          work when passed a Series or when passed to Series.apply.
 |      
 |          Accepted combinations are:
 |      
 |          - function
 |          - string function name
 |          - list of functions and/or function names, e.g. ``[np.sum, 'mean']``
 |          - dict of axis labels -> functions, function names or list of such.
 |      axis : {0 or 'index'}
 |              Unused. Parameter needed for compatibility with DataFrame.
 |      *args
 |          Positional arguments to pass to `func`.
 |      **kwargs
 |          Keyword arguments to pass to `func`.
 |      
 |      Returns
 |      -------
 |      scalar, Series or DataFrame
 |      
 |          The return can be:
 |      
 |          * scalar : when Series.agg is called with single function
 |          * Series : when DataFrame.agg is called with a single function
 |          * DataFrame : when DataFrame.agg is called with several functions
 |      
 |      See Also
 |      --------
 |      Series.apply : Invoke function on a Series.
 |      Series.transform : Transform function producing a Series with like indexes.
 |      
 |      Notes
 |      -----
 |      The aggregation operations are always performed over an axis, either the
 |      index (default) or the column axis. This behavior is different from
 |      `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,
 |      `var`), where the default is to compute the aggregation of the flattened
 |      array, e.g., ``numpy.mean(arr_2d)`` as opposed to
 |      ``numpy.mean(arr_2d, axis=0)``.
 |      
 |      `agg` is an alias for `aggregate`. Use the alias.
 |      
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      A passed user-defined-function will be passed a Series for evaluation.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |      
 |      >>> s.agg('min')
 |      1
 |      
 |      >>> s.agg(['min', 'max'])
 |      min   1
 |      max   4
 |      dtype: int64
 |  
 |  all(self, axis: 'Axis' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'bool'
 |      Return whether all elements are True, potentially over an axis.
 |      
 |      Returns True unless there at least one element within a series or
 |      along a Dataframe axis that is False or equivalent (e.g. zero or
 |      empty).
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Indicate which axis or axes should be reduced. For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          * 0 / 'index' : reduce the index, return a Series whose index is the
 |            original column labels.
 |          * 1 / 'columns' : reduce the columns, return a Series whose index is the
 |            original index.
 |          * None : reduce all axes, return a scalar.
 |      
 |      bool_only : bool, default False
 |          Include only boolean columns. Not implemented for Series.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire row/column is NA and skipna is
 |          True, then the result will be True, as for an empty row/column.
 |          If skipna is False, then NA are treated as True, because these are not
 |          equal to zero.
 |      **kwargs : any, default None
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          If level is specified, then, Series is returned; otherwise, scalar
 |          is returned.
 |      
 |      See Also
 |      --------
 |      Series.all : Return True if all elements are True.
 |      DataFrame.any : Return True if one (or more) elements are True.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> pd.Series([True, True]).all()
 |      True
 |      >>> pd.Series([True, False]).all()
 |      False
 |      >>> pd.Series([], dtype="float64").all()
 |      True
 |      >>> pd.Series([np.nan]).all()
 |      True
 |      >>> pd.Series([np.nan]).all(skipna=False)
 |      True
 |      
 |      **DataFrames**
 |      
 |      Create a dataframe from a dictionary.
 |      
 |      >>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})
 |      >>> df
 |         col1   col2
 |      0  True   True
 |      1  True  False
 |      
 |      Default behaviour checks if values in each column all return True.
 |      
 |      >>> df.all()
 |      col1     True
 |      col2    False
 |      dtype: bool
 |      
 |      Specify ``axis='columns'`` to check if values in each row all return True.
 |      
 |      >>> df.all(axis='columns')
 |      0     True
 |      1    False
 |      dtype: bool
 |      
 |      Or ``axis=None`` for whether every value is True.
 |      
 |      >>> df.all(axis=None)
 |      False
 |  
 |  any(self, *, axis: 'Axis' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'bool'
 |      Return whether any element is True, potentially over an axis.
 |      
 |      Returns False unless there is at least one element within a series or
 |      along a Dataframe axis that is True or equivalent (e.g. non-zero or
 |      non-empty).
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Indicate which axis or axes should be reduced. For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          * 0 / 'index' : reduce the index, return a Series whose index is the
 |            original column labels.
 |          * 1 / 'columns' : reduce the columns, return a Series whose index is the
 |            original index.
 |          * None : reduce all axes, return a scalar.
 |      
 |      bool_only : bool, default False
 |          Include only boolean columns. Not implemented for Series.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire row/column is NA and skipna is
 |          True, then the result will be False, as for an empty row/column.
 |          If skipna is False, then NA are treated as True, because these are not
 |          equal to zero.
 |      **kwargs : any, default None
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          If level is specified, then, Series is returned; otherwise, scalar
 |          is returned.
 |      
 |      See Also
 |      --------
 |      numpy.any : Numpy version of this method.
 |      Series.any : Return whether any element is True.
 |      Series.all : Return whether all elements are True.
 |      DataFrame.any : Return whether any element is True over requested axis.
 |      DataFrame.all : Return whether all elements are True over requested axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      For Series input, the output is a scalar indicating whether any element
 |      is True.
 |      
 |      >>> pd.Series([False, False]).any()
 |      False
 |      >>> pd.Series([True, False]).any()
 |      True
 |      >>> pd.Series([], dtype="float64").any()
 |      False
 |      >>> pd.Series([np.nan]).any()
 |      False
 |      >>> pd.Series([np.nan]).any(skipna=False)
 |      True
 |      
 |      **DataFrame**
 |      
 |      Whether each column contains at least one True element (the default).
 |      
 |      >>> df = pd.DataFrame({"A": [1, 2], "B": [0, 2], "C": [0, 0]})
 |      >>> df
 |         A  B  C
 |      0  1  0  0
 |      1  2  2  0
 |      
 |      >>> df.any()
 |      A     True
 |      B     True
 |      C    False
 |      dtype: bool
 |      
 |      Aggregating over the columns.
 |      
 |      >>> df = pd.DataFrame({"A": [True, False], "B": [1, 2]})
 |      >>> df
 |             A  B
 |      0   True  1
 |      1  False  2
 |      
 |      >>> df.any(axis='columns')
 |      0    True
 |      1    True
 |      dtype: bool
 |      
 |      >>> df = pd.DataFrame({"A": [True, False], "B": [1, 0]})
 |      >>> df
 |             A  B
 |      0   True  1
 |      1  False  0
 |      
 |      >>> df.any(axis='columns')
 |      0    True
 |      1    False
 |      dtype: bool
 |      
 |      Aggregating over the entire DataFrame with ``axis=None``.
 |      
 |      >>> df.any(axis=None)
 |      True
 |      
 |      `any` for an empty DataFrame is an empty Series.
 |      
 |      >>> pd.DataFrame([]).any()
 |      Series([], dtype: bool)
 |  
 |  apply(self, func: 'AggFuncType', convert_dtype: 'bool | lib.NoDefault' = <no_default>, args: 'tuple[Any, ...]' = (), *, by_row: "Literal[False, 'compat']" = 'compat', **kwargs) -> 'DataFrame | Series'
 |      Invoke function on values of Series.
 |      
 |      Can be ufunc (a NumPy function that applies to the entire Series)
 |      or a Python function that only works on single values.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          Python function or NumPy ufunc to apply.
 |      convert_dtype : bool, default True
 |          Try to find better dtype for elementwise function results. If
 |          False, leave as dtype=object. Note that the dtype is always
 |          preserved for some extension array dtypes, such as Categorical.
 |      
 |          .. deprecated:: 2.1.0
 |              ``convert_dtype`` has been deprecated. Do ``ser.astype(object).apply()``
 |              instead if you want ``convert_dtype=False``.
 |      args : tuple
 |          Positional arguments passed to func after the series value.
 |      by_row : False or "compat", default "compat"
 |          If ``"compat"`` and func is a callable, func will be passed each element of
 |          the Series, like ``Series.map``. If func is a list or dict of
 |          callables, will first try to translate each func into pandas methods. If
 |          that doesn't work, will try call to apply again with ``by_row="compat"``
 |          and if that fails, will call apply again with ``by_row=False``
 |          (backward compatible).
 |          If False, the func will be passed the whole Series at once.
 |      
 |          ``by_row`` has no effect when ``func`` is a string.
 |      
 |          .. versionadded:: 2.1.0
 |      **kwargs
 |          Additional keyword arguments passed to func.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          If func returns a Series object the result will be a DataFrame.
 |      
 |      See Also
 |      --------
 |      Series.map: For element-wise operations.
 |      Series.agg: Only perform aggregating type operations.
 |      Series.transform: Only perform transforming type operations.
 |      
 |      Notes
 |      -----
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      Create a series with typical summer temperatures for each city.
 |      
 |      >>> s = pd.Series([20, 21, 12],
 |      ...               index=['London', 'New York', 'Helsinki'])
 |      >>> s
 |      London      20
 |      New York    21
 |      Helsinki    12
 |      dtype: int64
 |      
 |      Square the values by defining a function and passing it as an
 |      argument to ``apply()``.
 |      
 |      >>> def square(x):
 |      ...     return x ** 2
 |      >>> s.apply(square)
 |      London      400
 |      New York    441
 |      Helsinki    144
 |      dtype: int64
 |      
 |      Square the values by passing an anonymous function as an
 |      argument to ``apply()``.
 |      
 |      >>> s.apply(lambda x: x ** 2)
 |      London      400
 |      New York    441
 |      Helsinki    144
 |      dtype: int64
 |      
 |      Define a custom function that needs additional positional
 |      arguments and pass these additional arguments using the
 |      ``args`` keyword.
 |      
 |      >>> def subtract_custom_value(x, custom_value):
 |      ...     return x - custom_value
 |      
 |      >>> s.apply(subtract_custom_value, args=(5,))
 |      London      15
 |      New York    16
 |      Helsinki     7
 |      dtype: int64
 |      
 |      Define a custom function that takes keyword arguments
 |      and pass these arguments to ``apply``.
 |      
 |      >>> def add_custom_values(x, **kwargs):
 |      ...     for month in kwargs:
 |      ...         x += kwargs[month]
 |      ...     return x
 |      
 |      >>> s.apply(add_custom_values, june=30, july=20, august=25)
 |      London      95
 |      New York    96
 |      Helsinki    87
 |      dtype: int64
 |      
 |      Use a function from the Numpy library.
 |      
 |      >>> s.apply(np.log)
 |      London      2.995732
 |      New York    3.044522
 |      Helsinki    2.484907
 |      dtype: float64
 |  
 |  argsort(self, axis: 'Axis' = 0, kind: 'SortKind' = 'quicksort', order: 'None' = None, stable: 'None' = None) -> 'Series'
 |      Return the integer indices that would sort the Series values.
 |      
 |      Override ndarray.argsort. Argsorts the value, omitting NA/null values,
 |      and places the result in the same locations as the non-NA values.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      kind : {'mergesort', 'quicksort', 'heapsort', 'stable'}, default 'quicksort'
 |          Choice of sorting algorithm. See :func:`numpy.sort` for more
 |          information. 'mergesort' and 'stable' are the only stable algorithms.
 |      order : None
 |          Has no effect but is accepted for compatibility with numpy.
 |      stable : None
 |          Has no effect but is accepted for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      Series[np.intp]
 |          Positions of values within the sort order with -1 indicating
 |          nan values.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.argsort : Returns the indices that would sort this array.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([3, 2, 1])
 |      >>> s.argsort()
 |      0    2
 |      1    1
 |      2    0
 |      dtype: int64
 |  
 |  autocorr(self, lag: 'int' = 1) -> 'float'
 |      Compute the lag-N autocorrelation.
 |      
 |      This method computes the Pearson correlation between
 |      the Series and its shifted self.
 |      
 |      Parameters
 |      ----------
 |      lag : int, default 1
 |          Number of lags to apply before performing autocorrelation.
 |      
 |      Returns
 |      -------
 |      float
 |          The Pearson correlation between self and self.shift(lag).
 |      
 |      See Also
 |      --------
 |      Series.corr : Compute the correlation between two Series.
 |      Series.shift : Shift index by desired number of periods.
 |      DataFrame.corr : Compute pairwise correlation of columns.
 |      DataFrame.corrwith : Compute pairwise correlation between rows or
 |          columns of two DataFrame objects.
 |      
 |      Notes
 |      -----
 |      If the Pearson correlation is not well defined return 'NaN'.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([0.25, 0.5, 0.2, -0.05])
 |      >>> s.autocorr()  # doctest: +ELLIPSIS
 |      0.10355...
 |      >>> s.autocorr(lag=2)  # doctest: +ELLIPSIS
 |      -0.99999...
 |      
 |      If the Pearson correlation is not well defined, then 'NaN' is returned.
 |      
 |      >>> s = pd.Series([1, 0, 0, 0])
 |      >>> s.autocorr()
 |      nan
 |  
 |  between(self, left, right, inclusive: "Literal['both', 'neither', 'left', 'right']" = 'both') -> 'Series'
 |      Return boolean Series equivalent to left <= series <= right.
 |      
 |      This function returns a boolean vector containing `True` wherever the
 |      corresponding Series element is between the boundary values `left` and
 |      `right`. NA values are treated as `False`.
 |      
 |      Parameters
 |      ----------
 |      left : scalar or list-like
 |          Left boundary.
 |      right : scalar or list-like
 |          Right boundary.
 |      inclusive : {"both", "neither", "left", "right"}
 |          Include boundaries. Whether to set each bound as closed or open.
 |      
 |          .. versionchanged:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Series
 |          Series representing whether each element is between left and
 |          right (inclusive).
 |      
 |      See Also
 |      --------
 |      Series.gt : Greater than of series and other.
 |      Series.lt : Less than of series and other.
 |      
 |      Notes
 |      -----
 |      This function is equivalent to ``(left <= ser) & (ser <= right)``
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([2, 0, 4, 8, np.nan])
 |      
 |      Boundary values are included by default:
 |      
 |      >>> s.between(1, 4)
 |      0     True
 |      1    False
 |      2     True
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      With `inclusive` set to ``"neither"`` boundary values are excluded:
 |      
 |      >>> s.between(1, 4, inclusive="neither")
 |      0     True
 |      1    False
 |      2    False
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      `left` and `right` can be any scalar value:
 |      
 |      >>> s = pd.Series(['Alice', 'Bob', 'Carol', 'Eve'])
 |      >>> s.between('Anna', 'Daniel')
 |      0    False
 |      1     True
 |      2     True
 |      3    False
 |      dtype: bool
 |  
 |  case_when(self, caselist: 'list[tuple[ArrayLike | Callable[[Series], Series | np.ndarray | Sequence[bool]], ArrayLike | Scalar | Callable[[Series], Series | np.ndarray]],]') -> 'Series'
 |      Replace values where the conditions are True.
 |      
 |      Parameters
 |      ----------
 |      caselist : A list of tuples of conditions and expected replacements
 |          Takes the form:  ``(condition0, replacement0)``,
 |          ``(condition1, replacement1)``, ... .
 |          ``condition`` should be a 1-D boolean array-like object
 |          or a callable. If ``condition`` is a callable,
 |          it is computed on the Series
 |          and should return a boolean Series or array.
 |          The callable must not change the input Series
 |          (though pandas doesn`t check it). ``replacement`` should be a
 |          1-D array-like object, a scalar or a callable.
 |          If ``replacement`` is a callable, it is computed on the Series
 |          and should return a scalar or Series. The callable
 |          must not change the input Series
 |          (though pandas doesn`t check it).
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      See Also
 |      --------
 |      Series.mask : Replace values where the condition is True.
 |      
 |      Examples
 |      --------
 |      >>> c = pd.Series([6, 7, 8, 9], name='c')
 |      >>> a = pd.Series([0, 0, 1, 2])
 |      >>> b = pd.Series([0, 3, 4, 5])
 |      
 |      >>> c.case_when(caselist=[(a.gt(0), a),  # condition, replacement
 |      ...                       (b.gt(0), b)])
 |      0    6
 |      1    3
 |      2    1
 |      3    2
 |      Name: c, dtype: int64
 |  
 |  combine(self, other: 'Series | Hashable', func: 'Callable[[Hashable, Hashable], Hashable]', fill_value: 'Hashable | None' = None) -> 'Series'
 |      Combine the Series with a Series or scalar according to `func`.
 |      
 |      Combine the Series and `other` using `func` to perform elementwise
 |      selection for combined Series.
 |      `fill_value` is assumed when value is missing at some index
 |      from one of the two objects being combined.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar
 |          The value(s) to be combined with the `Series`.
 |      func : function
 |          Function that takes two scalars as inputs and returns an element.
 |      fill_value : scalar, optional
 |          The value to assume when an index is missing from
 |          one Series or the other. The default specifies to use the
 |          appropriate NaN value for the underlying dtype of the Series.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of combining the Series with the other object.
 |      
 |      See Also
 |      --------
 |      Series.combine_first : Combine Series values, choosing the calling
 |          Series' values first.
 |      
 |      Examples
 |      --------
 |      Consider 2 Datasets ``s1`` and ``s2`` containing
 |      highest clocked speeds of different birds.
 |      
 |      >>> s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})
 |      >>> s1
 |      falcon    330.0
 |      eagle     160.0
 |      dtype: float64
 |      >>> s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})
 |      >>> s2
 |      falcon    345.0
 |      eagle     200.0
 |      duck       30.0
 |      dtype: float64
 |      
 |      Now, to combine the two datasets and view the highest speeds
 |      of the birds across the two datasets
 |      
 |      >>> s1.combine(s2, max)
 |      duck        NaN
 |      eagle     200.0
 |      falcon    345.0
 |      dtype: float64
 |      
 |      In the previous example, the resulting value for duck is missing,
 |      because the maximum of a NaN and a float is a NaN.
 |      So, in the example, we set ``fill_value=0``,
 |      so the maximum value returned will be the value from some dataset.
 |      
 |      >>> s1.combine(s2, max, fill_value=0)
 |      duck       30.0
 |      eagle     200.0
 |      falcon    345.0
 |      dtype: float64
 |  
 |  combine_first(self, other) -> 'Series'
 |      Update null elements with value in the same location in 'other'.
 |      
 |      Combine two Series objects by filling null values in one Series with
 |      non-null values from the other Series. Result index will be the union
 |      of the two indexes.
 |      
 |      Parameters
 |      ----------
 |      other : Series
 |          The value(s) to be used for filling null values.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of combining the provided Series with the other object.
 |      
 |      See Also
 |      --------
 |      Series.combine : Perform element-wise operation on two Series
 |          using a given function.
 |      
 |      Examples
 |      --------
 |      >>> s1 = pd.Series([1, np.nan])
 |      >>> s2 = pd.Series([3, 4, 5])
 |      >>> s1.combine_first(s2)
 |      0    1.0
 |      1    4.0
 |      2    5.0
 |      dtype: float64
 |      
 |      Null values still persist if the location of that null value
 |      does not exist in `other`
 |      
 |      >>> s1 = pd.Series({'falcon': np.nan, 'eagle': 160.0})
 |      >>> s2 = pd.Series({'eagle': 200.0, 'duck': 30.0})
 |      >>> s1.combine_first(s2)
 |      duck       30.0
 |      eagle     160.0
 |      falcon      NaN
 |      dtype: float64
 |  
 |  compare(self, other: 'Series', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -> 'DataFrame | Series'
 |      Compare to another Series and show the differences.
 |      
 |      Parameters
 |      ----------
 |      other : Series
 |          Object to compare with.
 |      
 |      align_axis : {0 or 'index', 1 or 'columns'}, default 1
 |          Determine which axis to align the comparison on.
 |      
 |          * 0, or 'index' : Resulting differences are stacked vertically
 |              with rows drawn alternately from self and other.
 |          * 1, or 'columns' : Resulting differences are aligned horizontally
 |              with columns drawn alternately from self and other.
 |      
 |      keep_shape : bool, default False
 |          If true, all rows and columns are kept.
 |          Otherwise, only the ones with different values are kept.
 |      
 |      keep_equal : bool, default False
 |          If true, the result keeps values that are equal.
 |          Otherwise, equal values are shown as NaNs.
 |      
 |      result_names : tuple, default ('self', 'other')
 |          Set the dataframes names in the comparison.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          If axis is 0 or 'index' the result will be a Series.
 |          The resulting index will be a MultiIndex with 'self' and 'other'
 |          stacked alternately at the inner level.
 |      
 |          If axis is 1 or 'columns' the result will be a DataFrame.
 |          It will have two columns namely 'self' and 'other'.
 |      
 |      See Also
 |      --------
 |      DataFrame.compare : Compare with another DataFrame and show differences.
 |      
 |      Notes
 |      -----
 |      Matching NaNs will not appear as a difference.
 |      
 |      Examples
 |      --------
 |      >>> s1 = pd.Series(["a", "b", "c", "d", "e"])
 |      >>> s2 = pd.Series(["a", "a", "c", "b", "e"])
 |      
 |      Align the differences on columns
 |      
 |      >>> s1.compare(s2)
 |        self other
 |      1    b     a
 |      3    d     b
 |      
 |      Stack the differences on indices
 |      
 |      >>> s1.compare(s2, align_axis=0)
 |      1  self     b
 |         other    a
 |      3  self     d
 |         other    b
 |      dtype: object
 |      
 |      Keep all original rows
 |      
 |      >>> s1.compare(s2, keep_shape=True)
 |        self other
 |      0  NaN   NaN
 |      1    b     a
 |      2  NaN   NaN
 |      3    d     b
 |      4  NaN   NaN
 |      
 |      Keep all original rows and also all original values
 |      
 |      >>> s1.compare(s2, keep_shape=True, keep_equal=True)
 |        self other
 |      0    a     a
 |      1    b     a
 |      2    c     c
 |      3    d     b
 |      4    e     e
 |  
 |  corr(self, other: 'Series', method: 'CorrelationMethod' = 'pearson', min_periods: 'int | None' = None) -> 'float'
 |      Compute correlation with `other` Series, excluding missing values.
 |      
 |      The two `Series` objects are not required to be the same length and will be
 |      aligned internally before the correlation function is applied.
 |      
 |      Parameters
 |      ----------
 |      other : Series
 |          Series with which to compute the correlation.
 |      method : {'pearson', 'kendall', 'spearman'} or callable
 |          Method used to compute correlation:
 |      
 |          - pearson : Standard correlation coefficient
 |          - kendall : Kendall Tau correlation coefficient
 |          - spearman : Spearman rank correlation
 |          - callable: Callable with input two 1d ndarrays and returning a float.
 |      
 |          .. warning::
 |              Note that the returned matrix from corr will have 1 along the
 |              diagonals and will be symmetric regardless of the callable's
 |              behavior.
 |      min_periods : int, optional
 |          Minimum number of observations needed to have a valid result.
 |      
 |      Returns
 |      -------
 |      float
 |          Correlation with other.
 |      
 |      See Also
 |      --------
 |      DataFrame.corr : Compute pairwise correlation between columns.
 |      DataFrame.corrwith : Compute pairwise correlation with another
 |          DataFrame or Series.
 |      
 |      Notes
 |      -----
 |      Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.
 |      
 |      * `Pearson correlation coefficient <https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_
 |      * `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_
 |      * `Spearman's rank correlation coefficient <https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_
 |      
 |      Automatic data alignment: as with all pandas operations, automatic data alignment is performed for this method.
 |      ``corr()`` automatically considers values with matching indices.
 |      
 |      Examples
 |      --------
 |      >>> def histogram_intersection(a, b):
 |      ...     v = np.minimum(a, b).sum().round(decimals=1)
 |      ...     return v
 |      >>> s1 = pd.Series([.2, .0, .6, .2])
 |      >>> s2 = pd.Series([.3, .6, .0, .1])
 |      >>> s1.corr(s2, method=histogram_intersection)
 |      0.3
 |      
 |      Pandas auto-aligns the values with matching indices
 |      
 |      >>> s1 = pd.Series([1, 2, 3], index=[0, 1, 2])
 |      >>> s2 = pd.Series([1, 2, 3], index=[2, 1, 0])
 |      >>> s1.corr(s2)
 |      -1.0
 |  
 |  count(self) -> 'int'
 |      Return number of non-NA/null observations in the Series.
 |      
 |      Returns
 |      -------
 |      int
 |          Number of non-null values in the Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.count : Count non-NA cells for each column or row.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([0.0, 1.0, np.nan])
 |      >>> s.count()
 |      2
 |  
 |  cov(self, other: 'Series', min_periods: 'int | None' = None, ddof: 'int | None' = 1) -> 'float'
 |      Compute covariance with Series, excluding missing values.
 |      
 |      The two `Series` objects are not required to be the same length and
 |      will be aligned internally before the covariance is calculated.
 |      
 |      Parameters
 |      ----------
 |      other : Series
 |          Series with which to compute the covariance.
 |      min_periods : int, optional
 |          Minimum number of observations needed to have a valid result.
 |      ddof : int, default 1
 |          Delta degrees of freedom.  The divisor used in calculations
 |          is ``N - ddof``, where ``N`` represents the number of elements.
 |      
 |      Returns
 |      -------
 |      float
 |          Covariance between Series and other normalized by N-1
 |          (unbiased estimator).
 |      
 |      See Also
 |      --------
 |      DataFrame.cov : Compute pairwise covariance of columns.
 |      
 |      Examples
 |      --------
 |      >>> s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])
 |      >>> s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])
 |      >>> s1.cov(s2)
 |      -0.01685762652715874
 |  
 |  cummax(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative maximum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      maximum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          Return cumulative maximum of scalar or Series.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.max : Similar functionality
 |          but ignores ``NaN`` values.
 |      Series.max : Return the maximum over
 |          Series axis.
 |      Series.cummax : Return cumulative maximum over Series axis.
 |      Series.cummin : Return cumulative minimum over Series axis.
 |      Series.cumsum : Return cumulative sum over Series axis.
 |      Series.cumprod : Return cumulative product over Series axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cummax()
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3    5.0
 |      4    5.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cummax(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the maximum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cummax()
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  3.0  1.0
 |      
 |      To iterate over columns and find the maximum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cummax(axis=1)
 |           A    B
 |      0  2.0  2.0
 |      1  3.0  NaN
 |      2  1.0  1.0
 |  
 |  cummin(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative minimum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      minimum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          Return cumulative minimum of scalar or Series.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.min : Similar functionality
 |          but ignores ``NaN`` values.
 |      Series.min : Return the minimum over
 |          Series axis.
 |      Series.cummax : Return cumulative maximum over Series axis.
 |      Series.cummin : Return cumulative minimum over Series axis.
 |      Series.cumsum : Return cumulative sum over Series axis.
 |      Series.cumprod : Return cumulative product over Series axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cummin()
 |      0    2.0
 |      1    NaN
 |      2    2.0
 |      3   -1.0
 |      4   -1.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cummin(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the minimum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cummin()
 |           A    B
 |      0  2.0  1.0
 |      1  2.0  NaN
 |      2  1.0  0.0
 |      
 |      To iterate over columns and find the minimum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cummin(axis=1)
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |  
 |  cumprod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative product over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      product.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          Return cumulative product of scalar or Series.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.prod : Similar functionality
 |          but ignores ``NaN`` values.
 |      Series.prod : Return the product over
 |          Series axis.
 |      Series.cummax : Return cumulative maximum over Series axis.
 |      Series.cummin : Return cumulative minimum over Series axis.
 |      Series.cumsum : Return cumulative sum over Series axis.
 |      Series.cumprod : Return cumulative product over Series axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cumprod()
 |      0     2.0
 |      1     NaN
 |      2    10.0
 |      3   -10.0
 |      4    -0.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cumprod(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the product
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cumprod()
 |           A    B
 |      0  2.0  1.0
 |      1  6.0  NaN
 |      2  6.0  0.0
 |      
 |      To iterate over columns and find the product in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cumprod(axis=1)
 |           A    B
 |      0  2.0  2.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |  
 |  cumsum(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative sum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      sum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          Return cumulative sum of scalar or Series.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.sum : Similar functionality
 |          but ignores ``NaN`` values.
 |      Series.sum : Return the sum over
 |          Series axis.
 |      Series.cummax : Return cumulative maximum over Series axis.
 |      Series.cummin : Return cumulative minimum over Series axis.
 |      Series.cumsum : Return cumulative sum over Series axis.
 |      Series.cumprod : Return cumulative product over Series axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cumsum()
 |      0    2.0
 |      1    NaN
 |      2    7.0
 |      3    6.0
 |      4    6.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cumsum(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the sum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cumsum()
 |           A    B
 |      0  2.0  1.0
 |      1  5.0  NaN
 |      2  6.0  1.0
 |      
 |      To iterate over columns and find the sum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cumsum(axis=1)
 |           A    B
 |      0  2.0  3.0
 |      1  3.0  NaN
 |      2  1.0  1.0
 |  
 |  diff(self, periods: 'int' = 1) -> 'Series'
 |      First discrete difference of element.
 |      
 |      Calculates the difference of a Series element compared with another
 |      element in the Series (default is element in previous row).
 |      
 |      Parameters
 |      ----------
 |      periods : int, default 1
 |          Periods to shift for calculating difference, accepts negative
 |          values.
 |      
 |      Returns
 |      -------
 |      Series
 |          First differences of the Series.
 |      
 |      See Also
 |      --------
 |      Series.pct_change: Percent change over given number of periods.
 |      Series.shift: Shift index by desired number of periods with an
 |          optional time freq.
 |      DataFrame.diff: First discrete difference of object.
 |      
 |      Notes
 |      -----
 |      For boolean dtypes, this uses :meth:`operator.xor` rather than
 |      :meth:`operator.sub`.
 |      The result is calculated according to current dtype in Series,
 |      however dtype of the result is always float64.
 |      
 |      Examples
 |      --------
 |      
 |      Difference with previous row
 |      
 |      >>> s = pd.Series([1, 1, 2, 3, 5, 8])
 |      >>> s.diff()
 |      0    NaN
 |      1    0.0
 |      2    1.0
 |      3    1.0
 |      4    2.0
 |      5    3.0
 |      dtype: float64
 |      
 |      Difference with 3rd previous row
 |      
 |      >>> s.diff(periods=3)
 |      0    NaN
 |      1    NaN
 |      2    NaN
 |      3    2.0
 |      4    4.0
 |      5    6.0
 |      dtype: float64
 |      
 |      Difference with following row
 |      
 |      >>> s.diff(periods=-1)
 |      0    0.0
 |      1   -1.0
 |      2   -1.0
 |      3   -2.0
 |      4   -3.0
 |      5    NaN
 |      dtype: float64
 |      
 |      Overflow in input dtype
 |      
 |      >>> s = pd.Series([1, 0], dtype=np.uint8)
 |      >>> s.diff()
 |      0      NaN
 |      1    255.0
 |      dtype: float64
 |  
 |  div = truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  divide = truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  divmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Integer division and modulo of series and other, element-wise (binary operator `divmod`).
 |      
 |      Equivalent to ``divmod(series, other)``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      2-Tuple of Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rdivmod : Reverse of the Integer division and modulo operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.divmod(b, fill_value=0)
 |      (a    1.0
 |       b    inf
 |       c    inf
 |       d    0.0
 |       e    NaN
 |       dtype: float64,
 |       a    0.0
 |       b    NaN
 |       c    NaN
 |       d    0.0
 |       e    NaN
 |       dtype: float64)
 |  
 |  dot(self, other: 'AnyArrayLike') -> 'Series | np.ndarray'
 |      Compute the dot product between the Series and the columns of other.
 |      
 |      This method computes the dot product between the Series and another
 |      one, or the Series and each columns of a DataFrame, or the Series and
 |      each columns of an array.
 |      
 |      It can also be called using `self @ other`.
 |      
 |      Parameters
 |      ----------
 |      other : Series, DataFrame or array-like
 |          The other object to compute the dot product with its columns.
 |      
 |      Returns
 |      -------
 |      scalar, Series or numpy.ndarray
 |          Return the dot product of the Series and other if other is a
 |          Series, the Series of the dot product of Series and each rows of
 |          other if other is a DataFrame or a numpy.ndarray between the Series
 |          and each columns of the numpy array.
 |      
 |      See Also
 |      --------
 |      DataFrame.dot: Compute the matrix product with the DataFrame.
 |      Series.mul: Multiplication of series and other, element-wise.
 |      
 |      Notes
 |      -----
 |      The Series and other has to share the same index if other is a Series
 |      or a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([0, 1, 2, 3])
 |      >>> other = pd.Series([-1, 2, -3, 4])
 |      >>> s.dot(other)
 |      8
 |      >>> s @ other
 |      8
 |      >>> df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])
 |      >>> s.dot(df)
 |      0    24
 |      1    14
 |      dtype: int64
 |      >>> arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])
 |      >>> s.dot(arr)
 |      array([24, 14])
 |  
 |  drop(self, labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -> 'Series | None'
 |      Return Series with specified index labels removed.
 |      
 |      Remove elements of a Series based on specifying the index labels.
 |      When using a multi-index, labels on different levels can be removed
 |      by specifying the level.
 |      
 |      Parameters
 |      ----------
 |      labels : single label or list-like
 |          Index labels to drop.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      index : single label or list-like
 |          Redundant for application on Series, but 'index' can be used instead
 |          of 'labels'.
 |      columns : single label or list-like
 |          No change is made to the Series; use 'index' or 'labels' instead.
 |      level : int or level name, optional
 |          For MultiIndex, level for which the labels will be removed.
 |      inplace : bool, default False
 |          If True, do operation inplace and return None.
 |      errors : {'ignore', 'raise'}, default 'raise'
 |          If 'ignore', suppress error and only existing labels are dropped.
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series with specified index labels removed or None if ``inplace=True``.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If none of the labels are found in the index.
 |      
 |      See Also
 |      --------
 |      Series.reindex : Return only specified index labels of Series.
 |      Series.dropna : Return series without null values.
 |      Series.drop_duplicates : Return Series with duplicate values removed.
 |      DataFrame.drop : Drop specified labels from rows or columns.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])
 |      >>> s
 |      A  0
 |      B  1
 |      C  2
 |      dtype: int64
 |      
 |      Drop labels B en C
 |      
 |      >>> s.drop(labels=['B', 'C'])
 |      A  0
 |      dtype: int64
 |      
 |      Drop 2nd level label in MultiIndex Series
 |      
 |      >>> midx = pd.MultiIndex(levels=[['llama', 'cow', 'falcon'],
 |      ...                              ['speed', 'weight', 'length']],
 |      ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],
 |      ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])
 |      >>> s = pd.Series([45, 200, 1.2, 30, 250, 1.5, 320, 1, 0.3],
 |      ...               index=midx)
 |      >>> s
 |      llama   speed      45.0
 |              weight    200.0
 |              length      1.2
 |      cow     speed      30.0
 |              weight    250.0
 |              length      1.5
 |      falcon  speed     320.0
 |              weight      1.0
 |              length      0.3
 |      dtype: float64
 |      
 |      >>> s.drop(labels='weight', level=1)
 |      llama   speed      45.0
 |              length      1.2
 |      cow     speed      30.0
 |              length      1.5
 |      falcon  speed     320.0
 |              length      0.3
 |      dtype: float64
 |  
 |  drop_duplicates(self, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'Series | None'
 |      Return Series with duplicate values removed.
 |      
 |      Parameters
 |      ----------
 |      keep : {'first', 'last', ``False``}, default 'first'
 |          Method to handle dropping duplicates:
 |      
 |          - 'first' : Drop duplicates except for the first occurrence.
 |          - 'last' : Drop duplicates except for the last occurrence.
 |          - ``False`` : Drop all duplicates.
 |      
 |      inplace : bool, default ``False``
 |          If ``True``, performs operation inplace and returns None.
 |      
 |      ignore_index : bool, default ``False``
 |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series with duplicates dropped or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Index.drop_duplicates : Equivalent method on Index.
 |      DataFrame.drop_duplicates : Equivalent method on DataFrame.
 |      Series.duplicated : Related method on Series, indicating duplicate
 |          Series values.
 |      Series.unique : Return unique values as an array.
 |      
 |      Examples
 |      --------
 |      Generate a Series with duplicated entries.
 |      
 |      >>> s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama', 'hippo'],
 |      ...               name='animal')
 |      >>> s
 |      0     llama
 |      1       cow
 |      2     llama
 |      3    beetle
 |      4     llama
 |      5     hippo
 |      Name: animal, dtype: object
 |      
 |      With the 'keep' parameter, the selection behaviour of duplicated values
 |      can be changed. The value 'first' keeps the first occurrence for each
 |      set of duplicated entries. The default value of keep is 'first'.
 |      
 |      >>> s.drop_duplicates()
 |      0     llama
 |      1       cow
 |      3    beetle
 |      5     hippo
 |      Name: animal, dtype: object
 |      
 |      The value 'last' for parameter 'keep' keeps the last occurrence for
 |      each set of duplicated entries.
 |      
 |      >>> s.drop_duplicates(keep='last')
 |      1       cow
 |      3    beetle
 |      4     llama
 |      5     hippo
 |      Name: animal, dtype: object
 |      
 |      The value ``False`` for parameter 'keep' discards all sets of
 |      duplicated entries.
 |      
 |      >>> s.drop_duplicates(keep=False)
 |      1       cow
 |      3    beetle
 |      5     hippo
 |      Name: animal, dtype: object
 |  
 |  dropna(self, *, axis: 'Axis' = 0, inplace: 'bool' = False, how: 'AnyAll | None' = None, ignore_index: 'bool' = False) -> 'Series | None'
 |      Return a new Series with missing values removed.
 |      
 |      See the :ref:`User Guide <missing_data>` for more on which values are
 |      considered missing, and how to work with missing data.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      inplace : bool, default False
 |          If True, do operation inplace and return None.
 |      how : str, optional
 |          Not in use. Kept for compatibility.
 |      ignore_index : bool, default ``False``
 |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series with NA entries dropped from it or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.isna: Indicate missing values.
 |      Series.notna : Indicate existing (non-missing) values.
 |      Series.fillna : Replace missing values.
 |      DataFrame.dropna : Drop rows or columns which contain NA values.
 |      Index.dropna : Drop missing indices.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1., 2., np.nan])
 |      >>> ser
 |      0    1.0
 |      1    2.0
 |      2    NaN
 |      dtype: float64
 |      
 |      Drop NA values from a Series.
 |      
 |      >>> ser.dropna()
 |      0    1.0
 |      1    2.0
 |      dtype: float64
 |      
 |      Empty strings are not considered NA values. ``None`` is considered an
 |      NA value.
 |      
 |      >>> ser = pd.Series([np.nan, 2, pd.NaT, '', None, 'I stay'])
 |      >>> ser
 |      0       NaN
 |      1         2
 |      2       NaT
 |      3
 |      4      None
 |      5    I stay
 |      dtype: object
 |      >>> ser.dropna()
 |      1         2
 |      3
 |      5    I stay
 |      dtype: object
 |  
 |  duplicated(self, keep: 'DropKeep' = 'first') -> 'Series'
 |      Indicate duplicate Series values.
 |      
 |      Duplicated values are indicated as ``True`` values in the resulting
 |      Series. Either all duplicates, all except the first or all except the
 |      last occurrence of duplicates can be indicated.
 |      
 |      Parameters
 |      ----------
 |      keep : {'first', 'last', False}, default 'first'
 |          Method to handle dropping duplicates:
 |      
 |          - 'first' : Mark duplicates as ``True`` except for the first
 |            occurrence.
 |          - 'last' : Mark duplicates as ``True`` except for the last
 |            occurrence.
 |          - ``False`` : Mark all duplicates as ``True``.
 |      
 |      Returns
 |      -------
 |      Series[bool]
 |          Series indicating whether each value has occurred in the
 |          preceding values.
 |      
 |      See Also
 |      --------
 |      Index.duplicated : Equivalent method on pandas.Index.
 |      DataFrame.duplicated : Equivalent method on pandas.DataFrame.
 |      Series.drop_duplicates : Remove duplicate values from Series.
 |      
 |      Examples
 |      --------
 |      By default, for each set of duplicated values, the first occurrence is
 |      set on False and all others on True:
 |      
 |      >>> animals = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama'])
 |      >>> animals.duplicated()
 |      0    False
 |      1    False
 |      2     True
 |      3    False
 |      4     True
 |      dtype: bool
 |      
 |      which is equivalent to
 |      
 |      >>> animals.duplicated(keep='first')
 |      0    False
 |      1    False
 |      2     True
 |      3    False
 |      4     True
 |      dtype: bool
 |      
 |      By using 'last', the last occurrence of each set of duplicated values
 |      is set on False and all others on True:
 |      
 |      >>> animals.duplicated(keep='last')
 |      0     True
 |      1    False
 |      2     True
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      By setting keep on ``False``, all duplicates are True:
 |      
 |      >>> animals.duplicated(keep=False)
 |      0     True
 |      1    False
 |      2     True
 |      3    False
 |      4     True
 |      dtype: bool
 |  
 |  eq(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'
 |      Return Equal to of series and other, element-wise (binary operator `eq`).
 |      
 |      Equivalent to ``series == other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.eq(b, fill_value=0)
 |      a     True
 |      b    False
 |      c    False
 |      d    False
 |      e    False
 |      dtype: bool
 |  
 |  explode(self, ignore_index: 'bool' = False) -> 'Series'
 |      Transform each element of a list-like to a row.
 |      
 |      Parameters
 |      ----------
 |      ignore_index : bool, default False
 |          If True, the resulting index will be labeled 0, 1, …, n - 1.
 |      
 |      Returns
 |      -------
 |      Series
 |          Exploded lists to rows; index will be duplicated for these rows.
 |      
 |      See Also
 |      --------
 |      Series.str.split : Split string values on specified separator.
 |      Series.unstack : Unstack, a.k.a. pivot, Series with MultiIndex
 |          to produce DataFrame.
 |      DataFrame.melt : Unpivot a DataFrame from wide format to long format.
 |      DataFrame.explode : Explode a DataFrame from list-like
 |          columns to long format.
 |      
 |      Notes
 |      -----
 |      This routine will explode list-likes including lists, tuples, sets,
 |      Series, and np.ndarray. The result dtype of the subset rows will
 |      be object. Scalars will be returned unchanged, and empty list-likes will
 |      result in a np.nan for that row. In addition, the ordering of elements in
 |      the output will be non-deterministic when exploding sets.
 |      
 |      Reference :ref:`the user guide <reshaping.explode>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])
 |      >>> s
 |      0    [1, 2, 3]
 |      1          foo
 |      2           []
 |      3       [3, 4]
 |      dtype: object
 |      
 |      >>> s.explode()
 |      0      1
 |      0      2
 |      0      3
 |      1    foo
 |      2    NaN
 |      3      3
 |      3      4
 |      dtype: object
 |  
 |  floordiv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Integer division of series and other, element-wise (binary operator `floordiv`).
 |      
 |      Equivalent to ``series // other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rfloordiv : Reverse of the Integer division operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.floordiv(b, fill_value=0)
 |      a    1.0
 |      b    inf
 |      c    inf
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  ge(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Greater than or equal to of series and other, element-wise (binary operator `ge`).
 |      
 |      Equivalent to ``series >= other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      e    1.0
 |      dtype: float64
 |      >>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])
 |      >>> b
 |      a    0.0
 |      b    1.0
 |      c    2.0
 |      d    NaN
 |      f    1.0
 |      dtype: float64
 |      >>> a.ge(b, fill_value=0)
 |      a     True
 |      b     True
 |      c    False
 |      d    False
 |      e     True
 |      f    False
 |      dtype: bool
 |  
 |  groupby(self, by=None, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = <no_default>, dropna: 'bool' = True) -> 'SeriesGroupBy'
 |      Group Series using a mapper or by a Series of columns.
 |      
 |      A groupby operation involves some combination of splitting the
 |      object, applying a function, and combining the results. This can be
 |      used to group large amounts of data and compute operations on these
 |      groups.
 |      
 |      Parameters
 |      ----------
 |      by : mapping, function, label, pd.Grouper or list of such
 |          Used to determine the groups for the groupby.
 |          If ``by`` is a function, it's called on each value of the object's
 |          index. If a dict or Series is passed, the Series or dict VALUES
 |          will be used to determine the groups (the Series' values are first
 |          aligned; see ``.align()`` method). If a list or ndarray of length
 |          equal to the selected axis is passed (see the `groupby user guide
 |          <https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups>`_),
 |          the values are used as-is to determine the groups. A label or list
 |          of labels may be passed to group by the columns in ``self``.
 |          Notice that a tuple is interpreted as a (single) key.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Split along rows (0) or columns (1). For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              Will be removed and behave like axis=0 in a future version.
 |              For ``axis=1``, do ``frame.T.groupby(...)`` instead.
 |      
 |      level : int, level name, or sequence of such, default None
 |          If the axis is a MultiIndex (hierarchical), group by a particular
 |          level or levels. Do not specify both ``by`` and ``level``.
 |      as_index : bool, default True
 |          Return object with group labels as the
 |          index. Only relevant for DataFrame input. as_index=False is
 |          effectively "SQL-style" grouped output. This argument has no effect
 |          on filtrations (see the `filtrations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),
 |          such as ``head()``, ``tail()``, ``nth()`` and in transformations
 |          (see the `transformations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).
 |      sort : bool, default True
 |          Sort group keys. Get better performance by turning this off.
 |          Note this does not influence the order of observations within each
 |          group. Groupby preserves the order of rows within each group. If False,
 |          the groups will appear in the same order as they did in the original DataFrame.
 |          This argument has no effect on filtrations (see the `filtrations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),
 |          such as ``head()``, ``tail()``, ``nth()`` and in transformations
 |          (see the `transformations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Specifying ``sort=False`` with an ordered categorical grouper will no
 |              longer sort the values.
 |      
 |      group_keys : bool, default True
 |          When calling apply and the ``by`` argument produces a like-indexed
 |          (i.e. :ref:`a transform <groupby.transform>`) result, add group keys to
 |          index to identify pieces. By default group keys are not included
 |          when the result's index (and column) labels match the inputs, and
 |          are included otherwise.
 |      
 |          .. versionchanged:: 1.5.0
 |      
 |             Warns that ``group_keys`` will no longer be ignored when the
 |             result from ``apply`` is a like-indexed Series or DataFrame.
 |             Specify ``group_keys`` explicitly to include the group keys or
 |             not.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |             ``group_keys`` now defaults to ``True``.
 |      
 |      observed : bool, default False
 |          This only applies if any of the groupers are Categoricals.
 |          If True: only show observed values for categorical groupers.
 |          If False: show all values for categorical groupers.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              The default value will change to True in a future version of pandas.
 |      
 |      dropna : bool, default True
 |          If True, and if group keys contain NA values, NA values together
 |          with row/column will be dropped.
 |          If False, NA values will also be treated as the key in groups.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.SeriesGroupBy
 |          Returns a groupby object that contains information about the groups.
 |      
 |      See Also
 |      --------
 |      resample : Convenience method for frequency conversion and resampling
 |          of time series.
 |      
 |      Notes
 |      -----
 |      See the `user guide
 |      <https://pandas.pydata.org/pandas-docs/stable/groupby.html>`__ for more
 |      detailed usage and examples, including splitting an object into groups,
 |      iterating through groups, selecting a group, aggregation, and more.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([390., 350., 30., 20.],
 |      ...                 index=['Falcon', 'Falcon', 'Parrot', 'Parrot'],
 |      ...                 name="Max Speed")
 |      >>> ser
 |      Falcon    390.0
 |      Falcon    350.0
 |      Parrot     30.0
 |      Parrot     20.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(["a", "b", "a", "b"]).mean()
 |      a    210.0
 |      b    185.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(level=0).mean()
 |      Falcon    370.0
 |      Parrot     25.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(ser > 100).mean()
 |      Max Speed
 |      False     25.0
 |      True     370.0
 |      Name: Max Speed, dtype: float64
 |      
 |      **Grouping by Indexes**
 |      
 |      We can groupby different levels of a hierarchical index
 |      using the `level` parameter:
 |      
 |      >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],
 |      ...           ['Captive', 'Wild', 'Captive', 'Wild']]
 |      >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))
 |      >>> ser = pd.Series([390., 350., 30., 20.], index=index, name="Max Speed")
 |      >>> ser
 |      Animal  Type
 |      Falcon  Captive    390.0
 |              Wild       350.0
 |      Parrot  Captive     30.0
 |              Wild        20.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(level=0).mean()
 |      Animal
 |      Falcon    370.0
 |      Parrot     25.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(level="Type").mean()
 |      Type
 |      Captive    210.0
 |      Wild       185.0
 |      Name: Max Speed, dtype: float64
 |      
 |      We can also choose to include `NA` in group keys or not by defining
 |      `dropna` parameter, the default setting is `True`.
 |      
 |      >>> ser = pd.Series([1, 2, 3, 3], index=["a", 'a', 'b', np.nan])
 |      >>> ser.groupby(level=0).sum()
 |      a    3
 |      b    3
 |      dtype: int64
 |      
 |      >>> ser.groupby(level=0, dropna=False).sum()
 |      a    3
 |      b    3
 |      NaN  3
 |      dtype: int64
 |      
 |      >>> arrays = ['Falcon', 'Falcon', 'Parrot', 'Parrot']
 |      >>> ser = pd.Series([390., 350., 30., 20.], index=arrays, name="Max Speed")
 |      >>> ser.groupby(["a", "b", "a", np.nan]).mean()
 |      a    210.0
 |      b    350.0
 |      Name: Max Speed, dtype: float64
 |      
 |      >>> ser.groupby(["a", "b", "a", np.nan], dropna=False).mean()
 |      a    210.0
 |      b    350.0
 |      NaN   20.0
 |      Name: Max Speed, dtype: float64
 |  
 |  gt(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Greater than of series and other, element-wise (binary operator `gt`).
 |      
 |      Equivalent to ``series > other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      e    1.0
 |      dtype: float64
 |      >>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])
 |      >>> b
 |      a    0.0
 |      b    1.0
 |      c    2.0
 |      d    NaN
 |      f    1.0
 |      dtype: float64
 |      >>> a.gt(b, fill_value=0)
 |      a     True
 |      b    False
 |      c    False
 |      d    False
 |      e     True
 |      f    False
 |      dtype: bool
 |  
 |  hist = hist_series(self: 'Series', by=None, ax=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, figsize: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs)
 |      Draw histogram of the input series using matplotlib.
 |      
 |      Parameters
 |      ----------
 |      by : object, optional
 |          If passed, then used to form histograms for separate groups.
 |      ax : matplotlib axis object
 |          If not passed, uses gca().
 |      grid : bool, default True
 |          Whether to show axis grid lines.
 |      xlabelsize : int, default None
 |          If specified changes the x-axis label size.
 |      xrot : float, default None
 |          Rotation of x axis labels.
 |      ylabelsize : int, default None
 |          If specified changes the y-axis label size.
 |      yrot : float, default None
 |          Rotation of y axis labels.
 |      figsize : tuple, default None
 |          Figure size in inches by default.
 |      bins : int or sequence, default 10
 |          Number of histogram bins to be used. If an integer is given, bins + 1
 |          bin edges are calculated and returned. If bins is a sequence, gives
 |          bin edges, including left edge of first bin and right edge of last
 |          bin. In this case, bins is returned unmodified.
 |      backend : str, default None
 |          Backend to use instead of the backend specified in the option
 |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |          specify the ``plotting.backend`` for the whole session, set
 |          ``pd.options.plotting.backend``.
 |      legend : bool, default False
 |          Whether to show the legend.
 |      
 |      **kwargs
 |          To be passed to the actual plotting function.
 |      
 |      Returns
 |      -------
 |      matplotlib.AxesSubplot
 |          A histogram plot.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.hist : Plot a histogram using matplotlib.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> lst = ['a', 'a', 'a', 'b', 'b', 'b']
 |          >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |          >>> hist = ser.hist()
 |      
 |      For Groupby:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> lst = ['a', 'a', 'a', 'b', 'b', 'b']
 |          >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |          >>> hist = ser.groupby(level=0).hist()
 |  
 |  idxmax(self, axis: 'Axis' = 0, skipna: 'bool' = True, *args, **kwargs) -> 'Hashable'
 |      Return the row label of the maximum value.
 |      
 |      If multiple values equal the maximum, the first row label with that
 |      value is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire Series is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional arguments and keywords have no effect but might be
 |          accepted for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Index
 |          Label of the maximum value.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If the Series is empty.
 |      
 |      See Also
 |      --------
 |      numpy.argmax : Return indices of the maximum values
 |          along the given axis.
 |      DataFrame.idxmax : Return index of first occurrence of maximum
 |          over requested axis.
 |      Series.idxmin : Return index *label* of the first occurrence
 |          of minimum of values.
 |      
 |      Notes
 |      -----
 |      This method is the Series version of ``ndarray.argmax``. This method
 |      returns the label of the maximum, while ``ndarray.argmax`` returns
 |      the position. To get the position, use ``series.values.argmax()``.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(data=[1, None, 4, 3, 4],
 |      ...               index=['A', 'B', 'C', 'D', 'E'])
 |      >>> s
 |      A    1.0
 |      B    NaN
 |      C    4.0
 |      D    3.0
 |      E    4.0
 |      dtype: float64
 |      
 |      >>> s.idxmax()
 |      'C'
 |      
 |      If `skipna` is False and there is an NA value in the data,
 |      the function returns ``nan``.
 |      
 |      >>> s.idxmax(skipna=False)
 |      nan
 |  
 |  idxmin(self, axis: 'Axis' = 0, skipna: 'bool' = True, *args, **kwargs) -> 'Hashable'
 |      Return the row label of the minimum value.
 |      
 |      If multiple values equal the minimum, the first row label with that
 |      value is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire Series is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional arguments and keywords have no effect but might be
 |          accepted for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Index
 |          Label of the minimum value.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If the Series is empty.
 |      
 |      See Also
 |      --------
 |      numpy.argmin : Return indices of the minimum values
 |          along the given axis.
 |      DataFrame.idxmin : Return index of first occurrence of minimum
 |          over requested axis.
 |      Series.idxmax : Return index *label* of the first occurrence
 |          of maximum of values.
 |      
 |      Notes
 |      -----
 |      This method is the Series version of ``ndarray.argmin``. This method
 |      returns the label of the minimum, while ``ndarray.argmin`` returns
 |      the position. To get the position, use ``series.values.argmin()``.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(data=[1, None, 4, 1],
 |      ...               index=['A', 'B', 'C', 'D'])
 |      >>> s
 |      A    1.0
 |      B    NaN
 |      C    4.0
 |      D    1.0
 |      dtype: float64
 |      
 |      >>> s.idxmin()
 |      'A'
 |      
 |      If `skipna` is False and there is an NA value in the data,
 |      the function returns ``nan``.
 |      
 |      >>> s.idxmin(skipna=False)
 |      nan
 |  
 |  info(self, verbose: 'bool | None' = None, buf: 'IO[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool' = True) -> 'None'
 |      Print a concise summary of a Series.
 |      
 |      This method prints information about a Series including
 |      the index dtype, non-null values and memory usage.
 |      
 |      .. versionadded:: 1.4.0
 |      
 |      Parameters
 |      ----------
 |      verbose : bool, optional
 |          Whether to print the full summary. By default, the setting in
 |          ``pandas.options.display.max_info_columns`` is followed.
 |      buf : writable buffer, defaults to sys.stdout
 |          Where to send the output. By default, the output is printed to
 |          sys.stdout. Pass a writable buffer if you need to further process
 |          the output.
 |      
 |      memory_usage : bool, str, optional
 |          Specifies whether total memory usage of the Series
 |          elements (including the index) should be displayed. By default,
 |          this follows the ``pandas.options.display.memory_usage`` setting.
 |      
 |          True always show memory usage. False never shows memory usage.
 |          A value of 'deep' is equivalent to "True with deep introspection".
 |          Memory usage is shown in human-readable units (base-2
 |          representation). Without deep introspection a memory estimation is
 |          made based in column dtype and number of rows assuming values
 |          consume the same memory amount for corresponding dtypes. With deep
 |          memory introspection, a real memory usage calculation is performed
 |          at the cost of computational resources. See the
 |          :ref:`Frequently Asked Questions <df-memory-usage>` for more
 |          details.
 |      show_counts : bool, optional
 |          Whether to show the non-null counts. By default, this is shown
 |          only if the DataFrame is smaller than
 |          ``pandas.options.display.max_info_rows`` and
 |          ``pandas.options.display.max_info_columns``. A value of True always
 |          shows the counts, and False never shows the counts.
 |      
 |      Returns
 |      -------
 |      None
 |          This method prints a summary of a Series and returns None.
 |      
 |      See Also
 |      --------
 |      Series.describe: Generate descriptive statistics of Series.
 |      Series.memory_usage: Memory usage of Series.
 |      
 |      Examples
 |      --------
 |      >>> int_values = [1, 2, 3, 4, 5]
 |      >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']
 |      >>> s = pd.Series(text_values, index=int_values)
 |      >>> s.info()
 |      <class 'pandas.core.series.Series'>
 |      Index: 5 entries, 1 to 5
 |      Series name: None
 |      Non-Null Count  Dtype
 |      --------------  -----
 |      5 non-null      object
 |      dtypes: object(1)
 |      memory usage: 80.0+ bytes
 |      
 |      Prints a summary excluding information about its values:
 |      
 |      >>> s.info(verbose=False)
 |      <class 'pandas.core.series.Series'>
 |      Index: 5 entries, 1 to 5
 |      dtypes: object(1)
 |      memory usage: 80.0+ bytes
 |      
 |      Pipe output of Series.info to buffer instead of sys.stdout, get
 |      buffer content and writes to a text file:
 |      
 |      >>> import io
 |      >>> buffer = io.StringIO()
 |      >>> s.info(buf=buffer)
 |      >>> s = buffer.getvalue()
 |      >>> with open("df_info.txt", "w",
 |      ...           encoding="utf-8") as f:  # doctest: +SKIP
 |      ...     f.write(s)
 |      260
 |      
 |      The `memory_usage` parameter allows deep introspection mode, specially
 |      useful for big Series and fine-tune memory optimization:
 |      
 |      >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)
 |      >>> s = pd.Series(np.random.choice(['a', 'b', 'c'], 10 ** 6))
 |      >>> s.info()
 |      <class 'pandas.core.series.Series'>
 |      RangeIndex: 1000000 entries, 0 to 999999
 |      Series name: None
 |      Non-Null Count    Dtype
 |      --------------    -----
 |      1000000 non-null  object
 |      dtypes: object(1)
 |      memory usage: 7.6+ MB
 |      
 |      >>> s.info(memory_usage='deep')
 |      <class 'pandas.core.series.Series'>
 |      RangeIndex: 1000000 entries, 0 to 999999
 |      Series name: None
 |      Non-Null Count    Dtype
 |      --------------    -----
 |      1000000 non-null  object
 |      dtypes: object(1)
 |      memory usage: 55.3 MB
 |  
 |  isin(self, values) -> 'Series'
 |      Whether elements in Series are contained in `values`.
 |      
 |      Return a boolean Series showing whether each element in the Series
 |      matches an element in the passed sequence of `values` exactly.
 |      
 |      Parameters
 |      ----------
 |      values : set or list-like
 |          The sequence of values to test. Passing in a single string will
 |          raise a ``TypeError``. Instead, turn a single string into a
 |          list of one element.
 |      
 |      Returns
 |      -------
 |      Series
 |          Series of booleans indicating if each element is in values.
 |      
 |      Raises
 |      ------
 |      TypeError
 |        * If `values` is a string
 |      
 |      See Also
 |      --------
 |      DataFrame.isin : Equivalent method on DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama',
 |      ...                'hippo'], name='animal')
 |      >>> s.isin(['cow', 'llama'])
 |      0     True
 |      1     True
 |      2     True
 |      3    False
 |      4     True
 |      5    False
 |      Name: animal, dtype: bool
 |      
 |      To invert the boolean values, use the ``~`` operator:
 |      
 |      >>> ~s.isin(['cow', 'llama'])
 |      0    False
 |      1    False
 |      2    False
 |      3     True
 |      4    False
 |      5     True
 |      Name: animal, dtype: bool
 |      
 |      Passing a single string as ``s.isin('llama')`` will raise an error. Use
 |      a list of one element instead:
 |      
 |      >>> s.isin(['llama'])
 |      0     True
 |      1    False
 |      2     True
 |      3    False
 |      4     True
 |      5    False
 |      Name: animal, dtype: bool
 |      
 |      Strings and integers are distinct and are therefore not comparable:
 |      
 |      >>> pd.Series([1]).isin(['1'])
 |      0    False
 |      dtype: bool
 |      >>> pd.Series([1.1]).isin(['1.1'])
 |      0    False
 |      dtype: bool
 |  
 |  isna(self) -> 'Series'
 |      Detect missing values.
 |      
 |      Return a boolean same-sized object indicating if the values are NA.
 |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
 |      values.
 |      Everything else gets mapped to False values. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      
 |      Returns
 |      -------
 |      Series
 |          Mask of bool values for each element in Series that
 |          indicates whether an element is an NA value.
 |      
 |      See Also
 |      --------
 |      Series.isnull : Alias of isna.
 |      Series.notna : Boolean inverse of isna.
 |      Series.dropna : Omit axes labels with missing values.
 |      isna : Top-level isna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.isna()
 |           age   born   name    toy
 |      0  False   True  False   True
 |      1  False  False  False  False
 |      2   True  False  False  False
 |      
 |      Show which entries in a Series are NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.isna()
 |      0    False
 |      1    False
 |      2     True
 |      dtype: bool
 |  
 |  isnull(self) -> 'Series'
 |      Series.isnull is an alias for Series.isna.
 |      
 |      Detect missing values.
 |      
 |      Return a boolean same-sized object indicating if the values are NA.
 |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
 |      values.
 |      Everything else gets mapped to False values. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      
 |      Returns
 |      -------
 |      Series
 |          Mask of bool values for each element in Series that
 |          indicates whether an element is an NA value.
 |      
 |      See Also
 |      --------
 |      Series.isnull : Alias of isna.
 |      Series.notna : Boolean inverse of isna.
 |      Series.dropna : Omit axes labels with missing values.
 |      isna : Top-level isna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.isna()
 |           age   born   name    toy
 |      0  False   True  False   True
 |      1  False  False  False  False
 |      2   True  False  False  False
 |      
 |      Show which entries in a Series are NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.isna()
 |      0    False
 |      1    False
 |      2     True
 |      dtype: bool
 |  
 |  items(self) -> 'Iterable[tuple[Hashable, Any]]'
 |      Lazily iterate over (index, value) tuples.
 |      
 |      This method returns an iterable tuple (index, value). This is
 |      convenient if you want to create a lazy iterator.
 |      
 |      Returns
 |      -------
 |      iterable
 |          Iterable of tuples containing the (index, value) pairs from a
 |          Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.items : Iterate over (column name, Series) pairs.
 |      DataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['A', 'B', 'C'])
 |      >>> for index, value in s.items():
 |      ...     print(f"Index : {index}, Value : {value}")
 |      Index : 0, Value : A
 |      Index : 1, Value : B
 |      Index : 2, Value : C
 |  
 |  keys(self) -> 'Index'
 |      Return alias for index.
 |      
 |      Returns
 |      -------
 |      Index
 |          Index of the Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3], index=[0, 1, 2])
 |      >>> s.keys()
 |      Index([0, 1, 2], dtype='int64')
 |  
 |  kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased kurtosis over requested axis.
 |      
 |      Kurtosis obtained using Fisher's definition of
 |      kurtosis (kurtosis of normal == 0.0). Normalized by N-1.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])
 |                  >>> s
 |                  cat    1
 |                  dog    2
 |                  dog    2
 |                  mouse  3
 |                  dtype: int64
 |                  >>> s.kurt()
 |                  1.5
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},
 |                  ...                   index=['cat', 'dog', 'dog', 'mouse'])
 |                  >>> df
 |                         a   b
 |                    cat  1   3
 |                    dog  2   4
 |                    dog  2   4
 |                  mouse  3   4
 |                  >>> df.kurt()
 |                  a   1.5
 |                  b   4.0
 |                  dtype: float64
 |      
 |                  With axis=None
 |      
 |                  >>> df.kurt(axis=None).round(6)
 |                  -0.988693
 |      
 |                  Using axis=1
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},
 |                  ...                   index=['cat', 'dog'])
 |                  >>> df.kurt(axis=1)
 |                  cat   -6.0
 |                  dog   -6.0
 |                  dtype: float64
 |  
 |  kurtosis = kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |  
 |  le(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Less than or equal to of series and other, element-wise (binary operator `le`).
 |      
 |      Equivalent to ``series <= other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      e    1.0
 |      dtype: float64
 |      >>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])
 |      >>> b
 |      a    0.0
 |      b    1.0
 |      c    2.0
 |      d    NaN
 |      f    1.0
 |      dtype: float64
 |      >>> a.le(b, fill_value=0)
 |      a    False
 |      b     True
 |      c     True
 |      d    False
 |      e    False
 |      f     True
 |      dtype: bool
 |  
 |  lt(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Less than of series and other, element-wise (binary operator `lt`).
 |      
 |      Equivalent to ``series < other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      e    1.0
 |      dtype: float64
 |      >>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])
 |      >>> b
 |      a    0.0
 |      b    1.0
 |      c    2.0
 |      d    NaN
 |      f    1.0
 |      dtype: float64
 |      >>> a.lt(b, fill_value=0)
 |      a    False
 |      b    False
 |      c     True
 |      d    False
 |      e    False
 |      f     True
 |      dtype: bool
 |  
 |  map(self, arg: 'Callable | Mapping | Series', na_action: "Literal['ignore'] | None" = None) -> 'Series'
 |      Map values of Series according to an input mapping or function.
 |      
 |      Used for substituting each value in a Series with another value,
 |      that may be derived from a function, a ``dict`` or
 |      a :class:`Series`.
 |      
 |      Parameters
 |      ----------
 |      arg : function, collections.abc.Mapping subclass or Series
 |          Mapping correspondence.
 |      na_action : {None, 'ignore'}, default None
 |          If 'ignore', propagate NaN values, without passing them to the
 |          mapping correspondence.
 |      
 |      Returns
 |      -------
 |      Series
 |          Same index as caller.
 |      
 |      See Also
 |      --------
 |      Series.apply : For applying more complex functions on a Series.
 |      Series.replace: Replace values given in `to_replace` with `value`.
 |      DataFrame.apply : Apply a function row-/column-wise.
 |      DataFrame.map : Apply a function elementwise on a whole DataFrame.
 |      
 |      Notes
 |      -----
 |      When ``arg`` is a dictionary, values in Series that are not in the
 |      dictionary (as keys) are converted to ``NaN``. However, if the
 |      dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.
 |      provides a method for default values), then this default is used
 |      rather than ``NaN``.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])
 |      >>> s
 |      0      cat
 |      1      dog
 |      2      NaN
 |      3   rabbit
 |      dtype: object
 |      
 |      ``map`` accepts a ``dict`` or a ``Series``. Values that are not found
 |      in the ``dict`` are converted to ``NaN``, unless the dict has a default
 |      value (e.g. ``defaultdict``):
 |      
 |      >>> s.map({'cat': 'kitten', 'dog': 'puppy'})
 |      0   kitten
 |      1    puppy
 |      2      NaN
 |      3      NaN
 |      dtype: object
 |      
 |      It also accepts a function:
 |      
 |      >>> s.map('I am a {}'.format)
 |      0       I am a cat
 |      1       I am a dog
 |      2       I am a nan
 |      3    I am a rabbit
 |      dtype: object
 |      
 |      To avoid applying the function to missing values (and keep them as
 |      ``NaN``) ``na_action='ignore'`` can be used:
 |      
 |      >>> s.map('I am a {}'.format, na_action='ignore')
 |      0     I am a cat
 |      1     I am a dog
 |      2            NaN
 |      3  I am a rabbit
 |      dtype: object
 |  
 |  max(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the maximum of the values over the requested axis.
 |      
 |      If you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.max()
 |      8
 |  
 |  mean(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the mean of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.mean()
 |                  2.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.mean()
 |                  a   1.5
 |                  b   2.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.mean(axis=1)
 |                  tiger   1.5
 |                  zebra   2.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True` to avoid
 |                  getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.mean(numeric_only=True)
 |                  a   1.5
 |                  dtype: float64
 |  
 |  median(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the median of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.median()
 |                  2.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.median()
 |                  a   1.5
 |                  b   2.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.median(axis=1)
 |                  tiger   1.5
 |                  zebra   2.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True`
 |                  to avoid getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.median(numeric_only=True)
 |                  a   1.5
 |                  dtype: float64
 |  
 |  memory_usage(self, index: 'bool' = True, deep: 'bool' = False) -> 'int'
 |      Return the memory usage of the Series.
 |      
 |      The memory usage can optionally include the contribution of
 |      the index and of elements of `object` dtype.
 |      
 |      Parameters
 |      ----------
 |      index : bool, default True
 |          Specifies whether to include the memory usage of the Series index.
 |      deep : bool, default False
 |          If True, introspect the data deeply by interrogating
 |          `object` dtypes for system-level memory consumption, and include
 |          it in the returned value.
 |      
 |      Returns
 |      -------
 |      int
 |          Bytes of memory consumed.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.nbytes : Total bytes consumed by the elements of the
 |          array.
 |      DataFrame.memory_usage : Bytes consumed by a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(range(3))
 |      >>> s.memory_usage()
 |      152
 |      
 |      Not including the index gives the size of the rest of the data, which
 |      is necessarily smaller:
 |      
 |      >>> s.memory_usage(index=False)
 |      24
 |      
 |      The memory footprint of `object` values is ignored by default:
 |      
 |      >>> s = pd.Series(["a", "b"])
 |      >>> s.values
 |      array(['a', 'b'], dtype=object)
 |      >>> s.memory_usage()
 |      144
 |      >>> s.memory_usage(deep=True)
 |      244
 |  
 |  min(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the minimum of the values over the requested axis.
 |      
 |      If you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.min()
 |      0
 |  
 |  mod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Modulo of series and other, element-wise (binary operator `mod`).
 |      
 |      Equivalent to ``series % other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rmod : Reverse of the Modulo operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.mod(b, fill_value=0)
 |      a    0.0
 |      b    NaN
 |      c    NaN
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  mode(self, dropna: 'bool' = True) -> 'Series'
 |      Return the mode(s) of the Series.
 |      
 |      The mode is the value that appears most often. There can be multiple modes.
 |      
 |      Always returns Series even if only one value is returned.
 |      
 |      Parameters
 |      ----------
 |      dropna : bool, default True
 |          Don't consider counts of NaN/NaT.
 |      
 |      Returns
 |      -------
 |      Series
 |          Modes of the Series in sorted order.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([2, 4, 2, 2, 4, None])
 |      >>> s.mode()
 |      0    2.0
 |      dtype: float64
 |      
 |      More than one mode:
 |      
 |      >>> s = pd.Series([2, 4, 8, 2, 4, None])
 |      >>> s.mode()
 |      0    2.0
 |      1    4.0
 |      dtype: float64
 |      
 |      With and without considering null value:
 |      
 |      >>> s = pd.Series([2, 4, None, None, 4, None])
 |      >>> s.mode(dropna=False)
 |      0   NaN
 |      dtype: float64
 |      >>> s = pd.Series([2, 4, None, None, 4, None])
 |      >>> s.mode()
 |      0    4.0
 |      dtype: float64
 |  
 |  mul(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'
 |      Return Multiplication of series and other, element-wise (binary operator `mul`).
 |      
 |      Equivalent to ``series * other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rmul : Reverse of the Multiplication operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.multiply(b, fill_value=0)
 |      a    1.0
 |      b    0.0
 |      c    0.0
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  multiply = mul(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  ne(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Not equal to of series and other, element-wise (binary operator `ne`).
 |      
 |      Equivalent to ``series != other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.ne(b, fill_value=0)
 |      a    False
 |      b     True
 |      c     True
 |      d     True
 |      e     True
 |      dtype: bool
 |  
 |  nlargest(self, n: 'int' = 5, keep: "Literal['first', 'last', 'all']" = 'first') -> 'Series'
 |      Return the largest `n` elements.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Return this many descending sorted values.
 |      keep : {'first', 'last', 'all'}, default 'first'
 |          When there are duplicate values that cannot all fit in a
 |          Series of `n` elements:
 |      
 |          - ``first`` : return the first `n` occurrences in order
 |            of appearance.
 |          - ``last`` : return the last `n` occurrences in reverse
 |            order of appearance.
 |          - ``all`` : keep all occurrences. This can result in a Series of
 |            size larger than `n`.
 |      
 |      Returns
 |      -------
 |      Series
 |          The `n` largest values in the Series, sorted in decreasing order.
 |      
 |      See Also
 |      --------
 |      Series.nsmallest: Get the `n` smallest elements.
 |      Series.sort_values: Sort Series by values.
 |      Series.head: Return the first `n` rows.
 |      
 |      Notes
 |      -----
 |      Faster than ``.sort_values(ascending=False).head(n)`` for small `n`
 |      relative to the size of the ``Series`` object.
 |      
 |      Examples
 |      --------
 |      >>> countries_population = {"Italy": 59000000, "France": 65000000,
 |      ...                         "Malta": 434000, "Maldives": 434000,
 |      ...                         "Brunei": 434000, "Iceland": 337000,
 |      ...                         "Nauru": 11300, "Tuvalu": 11300,
 |      ...                         "Anguilla": 11300, "Montserrat": 5200}
 |      >>> s = pd.Series(countries_population)
 |      >>> s
 |      Italy       59000000
 |      France      65000000
 |      Malta         434000
 |      Maldives      434000
 |      Brunei        434000
 |      Iceland       337000
 |      Nauru          11300
 |      Tuvalu         11300
 |      Anguilla       11300
 |      Montserrat      5200
 |      dtype: int64
 |      
 |      The `n` largest elements where ``n=5`` by default.
 |      
 |      >>> s.nlargest()
 |      France      65000000
 |      Italy       59000000
 |      Malta         434000
 |      Maldives      434000
 |      Brunei        434000
 |      dtype: int64
 |      
 |      The `n` largest elements where ``n=3``. Default `keep` value is 'first'
 |      so Malta will be kept.
 |      
 |      >>> s.nlargest(3)
 |      France    65000000
 |      Italy     59000000
 |      Malta       434000
 |      dtype: int64
 |      
 |      The `n` largest elements where ``n=3`` and keeping the last duplicates.
 |      Brunei will be kept since it is the last with value 434000 based on
 |      the index order.
 |      
 |      >>> s.nlargest(3, keep='last')
 |      France      65000000
 |      Italy       59000000
 |      Brunei        434000
 |      dtype: int64
 |      
 |      The `n` largest elements where ``n=3`` with all duplicates kept. Note
 |      that the returned Series has five elements due to the three duplicates.
 |      
 |      >>> s.nlargest(3, keep='all')
 |      France      65000000
 |      Italy       59000000
 |      Malta         434000
 |      Maldives      434000
 |      Brunei        434000
 |      dtype: int64
 |  
 |  notna(self) -> 'Series'
 |      Detect existing (non-missing) values.
 |      
 |      Return a boolean same-sized object indicating if the values are not NA.
 |      Non-missing values get mapped to True. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False
 |      values.
 |      
 |      Returns
 |      -------
 |      Series
 |          Mask of bool values for each element in Series that
 |          indicates whether an element is not an NA value.
 |      
 |      See Also
 |      --------
 |      Series.notnull : Alias of notna.
 |      Series.isna : Boolean inverse of notna.
 |      Series.dropna : Omit axes labels with missing values.
 |      notna : Top-level notna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are not NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.notna()
 |           age   born  name    toy
 |      0   True  False  True  False
 |      1   True   True  True   True
 |      2  False   True  True   True
 |      
 |      Show which entries in a Series are not NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.notna()
 |      0     True
 |      1     True
 |      2    False
 |      dtype: bool
 |  
 |  notnull(self) -> 'Series'
 |      Series.notnull is an alias for Series.notna.
 |      
 |      Detect existing (non-missing) values.
 |      
 |      Return a boolean same-sized object indicating if the values are not NA.
 |      Non-missing values get mapped to True. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False
 |      values.
 |      
 |      Returns
 |      -------
 |      Series
 |          Mask of bool values for each element in Series that
 |          indicates whether an element is not an NA value.
 |      
 |      See Also
 |      --------
 |      Series.notnull : Alias of notna.
 |      Series.isna : Boolean inverse of notna.
 |      Series.dropna : Omit axes labels with missing values.
 |      notna : Top-level notna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are not NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.notna()
 |           age   born  name    toy
 |      0   True  False  True  False
 |      1   True   True  True   True
 |      2  False   True  True   True
 |      
 |      Show which entries in a Series are not NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.notna()
 |      0     True
 |      1     True
 |      2    False
 |      dtype: bool
 |  
 |  nsmallest(self, n: 'int' = 5, keep: "Literal['first', 'last', 'all']" = 'first') -> 'Series'
 |      Return the smallest `n` elements.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Return this many ascending sorted values.
 |      keep : {'first', 'last', 'all'}, default 'first'
 |          When there are duplicate values that cannot all fit in a
 |          Series of `n` elements:
 |      
 |          - ``first`` : return the first `n` occurrences in order
 |            of appearance.
 |          - ``last`` : return the last `n` occurrences in reverse
 |            order of appearance.
 |          - ``all`` : keep all occurrences. This can result in a Series of
 |            size larger than `n`.
 |      
 |      Returns
 |      -------
 |      Series
 |          The `n` smallest values in the Series, sorted in increasing order.
 |      
 |      See Also
 |      --------
 |      Series.nlargest: Get the `n` largest elements.
 |      Series.sort_values: Sort Series by values.
 |      Series.head: Return the first `n` rows.
 |      
 |      Notes
 |      -----
 |      Faster than ``.sort_values().head(n)`` for small `n` relative to
 |      the size of the ``Series`` object.
 |      
 |      Examples
 |      --------
 |      >>> countries_population = {"Italy": 59000000, "France": 65000000,
 |      ...                         "Brunei": 434000, "Malta": 434000,
 |      ...                         "Maldives": 434000, "Iceland": 337000,
 |      ...                         "Nauru": 11300, "Tuvalu": 11300,
 |      ...                         "Anguilla": 11300, "Montserrat": 5200}
 |      >>> s = pd.Series(countries_population)
 |      >>> s
 |      Italy       59000000
 |      France      65000000
 |      Brunei        434000
 |      Malta         434000
 |      Maldives      434000
 |      Iceland       337000
 |      Nauru          11300
 |      Tuvalu         11300
 |      Anguilla       11300
 |      Montserrat      5200
 |      dtype: int64
 |      
 |      The `n` smallest elements where ``n=5`` by default.
 |      
 |      >>> s.nsmallest()
 |      Montserrat    5200
 |      Nauru        11300
 |      Tuvalu       11300
 |      Anguilla     11300
 |      Iceland     337000
 |      dtype: int64
 |      
 |      The `n` smallest elements where ``n=3``. Default `keep` value is
 |      'first' so Nauru and Tuvalu will be kept.
 |      
 |      >>> s.nsmallest(3)
 |      Montserrat   5200
 |      Nauru       11300
 |      Tuvalu      11300
 |      dtype: int64
 |      
 |      The `n` smallest elements where ``n=3`` and keeping the last
 |      duplicates. Anguilla and Tuvalu will be kept since they are the last
 |      with value 11300 based on the index order.
 |      
 |      >>> s.nsmallest(3, keep='last')
 |      Montserrat   5200
 |      Anguilla    11300
 |      Tuvalu      11300
 |      dtype: int64
 |      
 |      The `n` smallest elements where ``n=3`` with all duplicates kept. Note
 |      that the returned Series has four elements due to the three duplicates.
 |      
 |      >>> s.nsmallest(3, keep='all')
 |      Montserrat   5200
 |      Nauru       11300
 |      Tuvalu      11300
 |      Anguilla    11300
 |      dtype: int64
 |  
 |  pop(self, item: 'Hashable') -> 'Any'
 |      Return item and drops from series. Raise KeyError if not found.
 |      
 |      Parameters
 |      ----------
 |      item : label
 |          Index of the element that needs to be removed.
 |      
 |      Returns
 |      -------
 |      Value that is popped from series.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3])
 |      
 |      >>> ser.pop(0)
 |      1
 |      
 |      >>> ser
 |      1    2
 |      2    3
 |      dtype: int64
 |  
 |  pow(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Exponential power of series and other, element-wise (binary operator `pow`).
 |      
 |      Equivalent to ``series ** other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rpow : Reverse of the Exponential power operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.pow(b, fill_value=0)
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  prod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |      Return the product of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.prod with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      min_count : int, default 0
 |          The required number of valid values to perform the operation. If fewer than
 |          ``min_count`` non-NA values are present the result will be NA.
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      By default, the product of an empty or all-NA Series is ``1``
 |      
 |      >>> pd.Series([], dtype="float64").prod()
 |      1.0
 |      
 |      This can be controlled with the ``min_count`` parameter
 |      
 |      >>> pd.Series([], dtype="float64").prod(min_count=1)
 |      nan
 |      
 |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
 |      empty series identically.
 |      
 |      >>> pd.Series([np.nan]).prod()
 |      1.0
 |      
 |      >>> pd.Series([np.nan]).prod(min_count=1)
 |      nan
 |  
 |  product = prod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |  
 |  quantile(self, q: 'float | Sequence[float] | AnyArrayLike' = 0.5, interpolation: 'QuantileInterpolation' = 'linear') -> 'float | Series'
 |      Return value at the given quantile.
 |      
 |      Parameters
 |      ----------
 |      q : float or array-like, default 0.5 (50% quantile)
 |          The quantile(s) to compute, which can lie in range: 0 <= q <= 1.
 |      interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
 |          This optional parameter specifies the interpolation method to use,
 |          when the desired quantile lies between two data points `i` and `j`:
 |      
 |              * linear: `i + (j - i) * (x-i)/(j-i)`, where `(x-i)/(j-i)` is
 |                the fractional part of the index surrounded by `i > j`.
 |              * lower: `i`.
 |              * higher: `j`.
 |              * nearest: `i` or `j` whichever is nearest.
 |              * midpoint: (`i` + `j`) / 2.
 |      
 |      Returns
 |      -------
 |      float or Series
 |          If ``q`` is an array, a Series will be returned where the
 |          index is ``q`` and the values are the quantiles, otherwise
 |          a float will be returned.
 |      
 |      See Also
 |      --------
 |      core.window.Rolling.quantile : Calculate the rolling quantile.
 |      numpy.percentile : Returns the q-th percentile(s) of the array elements.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s.quantile(.5)
 |      2.5
 |      >>> s.quantile([.25, .5, .75])
 |      0.25    1.75
 |      0.50    2.50
 |      0.75    3.25
 |      dtype: float64
 |  
 |  radd(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Addition of series and other, element-wise (binary operator `radd`).
 |      
 |      Equivalent to ``other + series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.add : Element-wise Addition, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.add(b, fill_value=0)
 |      a    2.0
 |      b    1.0
 |      c    1.0
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  ravel(self, order: 'str' = 'C') -> 'ArrayLike'
 |      Return the flattened underlying data as an ndarray or ExtensionArray.
 |      
 |      .. deprecated:: 2.2.0
 |          Series.ravel is deprecated. The underlying array is already 1D, so
 |          ravel is not necessary.  Use :meth:`to_numpy` for conversion to a numpy
 |          array instead.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray or ExtensionArray
 |          Flattened data of the Series.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.ravel : Return a flattened array.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.ravel()  # doctest: +SKIP
 |      array([1, 2, 3])
 |  
 |  rdiv = rtruediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  rdivmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Integer division and modulo of series and other, element-wise (binary operator `rdivmod`).
 |      
 |      Equivalent to ``other divmod series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      2-Tuple of Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.divmod : Element-wise Integer division and modulo, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.divmod(b, fill_value=0)
 |      (a    1.0
 |       b    inf
 |       c    inf
 |       d    0.0
 |       e    NaN
 |       dtype: float64,
 |       a    0.0
 |       b    NaN
 |       c    NaN
 |       d    0.0
 |       e    NaN
 |       dtype: float64)
 |  
 |  reindex(self, index=None, *, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Series'
 |      Conform Series to new index with optional filling logic.
 |      
 |      Places NA/NaN in locations having no value in the previous index. A new object
 |      is produced unless the new index is equivalent to the current one and
 |      ``copy=False``.
 |      
 |      Parameters
 |      ----------
 |      
 |      index : array-like, optional
 |          New labels for the index. Preferably an Index object to avoid
 |          duplicating data.
 |      axis : int or str, optional
 |          Unused.
 |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}
 |          Method to use for filling holes in reindexed DataFrame.
 |          Please note: this is only applicable to DataFrames/Series with a
 |          monotonically increasing/decreasing index.
 |      
 |          * None (default): don't fill gaps
 |          * pad / ffill: Propagate last valid observation forward to next
 |            valid.
 |          * backfill / bfill: Use next valid observation to fill gap.
 |          * nearest: Use nearest valid observations to fill gap.
 |      
 |      copy : bool, default True
 |          Return a new object, even if the passed indexes are the same.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : scalar, default np.nan
 |          Value to use for missing values. Defaults to NaN, but can be any
 |          "compatible" value.
 |      limit : int, default None
 |          Maximum number of consecutive elements to forward or backward fill.
 |      tolerance : optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations most
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      Series with changed index.
 |      
 |      See Also
 |      --------
 |      DataFrame.set_index : Set row labels.
 |      DataFrame.reset_index : Remove row labels or move them to new columns.
 |      DataFrame.reindex_like : Change to same indices as other DataFrame.
 |      
 |      Examples
 |      --------
 |      ``DataFrame.reindex`` supports two calling conventions
 |      
 |      * ``(index=index_labels, columns=column_labels, ...)``
 |      * ``(labels, axis={'index', 'columns'}, ...)``
 |      
 |      We *highly* recommend using keyword arguments to clarify your
 |      intent.
 |      
 |      Create a dataframe with some fictional data.
 |      
 |      >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']
 |      >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],
 |      ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},
 |      ...                   index=index)
 |      >>> df
 |                 http_status  response_time
 |      Firefox            200           0.04
 |      Chrome             200           0.02
 |      Safari             404           0.07
 |      IE10               404           0.08
 |      Konqueror          301           1.00
 |      
 |      Create a new index and reindex the dataframe. By default
 |      values in the new index that do not have corresponding
 |      records in the dataframe are assigned ``NaN``.
 |      
 |      >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',
 |      ...              'Chrome']
 |      >>> df.reindex(new_index)
 |                     http_status  response_time
 |      Safari               404.0           0.07
 |      Iceweasel              NaN            NaN
 |      Comodo Dragon          NaN            NaN
 |      IE10                 404.0           0.08
 |      Chrome               200.0           0.02
 |      
 |      We can fill in the missing values by passing a value to
 |      the keyword ``fill_value``. Because the index is not monotonically
 |      increasing or decreasing, we cannot use arguments to the keyword
 |      ``method`` to fill the ``NaN`` values.
 |      
 |      >>> df.reindex(new_index, fill_value=0)
 |                     http_status  response_time
 |      Safari                 404           0.07
 |      Iceweasel                0           0.00
 |      Comodo Dragon            0           0.00
 |      IE10                   404           0.08
 |      Chrome                 200           0.02
 |      
 |      >>> df.reindex(new_index, fill_value='missing')
 |                    http_status response_time
 |      Safari                404          0.07
 |      Iceweasel         missing       missing
 |      Comodo Dragon     missing       missing
 |      IE10                  404          0.08
 |      Chrome                200          0.02
 |      
 |      We can also reindex the columns.
 |      
 |      >>> df.reindex(columns=['http_status', 'user_agent'])
 |                 http_status  user_agent
 |      Firefox            200         NaN
 |      Chrome             200         NaN
 |      Safari             404         NaN
 |      IE10               404         NaN
 |      Konqueror          301         NaN
 |      
 |      Or we can use "axis-style" keyword arguments
 |      
 |      >>> df.reindex(['http_status', 'user_agent'], axis="columns")
 |                 http_status  user_agent
 |      Firefox            200         NaN
 |      Chrome             200         NaN
 |      Safari             404         NaN
 |      IE10               404         NaN
 |      Konqueror          301         NaN
 |      
 |      To further illustrate the filling functionality in
 |      ``reindex``, we will create a dataframe with a
 |      monotonically increasing index (for example, a sequence
 |      of dates).
 |      
 |      >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')
 |      >>> df2 = pd.DataFrame({"prices": [100, 101, np.nan, 100, 89, 88]},
 |      ...                    index=date_index)
 |      >>> df2
 |                  prices
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      
 |      Suppose we decide to expand the dataframe to cover a wider
 |      date range.
 |      
 |      >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')
 |      >>> df2.reindex(date_index2)
 |                  prices
 |      2009-12-29     NaN
 |      2009-12-30     NaN
 |      2009-12-31     NaN
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      2010-01-07     NaN
 |      
 |      The index entries that did not have a value in the original data frame
 |      (for example, '2009-12-29') are by default filled with ``NaN``.
 |      If desired, we can fill in the missing values using one of several
 |      options.
 |      
 |      For example, to back-propagate the last valid value to fill the ``NaN``
 |      values, pass ``bfill`` as an argument to the ``method`` keyword.
 |      
 |      >>> df2.reindex(date_index2, method='bfill')
 |                  prices
 |      2009-12-29   100.0
 |      2009-12-30   100.0
 |      2009-12-31   100.0
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      2010-01-07     NaN
 |      
 |      Please note that the ``NaN`` value present in the original dataframe
 |      (at index value 2010-01-03) will not be filled by any of the
 |      value propagation schemes. This is because filling while reindexing
 |      does not look at dataframe values, but only compares the original and
 |      desired indexes. If you do want to fill in the ``NaN`` values present
 |      in the original dataframe, use the ``fillna()`` method.
 |      
 |      See the :ref:`user guide <basics.reindexing>` for more.
 |  
 |  rename(self, index: 'Renamer | Hashable | None' = None, *, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -> 'Series | None'
 |      Alter Series index labels or name.
 |      
 |      Function / dict values must be unique (1-to-1). Labels not contained in
 |      a dict / Series will be left as-is. Extra labels listed don't throw an
 |      error.
 |      
 |      Alternatively, change ``Series.name`` with a scalar value.
 |      
 |      See the :ref:`user guide <basics.rename>` for more.
 |      
 |      Parameters
 |      ----------
 |      index : scalar, hashable sequence, dict-like or function optional
 |          Functions or dict-like are transformations to apply to
 |          the index.
 |          Scalar or hashable sequence-like will alter the ``Series.name``
 |          attribute.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      copy : bool, default True
 |          Also copy underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      inplace : bool, default False
 |          Whether to return a new Series. If True the value of copy is ignored.
 |      level : int or level name, default None
 |          In case of MultiIndex, only rename labels in the specified level.
 |      errors : {'ignore', 'raise'}, default 'ignore'
 |          If 'raise', raise `KeyError` when a `dict-like mapper` or
 |          `index` contains labels that are not present in the index being transformed.
 |          If 'ignore', existing keys will be renamed and extra keys will be ignored.
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series with index labels or name altered or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.rename : Corresponding DataFrame method.
 |      Series.rename_axis : Set the name of the axis.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      dtype: int64
 |      >>> s.rename("my_name")  # scalar, changes Series.name
 |      0    1
 |      1    2
 |      2    3
 |      Name: my_name, dtype: int64
 |      >>> s.rename(lambda x: x ** 2)  # function, changes labels
 |      0    1
 |      1    2
 |      4    3
 |      dtype: int64
 |      >>> s.rename({1: 3, 2: 5})  # mapping, changes labels
 |      0    1
 |      3    2
 |      5    3
 |      dtype: int64
 |  
 |  rename_axis(self, mapper: 'IndexLabel | lib.NoDefault' = <no_default>, *, index=<no_default>, axis: 'Axis' = 0, copy: 'bool' = True, inplace: 'bool' = False) -> 'Self | None'
 |      Set the name of the axis for the index or columns.
 |      
 |      Parameters
 |      ----------
 |      mapper : scalar, list-like, optional
 |          Value to set the axis name attribute.
 |      index, columns : scalar, list-like, dict-like or function, optional
 |          A scalar, list-like, dict-like or functions transformations to
 |          apply to that axis' values.
 |          Note that the ``columns`` parameter is not allowed if the
 |          object is a Series. This parameter only apply for DataFrame
 |          type objects.
 |      
 |          Use either ``mapper`` and ``axis`` to
 |          specify the axis to target with ``mapper``, or ``index``
 |          and/or ``columns``.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to rename. For `Series` this parameter is unused and defaults to 0.
 |      copy : bool, default None
 |          Also copy underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      inplace : bool, default False
 |          Modifies the object directly, instead of creating a new Series
 |          or DataFrame.
 |      
 |      Returns
 |      -------
 |      Series, DataFrame, or None
 |          The same type as the caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.rename : Alter Series index labels or name.
 |      DataFrame.rename : Alter DataFrame index labels or name.
 |      Index.rename : Set new names on index.
 |      
 |      Notes
 |      -----
 |      ``DataFrame.rename_axis`` supports two calling conventions
 |      
 |      * ``(index=index_mapper, columns=columns_mapper, ...)``
 |      * ``(mapper, axis={'index', 'columns'}, ...)``
 |      
 |      The first calling convention will only modify the names of
 |      the index and/or the names of the Index object that is the columns.
 |      In this case, the parameter ``copy`` is ignored.
 |      
 |      The second calling convention will modify the names of the
 |      corresponding index if mapper is a list or a scalar.
 |      However, if mapper is dict-like or a function, it will use the
 |      deprecated behavior of modifying the axis *labels*.
 |      
 |      We *highly* recommend using keyword arguments to clarify your
 |      intent.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series(["dog", "cat", "monkey"])
 |      >>> s
 |      0       dog
 |      1       cat
 |      2    monkey
 |      dtype: object
 |      >>> s.rename_axis("animal")
 |      animal
 |      0    dog
 |      1    cat
 |      2    monkey
 |      dtype: object
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame({"num_legs": [4, 4, 2],
 |      ...                    "num_arms": [0, 0, 2]},
 |      ...                   ["dog", "cat", "monkey"])
 |      >>> df
 |              num_legs  num_arms
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      >>> df = df.rename_axis("animal")
 |      >>> df
 |              num_legs  num_arms
 |      animal
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      >>> df = df.rename_axis("limbs", axis="columns")
 |      >>> df
 |      limbs   num_legs  num_arms
 |      animal
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      
 |      **MultiIndex**
 |      
 |      >>> df.index = pd.MultiIndex.from_product([['mammal'],
 |      ...                                        ['dog', 'cat', 'monkey']],
 |      ...                                       names=['type', 'name'])
 |      >>> df
 |      limbs          num_legs  num_arms
 |      type   name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |      
 |      >>> df.rename_axis(index={'type': 'class'})
 |      limbs          num_legs  num_arms
 |      class  name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |      
 |      >>> df.rename_axis(columns=str.upper)
 |      LIMBS          num_legs  num_arms
 |      type   name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |  
 |  reorder_levels(self, order: 'Sequence[Level]') -> 'Series'
 |      Rearrange index levels using input order.
 |      
 |      May not drop or duplicate levels.
 |      
 |      Parameters
 |      ----------
 |      order : list of int representing new level order
 |          Reference level by number or key.
 |      
 |      Returns
 |      -------
 |      type of caller (new object)
 |      
 |      Examples
 |      --------
 |      >>> arrays = [np.array(["dog", "dog", "cat", "cat", "bird", "bird"]),
 |      ...           np.array(["white", "black", "white", "black", "white", "black"])]
 |      >>> s = pd.Series([1, 2, 3, 3, 5, 2], index=arrays)
 |      >>> s
 |      dog   white    1
 |            black    2
 |      cat   white    3
 |            black    3
 |      bird  white    5
 |            black    2
 |      dtype: int64
 |      >>> s.reorder_levels([1, 0])
 |      white  dog     1
 |      black  dog     2
 |      white  cat     3
 |      black  cat     3
 |      white  bird    5
 |      black  bird    2
 |      dtype: int64
 |  
 |  repeat(self, repeats: 'int | Sequence[int]', axis: 'None' = None) -> 'Series'
 |      Repeat elements of a Series.
 |      
 |      Returns a new Series where each element of the current Series
 |      is repeated consecutively a given number of times.
 |      
 |      Parameters
 |      ----------
 |      repeats : int or array of ints
 |          The number of repetitions for each element. This should be a
 |          non-negative integer. Repeating 0 times will return an empty
 |          Series.
 |      axis : None
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          Newly created Series with repeated elements.
 |      
 |      See Also
 |      --------
 |      Index.repeat : Equivalent function for Index.
 |      numpy.repeat : Similar method for :class:`numpy.ndarray`.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['a', 'b', 'c'])
 |      >>> s
 |      0    a
 |      1    b
 |      2    c
 |      dtype: object
 |      >>> s.repeat(2)
 |      0    a
 |      0    a
 |      1    b
 |      1    b
 |      2    c
 |      2    c
 |      dtype: object
 |      >>> s.repeat([1, 2, 3])
 |      0    a
 |      1    b
 |      1    b
 |      2    c
 |      2    c
 |      2    c
 |      dtype: object
 |  
 |  reset_index(self, level: 'IndexLabel | None' = None, *, drop: 'bool' = False, name: 'Level' = <no_default>, inplace: 'bool' = False, allow_duplicates: 'bool' = False) -> 'DataFrame | Series | None'
 |      Generate a new DataFrame or Series with the index reset.
 |      
 |      This is useful when the index needs to be treated as a column, or
 |      when the index is meaningless and needs to be reset to the default
 |      before another operation.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, tuple, or list, default optional
 |          For a Series with a MultiIndex, only remove the specified levels
 |          from the index. Removes all levels by default.
 |      drop : bool, default False
 |          Just reset the index, without inserting it as a column in
 |          the new DataFrame.
 |      name : object, optional
 |          The name to use for the column containing the original Series
 |          values. Uses ``self.name`` by default. This argument is ignored
 |          when `drop` is True.
 |      inplace : bool, default False
 |          Modify the Series in place (do not create a new object).
 |      allow_duplicates : bool, default False
 |          Allow duplicate column labels to be created.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame or None
 |          When `drop` is False (the default), a DataFrame is returned.
 |          The newly created columns will come first in the DataFrame,
 |          followed by the original Series values.
 |          When `drop` is True, a `Series` is returned.
 |          In either case, if ``inplace=True``, no value is returned.
 |      
 |      See Also
 |      --------
 |      DataFrame.reset_index: Analogous function for DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4], name='foo',
 |      ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))
 |      
 |      Generate a DataFrame with default index.
 |      
 |      >>> s.reset_index()
 |        idx  foo
 |      0   a    1
 |      1   b    2
 |      2   c    3
 |      3   d    4
 |      
 |      To specify the name of the new column use `name`.
 |      
 |      >>> s.reset_index(name='values')
 |        idx  values
 |      0   a       1
 |      1   b       2
 |      2   c       3
 |      3   d       4
 |      
 |      To generate a new Series with the default set `drop` to True.
 |      
 |      >>> s.reset_index(drop=True)
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      Name: foo, dtype: int64
 |      
 |      The `level` parameter is interesting for Series with a multi-level
 |      index.
 |      
 |      >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),
 |      ...           np.array(['one', 'two', 'one', 'two'])]
 |      >>> s2 = pd.Series(
 |      ...     range(4), name='foo',
 |      ...     index=pd.MultiIndex.from_arrays(arrays,
 |      ...                                     names=['a', 'b']))
 |      
 |      To remove a specific level from the Index, use `level`.
 |      
 |      >>> s2.reset_index(level='a')
 |             a  foo
 |      b
 |      one  bar    0
 |      two  bar    1
 |      one  baz    2
 |      two  baz    3
 |      
 |      If `level` is not set, all levels are removed from the Index.
 |      
 |      >>> s2.reset_index()
 |           a    b  foo
 |      0  bar  one    0
 |      1  bar  two    1
 |      2  baz  one    2
 |      3  baz  two    3
 |  
 |  rfloordiv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Integer division of series and other, element-wise (binary operator `rfloordiv`).
 |      
 |      Equivalent to ``other // series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.floordiv : Element-wise Integer division, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.floordiv(b, fill_value=0)
 |      a    1.0
 |      b    inf
 |      c    inf
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  rmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Modulo of series and other, element-wise (binary operator `rmod`).
 |      
 |      Equivalent to ``other % series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.mod : Element-wise Modulo, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.mod(b, fill_value=0)
 |      a    0.0
 |      b    NaN
 |      c    NaN
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  rmul(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Multiplication of series and other, element-wise (binary operator `rmul`).
 |      
 |      Equivalent to ``other * series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.mul : Element-wise Multiplication, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.multiply(b, fill_value=0)
 |      a    1.0
 |      b    0.0
 |      c    0.0
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  round(self, decimals: 'int' = 0, *args, **kwargs) -> 'Series'
 |      Round each value in a Series to the given number of decimals.
 |      
 |      Parameters
 |      ----------
 |      decimals : int, default 0
 |          Number of decimal places to round to. If decimals is negative,
 |          it specifies the number of positions to the left of the decimal point.
 |      *args, **kwargs
 |          Additional arguments and keywords have no effect but might be
 |          accepted for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Series
 |          Rounded values of the Series.
 |      
 |      See Also
 |      --------
 |      numpy.around : Round values of an np.array.
 |      DataFrame.round : Round values of a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([0.1, 1.3, 2.7])
 |      >>> s.round()
 |      0    0.0
 |      1    1.0
 |      2    3.0
 |      dtype: float64
 |  
 |  rpow(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Exponential power of series and other, element-wise (binary operator `rpow`).
 |      
 |      Equivalent to ``other ** series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.pow : Element-wise Exponential power, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.pow(b, fill_value=0)
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  rsub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Subtraction of series and other, element-wise (binary operator `rsub`).
 |      
 |      Equivalent to ``other - series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.sub : Element-wise Subtraction, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.subtract(b, fill_value=0)
 |      a    0.0
 |      b    1.0
 |      c    1.0
 |      d   -1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  rtruediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Floating division of series and other, element-wise (binary operator `rtruediv`).
 |      
 |      Equivalent to ``other / series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.truediv : Element-wise Floating division, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.divide(b, fill_value=0)
 |      a    1.0
 |      b    inf
 |      c    inf
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  searchsorted(self, value: 'NumpyValueArrayLike | ExtensionArray', side: "Literal['left', 'right']" = 'left', sorter: 'NumpySorter | None' = None) -> 'npt.NDArray[np.intp] | np.intp'
 |      Find indices where elements should be inserted to maintain order.
 |      
 |      Find the indices into a sorted Series `self` such that, if the
 |      corresponding elements in `value` were inserted before the indices,
 |      the order of `self` would be preserved.
 |      
 |      .. note::
 |      
 |          The Series *must* be monotonically sorted, otherwise
 |          wrong locations will likely be returned. Pandas does *not*
 |          check this for you.
 |      
 |      Parameters
 |      ----------
 |      value : array-like or scalar
 |          Values to insert into `self`.
 |      side : {'left', 'right'}, optional
 |          If 'left', the index of the first suitable location found is given.
 |          If 'right', return the last such index.  If there is no suitable
 |          index, return either 0 or N (where N is the length of `self`).
 |      sorter : 1-D array-like, optional
 |          Optional array of integer indices that sort `self` into ascending
 |          order. They are typically the result of ``np.argsort``.
 |      
 |      Returns
 |      -------
 |      int or array of int
 |          A scalar or array of insertion points with the
 |          same shape as `value`.
 |      
 |      See Also
 |      --------
 |      sort_values : Sort by the values along either axis.
 |      numpy.searchsorted : Similar method from NumPy.
 |      
 |      Notes
 |      -----
 |      Binary search is used to find the required insertion points.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> ser
 |      0    1
 |      1    2
 |      2    3
 |      dtype: int64
 |      
 |      >>> ser.searchsorted(4)
 |      3
 |      
 |      >>> ser.searchsorted([0, 4])
 |      array([0, 3])
 |      
 |      >>> ser.searchsorted([1, 3], side='left')
 |      array([0, 2])
 |      
 |      >>> ser.searchsorted([1, 3], side='right')
 |      array([1, 3])
 |      
 |      >>> ser = pd.Series(pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000']))
 |      >>> ser
 |      0   2000-03-11
 |      1   2000-03-12
 |      2   2000-03-13
 |      dtype: datetime64[ns]
 |      
 |      >>> ser.searchsorted('3/14/2000')
 |      3
 |      
 |      >>> ser = pd.Categorical(
 |      ...     ['apple', 'bread', 'bread', 'cheese', 'milk'], ordered=True
 |      ... )
 |      >>> ser
 |      ['apple', 'bread', 'bread', 'cheese', 'milk']
 |      Categories (4, object): ['apple' < 'bread' < 'cheese' < 'milk']
 |      
 |      >>> ser.searchsorted('bread')
 |      1
 |      
 |      >>> ser.searchsorted(['bread'], side='right')
 |      array([3])
 |      
 |      If the values are not monotonically sorted, wrong locations
 |      may be returned:
 |      
 |      >>> ser = pd.Series([2, 1, 3])
 |      >>> ser
 |      0    2
 |      1    1
 |      2    3
 |      dtype: int64
 |      
 |      >>> ser.searchsorted(1)  # doctest: +SKIP
 |      0  # wrong result, correct would be 1
 |  
 |  sem(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased standard error of the mean over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.sem with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      scalar or Series (if level specified) 
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.sem().round(6)
 |                  0.57735
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.sem()
 |                  a   0.5
 |                  b   0.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.sem(axis=1)
 |                  tiger   0.5
 |                  zebra   0.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True`
 |                  to avoid getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.sem(numeric_only=True)
 |                  a   0.5
 |                  dtype: float64
 |  
 |  set_axis(self, labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'Series'
 |      Assign desired index to given axis.
 |      
 |      Indexes for row labels can be changed by assigning
 |      a list-like or Index.
 |      
 |      Parameters
 |      ----------
 |      labels : list-like, Index
 |          The values for the new index.
 |      
 |      axis : {0 or 'index'}, default 0
 |          The axis to update. The value 0 identifies the rows. For `Series`
 |          this parameter is unused and defaults to 0.
 |      
 |      copy : bool, default True
 |          Whether to make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series
 |          An object of type Series.
 |      
 |      See Also
 |      --------
 |      Series.rename_axis : Alter the name of the index.
 |      
 |              Examples
 |              --------
 |              >>> s = pd.Series([1, 2, 3])
 |              >>> s
 |              0    1
 |              1    2
 |              2    3
 |              dtype: int64
 |      
 |              >>> s.set_axis(['a', 'b', 'c'], axis=0)
 |              a    1
 |              b    2
 |              c    3
 |              dtype: int64
 |  
 |  skew(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased skew over requested axis.
 |      
 |      Normalized by N-1.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.skew()
 |                  0.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},
 |                  ...                   index=['tiger', 'zebra', 'cow'])
 |                  >>> df
 |                          a   b   c
 |                  tiger   1   2   1
 |                  zebra   2   3   3
 |                  cow     3   4   5
 |                  >>> df.skew()
 |                  a   0.0
 |                  b   0.0
 |                  c   0.0
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.skew(axis=1)
 |                  tiger   1.732051
 |                  zebra  -1.732051
 |                  cow     0.000000
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True` to avoid
 |                  getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},
 |                  ...                   index=['tiger', 'zebra', 'cow'])
 |                  >>> df.skew(numeric_only=True)
 |                  a   0.0
 |                  dtype: float64
 |  
 |  sort_index(self, *, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -> 'Series | None'
 |      Sort Series by index labels.
 |      
 |      Returns a new Series sorted by label if `inplace` argument is
 |      ``False``, otherwise updates the original series and returns None.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      level : int, optional
 |          If not None, sort on values in specified index level(s).
 |      ascending : bool or list-like of bools, default True
 |          Sort ascending vs. descending. When the index is a MultiIndex the
 |          sort direction can be controlled for each level individually.
 |      inplace : bool, default False
 |          If True, perform operation in-place.
 |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'
 |          Choice of sorting algorithm. See also :func:`numpy.sort` for more
 |          information. 'mergesort' and 'stable' are the only stable algorithms. For
 |          DataFrames, this option is only applied when sorting on a single
 |          column or label.
 |      na_position : {'first', 'last'}, default 'last'
 |          If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.
 |          Not implemented for MultiIndex.
 |      sort_remaining : bool, default True
 |          If True and sorting by level and index is multilevel, sort by other
 |          levels too (in order) after sorting by specified level.
 |      ignore_index : bool, default False
 |          If True, the resulting axis will be labeled 0, 1, …, n - 1.
 |      key : callable, optional
 |          If not None, apply the key function to the index values
 |          before sorting. This is similar to the `key` argument in the
 |          builtin :meth:`sorted` function, with the notable difference that
 |          this `key` function should be *vectorized*. It should expect an
 |          ``Index`` and return an ``Index`` of the same shape.
 |      
 |      Returns
 |      -------
 |      Series or None
 |          The original Series sorted by the labels or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.sort_index: Sort DataFrame by the index.
 |      DataFrame.sort_values: Sort DataFrame by the value.
 |      Series.sort_values : Sort Series by the value.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])
 |      >>> s.sort_index()
 |      1    c
 |      2    b
 |      3    a
 |      4    d
 |      dtype: object
 |      
 |      Sort Descending
 |      
 |      >>> s.sort_index(ascending=False)
 |      4    d
 |      3    a
 |      2    b
 |      1    c
 |      dtype: object
 |      
 |      By default NaNs are put at the end, but use `na_position` to place
 |      them at the beginning
 |      
 |      >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])
 |      >>> s.sort_index(na_position='first')
 |      NaN     d
 |       1.0    c
 |       2.0    b
 |       3.0    a
 |      dtype: object
 |      
 |      Specify index level to sort
 |      
 |      >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',
 |      ...                     'baz', 'baz', 'bar', 'bar']),
 |      ...           np.array(['two', 'one', 'two', 'one',
 |      ...                     'two', 'one', 'two', 'one'])]
 |      >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)
 |      >>> s.sort_index(level=1)
 |      bar  one    8
 |      baz  one    6
 |      foo  one    4
 |      qux  one    2
 |      bar  two    7
 |      baz  two    5
 |      foo  two    3
 |      qux  two    1
 |      dtype: int64
 |      
 |      Does not sort by remaining levels when sorting by levels
 |      
 |      >>> s.sort_index(level=1, sort_remaining=False)
 |      qux  one    2
 |      foo  one    4
 |      baz  one    6
 |      bar  one    8
 |      qux  two    1
 |      foo  two    3
 |      baz  two    5
 |      bar  two    7
 |      dtype: int64
 |      
 |      Apply a key function before sorting
 |      
 |      >>> s = pd.Series([1, 2, 3, 4], index=['A', 'b', 'C', 'd'])
 |      >>> s.sort_index(key=lambda x : x.str.lower())
 |      A    1
 |      b    2
 |      C    3
 |      d    4
 |      dtype: int64
 |  
 |  sort_values(self, *, axis: 'Axis' = 0, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -> 'Series | None'
 |      Sort by the values.
 |      
 |      Sort a Series in ascending or descending order by some
 |      criterion.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      ascending : bool or list of bools, default True
 |          If True, sort values in ascending order, otherwise descending.
 |      inplace : bool, default False
 |          If True, perform operation in-place.
 |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'
 |          Choice of sorting algorithm. See also :func:`numpy.sort` for more
 |          information. 'mergesort' and 'stable' are the only stable  algorithms.
 |      na_position : {'first' or 'last'}, default 'last'
 |          Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at
 |          the end.
 |      ignore_index : bool, default False
 |          If True, the resulting axis will be labeled 0, 1, …, n - 1.
 |      key : callable, optional
 |          If not None, apply the key function to the series values
 |          before sorting. This is similar to the `key` argument in the
 |          builtin :meth:`sorted` function, with the notable difference that
 |          this `key` function should be *vectorized*. It should expect a
 |          ``Series`` and return an array-like.
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series ordered by values or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.sort_index : Sort by the Series indices.
 |      DataFrame.sort_values : Sort DataFrame by the values along either axis.
 |      DataFrame.sort_index : Sort DataFrame by indices.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([np.nan, 1, 3, 10, 5])
 |      >>> s
 |      0     NaN
 |      1     1.0
 |      2     3.0
 |      3     10.0
 |      4     5.0
 |      dtype: float64
 |      
 |      Sort values ascending order (default behaviour)
 |      
 |      >>> s.sort_values(ascending=True)
 |      1     1.0
 |      2     3.0
 |      4     5.0
 |      3    10.0
 |      0     NaN
 |      dtype: float64
 |      
 |      Sort values descending order
 |      
 |      >>> s.sort_values(ascending=False)
 |      3    10.0
 |      4     5.0
 |      2     3.0
 |      1     1.0
 |      0     NaN
 |      dtype: float64
 |      
 |      Sort values putting NAs first
 |      
 |      >>> s.sort_values(na_position='first')
 |      0     NaN
 |      1     1.0
 |      2     3.0
 |      4     5.0
 |      3    10.0
 |      dtype: float64
 |      
 |      Sort a series of strings
 |      
 |      >>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])
 |      >>> s
 |      0    z
 |      1    b
 |      2    d
 |      3    a
 |      4    c
 |      dtype: object
 |      
 |      >>> s.sort_values()
 |      3    a
 |      1    b
 |      4    c
 |      2    d
 |      0    z
 |      dtype: object
 |      
 |      Sort using a key function. Your `key` function will be
 |      given the ``Series`` of values and should return an array-like.
 |      
 |      >>> s = pd.Series(['a', 'B', 'c', 'D', 'e'])
 |      >>> s.sort_values()
 |      1    B
 |      3    D
 |      0    a
 |      2    c
 |      4    e
 |      dtype: object
 |      >>> s.sort_values(key=lambda x: x.str.lower())
 |      0    a
 |      1    B
 |      2    c
 |      3    D
 |      4    e
 |      dtype: object
 |      
 |      NumPy ufuncs work well here. For example, we can
 |      sort by the ``sin`` of the value
 |      
 |      >>> s = pd.Series([-4, -2, 0, 2, 4])
 |      >>> s.sort_values(key=np.sin)
 |      1   -2
 |      4    4
 |      2    0
 |      0   -4
 |      3    2
 |      dtype: int64
 |      
 |      More complicated user-defined functions can be used,
 |      as long as they expect a Series and return an array-like
 |      
 |      >>> s.sort_values(key=lambda x: (np.tan(x.cumsum())))
 |      0   -4
 |      3    2
 |      4    4
 |      1   -2
 |      2    0
 |      dtype: int64
 |  
 |  std(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return sample standard deviation over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.std with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      scalar or Series (if level specified) 
 |      
 |      Notes
 |      -----
 |      To have the same behaviour as `numpy.std`, use `ddof=0` (instead of the
 |      default `ddof=1`)
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],
 |      ...                    'age': [21, 25, 62, 43],
 |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}
 |      ...                   ).set_index('person_id')
 |      >>> df
 |                 age  height
 |      person_id
 |      0           21    1.61
 |      1           25    1.87
 |      2           62    1.49
 |      3           43    2.01
 |      
 |      The standard deviation of the columns can be found as follows:
 |      
 |      >>> df.std()
 |      age       18.786076
 |      height     0.237417
 |      dtype: float64
 |      
 |      Alternatively, `ddof=0` can be set to normalize by N instead of N-1:
 |      
 |      >>> df.std(ddof=0)
 |      age       16.269219
 |      height     0.205609
 |      dtype: float64
 |  
 |  sub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Subtraction of series and other, element-wise (binary operator `sub`).
 |      
 |      Equivalent to ``series - other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rsub : Reverse of the Subtraction operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.subtract(b, fill_value=0)
 |      a    0.0
 |      b    1.0
 |      c    1.0
 |      d   -1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  subtract = sub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  sum(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |      Return the sum of the values over the requested axis.
 |      
 |      This is equivalent to the method ``numpy.sum``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.sum with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      min_count : int, default 0
 |          The required number of valid values to perform the operation. If fewer than
 |          ``min_count`` non-NA values are present the result will be NA.
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.sum()
 |      14
 |      
 |      By default, the sum of an empty or all-NA Series is ``0``.
 |      
 |      >>> pd.Series([], dtype="float64").sum()  # min_count=0 is the default
 |      0.0
 |      
 |      This can be controlled with the ``min_count`` parameter. For example, if
 |      you'd like the sum of an empty series to be NaN, pass ``min_count=1``.
 |      
 |      >>> pd.Series([], dtype="float64").sum(min_count=1)
 |      nan
 |      
 |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
 |      empty series identically.
 |      
 |      >>> pd.Series([np.nan]).sum()
 |      0.0
 |      
 |      >>> pd.Series([np.nan]).sum(min_count=1)
 |      nan
 |  
 |  swaplevel(self, i: 'Level' = -2, j: 'Level' = -1, copy: 'bool | None' = None) -> 'Series'
 |      Swap levels i and j in a :class:`MultiIndex`.
 |      
 |      Default is to swap the two innermost levels of the index.
 |      
 |      Parameters
 |      ----------
 |      i, j : int or str
 |          Levels of the indices to be swapped. Can pass level name as string.
 |      copy : bool, default True
 |                  Whether to copy underlying data.
 |      
 |                  .. note::
 |                      The `copy` keyword will change behavior in pandas 3.0.
 |                      `Copy-on-Write
 |                      <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |                      will be enabled by default, which means that all methods with a
 |                      `copy` keyword will use a lazy copy mechanism to defer the copy and
 |                      ignore the `copy` keyword. The `copy` keyword will be removed in a
 |                      future version of pandas.
 |      
 |                      You can already get the future behavior and improvements through
 |                      enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series
 |          Series with levels swapped in MultiIndex.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(
 |      ...     ["A", "B", "A", "C"],
 |      ...     index=[
 |      ...         ["Final exam", "Final exam", "Coursework", "Coursework"],
 |      ...         ["History", "Geography", "History", "Geography"],
 |      ...         ["January", "February", "March", "April"],
 |      ...     ],
 |      ... )
 |      >>> s
 |      Final exam  History     January      A
 |                  Geography   February     B
 |      Coursework  History     March        A
 |                  Geography   April        C
 |      dtype: object
 |      
 |      In the following example, we will swap the levels of the indices.
 |      Here, we will swap the levels column-wise, but levels can be swapped row-wise
 |      in a similar manner. Note that column-wise is the default behaviour.
 |      By not supplying any arguments for i and j, we swap the last and second to
 |      last indices.
 |      
 |      >>> s.swaplevel()
 |      Final exam  January     History         A
 |                  February    Geography       B
 |      Coursework  March       History         A
 |                  April       Geography       C
 |      dtype: object
 |      
 |      By supplying one argument, we can choose which index to swap the last
 |      index with. We can for example swap the first index with the last one as
 |      follows.
 |      
 |      >>> s.swaplevel(0)
 |      January     History     Final exam      A
 |      February    Geography   Final exam      B
 |      March       History     Coursework      A
 |      April       Geography   Coursework      C
 |      dtype: object
 |      
 |      We can also define explicitly which indices we want to swap by supplying values
 |      for both i and j. Here, we for example swap the first and second indices.
 |      
 |      >>> s.swaplevel(0, 1)
 |      History     Final exam  January         A
 |      Geography   Final exam  February        B
 |      History     Coursework  March           A
 |      Geography   Coursework  April           C
 |      dtype: object
 |  
 |  to_dict(self, *, into: 'type[MutableMappingT] | MutableMappingT' = <class 'dict'>) -> 'MutableMappingT'
 |      Convert Series to {label -> value} dict or dict-like object.
 |      
 |      Parameters
 |      ----------
 |      into : class, default dict
 |          The collections.abc.MutableMapping subclass to use as the return
 |          object. Can be the actual class or an empty instance of the mapping
 |          type you want.  If you want a collections.defaultdict, you must
 |          pass it initialized.
 |      
 |      Returns
 |      -------
 |      collections.abc.MutableMapping
 |          Key-value representation of Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s.to_dict()
 |      {0: 1, 1: 2, 2: 3, 3: 4}
 |      >>> from collections import OrderedDict, defaultdict
 |      >>> s.to_dict(into=OrderedDict)
 |      OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])
 |      >>> dd = defaultdict(list)
 |      >>> s.to_dict(into=dd)
 |      defaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})
 |  
 |  to_frame(self, name: 'Hashable' = <no_default>) -> 'DataFrame'
 |      Convert Series to DataFrame.
 |      
 |      Parameters
 |      ----------
 |      name : object, optional
 |          The passed name should substitute for the series name (if it has
 |          one).
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          DataFrame representation of Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(["a", "b", "c"],
 |      ...               name="vals")
 |      >>> s.to_frame()
 |        vals
 |      0    a
 |      1    b
 |      2    c
 |  
 |  to_markdown(self, buf: 'IO[str] | None' = None, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'str | None'
 |      Print Series in Markdown-friendly format.
 |      
 |      Parameters
 |      ----------
 |      buf : str, Path or StringIO-like, optional, default None
 |          Buffer to write to. If None, the output is returned as a string.
 |      mode : str, optional
 |          Mode in which file is opened, "wt" by default.
 |      index : bool, optional, default True
 |          Add index (row) labels.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      **kwargs
 |          These parameters will be passed to `tabulate                 <https://pypi.org/project/tabulate>`_.
 |      
 |      Returns
 |      -------
 |      str
 |          Series in Markdown-friendly format.
 |      
 |      Notes
 |      -----
 |      Requires the `tabulate <https://pypi.org/project/tabulate>`_ package.
 |      
 |      Examples
 |                  --------
 |                  >>> s = pd.Series(["elk", "pig", "dog", "quetzal"], name="animal")
 |                  >>> print(s.to_markdown())
 |                  |    | animal   |
 |                  |---:|:---------|
 |                  |  0 | elk      |
 |                  |  1 | pig      |
 |                  |  2 | dog      |
 |                  |  3 | quetzal  |
 |      
 |                  Output markdown with a tabulate option.
 |      
 |                  >>> print(s.to_markdown(tablefmt="grid"))
 |                  +----+----------+
 |                  |    | animal   |
 |                  +====+==========+
 |                  |  0 | elk      |
 |                  +----+----------+
 |                  |  1 | pig      |
 |                  +----+----------+
 |                  |  2 | dog      |
 |                  +----+----------+
 |                  |  3 | quetzal  |
 |                  +----+----------+
 |  
 |  to_period(self, freq: 'str | None' = None, copy: 'bool | None' = None) -> 'Series'
 |      Convert Series from DatetimeIndex to PeriodIndex.
 |      
 |      Parameters
 |      ----------
 |      freq : str, default None
 |          Frequency associated with the PeriodIndex.
 |      copy : bool, default True
 |          Whether or not to return a copy.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series
 |          Series with index converted to PeriodIndex.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.DatetimeIndex(['2023', '2024', '2025'])
 |      >>> s = pd.Series([1, 2, 3], index=idx)
 |      >>> s = s.to_period()
 |      >>> s
 |      2023    1
 |      2024    2
 |      2025    3
 |      Freq: Y-DEC, dtype: int64
 |      
 |      Viewing the index
 |      
 |      >>> s.index
 |      PeriodIndex(['2023', '2024', '2025'], dtype='period[Y-DEC]')
 |  
 |  to_string(self, buf: 'FilePath | WriteBuffer[str] | None' = None, na_rep: 'str' = 'NaN', float_format: 'str | None' = None, header: 'bool' = True, index: 'bool' = True, length: 'bool' = False, dtype: 'bool' = False, name: 'bool' = False, max_rows: 'int | None' = None, min_rows: 'int | None' = None) -> 'str | None'
 |      Render a string representation of the Series.
 |      
 |      Parameters
 |      ----------
 |      buf : StringIO-like, optional
 |          Buffer to write to.
 |      na_rep : str, optional
 |          String representation of NaN to use, default 'NaN'.
 |      float_format : one-parameter function, optional
 |          Formatter function to apply to columns' elements if they are
 |          floats, default None.
 |      header : bool, default True
 |          Add the Series header (index name).
 |      index : bool, optional
 |          Add index (row) labels, default True.
 |      length : bool, default False
 |          Add the Series length.
 |      dtype : bool, default False
 |          Add the Series dtype.
 |      name : bool, default False
 |          Add the Series name if not None.
 |      max_rows : int, optional
 |          Maximum number of rows to show before truncating. If None, show
 |          all.
 |      min_rows : int, optional
 |          The number of rows to display in a truncated repr (when number
 |          of rows is above `max_rows`).
 |      
 |      Returns
 |      -------
 |      str or None
 |          String representation of Series if ``buf=None``, otherwise None.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3]).to_string()
 |      >>> ser
 |      '0    1\n1    2\n2    3'
 |  
 |  to_timestamp(self, freq: 'Frequency | None' = None, how: "Literal['s', 'e', 'start', 'end']" = 'start', copy: 'bool | None' = None) -> 'Series'
 |      Cast to DatetimeIndex of Timestamps, at *beginning* of period.
 |      
 |      Parameters
 |      ----------
 |      freq : str, default frequency of PeriodIndex
 |          Desired frequency.
 |      how : {'s', 'e', 'start', 'end'}
 |          Convention for converting period to timestamp; start of period
 |          vs. end.
 |      copy : bool, default True
 |          Whether or not to return a copy.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series with DatetimeIndex
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.PeriodIndex(['2023', '2024', '2025'], freq='Y')
 |      >>> s1 = pd.Series([1, 2, 3], index=idx)
 |      >>> s1
 |      2023    1
 |      2024    2
 |      2025    3
 |      Freq: Y-DEC, dtype: int64
 |      
 |      The resulting frequency of the Timestamps is `YearBegin`
 |      
 |      >>> s1 = s1.to_timestamp()
 |      >>> s1
 |      2023-01-01    1
 |      2024-01-01    2
 |      2025-01-01    3
 |      Freq: YS-JAN, dtype: int64
 |      
 |      Using `freq` which is the offset that the Timestamps will have
 |      
 |      >>> s2 = pd.Series([1, 2, 3], index=idx)
 |      >>> s2 = s2.to_timestamp(freq='M')
 |      >>> s2
 |      2023-01-31    1
 |      2024-01-31    2
 |      2025-01-31    3
 |      Freq: YE-JAN, dtype: int64
 |  
 |  transform(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'DataFrame | Series'
 |      Call ``func`` on self producing a Series with the same axis shape as self.
 |      
 |      Parameters
 |      ----------
 |      func : function, str, list-like or dict-like
 |          Function to use for transforming the data. If a function, must either
 |          work when passed a Series or when passed to Series.apply. If func
 |          is both list-like and dict-like, dict-like behavior takes precedence.
 |      
 |          Accepted combinations are:
 |      
 |          - function
 |          - string function name
 |          - list-like of functions and/or function names, e.g. ``[np.exp, 'sqrt']``
 |          - dict-like of axis labels -> functions, function names or list-like of such.
 |      axis : {0 or 'index'}
 |              Unused. Parameter needed for compatibility with DataFrame.
 |      *args
 |          Positional arguments to pass to `func`.
 |      **kwargs
 |          Keyword arguments to pass to `func`.
 |      
 |      Returns
 |      -------
 |      Series
 |          A Series that must have the same length as self.
 |      
 |      Raises
 |      ------
 |      ValueError : If the returned Series has a different length than self.
 |      
 |      See Also
 |      --------
 |      Series.agg : Only perform aggregating type operations.
 |      Series.apply : Invoke function on a Series.
 |      
 |      Notes
 |      -----
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  1  2
 |      2  2  3
 |      >>> df.transform(lambda x: x + 1)
 |         A  B
 |      0  1  2
 |      1  2  3
 |      2  3  4
 |      
 |      Even though the resulting Series must have the same length as the
 |      input Series, it is possible to provide several input functions:
 |      
 |      >>> s = pd.Series(range(3))
 |      >>> s
 |      0    0
 |      1    1
 |      2    2
 |      dtype: int64
 |      >>> s.transform([np.sqrt, np.exp])
 |             sqrt        exp
 |      0  0.000000   1.000000
 |      1  1.000000   2.718282
 |      2  1.414214   7.389056
 |      
 |      You can call transform on a GroupBy object:
 |      
 |      >>> df = pd.DataFrame({
 |      ...     "Date": [
 |      ...         "2015-05-08", "2015-05-07", "2015-05-06", "2015-05-05",
 |      ...         "2015-05-08", "2015-05-07", "2015-05-06", "2015-05-05"],
 |      ...     "Data": [5, 8, 6, 1, 50, 100, 60, 120],
 |      ... })
 |      >>> df
 |               Date  Data
 |      0  2015-05-08     5
 |      1  2015-05-07     8
 |      2  2015-05-06     6
 |      3  2015-05-05     1
 |      4  2015-05-08    50
 |      5  2015-05-07   100
 |      6  2015-05-06    60
 |      7  2015-05-05   120
 |      >>> df.groupby('Date')['Data'].transform('sum')
 |      0     55
 |      1    108
 |      2     66
 |      3    121
 |      4     55
 |      5    108
 |      6     66
 |      7    121
 |      Name: Data, dtype: int64
 |      
 |      >>> df = pd.DataFrame({
 |      ...     "c": [1, 1, 1, 2, 2, 2, 2],
 |      ...     "type": ["m", "n", "o", "m", "m", "n", "n"]
 |      ... })
 |      >>> df
 |         c type
 |      0  1    m
 |      1  1    n
 |      2  1    o
 |      3  2    m
 |      4  2    m
 |      5  2    n
 |      6  2    n
 |      >>> df['size'] = df.groupby('c')['type'].transform(len)
 |      >>> df
 |         c type size
 |      0  1    m    3
 |      1  1    n    3
 |      2  1    o    3
 |      3  2    m    4
 |      4  2    m    4
 |      5  2    n    4
 |      6  2    n    4
 |  
 |  truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Floating division of series and other, element-wise (binary operator `truediv`).
 |      
 |      Equivalent to ``series / other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rtruediv : Reverse of the Floating division operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.divide(b, fill_value=0)
 |      a    1.0
 |      b    inf
 |      c    inf
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  unique(self) -> 'ArrayLike'
 |      Return unique values of Series object.
 |      
 |      Uniques are returned in order of appearance. Hash table-based unique,
 |      therefore does NOT sort.
 |      
 |      Returns
 |      -------
 |      ndarray or ExtensionArray
 |          The unique values returned as a NumPy array. See Notes.
 |      
 |      See Also
 |      --------
 |      Series.drop_duplicates : Return Series with duplicate values removed.
 |      unique : Top-level unique method for any 1-d array-like object.
 |      Index.unique : Return Index with unique values from an Index object.
 |      
 |      Notes
 |      -----
 |      Returns the unique values as a NumPy array. In case of an
 |      extension-array backed Series, a new
 |      :class:`~api.extensions.ExtensionArray` of that type with just
 |      the unique values is returned. This includes
 |      
 |          * Categorical
 |          * Period
 |          * Datetime with Timezone
 |          * Datetime without Timezone
 |          * Timedelta
 |          * Interval
 |          * Sparse
 |          * IntegerNA
 |      
 |      See Examples section.
 |      
 |      Examples
 |      --------
 |      >>> pd.Series([2, 1, 3, 3], name='A').unique()
 |      array([2, 1, 3])
 |      
 |      >>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()
 |      <DatetimeArray>
 |      ['2016-01-01 00:00:00']
 |      Length: 1, dtype: datetime64[ns]
 |      
 |      >>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')
 |      ...            for _ in range(3)]).unique()
 |      <DatetimeArray>
 |      ['2016-01-01 00:00:00-05:00']
 |      Length: 1, dtype: datetime64[ns, US/Eastern]
 |      
 |      An Categorical will return categories in the order of
 |      appearance and with the same dtype.
 |      
 |      >>> pd.Series(pd.Categorical(list('baabc'))).unique()
 |      ['b', 'a', 'c']
 |      Categories (3, object): ['a', 'b', 'c']
 |      >>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),
 |      ...                          ordered=True)).unique()
 |      ['b', 'a', 'c']
 |      Categories (3, object): ['a' < 'b' < 'c']
 |  
 |  unstack(self, level: 'IndexLabel' = -1, fill_value: 'Hashable | None' = None, sort: 'bool' = True) -> 'DataFrame'
 |      Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, or list of these, default last level
 |          Level(s) to unstack, can pass level name.
 |      fill_value : scalar value, default None
 |          Value to use when replacing NaN values.
 |      sort : bool, default True
 |          Sort the level(s) in the resulting MultiIndex columns.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Unstacked Series.
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.stacking>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4],
 |      ...               index=pd.MultiIndex.from_product([['one', 'two'],
 |      ...                                                 ['a', 'b']]))
 |      >>> s
 |      one  a    1
 |           b    2
 |      two  a    3
 |           b    4
 |      dtype: int64
 |      
 |      >>> s.unstack(level=-1)
 |           a  b
 |      one  1  2
 |      two  3  4
 |      
 |      >>> s.unstack(level=0)
 |         one  two
 |      a    1    3
 |      b    2    4
 |  
 |  update(self, other: 'Series | Sequence | Mapping') -> 'None'
 |      Modify Series in place using values from passed Series.
 |      
 |      Uses non-NA values from passed Series to make updates. Aligns
 |      on index.
 |      
 |      Parameters
 |      ----------
 |      other : Series, or object coercible into Series
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update(pd.Series([4, 5, 6]))
 |      >>> s
 |      0    4
 |      1    5
 |      2    6
 |      dtype: int64
 |      
 |      >>> s = pd.Series(['a', 'b', 'c'])
 |      >>> s.update(pd.Series(['d', 'e'], index=[0, 2]))
 |      >>> s
 |      0    d
 |      1    b
 |      2    e
 |      dtype: object
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update(pd.Series([4, 5, 6, 7, 8]))
 |      >>> s
 |      0    4
 |      1    5
 |      2    6
 |      dtype: int64
 |      
 |      If ``other`` contains NaNs the corresponding values are not updated
 |      in the original Series.
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update(pd.Series([4, np.nan, 6]))
 |      >>> s
 |      0    4
 |      1    2
 |      2    6
 |      dtype: int64
 |      
 |      ``other`` can also be a non-Series object type
 |      that is coercible into a Series
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update([4, np.nan, 6])
 |      >>> s
 |      0    4
 |      1    2
 |      2    6
 |      dtype: int64
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update({1: 9})
 |      >>> s
 |      0    1
 |      1    9
 |      2    3
 |      dtype: int64
 |  
 |  var(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased variance over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.var with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      scalar or Series (if level specified) 
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],
 |      ...                    'age': [21, 25, 62, 43],
 |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}
 |      ...                   ).set_index('person_id')
 |      >>> df
 |                 age  height
 |      person_id
 |      0           21    1.61
 |      1           25    1.87
 |      2           62    1.49
 |      3           43    2.01
 |      
 |      >>> df.var()
 |      age       352.916667
 |      height      0.056367
 |      dtype: float64
 |      
 |      Alternatively, ``ddof=0`` can be set to normalize by N instead of N-1:
 |      
 |      >>> df.var(ddof=0)
 |      age       264.687500
 |      height      0.042275
 |      dtype: float64
 |  
 |  view(self, dtype: 'Dtype | None' = None) -> 'Series'
 |      Create a new view of the Series.
 |      
 |      .. deprecated:: 2.2.0
 |          ``Series.view`` is deprecated and will be removed in a future version.
 |          Use :meth:`Series.astype` as an alternative to change the dtype.
 |      
 |      This function will return a new Series with a view of the same
 |      underlying values in memory, optionally reinterpreted with a new data
 |      type. The new data type must preserve the same size in bytes as to not
 |      cause index misalignment.
 |      
 |      Parameters
 |      ----------
 |      dtype : data type
 |          Data type object or one of their string representations.
 |      
 |      Returns
 |      -------
 |      Series
 |          A new Series object as a view of the same data in memory.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.view : Equivalent numpy function to create a new view of
 |          the same data in memory.
 |      
 |      Notes
 |      -----
 |      Series are instantiated with ``dtype=float64`` by default. While
 |      ``numpy.ndarray.view()`` will return a view with the same data type as
 |      the original array, ``Series.view()`` (without specified dtype)
 |      will try using ``float64`` and may fail if the original data type size
 |      in bytes is not the same.
 |      
 |      Examples
 |      --------
 |      Use ``astype`` to change the dtype instead.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  array
 |      The ExtensionArray of the data backing this Series or Index.
 |      
 |      Returns
 |      -------
 |      ExtensionArray
 |          An ExtensionArray of the values stored within. For extension
 |          types, this is the actual array. For NumPy native types, this
 |          is a thin (no copy) wrapper around :class:`numpy.ndarray`.
 |      
 |          ``.array`` differs from ``.values``, which may require converting
 |          the data to a different form.
 |      
 |      See Also
 |      --------
 |      Index.to_numpy : Similar method that always returns a NumPy array.
 |      Series.to_numpy : Similar method that always returns a NumPy array.
 |      
 |      Notes
 |      -----
 |      This table lays out the different array types for each extension
 |      dtype within pandas.
 |      
 |      ================== =============================
 |      dtype              array type
 |      ================== =============================
 |      category           Categorical
 |      period             PeriodArray
 |      interval           IntervalArray
 |      IntegerNA          IntegerArray
 |      string             StringArray
 |      boolean            BooleanArray
 |      datetime64[ns, tz] DatetimeArray
 |      ================== =============================
 |      
 |      For any 3rd-party extension types, the array type will be an
 |      ExtensionArray.
 |      
 |      For all remaining dtypes ``.array`` will be a
 |      :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray
 |      stored within. If you absolutely need a NumPy array (possibly with
 |      copying / coercing data), then use :meth:`Series.to_numpy` instead.
 |      
 |      Examples
 |      --------
 |      For regular NumPy types like int, and float, a NumpyExtensionArray
 |      is returned.
 |      
 |      >>> pd.Series([1, 2, 3]).array
 |      <NumpyExtensionArray>
 |      [1, 2, 3]
 |      Length: 3, dtype: int64
 |      
 |      For extension types, like Categorical, the actual ExtensionArray
 |      is returned
 |      
 |      >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))
 |      >>> ser.array
 |      ['a', 'b', 'a']
 |      Categories (2, object): ['a', 'b']
 |  
 |  axes
 |      Return a list of the row axis labels.
 |  
 |  dtype
 |      Return the dtype object of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.dtype
 |      dtype('int64')
 |  
 |  dtypes
 |      Return the dtype object of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.dtypes
 |      dtype('int64')
 |  
 |  hasnans
 |      Return True if there are any NaNs.
 |      
 |      Enables various performance speedups.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, None])
 |      >>> s
 |      0    1.0
 |      1    2.0
 |      2    3.0
 |      3    NaN
 |      dtype: float64
 |      >>> s.hasnans
 |      True
 |  
 |  values
 |      Return Series as ndarray or ndarray-like depending on the dtype.
 |      
 |      .. warning::
 |      
 |         We recommend using :attr:`Series.array` or
 |         :meth:`Series.to_numpy`, depending on whether you need
 |         a reference to the underlying data or a NumPy array.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray or ndarray-like
 |      
 |      See Also
 |      --------
 |      Series.array : Reference to the underlying data.
 |      Series.to_numpy : A NumPy array representing the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> pd.Series([1, 2, 3]).values
 |      array([1, 2, 3])
 |      
 |      >>> pd.Series(list('aabc')).values
 |      array(['a', 'a', 'b', 'c'], dtype=object)
 |      
 |      >>> pd.Series(list('aabc')).astype('category').values
 |      ['a', 'a', 'b', 'c']
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      Timezone aware datetime data is converted to UTC:
 |      
 |      >>> pd.Series(pd.date_range('20130101', periods=3,
 |      ...                         tz='US/Eastern')).values
 |      array(['2013-01-01T05:00:00.000000000',
 |             '2013-01-02T05:00:00.000000000',
 |             '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  index
 |      The index (axis labels) of the Series.
 |      
 |      The index of a Series is used to label and identify each element of the
 |      underlying data. The index can be thought of as an immutable ordered set
 |      (technically a multi-set, as it may contain duplicate labels), and is
 |      used to index and align data in pandas.
 |      
 |      Returns
 |      -------
 |      Index
 |          The index labels of the Series.
 |      
 |      See Also
 |      --------
 |      Series.reindex : Conform Series to new index.
 |      Index : The base pandas index type.
 |      
 |      Notes
 |      -----
 |      For more information on pandas indexing, see the `indexing user guide
 |      <https://pandas.pydata.org/docs/user_guide/indexing.html>`__.
 |      
 |      Examples
 |      --------
 |      To create a Series with a custom index and view the index labels:
 |      
 |      >>> cities = ['Kolkata', 'Chicago', 'Toronto', 'Lisbon']
 |      >>> populations = [14.85, 2.71, 2.93, 0.51]
 |      >>> city_series = pd.Series(populations, index=cities)
 |      >>> city_series.index
 |      Index(['Kolkata', 'Chicago', 'Toronto', 'Lisbon'], dtype='object')
 |      
 |      To change the index labels of an existing Series:
 |      
 |      >>> city_series.index = ['KOL', 'CHI', 'TOR', 'LIS']
 |      >>> city_series.index
 |      Index(['KOL', 'CHI', 'TOR', 'LIS'], dtype='object')
 |  
 |  name
 |      Return the name of the Series.
 |      
 |      The name of a Series becomes its index or column name if it is used
 |      to form a DataFrame. It is also used whenever displaying the Series
 |      using the interpreter.
 |      
 |      Returns
 |      -------
 |      label (hashable object)
 |          The name of the Series, also the column name if part of a DataFrame.
 |      
 |      See Also
 |      --------
 |      Series.rename : Sets the Series name when given a scalar input.
 |      Index.name : Corresponding Index property.
 |      
 |      Examples
 |      --------
 |      The Series name can be set initially when calling the constructor.
 |      
 |      >>> s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      Name: Numbers, dtype: int64
 |      >>> s.name = "Integers"
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      Name: Integers, dtype: int64
 |      
 |      The name of a Series within a DataFrame is its column name.
 |      
 |      >>> df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],
 |      ...                   columns=["Odd Numbers", "Even Numbers"])
 |      >>> df
 |         Odd Numbers  Even Numbers
 |      0            1             2
 |      1            3             4
 |      2            5             6
 |      >>> df["Even Numbers"].name
 |      'Even Numbers'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'_AXIS_ORDERS': "list[Literal['index', 'columns']]"...
 |  
 |  __pandas_priority__ = 3000
 |  
 |  cat = <class 'pandas.core.arrays.categorical.CategoricalAccessor'>
 |      Accessor object for categorical properties of the Series values.
 |      
 |      Parameters
 |      ----------
 |      data : Series or CategoricalIndex
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(list("abbccc")).astype("category")
 |      >>> s
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      >>> s.cat.categories
 |      Index(['a', 'b', 'c'], dtype='object')
 |      
 |      >>> s.cat.rename_categories(list("cba"))
 |      0    c
 |      1    b
 |      2    b
 |      3    a
 |      4    a
 |      5    a
 |      dtype: category
 |      Categories (3, object): ['c', 'b', 'a']
 |      
 |      >>> s.cat.reorder_categories(list("cba"))
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['c', 'b', 'a']
 |      
 |      >>> s.cat.add_categories(["d", "e"])
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (5, object): ['a', 'b', 'c', 'd', 'e']
 |      
 |      >>> s.cat.remove_categories(["a", "c"])
 |      0    NaN
 |      1      b
 |      2      b
 |      3    NaN
 |      4    NaN
 |      5    NaN
 |      dtype: category
 |      Categories (1, object): ['b']
 |      
 |      >>> s1 = s.cat.add_categories(["d", "e"])
 |      >>> s1.cat.remove_unused_categories()
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      >>> s.cat.set_categories(list("abcde"))
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (5, object): ['a', 'b', 'c', 'd', 'e']
 |      
 |      >>> s.cat.as_ordered()
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['a' < 'b' < 'c']
 |      
 |      >>> s.cat.as_unordered()
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['a', 'b', 'c']
 |  
 |  
 |  dt = <class 'pandas.core.indexes.accessors.CombinedDatetimelikePropert...
 |  
 |  list = <class 'pandas.core.arrays.arrow.accessors.ListAccessor'>
 |      Accessor object for list data properties of the Series values.
 |      
 |      Parameters
 |      ----------
 |      data : Series
 |          Series containing Arrow list data.
 |  
 |  
 |  plot = <class 'pandas.plotting._core.PlotAccessor'>
 |      Make plots of Series or DataFrame.
 |      
 |      Uses the backend specified by the
 |      option ``plotting.backend``. By default, matplotlib is used.
 |      
 |      Parameters
 |      ----------
 |      data : Series or DataFrame
 |          The object for which the method is called.
 |      x : label or position, default None
 |          Only used if data is a DataFrame.
 |      y : label, position or list of label, positions, default None
 |          Allows plotting of one column versus another. Only used if data is a
 |          DataFrame.
 |      kind : str
 |          The kind of plot to produce:
 |      
 |          - 'line' : line plot (default)
 |          - 'bar' : vertical bar plot
 |          - 'barh' : horizontal bar plot
 |          - 'hist' : histogram
 |          - 'box' : boxplot
 |          - 'kde' : Kernel Density Estimation plot
 |          - 'density' : same as 'kde'
 |          - 'area' : area plot
 |          - 'pie' : pie plot
 |          - 'scatter' : scatter plot (DataFrame only)
 |          - 'hexbin' : hexbin plot (DataFrame only)
 |      ax : matplotlib axes object, default None
 |          An axes of the current figure.
 |      subplots : bool or sequence of iterables, default False
 |          Whether to group columns into subplots:
 |      
 |          - ``False`` : No subplots will be used
 |          - ``True`` : Make separate subplots for each column.
 |          - sequence of iterables of column labels: Create a subplot for each
 |            group of columns. For example `[('a', 'c'), ('b', 'd')]` will
 |            create 2 subplots: one with columns 'a' and 'c', and one
 |            with columns 'b' and 'd'. Remaining columns that aren't specified
 |            will be plotted in additional subplots (one per column).
 |      
 |            .. versionadded:: 1.5.0
 |      
 |      sharex : bool, default True if ax is None else False
 |          In case ``subplots=True``, share x axis and set some x axis labels
 |          to invisible; defaults to True if ax is None otherwise False if
 |          an ax is passed in; Be aware, that passing in both an ax and
 |          ``sharex=True`` will alter all x axis labels for all axis in a figure.
 |      sharey : bool, default False
 |          In case ``subplots=True``, share y axis and set some y axis labels to invisible.
 |      layout : tuple, optional
 |          (rows, columns) for the layout of subplots.
 |      figsize : a tuple (width, height) in inches
 |          Size of a figure object.
 |      use_index : bool, default True
 |          Use index as ticks for x axis.
 |      title : str or list
 |          Title to use for the plot. If a string is passed, print the string
 |          at the top of the figure. If a list is passed and `subplots` is
 |          True, print each item in the list above the corresponding subplot.
 |      grid : bool, default None (matlab style default)
 |          Axis grid lines.
 |      legend : bool or {'reverse'}
 |          Place legend on axis subplots.
 |      style : list or dict
 |          The matplotlib line style per column.
 |      logx : bool or 'sym', default False
 |          Use log scaling or symlog scaling on x axis.
 |      
 |      logy : bool or 'sym' default False
 |          Use log scaling or symlog scaling on y axis.
 |      
 |      loglog : bool or 'sym', default False
 |          Use log scaling or symlog scaling on both x and y axes.
 |      
 |      xticks : sequence
 |          Values to use for the xticks.
 |      yticks : sequence
 |          Values to use for the yticks.
 |      xlim : 2-tuple/list
 |          Set the x limits of the current axes.
 |      ylim : 2-tuple/list
 |          Set the y limits of the current axes.
 |      xlabel : label, optional
 |          Name to use for the xlabel on x-axis. Default uses index name as xlabel, or the
 |          x-column name for planar plots.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Now applicable to histograms.
 |      
 |      ylabel : label, optional
 |          Name to use for the ylabel on y-axis. Default will show no ylabel, or the
 |          y-column name for planar plots.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Now applicable to histograms.
 |      
 |      rot : float, default None
 |          Rotation for ticks (xticks for vertical, yticks for horizontal
 |          plots).
 |      fontsize : float, default None
 |          Font size for xticks and yticks.
 |      colormap : str or matplotlib colormap object, default None
 |          Colormap to select colors from. If string, load colormap with that
 |          name from matplotlib.
 |      colorbar : bool, optional
 |          If True, plot colorbar (only relevant for 'scatter' and 'hexbin'
 |          plots).
 |      position : float
 |          Specify relative alignments for bar plot layout.
 |          From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |          (center).
 |      table : bool, Series or DataFrame, default False
 |          If True, draw a table using the data in the DataFrame and the data
 |          will be transposed to meet matplotlib's default layout.
 |          If a Series or DataFrame is passed, use passed data to draw a
 |          table.
 |      yerr : DataFrame, Series, array-like, dict and str
 |          See :ref:`Plotting with Error Bars <visualization.errorbars>` for
 |          detail.
 |      xerr : DataFrame, Series, array-like, dict and str
 |          Equivalent to yerr.
 |      stacked : bool, default False in line and bar plots, and True in area plot
 |          If True, create stacked plot.
 |      secondary_y : bool or sequence, default False
 |          Whether to plot on the secondary y-axis if a list/tuple, which
 |          columns to plot on secondary y-axis.
 |      mark_right : bool, default True
 |          When using a secondary_y axis, automatically mark the column
 |          labels with "(right)" in the legend.
 |      include_bool : bool, default is False
 |          If True, boolean values can be plotted.
 |      backend : str, default None
 |          Backend to use instead of the backend specified in the option
 |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |          specify the ``plotting.backend`` for the whole session, set
 |          ``pd.options.plotting.backend``.
 |      **kwargs
 |          Options to pass to matplotlib plotting method.
 |      
 |      Returns
 |      -------
 |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them
 |          If the backend is not the default matplotlib one, the return value
 |          will be the object returned by the backend.
 |      
 |      Notes
 |      -----
 |      - See matplotlib documentation online for more on this subject
 |      - If `kind` = 'bar' or 'barh', you can specify relative alignments
 |        for bar plot layout by `position` keyword.
 |        From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |        (center)
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ser = pd.Series([1, 2, 3, 3])
 |          >>> plot = ser.plot(kind='hist', title="My plot")
 |      
 |      For DataFrame:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({'length': [1.5, 0.5, 1.2, 0.9, 3],
 |          ...                   'width': [0.7, 0.2, 0.15, 0.2, 1.1]},
 |          ...                   index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])
 |          >>> plot = df.plot(title="DataFrame Plot")
 |      
 |      For SeriesGroupBy:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> lst = [-1, -2, -3, 1, 2, 3]
 |          >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |          >>> plot = ser.groupby(lambda x: x > 0).plot(title="SeriesGroupBy Plot")
 |      
 |      For DataFrameGroupBy:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({"col1" : [1, 2, 3, 4],
 |          ...                   "col2" : ["A", "B", "A", "B"]})
 |          >>> plot = df.groupby("col2").plot(kind="bar", title="DataFrameGroupBy Plot")
 |  
 |  
 |  sparse = <class 'pandas.core.arrays.sparse.accessor.SparseAccessor'>
 |      Accessor for SparseSparse from other sparse matrix data types.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([0, 0, 2, 2, 2], dtype="Sparse[int]")
 |      >>> ser.sparse.density
 |      0.6
 |      >>> ser.sparse.sp_values
 |      array([2, 2, 2])
 |  
 |  
 |  str = <class 'pandas.core.strings.accessor.StringMethods'>
 |      Vectorized string functions for Series and Index.
 |      
 |      NAs stay NA unless handled otherwise by a particular method.
 |      Patterned after Python's string methods, with some inspiration from
 |      R's stringr package.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(["A_Str_Series"])
 |      >>> s
 |      0    A_Str_Series
 |      dtype: object
 |      
 |      >>> s.str.split("_")
 |      0    [A, Str, Series]
 |      dtype: object
 |      
 |      >>> s.str.replace("_", "")
 |      0    AStrSeries
 |      dtype: object
 |  
 |  
 |  struct = <class 'pandas.core.arrays.arrow.accessors.StructAccessor'>
 |      Accessor object for structured data properties of the Series values.
 |      
 |      Parameters
 |      ----------
 |      data : Series
 |          Series containing Arrow struct data.
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  __iter__(self) -> 'Iterator'
 |      Return an iterator of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      iterator
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> for x in s:
 |      ...     print(x)
 |      1
 |      2
 |      3
 |  
 |  argmax(self, axis: 'AxisInt | None' = None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      Return int position of the largest value in the Series.
 |      
 |      If the maximum is achieved in multiple locations,
 |      the first row position is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      int
 |          Row position of the maximum value.
 |      
 |      See Also
 |      --------
 |      Series.argmax : Return position of the maximum value.
 |      Series.argmin : Return position of the minimum value.
 |      numpy.ndarray.argmax : Equivalent method for numpy arrays.
 |      Series.idxmax : Return index label of the maximum values.
 |      Series.idxmin : Return index label of the minimum values.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing cereal calories
 |      
 |      >>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,
 |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})
 |      >>> s
 |      Corn Flakes              100.0
 |      Almond Delight           110.0
 |      Cinnamon Toast Crunch    120.0
 |      Cocoa Puff               110.0
 |      dtype: float64
 |      
 |      >>> s.argmax()
 |      2
 |      >>> s.argmin()
 |      0
 |      
 |      The maximum cereal calories is the third element and
 |      the minimum cereal calories is the first element,
 |      since series is zero-indexed.
 |  
 |  argmin(self, axis: 'AxisInt | None' = None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      Return int position of the smallest value in the Series.
 |      
 |      If the minimum is achieved in multiple locations,
 |      the first row position is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      int
 |          Row position of the minimum value.
 |      
 |      See Also
 |      --------
 |      Series.argmin : Return position of the minimum value.
 |      Series.argmax : Return position of the maximum value.
 |      numpy.ndarray.argmin : Equivalent method for numpy arrays.
 |      Series.idxmax : Return index label of the maximum values.
 |      Series.idxmin : Return index label of the minimum values.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing cereal calories
 |      
 |      >>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,
 |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})
 |      >>> s
 |      Corn Flakes              100.0
 |      Almond Delight           110.0
 |      Cinnamon Toast Crunch    120.0
 |      Cocoa Puff               110.0
 |      dtype: float64
 |      
 |      >>> s.argmax()
 |      2
 |      >>> s.argmin()
 |      0
 |      
 |      The maximum cereal calories is the third element and
 |      the minimum cereal calories is the first element,
 |      since series is zero-indexed.
 |  
 |  factorize(self, sort: 'bool' = False, use_na_sentinel: 'bool' = True) -> 'tuple[npt.NDArray[np.intp], Index]'
 |      Encode the object as an enumerated type or categorical variable.
 |      
 |      This method is useful for obtaining a numeric representation of an
 |      array when all that matters is identifying distinct values. `factorize`
 |      is available as both a top-level function :func:`pandas.factorize`,
 |      and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.
 |      
 |      Parameters
 |      ----------
 |      sort : bool, default False
 |          Sort `uniques` and shuffle `codes` to maintain the
 |          relationship.
 |      
 |      use_na_sentinel : bool, default True
 |          If True, the sentinel -1 will be used for NaN values. If False,
 |          NaN values will be encoded as non-negative integers and will not drop the
 |          NaN from the uniques of the values.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      codes : ndarray
 |          An integer ndarray that's an indexer into `uniques`.
 |          ``uniques.take(codes)`` will have the same values as `values`.
 |      uniques : ndarray, Index, or Categorical
 |          The unique valid values. When `values` is Categorical, `uniques`
 |          is a Categorical. When `values` is some other pandas object, an
 |          `Index` is returned. Otherwise, a 1-D ndarray is returned.
 |      
 |          .. note::
 |      
 |             Even if there's a missing value in `values`, `uniques` will
 |             *not* contain an entry for it.
 |      
 |      See Also
 |      --------
 |      cut : Discretize continuous-valued array.
 |      unique : Find the unique value in an array.
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.factorize>` for more examples.
 |      
 |      Examples
 |      --------
 |      These examples all show factorize as a top-level method like
 |      ``pd.factorize(values)``. The results are identical for methods like
 |      :meth:`Series.factorize`.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype="O"))
 |      >>> codes
 |      array([0, 0, 1, 2, 0])
 |      >>> uniques
 |      array(['b', 'a', 'c'], dtype=object)
 |      
 |      With ``sort=True``, the `uniques` will be sorted, and `codes` will be
 |      shuffled so that the relationship is the maintained.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype="O"),
 |      ...                               sort=True)
 |      >>> codes
 |      array([1, 1, 0, 2, 1])
 |      >>> uniques
 |      array(['a', 'b', 'c'], dtype=object)
 |      
 |      When ``use_na_sentinel=True`` (the default), missing values are indicated in
 |      the `codes` with the sentinel value ``-1`` and missing values are not
 |      included in `uniques`.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype="O"))
 |      >>> codes
 |      array([ 0, -1,  1,  2,  0])
 |      >>> uniques
 |      array(['b', 'a', 'c'], dtype=object)
 |      
 |      Thus far, we've only factorized lists (which are internally coerced to
 |      NumPy arrays). When factorizing pandas objects, the type of `uniques`
 |      will differ. For Categoricals, a `Categorical` is returned.
 |      
 |      >>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])
 |      >>> codes, uniques = pd.factorize(cat)
 |      >>> codes
 |      array([0, 0, 1])
 |      >>> uniques
 |      ['a', 'c']
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      Notice that ``'b'`` is in ``uniques.categories``, despite not being
 |      present in ``cat.values``.
 |      
 |      For all other pandas objects, an Index of the appropriate type is
 |      returned.
 |      
 |      >>> cat = pd.Series(['a', 'a', 'c'])
 |      >>> codes, uniques = pd.factorize(cat)
 |      >>> codes
 |      array([0, 0, 1])
 |      >>> uniques
 |      Index(['a', 'c'], dtype='object')
 |      
 |      If NaN is in the values, and we want to include NaN in the uniques of the
 |      values, it can be achieved by setting ``use_na_sentinel=False``.
 |      
 |      >>> values = np.array([1, 2, 1, np.nan])
 |      >>> codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True
 |      >>> codes
 |      array([ 0,  1,  0, -1])
 |      >>> uniques
 |      array([1., 2.])
 |      
 |      >>> codes, uniques = pd.factorize(values, use_na_sentinel=False)
 |      >>> codes
 |      array([0, 1, 0, 2])
 |      >>> uniques
 |      array([ 1.,  2., nan])
 |  
 |  item(self)
 |      Return the first element of the underlying data as a Python scalar.
 |      
 |      Returns
 |      -------
 |      scalar
 |          The first element of Series or Index.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If the data is not length = 1.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1])
 |      >>> s.item()
 |      1
 |      
 |      For an index:
 |      
 |      >>> s = pd.Series([1], index=['a'])
 |      >>> s.index.item()
 |      'a'
 |  
 |  nunique(self, dropna: 'bool' = True) -> 'int'
 |      Return number of unique elements in the object.
 |      
 |      Excludes NA values by default.
 |      
 |      Parameters
 |      ----------
 |      dropna : bool, default True
 |          Don't include NaN in the count.
 |      
 |      Returns
 |      -------
 |      int
 |      
 |      See Also
 |      --------
 |      DataFrame.nunique: Method nunique for DataFrame.
 |      Series.count: Count non-NA/null observations in the Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 3, 5, 7, 7])
 |      >>> s
 |      0    1
 |      1    3
 |      2    5
 |      3    7
 |      4    7
 |      dtype: int64
 |      
 |      >>> s.nunique()
 |      4
 |  
 |  to_list = tolist(self)
 |  
 |  to_numpy(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>, **kwargs) -> 'np.ndarray'
 |      A NumPy ndarray representing the values in this Series or Index.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or numpy.dtype, optional
 |          The dtype to pass to :meth:`numpy.asarray`.
 |      copy : bool, default False
 |          Whether to ensure that the returned value is not a view on
 |          another array. Note that ``copy=False`` does not *ensure* that
 |          ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that
 |          a copy is made, even if not strictly necessary.
 |      na_value : Any, optional
 |          The value to use for missing values. The default value depends
 |          on `dtype` and the type of the array.
 |      **kwargs
 |          Additional keywords passed through to the ``to_numpy`` method
 |          of the underlying array (for extension arrays).
 |      
 |      Returns
 |      -------
 |      numpy.ndarray
 |      
 |      See Also
 |      --------
 |      Series.array : Get the actual data stored within.
 |      Index.array : Get the actual data stored within.
 |      DataFrame.to_numpy : Similar method for DataFrame.
 |      
 |      Notes
 |      -----
 |      The returned array will be the same up to equality (values equal
 |      in `self` will be equal in the returned array; likewise for values
 |      that are not equal). When `self` contains an ExtensionArray, the
 |      dtype may be different. For example, for a category-dtype Series,
 |      ``to_numpy()`` will return a NumPy array and the categorical dtype
 |      will be lost.
 |      
 |      For NumPy dtypes, this will be a reference to the actual data stored
 |      in this Series or Index (assuming ``copy=False``). Modifying the result
 |      in place will modify the data stored in the Series or Index (not that
 |      we recommend doing that).
 |      
 |      For extension types, ``to_numpy()`` *may* require copying data and
 |      coercing the result to a NumPy type (possibly object), which may be
 |      expensive. When you need a no-copy reference to the underlying data,
 |      :attr:`Series.array` should be used instead.
 |      
 |      This table lays out the different dtypes and default return types of
 |      ``to_numpy()`` for various dtypes within pandas.
 |      
 |      ================== ================================
 |      dtype              array type
 |      ================== ================================
 |      category[T]        ndarray[T] (same dtype as input)
 |      period             ndarray[object] (Periods)
 |      interval           ndarray[object] (Intervals)
 |      IntegerNA          ndarray[object]
 |      datetime64[ns]     datetime64[ns]
 |      datetime64[ns, tz] ndarray[object] (Timestamps)
 |      ================== ================================
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))
 |      >>> ser.to_numpy()
 |      array(['a', 'b', 'a'], dtype=object)
 |      
 |      Specify the `dtype` to control how datetime-aware data is represented.
 |      Use ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`
 |      objects, each with the correct ``tz``.
 |      
 |      >>> ser = pd.Series(pd.date_range('2000', periods=2, tz="CET"))
 |      >>> ser.to_numpy(dtype=object)
 |      array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),
 |             Timestamp('2000-01-02 00:00:00+0100', tz='CET')],
 |            dtype=object)
 |      
 |      Or ``dtype='datetime64[ns]'`` to return an ndarray of native
 |      datetime64 values. The values are converted to UTC and the timezone
 |      info is dropped.
 |      
 |      >>> ser.to_numpy(dtype="datetime64[ns]")
 |      ... # doctest: +ELLIPSIS
 |      array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],
 |            dtype='datetime64[ns]')
 |  
 |  tolist(self)
 |      Return a list of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      list
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.tolist : Return the array as an a.ndim-levels deep
 |          nested list of Python scalars.
 |      
 |      Examples
 |      --------
 |      For Series
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.to_list()
 |      [1, 2, 3]
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      
 |      >>> idx.to_list()
 |      [1, 2, 3]
 |  
 |  transpose(self, *args, **kwargs) -> 'Self'
 |      Return the transpose, which is by definition self.
 |      
 |      Returns
 |      -------
 |      %(klass)s
 |  
 |  value_counts(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True) -> 'Series'
 |      Return a Series containing counts of unique values.
 |      
 |      The resulting object will be in descending order so that the
 |      first element is the most frequently-occurring element.
 |      Excludes NA values by default.
 |      
 |      Parameters
 |      ----------
 |      normalize : bool, default False
 |          If True then the object returned will contain the relative
 |          frequencies of the unique values.
 |      sort : bool, default True
 |          Sort by frequencies when True. Preserve the order of the data when False.
 |      ascending : bool, default False
 |          Sort in ascending order.
 |      bins : int, optional
 |          Rather than count values, group them into half-open bins,
 |          a convenience for ``pd.cut``, only works with numeric data.
 |      dropna : bool, default True
 |          Don't include counts of NaN.
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      See Also
 |      --------
 |      Series.count: Number of non-NA elements in a Series.
 |      DataFrame.count: Number of non-NA elements in a DataFrame.
 |      DataFrame.value_counts: Equivalent method on DataFrames.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index([3, 1, 2, 3, 4, np.nan])
 |      >>> index.value_counts()
 |      3.0    2
 |      1.0    1
 |      2.0    1
 |      4.0    1
 |      Name: count, dtype: int64
 |      
 |      With `normalize` set to `True`, returns the relative frequency by
 |      dividing all values by the sum of values.
 |      
 |      >>> s = pd.Series([3, 1, 2, 3, 4, np.nan])
 |      >>> s.value_counts(normalize=True)
 |      3.0    0.4
 |      1.0    0.2
 |      2.0    0.2
 |      4.0    0.2
 |      Name: proportion, dtype: float64
 |      
 |      **bins**
 |      
 |      Bins can be useful for going from a continuous variable to a
 |      categorical variable; instead of counting unique
 |      apparitions of values, divide the index in the specified
 |      number of half-open bins.
 |      
 |      >>> s.value_counts(bins=3)
 |      (0.996, 2.0]    2
 |      (2.0, 3.0]      2
 |      (3.0, 4.0]      1
 |      Name: count, dtype: int64
 |      
 |      **dropna**
 |      
 |      With `dropna` set to `False` we can also see NaN index values.
 |      
 |      >>> s.value_counts(dropna=False)
 |      3.0    2
 |      1.0    1
 |      2.0    1
 |      4.0    1
 |      NaN    1
 |      Name: count, dtype: int64
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  T
 |      Return the transpose, which is by definition self.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.T
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.T
 |      Index([1, 2, 3], dtype='int64')
 |  
 |  empty
 |  
 |  is_monotonic_decreasing
 |      Return boolean if values in the object are monotonically decreasing.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([3, 2, 2, 1])
 |      >>> s.is_monotonic_decreasing
 |      True
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.is_monotonic_decreasing
 |      False
 |  
 |  is_monotonic_increasing
 |      Return boolean if values in the object are monotonically increasing.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 2])
 |      >>> s.is_monotonic_increasing
 |      True
 |      
 |      >>> s = pd.Series([3, 2, 1])
 |      >>> s.is_monotonic_increasing
 |      False
 |  
 |  is_unique
 |      Return boolean if values in the object are unique.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.is_unique
 |      True
 |      
 |      >>> s = pd.Series([1, 2, 3, 1])
 |      >>> s.is_unique
 |      False
 |  
 |  nbytes
 |      Return the number of bytes in the underlying data.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.nbytes
 |      24
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.nbytes
 |      24
 |  
 |  ndim
 |      Number of dimensions of the underlying data, by definition 1.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.ndim
 |      1
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.ndim
 |      1
 |  
 |  shape
 |      Return a tuple of the shape of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.shape
 |      (3,)
 |  
 |  size
 |      Return the number of elements in the underlying data.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.size
 |      3
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.size
 |      3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  __array_priority__ = 1000
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __add__(self, other)
 |      Get Addition of DataFrame and other, column-wise.
 |      
 |      Equivalent to ``DataFrame.add(other)``.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Object to be added to the DataFrame.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The result of adding ``other`` to DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add a DataFrame and another object, with option for index-
 |          or column-oriented addition.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'height': [1.5, 2.6], 'weight': [500, 800]},
 |      ...                   index=['elk', 'moose'])
 |      >>> df
 |             height  weight
 |      elk       1.5     500
 |      moose     2.6     800
 |      
 |      Adding a scalar affects all rows and columns.
 |      
 |      >>> df[['height', 'weight']] + 1.5
 |             height  weight
 |      elk       3.0   501.5
 |      moose     4.1   801.5
 |      
 |      Each element of a list is added to a column of the DataFrame, in order.
 |      
 |      >>> df[['height', 'weight']] + [0.5, 1.5]
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      Keys of a dictionary are aligned to the DataFrame, based on column names;
 |      each value in the dictionary is added to the corresponding column.
 |      
 |      >>> df[['height', 'weight']] + {'height': 0.5, 'weight': 1.5}
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      When `other` is a :class:`Series`, the index of `other` is aligned with the
 |      columns of the DataFrame.
 |      
 |      >>> s1 = pd.Series([0.5, 1.5], index=['weight', 'height'])
 |      >>> df[['height', 'weight']] + s1
 |             height  weight
 |      elk       3.0   500.5
 |      moose     4.1   800.5
 |      
 |      Even when the index of `other` is the same as the index of the DataFrame,
 |      the :class:`Series` will not be reoriented. If index-wise alignment is desired,
 |      :meth:`DataFrame.add` should be used with `axis='index'`.
 |      
 |      >>> s2 = pd.Series([0.5, 1.5], index=['elk', 'moose'])
 |      >>> df[['height', 'weight']] + s2
 |             elk  height  moose  weight
 |      elk    NaN     NaN    NaN     NaN
 |      moose  NaN     NaN    NaN     NaN
 |      
 |      >>> df[['height', 'weight']].add(s2, axis='index')
 |             height  weight
 |      elk       2.0   500.5
 |      moose     4.1   801.5
 |      
 |      When `other` is a :class:`DataFrame`, both columns names and the
 |      index are aligned.
 |      
 |      >>> other = pd.DataFrame({'height': [0.2, 0.4, 0.6]},
 |      ...                      index=['elk', 'moose', 'deer'])
 |      >>> df[['height', 'weight']] + other
 |             height  weight
 |      deer      NaN     NaN
 |      elk       1.7     NaN
 |      moose     3.0     NaN
 |  
 |  __and__(self, other)
 |  
 |  __divmod__(self, other)
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __floordiv__(self, other)
 |  
 |  __ge__(self, other)
 |      Return self>=value.
 |  
 |  __gt__(self, other)
 |      Return self>value.
 |  
 |  __le__(self, other)
 |      Return self<=value.
 |  
 |  __lt__(self, other)
 |      Return self<value.
 |  
 |  __mod__(self, other)
 |  
 |  __mul__(self, other)
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __or__(self, other)
 |  
 |  __pow__(self, other)
 |  
 |  __radd__(self, other)
 |  
 |  __rand__(self, other)
 |  
 |  __rdivmod__(self, other)
 |  
 |  __rfloordiv__(self, other)
 |  
 |  __rmod__(self, other)
 |  
 |  __rmul__(self, other)
 |  
 |  __ror__(self, other)
 |  
 |  __rpow__(self, other)
 |  
 |  __rsub__(self, other)
 |  
 |  __rtruediv__(self, other)
 |  
 |  __rxor__(self, other)
 |  
 |  __sub__(self, other)
 |  
 |  __truediv__(self, other)
 |  
 |  __xor__(self, other)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __hash__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.generic.NDFrame:
 |  
 |  __abs__(self) -> 'Self'
 |  
 |  __array_ufunc__(self, ufunc: 'np.ufunc', method: 'str', *inputs: 'Any', **kwargs: 'Any')
 |  
 |  __bool__ = __nonzero__(self) -> 'NoReturn'
 |  
 |  __contains__(self, key) -> 'bool_t'
 |      True if the key is in the info axis
 |  
 |  __copy__(self, deep: 'bool_t' = True) -> 'Self'
 |  
 |  __deepcopy__(self, memo=None) -> 'Self'
 |      Parameters
 |      ----------
 |      memo, default None
 |          Standard signature. Unused
 |  
 |  __delitem__(self, key) -> 'None'
 |      Delete item
 |  
 |  __finalize__(self, other, method: 'str | None' = None, **kwargs) -> 'Self'
 |      Propagate metadata from other to self.
 |      
 |      Parameters
 |      ----------
 |      other : the object from which to get the attributes that we are going
 |          to propagate
 |      method : str, optional
 |          A passed method name providing context on where ``__finalize__``
 |          was called.
 |      
 |          .. warning::
 |      
 |             The value passed as `method` are not currently considered
 |             stable across pandas releases.
 |  
 |  __getattr__(self, name: 'str')
 |      After regular attribute access, try looking up the name
 |      This allows simpler access to columns for interactive use.
 |  
 |  __getstate__(self) -> 'dict[str, Any]'
 |  
 |  __iadd__(self, other) -> 'Self'
 |  
 |  __iand__(self, other) -> 'Self'
 |  
 |  __ifloordiv__(self, other) -> 'Self'
 |  
 |  __imod__(self, other) -> 'Self'
 |  
 |  __imul__(self, other) -> 'Self'
 |  
 |  __invert__(self) -> 'Self'
 |  
 |  __ior__(self, other) -> 'Self'
 |  
 |  __ipow__(self, other) -> 'Self'
 |  
 |  __isub__(self, other) -> 'Self'
 |  
 |  __itruediv__(self, other) -> 'Self'
 |  
 |  __ixor__(self, other) -> 'Self'
 |  
 |  __neg__(self) -> 'Self'
 |  
 |  __nonzero__(self) -> 'NoReturn'
 |  
 |  __pos__(self) -> 'Self'
 |  
 |  __round__(self, decimals: 'int' = 0) -> 'Self'
 |  
 |  __setattr__(self, name: 'str', value) -> 'None'
 |      After regular attribute access, try setting the name
 |      This allows simpler access to columns for interactive use.
 |  
 |  __setstate__(self, state) -> 'None'
 |  
 |  abs(self) -> 'Self'
 |      Return a Series/DataFrame with absolute numeric value of each element.
 |      
 |      This function only applies to elements that are all numeric.
 |      
 |      Returns
 |      -------
 |      abs
 |          Series/DataFrame containing the absolute value of each element.
 |      
 |      See Also
 |      --------
 |      numpy.absolute : Calculate the absolute value element-wise.
 |      
 |      Notes
 |      -----
 |      For ``complex`` inputs, ``1.2 + 1j``, the absolute value is
 |      :math:`\sqrt{ a^2 + b^2 }`.
 |      
 |      Examples
 |      --------
 |      Absolute numeric values in a Series.
 |      
 |      >>> s = pd.Series([-1.10, 2, -3.33, 4])
 |      >>> s.abs()
 |      0    1.10
 |      1    2.00
 |      2    3.33
 |      3    4.00
 |      dtype: float64
 |      
 |      Absolute numeric values in a Series with complex numbers.
 |      
 |      >>> s = pd.Series([1.2 + 1j])
 |      >>> s.abs()
 |      0    1.56205
 |      dtype: float64
 |      
 |      Absolute numeric values in a Series with a Timedelta element.
 |      
 |      >>> s = pd.Series([pd.Timedelta('1 days')])
 |      >>> s.abs()
 |      0   1 days
 |      dtype: timedelta64[ns]
 |      
 |      Select rows with data closest to certain value using argsort (from
 |      `StackOverflow <https://stackoverflow.com/a/17758115>`__).
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'a': [4, 5, 6, 7],
 |      ...     'b': [10, 20, 30, 40],
 |      ...     'c': [100, 50, -30, -50]
 |      ... })
 |      >>> df
 |           a    b    c
 |      0    4   10  100
 |      1    5   20   50
 |      2    6   30  -30
 |      3    7   40  -50
 |      >>> df.loc[(df.c - 43).abs().argsort()]
 |           a    b    c
 |      1    5   20   50
 |      0    4   10  100
 |      2    6   30  -30
 |      3    7   40  -50
 |  
 |  add_prefix(self, prefix: 'str', axis: 'Axis | None' = None) -> 'Self'
 |      Prefix labels with string `prefix`.
 |      
 |      For Series, the row labels are prefixed.
 |      For DataFrame, the column labels are prefixed.
 |      
 |      Parameters
 |      ----------
 |      prefix : str
 |          The string to add before each label.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to add prefix on
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          New Series or DataFrame with updated labels.
 |      
 |      See Also
 |      --------
 |      Series.add_suffix: Suffix row labels with string `suffix`.
 |      DataFrame.add_suffix: Suffix column labels with string `suffix`.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |      
 |      >>> s.add_prefix('item_')
 |      item_0    1
 |      item_1    2
 |      item_2    3
 |      item_3    4
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
 |      >>> df
 |         A  B
 |      0  1  3
 |      1  2  4
 |      2  3  5
 |      3  4  6
 |      
 |      >>> df.add_prefix('col_')
 |           col_A  col_B
 |      0       1       3
 |      1       2       4
 |      2       3       5
 |      3       4       6
 |  
 |  add_suffix(self, suffix: 'str', axis: 'Axis | None' = None) -> 'Self'
 |      Suffix labels with string `suffix`.
 |      
 |      For Series, the row labels are suffixed.
 |      For DataFrame, the column labels are suffixed.
 |      
 |      Parameters
 |      ----------
 |      suffix : str
 |          The string to add after each label.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to add suffix on
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          New Series or DataFrame with updated labels.
 |      
 |      See Also
 |      --------
 |      Series.add_prefix: Prefix row labels with string `prefix`.
 |      DataFrame.add_prefix: Prefix column labels with string `prefix`.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |      
 |      >>> s.add_suffix('_item')
 |      0_item    1
 |      1_item    2
 |      2_item    3
 |      3_item    4
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
 |      >>> df
 |         A  B
 |      0  1  3
 |      1  2  4
 |      2  3  5
 |      3  4  6
 |      
 |      >>> df.add_suffix('_col')
 |           A_col  B_col
 |      0       1       3
 |      1       2       4
 |      2       3       5
 |      3       4       6
 |  
 |  align(self, other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, fill_axis: 'Axis | lib.NoDefault' = <no_default>, broadcast_axis: 'Axis | None | lib.NoDefault' = <no_default>) -> 'tuple[Self, NDFrameT]'
 |      Align two objects on their axes with the specified join method.
 |      
 |      Join method is specified for each axis Index.
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame or Series
 |      join : {'outer', 'inner', 'left', 'right'}, default 'outer'
 |          Type of alignment to be performed.
 |      
 |          * left: use only keys from left frame, preserve key order.
 |          * right: use only keys from right frame, preserve key order.
 |          * outer: use union of keys from both frames, sort keys lexicographically.
 |          * inner: use intersection of keys from both frames,
 |            preserve the order of the left keys.
 |      
 |      axis : allowed axis of the other object, default None
 |          Align on index (0), columns (1), or both (None).
 |      level : int or level name, default None
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      copy : bool, default True
 |          Always returns new objects. If copy=False and no reindexing is
 |          required then original objects are returned.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      fill_value : scalar, default np.nan
 |          Value to use for missing values. Defaults to NaN, but can be any
 |          "compatible" value.
 |      method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None
 |          Method to use for filling holes in reindexed Series:
 |      
 |          - pad / ffill: propagate last valid observation forward to next valid.
 |          - backfill / bfill: use NEXT valid observation to fill gap.
 |      
 |          .. deprecated:: 2.1
 |      
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      
 |          .. deprecated:: 2.1
 |      
 |      fill_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default 0
 |          Filling axis, method and limit.
 |      
 |          .. deprecated:: 2.1
 |      
 |      broadcast_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default None
 |          Broadcast values along this axis, if aligning two objects of
 |          different dimensions.
 |      
 |          .. deprecated:: 2.1
 |      
 |      Returns
 |      -------
 |      tuple of (Series/DataFrame, type of other)
 |          Aligned objects.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=["D", "B", "E", "A"], index=[1, 2]
 |      ... )
 |      >>> other = pd.DataFrame(
 |      ...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],
 |      ...     columns=["A", "B", "C", "D"],
 |      ...     index=[2, 3, 4],
 |      ... )
 |      >>> df
 |         D  B  E  A
 |      1  1  2  3  4
 |      2  6  7  8  9
 |      >>> other
 |          A    B    C    D
 |      2   10   20   30   40
 |      3   60   70   80   90
 |      4  600  700  800  900
 |      
 |      Align on columns:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=1)
 |      >>> left
 |         A  B   C  D  E
 |      1  4  2 NaN  1  3
 |      2  9  7 NaN  6  8
 |      >>> right
 |          A    B    C    D   E
 |      2   10   20   30   40 NaN
 |      3   60   70   80   90 NaN
 |      4  600  700  800  900 NaN
 |      
 |      We can also align on the index:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=0)
 |      >>> left
 |          D    B    E    A
 |      1  1.0  2.0  3.0  4.0
 |      2  6.0  7.0  8.0  9.0
 |      3  NaN  NaN  NaN  NaN
 |      4  NaN  NaN  NaN  NaN
 |      >>> right
 |          A      B      C      D
 |      1    NaN    NaN    NaN    NaN
 |      2   10.0   20.0   30.0   40.0
 |      3   60.0   70.0   80.0   90.0
 |      4  600.0  700.0  800.0  900.0
 |      
 |      Finally, the default `axis=None` will align on both index and columns:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=None)
 |      >>> left
 |           A    B   C    D    E
 |      1  4.0  2.0 NaN  1.0  3.0
 |      2  9.0  7.0 NaN  6.0  8.0
 |      3  NaN  NaN NaN  NaN  NaN
 |      4  NaN  NaN NaN  NaN  NaN
 |      >>> right
 |             A      B      C      D   E
 |      1    NaN    NaN    NaN    NaN NaN
 |      2   10.0   20.0   30.0   40.0 NaN
 |      3   60.0   70.0   80.0   90.0 NaN
 |      4  600.0  700.0  800.0  900.0 NaN
 |  
 |  asfreq(self, freq: 'Frequency', method: 'FillnaOptions | None' = None, how: "Literal['start', 'end'] | None" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -> 'Self'
 |      Convert time series to specified frequency.
 |      
 |      Returns the original data conformed to a new index with the specified
 |      frequency.
 |      
 |      If the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index
 |      is the result of transforming the original index with
 |      :meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index
 |      will map one-to-one to the new index).
 |      
 |      Otherwise, the new index will be equivalent to ``pd.date_range(start, end,
 |      freq=freq)`` where ``start`` and ``end`` are, respectively, the first and
 |      last entries in the original index (see :func:`pandas.date_range`). The
 |      values corresponding to any timesteps in the new index which were not present
 |      in the original index will be null (``NaN``), unless a method for filling
 |      such unknowns is provided (see the ``method`` parameter below).
 |      
 |      The :meth:`resample` method is more appropriate if an operation on each group of
 |      timesteps (such as an aggregate) is necessary to represent the data at the new
 |      frequency.
 |      
 |      Parameters
 |      ----------
 |      freq : DateOffset or str
 |          Frequency DateOffset or string.
 |      method : {'backfill'/'bfill', 'pad'/'ffill'}, default None
 |          Method to use for filling holes in reindexed Series (note this
 |          does not fill NaNs that already were present):
 |      
 |          * 'pad' / 'ffill': propagate last valid observation forward to next
 |            valid
 |          * 'backfill' / 'bfill': use NEXT valid observation to fill.
 |      how : {'start', 'end'}, default end
 |          For PeriodIndex only (see PeriodIndex.asfreq).
 |      normalize : bool, default False
 |          Whether to reset output index to midnight.
 |      fill_value : scalar, optional
 |          Value to use for missing values, applied during upsampling (note
 |          this does not fill NaNs that already were present).
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Series/DataFrame object reindexed to the specified frequency.
 |      
 |      See Also
 |      --------
 |      reindex : Conform DataFrame to new index with optional filling logic.
 |      
 |      Notes
 |      -----
 |      To learn more about the frequency strings, please see `this link
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
 |      
 |      Examples
 |      --------
 |      Start by creating a series with 4 one minute timestamps.
 |      
 |      >>> index = pd.date_range('1/1/2000', periods=4, freq='min')
 |      >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)
 |      >>> df = pd.DataFrame({'s': series})
 |      >>> df
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample the series into 30 second bins.
 |      
 |      >>> df.asfreq(freq='30s')
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    NaN
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    NaN
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    NaN
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample again, providing a ``fill value``.
 |      
 |      >>> df.asfreq(freq='30s', fill_value=9.0)
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    9.0
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    9.0
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    9.0
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample again, providing a ``method``.
 |      
 |      >>> df.asfreq(freq='30s', method='bfill')
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    NaN
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    2.0
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    3.0
 |      2000-01-01 00:03:00    3.0
 |  
 |  asof(self, where, subset=None)
 |      Return the last row(s) without any NaNs before `where`.
 |      
 |      The last row (for each element in `where`, if list) without any
 |      NaN is taken.
 |      In case of a :class:`~pandas.DataFrame`, the last row without NaN
 |      considering only the subset of columns (if not `None`)
 |      
 |      If there is no good value, NaN is returned for a Series or
 |      a Series of NaN values for a DataFrame
 |      
 |      Parameters
 |      ----------
 |      where : date or array-like of dates
 |          Date(s) before which the last row(s) are returned.
 |      subset : str or array-like of str, default `None`
 |          For DataFrame, if not `None`, only use these columns to
 |          check for NaNs.
 |      
 |      Returns
 |      -------
 |      scalar, Series, or DataFrame
 |      
 |          The return can be:
 |      
 |          * scalar : when `self` is a Series and `where` is a scalar
 |          * Series: when `self` is a Series and `where` is an array-like,
 |            or when `self` is a DataFrame and `where` is a scalar
 |          * DataFrame : when `self` is a DataFrame and `where` is an
 |            array-like
 |      
 |      See Also
 |      --------
 |      merge_asof : Perform an asof merge. Similar to left join.
 |      
 |      Notes
 |      -----
 |      Dates are assumed to be sorted. Raises if this is not the case.
 |      
 |      Examples
 |      --------
 |      A Series and a scalar `where`.
 |      
 |      >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])
 |      >>> s
 |      10    1.0
 |      20    2.0
 |      30    NaN
 |      40    4.0
 |      dtype: float64
 |      
 |      >>> s.asof(20)
 |      2.0
 |      
 |      For a sequence `where`, a Series is returned. The first value is
 |      NaN, because the first element of `where` is before the first
 |      index value.
 |      
 |      >>> s.asof([5, 20])
 |      5     NaN
 |      20    2.0
 |      dtype: float64
 |      
 |      Missing values are not considered. The following is ``2.0``, not
 |      NaN, even though NaN is at the index location for ``30``.
 |      
 |      >>> s.asof(30)
 |      2.0
 |      
 |      Take all columns into consideration
 |      
 |      >>> df = pd.DataFrame({'a': [10., 20., 30., 40., 50.],
 |      ...                    'b': [None, None, None, None, 500]},
 |      ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',
 |      ...                                           '2018-02-27 09:02:00',
 |      ...                                           '2018-02-27 09:03:00',
 |      ...                                           '2018-02-27 09:04:00',
 |      ...                                           '2018-02-27 09:05:00']))
 |      >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',
 |      ...                           '2018-02-27 09:04:30']))
 |                            a   b
 |      2018-02-27 09:03:30 NaN NaN
 |      2018-02-27 09:04:30 NaN NaN
 |      
 |      Take a single column into consideration
 |      
 |      >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',
 |      ...                           '2018-02-27 09:04:30']),
 |      ...         subset=['a'])
 |                              a   b
 |      2018-02-27 09:03:30  30.0 NaN
 |      2018-02-27 09:04:30  40.0 NaN
 |  
 |  astype(self, dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -> 'Self'
 |      Cast a pandas object to a specified dtype ``dtype``.
 |      
 |      Parameters
 |      ----------
 |      dtype : str, data type, Series or Mapping of column name -> data type
 |          Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to
 |          cast entire pandas object to the same type. Alternatively, use a
 |          mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is
 |          a numpy.dtype or Python type to cast one or more of the DataFrame's
 |          columns to column-specific types.
 |      copy : bool, default True
 |          Return a copy when ``copy=True`` (be very careful setting
 |          ``copy=False`` as changes to values then may propagate to other
 |          pandas objects).
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      errors : {'raise', 'ignore'}, default 'raise'
 |          Control raising of exceptions on invalid data for provided dtype.
 |      
 |          - ``raise`` : allow exceptions to be raised
 |          - ``ignore`` : suppress exceptions. On error return original object.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |      
 |      See Also
 |      --------
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to a numeric type.
 |      numpy.ndarray.astype : Cast a numpy array to a specified type.
 |      
 |      Notes
 |      -----
 |      .. versionchanged:: 2.0.0
 |      
 |          Using ``astype`` to convert from timezone-naive dtype to
 |          timezone-aware dtype will raise an exception.
 |          Use :meth:`Series.dt.tz_localize` instead.
 |      
 |      Examples
 |      --------
 |      Create a DataFrame:
 |      
 |      >>> d = {'col1': [1, 2], 'col2': [3, 4]}
 |      >>> df = pd.DataFrame(data=d)
 |      >>> df.dtypes
 |      col1    int64
 |      col2    int64
 |      dtype: object
 |      
 |      Cast all columns to int32:
 |      
 |      >>> df.astype('int32').dtypes
 |      col1    int32
 |      col2    int32
 |      dtype: object
 |      
 |      Cast col1 to int32 using a dictionary:
 |      
 |      >>> df.astype({'col1': 'int32'}).dtypes
 |      col1    int32
 |      col2    int64
 |      dtype: object
 |      
 |      Create a series:
 |      
 |      >>> ser = pd.Series([1, 2], dtype='int32')
 |      >>> ser
 |      0    1
 |      1    2
 |      dtype: int32
 |      >>> ser.astype('int64')
 |      0    1
 |      1    2
 |      dtype: int64
 |      
 |      Convert to categorical type:
 |      
 |      >>> ser.astype('category')
 |      0    1
 |      1    2
 |      dtype: category
 |      Categories (2, int32): [1, 2]
 |      
 |      Convert to ordered categorical type with custom ordering:
 |      
 |      >>> from pandas.api.types import CategoricalDtype
 |      >>> cat_dtype = CategoricalDtype(
 |      ...     categories=[2, 1], ordered=True)
 |      >>> ser.astype(cat_dtype)
 |      0    1
 |      1    2
 |      dtype: category
 |      Categories (2, int64): [2 < 1]
 |      
 |      Create a series of dates:
 |      
 |      >>> ser_date = pd.Series(pd.date_range('20200101', periods=3))
 |      >>> ser_date
 |      0   2020-01-01
 |      1   2020-01-02
 |      2   2020-01-03
 |      dtype: datetime64[ns]
 |  
 |  at_time(self, time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -> 'Self'
 |      Select values at particular time of day (e.g., 9:30AM).
 |      
 |      Parameters
 |      ----------
 |      time : datetime.time or str
 |          The values to select.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      between_time : Select values between particular times of the day.
 |      first : Select initial periods of time series based on a date offset.
 |      last : Select final periods of time series based on a date offset.
 |      DatetimeIndex.indexer_at_time : Get just the index locations for
 |          values at particular time of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='12h')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-09 12:00:00  2
 |      2018-04-10 00:00:00  3
 |      2018-04-10 12:00:00  4
 |      
 |      >>> ts.at_time('12:00')
 |                           A
 |      2018-04-09 12:00:00  2
 |      2018-04-10 12:00:00  4
 |  
 |  backfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by using the next valid observation to fill the gap.
 |      
 |      .. deprecated:: 2.0
 |      
 |          Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.bfill` or :meth:`Series.bfill`.
 |  
 |  between_time(self, start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -> 'Self'
 |      Select values between particular times of the day (e.g., 9:00-9:30 AM).
 |      
 |      By setting ``start_time`` to be later than ``end_time``,
 |      you can get the times that are *not* between the two times.
 |      
 |      Parameters
 |      ----------
 |      start_time : datetime.time or str
 |          Initial time as a time filter limit.
 |      end_time : datetime.time or str
 |          End time as a time filter limit.
 |      inclusive : {"both", "neither", "left", "right"}, default "both"
 |          Include boundaries; whether to set each bound as closed or open.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Determine range time on index or columns value.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Data from the original object filtered to the specified dates range.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      at_time : Select values at a particular time of the day.
 |      first : Select initial periods of time series based on a date offset.
 |      last : Select final periods of time series based on a date offset.
 |      DatetimeIndex.indexer_between_time : Get just the index locations for
 |          values between particular times of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-10 00:20:00  2
 |      2018-04-11 00:40:00  3
 |      2018-04-12 01:00:00  4
 |      
 |      >>> ts.between_time('0:15', '0:45')
 |                           A
 |      2018-04-10 00:20:00  2
 |      2018-04-11 00:40:00  3
 |      
 |      You get the times that are *not* between two times by setting
 |      ``start_time`` later than ``end_time``:
 |      
 |      >>> ts.between_time('0:45', '0:15')
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-12 01:00:00  4
 |  
 |  bfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by using the next valid observation to fill the gap.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      limit_area : {`None`, 'inside', 'outside'}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([1, None, None, 2])
 |      >>> s.bfill()
 |      0    1.0
 |      1    2.0
 |      2    2.0
 |      3    2.0
 |      dtype: float64
 |      >>> s.bfill(limit=1)
 |      0    1.0
 |      1    NaN
 |      2    2.0
 |      3    2.0
 |      dtype: float64
 |      
 |      With DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})
 |      >>> df
 |            A     B
 |      0   1.0   NaN
 |      1   NaN   5.0
 |      2   NaN   NaN
 |      3   4.0   7.0
 |      >>> df.bfill()
 |            A     B
 |      0   1.0   5.0
 |      1   4.0   5.0
 |      2   4.0   7.0
 |      3   4.0   7.0
 |      >>> df.bfill(limit=1)
 |            A     B
 |      0   1.0   5.0
 |      1   NaN   5.0
 |      2   4.0   7.0
 |      3   4.0   7.0
 |  
 |  bool(self) -> 'bool_t'
 |      Return the bool of a single element Series or DataFrame.
 |      
 |      .. deprecated:: 2.1.0
 |      
 |         bool is deprecated and will be removed in future version of pandas.
 |         For ``Series`` use ``pandas.Series.item``.
 |      
 |      This must be a boolean scalar value, either True or False. It will raise a
 |      ValueError if the Series or DataFrame does not have exactly 1 element, or that
 |      element is not boolean (integer values 0 and 1 will also raise an exception).
 |      
 |      Returns
 |      -------
 |      bool
 |          The value in the Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      Series.astype : Change the data type of a Series, including to boolean.
 |      DataFrame.astype : Change the data type of a DataFrame, including to boolean.
 |      numpy.bool_ : NumPy boolean data type, used by pandas for boolean values.
 |      
 |      Examples
 |      --------
 |      The method will only work for single element objects with a boolean value:
 |      
 |      >>> pd.Series([True]).bool()  # doctest: +SKIP
 |      True
 |      >>> pd.Series([False]).bool()  # doctest: +SKIP
 |      False
 |      
 |      >>> pd.DataFrame({'col': [True]}).bool()  # doctest: +SKIP
 |      True
 |      >>> pd.DataFrame({'col': [False]}).bool()  # doctest: +SKIP
 |      False
 |      
 |      This is an alternative method and will only work
 |      for single element objects with a boolean value:
 |      
 |      >>> pd.Series([True]).item()  # doctest: +SKIP
 |      True
 |      >>> pd.Series([False]).item()  # doctest: +SKIP
 |      False
 |  
 |  clip(self, lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -> 'Self | None'
 |      Trim values at input threshold(s).
 |      
 |      Assigns values outside boundary to boundary values. Thresholds
 |      can be singular values or array like, and in the latter case
 |      the clipping is performed element-wise in the specified axis.
 |      
 |      Parameters
 |      ----------
 |      lower : float or array-like, default None
 |          Minimum threshold value. All values below this
 |          threshold will be set to it. A missing
 |          threshold (e.g `NA`) will not clip the value.
 |      upper : float or array-like, default None
 |          Maximum threshold value. All values above this
 |          threshold will be set to it. A missing
 |          threshold (e.g `NA`) will not clip the value.
 |      axis : {{0 or 'index', 1 or 'columns', None}}, default None
 |          Align object with lower and upper along the given axis.
 |          For `Series` this parameter is unused and defaults to `None`.
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted
 |          for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame or None
 |          Same type as calling object with the values outside the
 |          clip boundaries replaced or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.clip : Trim values at input threshold in series.
 |      DataFrame.clip : Trim values at input threshold in dataframe.
 |      numpy.clip : Clip (limit) the values in an array.
 |      
 |      Examples
 |      --------
 |      >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}
 |      >>> df = pd.DataFrame(data)
 |      >>> df
 |         col_0  col_1
 |      0      9     -2
 |      1     -3     -7
 |      2      0      6
 |      3     -1      8
 |      4      5     -5
 |      
 |      Clips per column using lower and upper thresholds:
 |      
 |      >>> df.clip(-4, 6)
 |         col_0  col_1
 |      0      6     -2
 |      1     -3     -4
 |      2      0      6
 |      3     -1      6
 |      4      5     -4
 |      
 |      Clips using specific lower and upper thresholds per column:
 |      
 |      >>> df.clip([-2, -1], [4, 5])
 |          col_0  col_1
 |      0      4     -1
 |      1     -2     -1
 |      2      0      5
 |      3     -1      5
 |      4      4     -1
 |      
 |      Clips using specific lower and upper thresholds per column element:
 |      
 |      >>> t = pd.Series([2, -4, -1, 6, 3])
 |      >>> t
 |      0    2
 |      1   -4
 |      2   -1
 |      3    6
 |      4    3
 |      dtype: int64
 |      
 |      >>> df.clip(t, t + 4, axis=0)
 |         col_0  col_1
 |      0      6      2
 |      1     -3     -4
 |      2      0      3
 |      3      6      8
 |      4      5      3
 |      
 |      Clips using specific lower threshold per column element, with missing values:
 |      
 |      >>> t = pd.Series([2, -4, np.nan, 6, 3])
 |      >>> t
 |      0    2.0
 |      1   -4.0
 |      2    NaN
 |      3    6.0
 |      4    3.0
 |      dtype: float64
 |      
 |      >>> df.clip(t, axis=0)
 |      col_0  col_1
 |      0      9      2
 |      1     -3     -4
 |      2      0      6
 |      3      6      8
 |      4      5      3
 |  
 |  convert_dtypes(self, infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -> 'Self'
 |      Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.
 |      
 |      Parameters
 |      ----------
 |      infer_objects : bool, default True
 |          Whether object dtypes should be converted to the best possible types.
 |      convert_string : bool, default True
 |          Whether object dtypes should be converted to ``StringDtype()``.
 |      convert_integer : bool, default True
 |          Whether, if possible, conversion can be done to integer extension types.
 |      convert_boolean : bool, defaults True
 |          Whether object dtypes should be converted to ``BooleanDtypes()``.
 |      convert_floating : bool, defaults True
 |          Whether, if possible, conversion can be done to floating extension types.
 |          If `convert_integer` is also True, preference will be give to integer
 |          dtypes if the floats can be faithfully casted to integers.
 |      dtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'
 |          Back-end data type applied to the resultant :class:`DataFrame`
 |          (still experimental). Behaviour is as follows:
 |      
 |          * ``"numpy_nullable"``: returns nullable-dtype-backed :class:`DataFrame`
 |            (default).
 |          * ``"pyarrow"``: returns pyarrow-backed nullable :class:`ArrowDtype`
 |            DataFrame.
 |      
 |          .. versionadded:: 2.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Copy of input object with new dtype.
 |      
 |      See Also
 |      --------
 |      infer_objects : Infer dtypes of objects.
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to a numeric type.
 |      
 |      Notes
 |      -----
 |      By default, ``convert_dtypes`` will attempt to convert a Series (or each
 |      Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options
 |      ``convert_string``, ``convert_integer``, ``convert_boolean`` and
 |      ``convert_floating``, it is possible to turn off individual conversions
 |      to ``StringDtype``, the integer extension types, ``BooleanDtype``
 |      or floating extension types, respectively.
 |      
 |      For object-dtyped columns, if ``infer_objects`` is ``True``, use the inference
 |      rules as during normal Series/DataFrame construction.  Then, if possible,
 |      convert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer
 |      or floating extension type, otherwise leave as ``object``.
 |      
 |      If the dtype is integer, convert to an appropriate integer extension type.
 |      
 |      If the dtype is numeric, and consists of all integers, convert to an
 |      appropriate integer extension type. Otherwise, convert to an
 |      appropriate floating extension type.
 |      
 |      In the future, as new dtypes are added that support ``pd.NA``, the results
 |      of this method will change to support those new dtypes.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     {
 |      ...         "a": pd.Series([1, 2, 3], dtype=np.dtype("int32")),
 |      ...         "b": pd.Series(["x", "y", "z"], dtype=np.dtype("O")),
 |      ...         "c": pd.Series([True, False, np.nan], dtype=np.dtype("O")),
 |      ...         "d": pd.Series(["h", "i", np.nan], dtype=np.dtype("O")),
 |      ...         "e": pd.Series([10, np.nan, 20], dtype=np.dtype("float")),
 |      ...         "f": pd.Series([np.nan, 100.5, 200], dtype=np.dtype("float")),
 |      ...     }
 |      ... )
 |      
 |      Start with a DataFrame with default dtypes.
 |      
 |      >>> df
 |         a  b      c    d     e      f
 |      0  1  x   True    h  10.0    NaN
 |      1  2  y  False    i   NaN  100.5
 |      2  3  z    NaN  NaN  20.0  200.0
 |      
 |      >>> df.dtypes
 |      a      int32
 |      b     object
 |      c     object
 |      d     object
 |      e    float64
 |      f    float64
 |      dtype: object
 |      
 |      Convert the DataFrame to use best possible dtypes.
 |      
 |      >>> dfn = df.convert_dtypes()
 |      >>> dfn
 |         a  b      c     d     e      f
 |      0  1  x   True     h    10   <NA>
 |      1  2  y  False     i  <NA>  100.5
 |      2  3  z   <NA>  <NA>    20  200.0
 |      
 |      >>> dfn.dtypes
 |      a             Int32
 |      b    string[python]
 |      c           boolean
 |      d    string[python]
 |      e             Int64
 |      f           Float64
 |      dtype: object
 |      
 |      Start with a Series of strings and missing data represented by ``np.nan``.
 |      
 |      >>> s = pd.Series(["a", "b", np.nan])
 |      >>> s
 |      0      a
 |      1      b
 |      2    NaN
 |      dtype: object
 |      
 |      Obtain a Series with dtype ``StringDtype``.
 |      
 |      >>> s.convert_dtypes()
 |      0       a
 |      1       b
 |      2    <NA>
 |      dtype: string
 |  
 |  copy(self, deep: 'bool_t | None' = True) -> 'Self'
 |      Make a copy of this object's indices and data.
 |      
 |      When ``deep=True`` (default), a new object will be created with a
 |      copy of the calling object's data and indices. Modifications to
 |      the data or indices of the copy will not be reflected in the
 |      original object (see notes below).
 |      
 |      When ``deep=False``, a new object will be created without copying
 |      the calling object's data or index (only references to the data
 |      and index are copied). Any changes to the data of the original
 |      will be reflected in the shallow copy (and vice versa).
 |      
 |      .. note::
 |          The ``deep=False`` behaviour as described above will change
 |          in pandas 3.0. `Copy-on-Write
 |          <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |          will be enabled by default, which means that the "shallow" copy
 |          is that is returned with ``deep=False`` will still avoid making
 |          an eager copy, but changes to the data of the original will *no*
 |          longer be reflected in the shallow copy (or vice versa). Instead,
 |          it makes use of a lazy (deferred) copy mechanism that will copy
 |          the data only when any changes to the original or shallow copy is
 |          made.
 |      
 |          You can already get the future behavior and improvements through
 |          enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Parameters
 |      ----------
 |      deep : bool, default True
 |          Make a deep copy, including a copy of the data and the indices.
 |          With ``deep=False`` neither the indices nor the data are copied.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Object type matches caller.
 |      
 |      Notes
 |      -----
 |      When ``deep=True``, data is copied but actual Python objects
 |      will not be copied recursively, only the reference to the object.
 |      This is in contrast to `copy.deepcopy` in the Standard Library,
 |      which recursively copies object data (see examples below).
 |      
 |      While ``Index`` objects are copied when ``deep=True``, the underlying
 |      numpy array is not copied for performance reasons. Since ``Index`` is
 |      immutable, the underlying data can be safely shared and a copy
 |      is not needed.
 |      
 |      Since pandas is not thread safe, see the
 |      :ref:`gotchas <gotchas.thread-safety>` when copying in a threading
 |      environment.
 |      
 |      When ``copy_on_write`` in pandas config is set to ``True``, the
 |      ``copy_on_write`` config takes effect even when ``deep=False``.
 |      This means that any changes to the copied data would make a new copy
 |      of the data upon write (and vice versa). Changes made to either the
 |      original or copied variable would not be reflected in the counterpart.
 |      See :ref:`Copy_on_Write <copy_on_write>` for more information.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2], index=["a", "b"])
 |      >>> s
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      >>> s_copy = s.copy()
 |      >>> s_copy
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      **Shallow copy versus default (deep) copy:**
 |      
 |      >>> s = pd.Series([1, 2], index=["a", "b"])
 |      >>> deep = s.copy()
 |      >>> shallow = s.copy(deep=False)
 |      
 |      Shallow copy shares data and index with original.
 |      
 |      >>> s is shallow
 |      False
 |      >>> s.values is shallow.values and s.index is shallow.index
 |      True
 |      
 |      Deep copy has own copy of data and index.
 |      
 |      >>> s is deep
 |      False
 |      >>> s.values is deep.values or s.index is deep.index
 |      False
 |      
 |      Updates to the data shared by shallow copy and original is reflected
 |      in both (NOTE: this will no longer be true for pandas >= 3.0);
 |      deep copy remains unchanged.
 |      
 |      >>> s.iloc[0] = 3
 |      >>> shallow.iloc[1] = 4
 |      >>> s
 |      a    3
 |      b    4
 |      dtype: int64
 |      >>> shallow
 |      a    3
 |      b    4
 |      dtype: int64
 |      >>> deep
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      Note that when copying an object containing Python objects, a deep copy
 |      will copy the data, but will not do so recursively. Updating a nested
 |      data object will be reflected in the deep copy.
 |      
 |      >>> s = pd.Series([[1, 2], [3, 4]])
 |      >>> deep = s.copy()
 |      >>> s[0][0] = 10
 |      >>> s
 |      0    [10, 2]
 |      1     [3, 4]
 |      dtype: object
 |      >>> deep
 |      0    [10, 2]
 |      1     [3, 4]
 |      dtype: object
 |      
 |      **Copy-on-Write is set to true**, the shallow copy is not modified
 |      when the original data is changed:
 |      
 |      >>> with pd.option_context("mode.copy_on_write", True):
 |      ...     s = pd.Series([1, 2], index=["a", "b"])
 |      ...     copy = s.copy(deep=False)
 |      ...     s.iloc[0] = 100
 |      ...     s
 |      a    100
 |      b      2
 |      dtype: int64
 |      >>> copy
 |      a    1
 |      b    2
 |      dtype: int64
 |  
 |  describe(self, percentiles=None, include=None, exclude=None) -> 'Self'
 |      Generate descriptive statistics.
 |      
 |      Descriptive statistics include those that summarize the central
 |      tendency, dispersion and shape of a
 |      dataset's distribution, excluding ``NaN`` values.
 |      
 |      Analyzes both numeric and object series, as well
 |      as ``DataFrame`` column sets of mixed data types. The output
 |      will vary depending on what is provided. Refer to the notes
 |      below for more detail.
 |      
 |      Parameters
 |      ----------
 |      percentiles : list-like of numbers, optional
 |          The percentiles to include in the output. All should
 |          fall between 0 and 1. The default is
 |          ``[.25, .5, .75]``, which returns the 25th, 50th, and
 |          75th percentiles.
 |      include : 'all', list-like of dtypes or None (default), optional
 |          A white list of data types to include in the result. Ignored
 |          for ``Series``. Here are the options:
 |      
 |          - 'all' : All columns of the input will be included in the output.
 |          - A list-like of dtypes : Limits the results to the
 |            provided data types.
 |            To limit the result to numeric types submit
 |            ``numpy.number``. To limit it instead to object columns submit
 |            the ``numpy.object`` data type. Strings
 |            can also be used in the style of
 |            ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To
 |            select pandas categorical columns, use ``'category'``
 |          - None (default) : The result will include all numeric columns.
 |      exclude : list-like of dtypes or None (default), optional,
 |          A black list of data types to omit from the result. Ignored
 |          for ``Series``. Here are the options:
 |      
 |          - A list-like of dtypes : Excludes the provided data types
 |            from the result. To exclude numeric types submit
 |            ``numpy.number``. To exclude object columns submit the data
 |            type ``numpy.object``. Strings can also be used in the style of
 |            ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To
 |            exclude pandas categorical columns, use ``'category'``
 |          - None (default) : The result will exclude nothing.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Summary statistics of the Series or Dataframe provided.
 |      
 |      See Also
 |      --------
 |      DataFrame.count: Count number of non-NA/null observations.
 |      DataFrame.max: Maximum of the values in the object.
 |      DataFrame.min: Minimum of the values in the object.
 |      DataFrame.mean: Mean of the values.
 |      DataFrame.std: Standard deviation of the observations.
 |      DataFrame.select_dtypes: Subset of a DataFrame including/excluding
 |          columns based on their dtype.
 |      
 |      Notes
 |      -----
 |      For numeric data, the result's index will include ``count``,
 |      ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and
 |      upper percentiles. By default the lower percentile is ``25`` and the
 |      upper percentile is ``75``. The ``50`` percentile is the
 |      same as the median.
 |      
 |      For object data (e.g. strings or timestamps), the result's index
 |      will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``
 |      is the most common value. The ``freq`` is the most common value's
 |      frequency. Timestamps also include the ``first`` and ``last`` items.
 |      
 |      If multiple object values have the highest count, then the
 |      ``count`` and ``top`` results will be arbitrarily chosen from
 |      among those with the highest count.
 |      
 |      For mixed data types provided via a ``DataFrame``, the default is to
 |      return only an analysis of numeric columns. If the dataframe consists
 |      only of object and categorical data without any numeric columns, the
 |      default is to return an analysis of both the object and categorical
 |      columns. If ``include='all'`` is provided as an option, the result
 |      will include a union of attributes of each type.
 |      
 |      The `include` and `exclude` parameters can be used to limit
 |      which columns in a ``DataFrame`` are analyzed for the output.
 |      The parameters are ignored when analyzing a ``Series``.
 |      
 |      Examples
 |      --------
 |      Describing a numeric ``Series``.
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.describe()
 |      count    3.0
 |      mean     2.0
 |      std      1.0
 |      min      1.0
 |      25%      1.5
 |      50%      2.0
 |      75%      2.5
 |      max      3.0
 |      dtype: float64
 |      
 |      Describing a categorical ``Series``.
 |      
 |      >>> s = pd.Series(['a', 'a', 'b', 'c'])
 |      >>> s.describe()
 |      count     4
 |      unique    3
 |      top       a
 |      freq      2
 |      dtype: object
 |      
 |      Describing a timestamp ``Series``.
 |      
 |      >>> s = pd.Series([
 |      ...     np.datetime64("2000-01-01"),
 |      ...     np.datetime64("2010-01-01"),
 |      ...     np.datetime64("2010-01-01")
 |      ... ])
 |      >>> s.describe()
 |      count                      3
 |      mean     2006-09-01 08:00:00
 |      min      2000-01-01 00:00:00
 |      25%      2004-12-31 12:00:00
 |      50%      2010-01-01 00:00:00
 |      75%      2010-01-01 00:00:00
 |      max      2010-01-01 00:00:00
 |      dtype: object
 |      
 |      Describing a ``DataFrame``. By default only numeric fields
 |      are returned.
 |      
 |      >>> df = pd.DataFrame({'categorical': pd.Categorical(['d', 'e', 'f']),
 |      ...                    'numeric': [1, 2, 3],
 |      ...                    'object': ['a', 'b', 'c']
 |      ...                    })
 |      >>> df.describe()
 |             numeric
 |      count      3.0
 |      mean       2.0
 |      std        1.0
 |      min        1.0
 |      25%        1.5
 |      50%        2.0
 |      75%        2.5
 |      max        3.0
 |      
 |      Describing all columns of a ``DataFrame`` regardless of data type.
 |      
 |      >>> df.describe(include='all')  # doctest: +SKIP
 |             categorical  numeric object
 |      count            3      3.0      3
 |      unique           3      NaN      3
 |      top              f      NaN      a
 |      freq             1      NaN      1
 |      mean           NaN      2.0    NaN
 |      std            NaN      1.0    NaN
 |      min            NaN      1.0    NaN
 |      25%            NaN      1.5    NaN
 |      50%            NaN      2.0    NaN
 |      75%            NaN      2.5    NaN
 |      max            NaN      3.0    NaN
 |      
 |      Describing a column from a ``DataFrame`` by accessing it as
 |      an attribute.
 |      
 |      >>> df.numeric.describe()
 |      count    3.0
 |      mean     2.0
 |      std      1.0
 |      min      1.0
 |      25%      1.5
 |      50%      2.0
 |      75%      2.5
 |      max      3.0
 |      Name: numeric, dtype: float64
 |      
 |      Including only numeric columns in a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=[np.number])
 |             numeric
 |      count      3.0
 |      mean       2.0
 |      std        1.0
 |      min        1.0
 |      25%        1.5
 |      50%        2.0
 |      75%        2.5
 |      max        3.0
 |      
 |      Including only string columns in a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=[object])  # doctest: +SKIP
 |             object
 |      count       3
 |      unique      3
 |      top         a
 |      freq        1
 |      
 |      Including only categorical columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=['category'])
 |             categorical
 |      count            3
 |      unique           3
 |      top              d
 |      freq             1
 |      
 |      Excluding numeric columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(exclude=[np.number])  # doctest: +SKIP
 |             categorical object
 |      count            3      3
 |      unique           3      3
 |      top              f      a
 |      freq             1      1
 |      
 |      Excluding object columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(exclude=[object])  # doctest: +SKIP
 |             categorical  numeric
 |      count            3      3.0
 |      unique           3      NaN
 |      top              f      NaN
 |      freq             1      NaN
 |      mean           NaN      2.0
 |      std            NaN      1.0
 |      min            NaN      1.0
 |      25%            NaN      1.5
 |      50%            NaN      2.0
 |      75%            NaN      2.5
 |      max            NaN      3.0
 |  
 |  droplevel(self, level: 'IndexLabel', axis: 'Axis' = 0) -> 'Self'
 |      Return Series/DataFrame with requested index / column level(s) removed.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, or list-like
 |          If a string is given, must be the name of a level
 |          If list-like, elements must be names or positional indexes
 |          of levels.
 |      
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Axis along which the level(s) is removed:
 |      
 |          * 0 or 'index': remove level(s) in column.
 |          * 1 or 'columns': remove level(s) in row.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Series/DataFrame with requested index / column level(s) removed.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([
 |      ...     [1, 2, 3, 4],
 |      ...     [5, 6, 7, 8],
 |      ...     [9, 10, 11, 12]
 |      ... ]).set_index([0, 1]).rename_axis(['a', 'b'])
 |      
 |      >>> df.columns = pd.MultiIndex.from_tuples([
 |      ...     ('c', 'e'), ('d', 'f')
 |      ... ], names=['level_1', 'level_2'])
 |      
 |      >>> df
 |      level_1   c   d
 |      level_2   e   f
 |      a b
 |      1 2      3   4
 |      5 6      7   8
 |      9 10    11  12
 |      
 |      >>> df.droplevel('a')
 |      level_1   c   d
 |      level_2   e   f
 |      b
 |      2        3   4
 |      6        7   8
 |      10      11  12
 |      
 |      >>> df.droplevel('level_2', axis=1)
 |      level_1   c   d
 |      a b
 |      1 2      3   4
 |      5 6      7   8
 |      9 10    11  12
 |  
 |  equals(self, other: 'object') -> 'bool_t'
 |      Test whether two objects contain the same elements.
 |      
 |      This function allows two Series or DataFrames to be compared against
 |      each other to see if they have the same shape and elements. NaNs in
 |      the same location are considered equal.
 |      
 |      The row/column index do not need to have the same type, as long
 |      as the values are considered equal. Corresponding columns and
 |      index must be of the same dtype.
 |      
 |      Parameters
 |      ----------
 |      other : Series or DataFrame
 |          The other Series or DataFrame to be compared with the first.
 |      
 |      Returns
 |      -------
 |      bool
 |          True if all elements are the same in both objects, False
 |          otherwise.
 |      
 |      See Also
 |      --------
 |      Series.eq : Compare two Series objects of the same length
 |          and return a Series where each element is True if the element
 |          in each Series is equal, False otherwise.
 |      DataFrame.eq : Compare two DataFrame objects of the same shape and
 |          return a DataFrame where each element is True if the respective
 |          element in each DataFrame is equal, False otherwise.
 |      testing.assert_series_equal : Raises an AssertionError if left and
 |          right are not equal. Provides an easy interface to ignore
 |          inequality in dtypes, indexes and precision among others.
 |      testing.assert_frame_equal : Like assert_series_equal, but targets
 |          DataFrames.
 |      numpy.array_equal : Return True if two arrays have the same shape
 |          and elements, False otherwise.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({1: [10], 2: [20]})
 |      >>> df
 |          1   2
 |      0  10  20
 |      
 |      DataFrames df and exactly_equal have the same types and values for
 |      their elements and column labels, which will return True.
 |      
 |      >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})
 |      >>> exactly_equal
 |          1   2
 |      0  10  20
 |      >>> df.equals(exactly_equal)
 |      True
 |      
 |      DataFrames df and different_column_type have the same element
 |      types and values, but have different types for the column labels,
 |      which will still return True.
 |      
 |      >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})
 |      >>> different_column_type
 |         1.0  2.0
 |      0   10   20
 |      >>> df.equals(different_column_type)
 |      True
 |      
 |      DataFrames df and different_data_type have different types for the
 |      same values for their elements, and will return False even though
 |      their column labels are the same values and types.
 |      
 |      >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})
 |      >>> different_data_type
 |            1     2
 |      0  10.0  20.0
 |      >>> df.equals(different_data_type)
 |      False
 |  
 |  ewm(self, com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = <no_default>, times: 'np.ndarray | DataFrame | Series | None' = None, method: "Literal['single', 'table']" = 'single') -> 'ExponentialMovingWindow'
 |      Provide exponentially weighted (EW) calculations.
 |      
 |      Exactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be
 |      provided if ``times`` is not provided. If ``times`` is provided,
 |      ``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.
 |      
 |      Parameters
 |      ----------
 |      com : float, optional
 |          Specify decay in terms of center of mass
 |      
 |          :math:`\alpha = 1 / (1 + com)`, for :math:`com \geq 0`.
 |      
 |      span : float, optional
 |          Specify decay in terms of span
 |      
 |          :math:`\alpha = 2 / (span + 1)`, for :math:`span \geq 1`.
 |      
 |      halflife : float, str, timedelta, optional
 |          Specify decay in terms of half-life
 |      
 |          :math:`\alpha = 1 - \exp\left(-\ln(2) / halflife\right)`, for
 |          :math:`halflife > 0`.
 |      
 |          If ``times`` is specified, a timedelta convertible unit over which an
 |          observation decays to half its value. Only applicable to ``mean()``,
 |          and halflife value will not apply to the other functions.
 |      
 |      alpha : float, optional
 |          Specify smoothing factor :math:`\alpha` directly
 |      
 |          :math:`0 < \alpha \leq 1`.
 |      
 |      min_periods : int, default 0
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |      adjust : bool, default True
 |          Divide by decaying adjustment factor in beginning periods to account
 |          for imbalance in relative weightings (viewing EWMA as a moving average).
 |      
 |          - When ``adjust=True`` (default), the EW function is calculated using weights
 |            :math:`w_i = (1 - \alpha)^i`. For example, the EW moving average of the series
 |            [:math:`x_0, x_1, ..., x_t`] would be:
 |      
 |          .. math::
 |              y_t = \frac{x_t + (1 - \alpha)x_{t-1} + (1 - \alpha)^2 x_{t-2} + ... + (1 -
 |              \alpha)^t x_0}{1 + (1 - \alpha) + (1 - \alpha)^2 + ... + (1 - \alpha)^t}
 |      
 |          - When ``adjust=False``, the exponentially weighted function is calculated
 |            recursively:
 |      
 |          .. math::
 |              \begin{split}
 |                  y_0 &= x_0\\
 |                  y_t &= (1 - \alpha) y_{t-1} + \alpha x_t,
 |              \end{split}
 |      ignore_na : bool, default False
 |          Ignore missing values when calculating weights.
 |      
 |          - When ``ignore_na=False`` (default), weights are based on absolute positions.
 |            For example, the weights of :math:`x_0` and :math:`x_2` used in calculating
 |            the final weighted average of [:math:`x_0`, None, :math:`x_2`] are
 |            :math:`(1-\alpha)^2` and :math:`1` if ``adjust=True``, and
 |            :math:`(1-\alpha)^2` and :math:`\alpha` if ``adjust=False``.
 |      
 |          - When ``ignore_na=True``, weights are based
 |            on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`
 |            used in calculating the final weighted average of
 |            [:math:`x_0`, None, :math:`x_2`] are :math:`1-\alpha` and :math:`1` if
 |            ``adjust=True``, and :math:`1-\alpha` and :math:`\alpha` if ``adjust=False``.
 |      
 |      axis : {0, 1}, default 0
 |          If ``0`` or ``'index'``, calculate across the rows.
 |      
 |          If ``1`` or ``'columns'``, calculate across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      times : np.ndarray, Series, default None
 |      
 |          Only applicable to ``mean()``.
 |      
 |          Times corresponding to the observations. Must be monotonically increasing and
 |          ``datetime64[ns]`` dtype.
 |      
 |          If 1-D array like, a sequence with the same shape as the observations.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |          .. versionadded:: 1.4.0
 |      
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |          Only applicable to ``mean()``
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.ExponentialMovingWindow
 |      
 |      See Also
 |      --------
 |      rolling : Provides rolling window calculations.
 |      expanding : Provides expanding transformations.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.exponentially_weighted>`
 |      for further usage details and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      >>> df.ewm(com=0.5).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      >>> df.ewm(alpha=2 / 3).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      
 |      **adjust**
 |      
 |      >>> df.ewm(com=0.5, adjust=True).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      >>> df.ewm(com=0.5, adjust=False).mean()
 |                B
 |      0  0.000000
 |      1  0.666667
 |      2  1.555556
 |      3  1.555556
 |      4  3.650794
 |      
 |      **ignore_na**
 |      
 |      >>> df.ewm(com=0.5, ignore_na=True).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.225000
 |      >>> df.ewm(com=0.5, ignore_na=False).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      
 |      **times**
 |      
 |      Exponentially weighted mean with weights calculated with a timedelta ``halflife``
 |      relative to ``times``.
 |      
 |      >>> times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']
 |      >>> df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()
 |                B
 |      0  0.000000
 |      1  0.585786
 |      2  1.523889
 |      3  1.523889
 |      4  3.233686
 |  
 |  expanding(self, min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = <no_default>, method: "Literal['single', 'table']" = 'single') -> 'Expanding'
 |      Provide expanding window calculations.
 |      
 |      Parameters
 |      ----------
 |      min_periods : int, default 1
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |      axis : int or str, default 0
 |          If ``0`` or ``'index'``, roll across the rows.
 |      
 |          If ``1`` or ``'columns'``, roll across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Expanding
 |      
 |      See Also
 |      --------
 |      rolling : Provides rolling window calculations.
 |      ewm : Provides exponential weighted functions.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.expanding>` for further usage details
 |      and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"B": [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      **min_periods**
 |      
 |      Expanding sum with 1 vs 3 observations needed to calculate a value.
 |      
 |      >>> df.expanding(1).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  3.0
 |      4  7.0
 |      >>> df.expanding(3).sum()
 |           B
 |      0  NaN
 |      1  NaN
 |      2  3.0
 |      3  3.0
 |      4  7.0
 |  
 |  ffill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by propagating the last valid observation to next valid.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      limit_area : {`None`, 'inside', 'outside'}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],
 |      ...                    [3, 4, np.nan, 1],
 |      ...                    [np.nan, np.nan, np.nan, np.nan],
 |      ...                    [np.nan, 3, np.nan, 4]],
 |      ...                   columns=list("ABCD"))
 |      >>> df
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  NaN  NaN NaN  NaN
 |      3  NaN  3.0 NaN  4.0
 |      
 |      >>> df.ffill()
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  3.0  4.0 NaN  1.0
 |      3  3.0  3.0 NaN  4.0
 |      
 |      >>> ser = pd.Series([1, np.nan, 2, 3])
 |      >>> ser.ffill()
 |      0   1.0
 |      1   1.0
 |      2   2.0
 |      3   3.0
 |      dtype: float64
 |  
 |  fillna(self, value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values using the specified method.
 |      
 |      Parameters
 |      ----------
 |      value : scalar, dict, Series, or DataFrame
 |          Value to use to fill holes (e.g. 0), alternately a
 |          dict/Series/DataFrame of values specifying which value to use for
 |          each index (for a Series) or column (for a DataFrame).  Values not
 |          in the dict/Series/DataFrame will not be filled. This value cannot
 |          be a list.
 |      method : {'backfill', 'bfill', 'ffill', None}, default None
 |          Method to use for filling holes in reindexed Series:
 |      
 |          * ffill: propagate last valid observation forward to next valid.
 |          * backfill / bfill: use next valid observation to fill gap.
 |      
 |          .. deprecated:: 2.1.0
 |              Use ffill or bfill instead.
 |      
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      ffill : Fill values by propagating the last valid observation to next valid.
 |      bfill : Fill values by using the next valid observation to fill the gap.
 |      interpolate : Fill NaN values using interpolation.
 |      reindex : Conform object to new index.
 |      asfreq : Convert TimeSeries to specified frequency.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],
 |      ...                    [3, 4, np.nan, 1],
 |      ...                    [np.nan, np.nan, np.nan, np.nan],
 |      ...                    [np.nan, 3, np.nan, 4]],
 |      ...                   columns=list("ABCD"))
 |      >>> df
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  NaN  NaN NaN  NaN
 |      3  NaN  3.0 NaN  4.0
 |      
 |      Replace all NaN elements with 0s.
 |      
 |      >>> df.fillna(0)
 |           A    B    C    D
 |      0  0.0  2.0  0.0  0.0
 |      1  3.0  4.0  0.0  1.0
 |      2  0.0  0.0  0.0  0.0
 |      3  0.0  3.0  0.0  4.0
 |      
 |      Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,
 |      2, and 3 respectively.
 |      
 |      >>> values = {"A": 0, "B": 1, "C": 2, "D": 3}
 |      >>> df.fillna(value=values)
 |           A    B    C    D
 |      0  0.0  2.0  2.0  0.0
 |      1  3.0  4.0  2.0  1.0
 |      2  0.0  1.0  2.0  3.0
 |      3  0.0  3.0  2.0  4.0
 |      
 |      Only replace the first NaN element.
 |      
 |      >>> df.fillna(value=values, limit=1)
 |           A    B    C    D
 |      0  0.0  2.0  2.0  0.0
 |      1  3.0  4.0  NaN  1.0
 |      2  NaN  1.0  NaN  3.0
 |      3  NaN  3.0  NaN  4.0
 |      
 |      When filling using a DataFrame, replacement happens along
 |      the same column names and same indices
 |      
 |      >>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list("ABCE"))
 |      >>> df.fillna(df2)
 |           A    B    C    D
 |      0  0.0  2.0  0.0  0.0
 |      1  3.0  4.0  0.0  1.0
 |      2  0.0  0.0  0.0  NaN
 |      3  0.0  3.0  0.0  4.0
 |      
 |      Note that column D is not affected since it is not present in df2.
 |  
 |  filter(self, items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -> 'Self'
 |      Subset the dataframe rows or columns according to the specified index labels.
 |      
 |      Note that this routine does not filter a dataframe on its
 |      contents. The filter is applied to the labels of the index.
 |      
 |      Parameters
 |      ----------
 |      items : list-like
 |          Keep labels from axis which are in items.
 |      like : str
 |          Keep labels from axis for which "like in label == True".
 |      regex : str (regular expression)
 |          Keep labels from axis for which re.search(regex, label) == True.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          The axis to filter on, expressed either as an index (int)
 |          or axis name (str). By default this is the info axis, 'columns' for
 |          DataFrame. For `Series` this parameter is unused and defaults to `None`.
 |      
 |      Returns
 |      -------
 |      same type as input object
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Access a group of rows and columns
 |          by label(s) or a boolean array.
 |      
 |      Notes
 |      -----
 |      The ``items``, ``like``, and ``regex`` parameters are
 |      enforced to be mutually exclusive.
 |      
 |      ``axis`` defaults to the info axis that is used when indexing
 |      with ``[]``.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),
 |      ...                   index=['mouse', 'rabbit'],
 |      ...                   columns=['one', 'two', 'three'])
 |      >>> df
 |              one  two  three
 |      mouse     1    2      3
 |      rabbit    4    5      6
 |      
 |      >>> # select columns by name
 |      >>> df.filter(items=['one', 'three'])
 |               one  three
 |      mouse     1      3
 |      rabbit    4      6
 |      
 |      >>> # select columns by regular expression
 |      >>> df.filter(regex='e$', axis=1)
 |               one  three
 |      mouse     1      3
 |      rabbit    4      6
 |      
 |      >>> # select rows containing 'bbi'
 |      >>> df.filter(like='bbi', axis=0)
 |               one  two  three
 |      rabbit    4    5      6
 |  
 |  first(self, offset) -> 'Self'
 |      Select initial periods of time series data based on a date offset.
 |      
 |      .. deprecated:: 2.1
 |          :meth:`.first` is deprecated and will be removed in a future version.
 |          Please create a mask and filter using `.loc` instead.
 |      
 |      For a DataFrame with a sorted DatetimeIndex, this function can
 |      select the first few rows based on a date offset.
 |      
 |      Parameters
 |      ----------
 |      offset : str, DateOffset or dateutil.relativedelta
 |          The offset length of the data that will be selected. For instance,
 |          '1ME' will display all the rows having their index within the first month.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A subset of the caller.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      last : Select final periods of time series based on a date offset.
 |      at_time : Select values at a particular time of the day.
 |      between_time : Select values between particular times of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Get the rows for the first 3 days:
 |      
 |      >>> ts.first('3D')
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      
 |      Notice the data for 3 first calendar days were returned, not the first
 |      3 days observed in the dataset, and therefore data for 2018-04-13 was
 |      not returned.
 |  
 |  first_valid_index(self) -> 'Hashable | None'
 |      Return index for first non-NA value or None, if no non-NA value is found.
 |      
 |      Returns
 |      -------
 |      type of index
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([None, 3, 4])
 |      >>> s.first_valid_index()
 |      1
 |      >>> s.last_valid_index()
 |      2
 |      
 |      >>> s = pd.Series([None, None])
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If all elements in Series are NA/null, returns None.
 |      
 |      >>> s = pd.Series()
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If Series is empty, returns None.
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})
 |      >>> df
 |           A      B
 |      0  NaN    NaN
 |      1  NaN    3.0
 |      2  2.0    4.0
 |      >>> df.first_valid_index()
 |      1
 |      >>> df.last_valid_index()
 |      2
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})
 |      >>> df
 |           A      B
 |      0  None   None
 |      1  None   None
 |      2  None   None
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If all elements in DataFrame are NA/null, returns None.
 |      
 |      >>> df = pd.DataFrame()
 |      >>> df
 |      Empty DataFrame
 |      Columns: []
 |      Index: []
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If DataFrame is empty, returns None.
 |  
 |  get(self, key, default=None)
 |      Get item from object for given key (ex: DataFrame column).
 |      
 |      Returns default value if not found.
 |      
 |      Parameters
 |      ----------
 |      key : object
 |      
 |      Returns
 |      -------
 |      same type as items contained in object
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     [
 |      ...         [24.3, 75.7, "high"],
 |      ...         [31, 87.8, "high"],
 |      ...         [22, 71.6, "medium"],
 |      ...         [35, 95, "medium"],
 |      ...     ],
 |      ...     columns=["temp_celsius", "temp_fahrenheit", "windspeed"],
 |      ...     index=pd.date_range(start="2014-02-12", end="2014-02-15", freq="D"),
 |      ... )
 |      
 |      >>> df
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          24.3             75.7      high
 |      2014-02-13          31.0             87.8      high
 |      2014-02-14          22.0             71.6    medium
 |      2014-02-15          35.0             95.0    medium
 |      
 |      >>> df.get(["temp_celsius", "windspeed"])
 |                  temp_celsius windspeed
 |      2014-02-12          24.3      high
 |      2014-02-13          31.0      high
 |      2014-02-14          22.0    medium
 |      2014-02-15          35.0    medium
 |      
 |      >>> ser = df['windspeed']
 |      >>> ser.get('2014-02-13')
 |      'high'
 |      
 |      If the key isn't found, the default value will be used.
 |      
 |      >>> df.get(["temp_celsius", "temp_kelvin"], default="default_value")
 |      'default_value'
 |      
 |      >>> ser.get('2014-02-10', '[unknown]')
 |      '[unknown]'
 |  
 |  head(self, n: 'int' = 5) -> 'Self'
 |      Return the first `n` rows.
 |      
 |      This function returns the first `n` rows for the object based
 |      on position. It is useful for quickly testing if your object
 |      has the right type of data in it.
 |      
 |      For negative values of `n`, this function returns all rows except
 |      the last `|n|` rows, equivalent to ``df[:n]``.
 |      
 |      If n is larger than the number of rows, this function returns all rows.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Number of rows to select.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          The first `n` rows of the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrame.tail: Returns the last `n` rows.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',
 |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})
 |      >>> df
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |      6      shark
 |      7      whale
 |      8      zebra
 |      
 |      Viewing the first 5 lines
 |      
 |      >>> df.head()
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      
 |      Viewing the first `n` lines (three in this case)
 |      
 |      >>> df.head(3)
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      
 |      For negative values of `n`
 |      
 |      >>> df.head(-3)
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |  
 |  infer_objects(self, copy: 'bool_t | None' = None) -> 'Self'
 |      Attempt to infer better dtypes for object columns.
 |      
 |      Attempts soft conversion of object-dtyped
 |      columns, leaving non-object and unconvertible
 |      columns unchanged. The inference rules are the
 |      same as during normal Series/DataFrame construction.
 |      
 |      Parameters
 |      ----------
 |      copy : bool, default True
 |          Whether to make a copy for non-object or non-inferable columns
 |          or Series.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      same type as input object
 |      
 |      See Also
 |      --------
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to numeric type.
 |      convert_dtypes : Convert argument to best possible dtype.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": ["a", 1, 2, 3]})
 |      >>> df = df.iloc[1:]
 |      >>> df
 |         A
 |      1  1
 |      2  2
 |      3  3
 |      
 |      >>> df.dtypes
 |      A    object
 |      dtype: object
 |      
 |      >>> df.infer_objects().dtypes
 |      A    int64
 |      dtype: object
 |  
 |  interpolate(self, method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: "Literal['forward', 'backward', 'both'] | None" = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: "Literal['infer'] | None | lib.NoDefault" = <no_default>, **kwargs) -> 'Self | None'
 |      Fill NaN values using an interpolation method.
 |      
 |      Please note that only ``method='linear'`` is supported for
 |      DataFrame/Series with a MultiIndex.
 |      
 |      Parameters
 |      ----------
 |      method : str, default 'linear'
 |          Interpolation technique to use. One of:
 |      
 |          * 'linear': Ignore the index and treat the values as equally
 |            spaced. This is the only method supported on MultiIndexes.
 |          * 'time': Works on daily and higher resolution data to interpolate
 |            given length of interval.
 |          * 'index', 'values': use the actual numerical values of the index.
 |          * 'pad': Fill in NaNs using existing values.
 |          * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',
 |            'barycentric', 'polynomial': Passed to
 |            `scipy.interpolate.interp1d`, whereas 'spline' is passed to
 |            `scipy.interpolate.UnivariateSpline`. These methods use the numerical
 |            values of the index.  Both 'polynomial' and 'spline' require that
 |            you also specify an `order` (int), e.g.
 |            ``df.interpolate(method='polynomial', order=5)``. Note that,
 |            `slinear` method in Pandas refers to the Scipy first order `spline`
 |            instead of Pandas first order `spline`.
 |          * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',
 |            'cubicspline': Wrappers around the SciPy interpolation methods of
 |            similar names. See `Notes`.
 |          * 'from_derivatives': Refers to
 |            `scipy.interpolate.BPoly.from_derivatives`.
 |      
 |      axis : {{0 or 'index', 1 or 'columns', None}}, default None
 |          Axis to interpolate along. For `Series` this parameter is unused
 |          and defaults to 0.
 |      limit : int, optional
 |          Maximum number of consecutive NaNs to fill. Must be greater than
 |          0.
 |      inplace : bool, default False
 |          Update the data in place if possible.
 |      limit_direction : {{'forward', 'backward', 'both'}}, Optional
 |          Consecutive NaNs will be filled in this direction.
 |      
 |          If limit is specified:
 |              * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.
 |              * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be
 |                'backwards'.
 |      
 |          If 'limit' is not specified:
 |              * If 'method' is 'backfill' or 'bfill', the default is 'backward'
 |              * else the default is 'forward'
 |      
 |          raises ValueError if `limit_direction` is 'forward' or 'both' and
 |              method is 'backfill' or 'bfill'.
 |          raises ValueError if `limit_direction` is 'backward' or 'both' and
 |              method is 'pad' or 'ffill'.
 |      
 |      limit_area : {{`None`, 'inside', 'outside'}}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |      downcast : optional, 'infer' or None, defaults to None
 |          Downcast dtypes if possible.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |      ``**kwargs`` : optional
 |          Keyword arguments to pass on to the interpolating function.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame or None
 |          Returns the same object type as the caller, interpolated at
 |          some or all ``NaN`` values or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      fillna : Fill missing values using different methods.
 |      scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials
 |          (Akima interpolator).
 |      scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the
 |          Bernstein basis.
 |      scipy.interpolate.interp1d : Interpolate a 1-D function.
 |      scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh
 |          interpolator).
 |      scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic
 |          interpolation.
 |      scipy.interpolate.CubicSpline : Cubic spline data interpolator.
 |      
 |      Notes
 |      -----
 |      The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'
 |      methods are wrappers around the respective SciPy implementations of
 |      similar names. These use the actual numerical values of the index.
 |      For more information on their behavior, see the
 |      `SciPy documentation
 |      <https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.
 |      
 |      Examples
 |      --------
 |      Filling in ``NaN`` in a :class:`~pandas.Series` via linear
 |      interpolation.
 |      
 |      >>> s = pd.Series([0, 1, np.nan, 3])
 |      >>> s
 |      0    0.0
 |      1    1.0
 |      2    NaN
 |      3    3.0
 |      dtype: float64
 |      >>> s.interpolate()
 |      0    0.0
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      dtype: float64
 |      
 |      Filling in ``NaN`` in a Series via polynomial interpolation or splines:
 |      Both 'polynomial' and 'spline' methods require that you also specify
 |      an ``order`` (int).
 |      
 |      >>> s = pd.Series([0, 2, np.nan, 8])
 |      >>> s.interpolate(method='polynomial', order=2)
 |      0    0.000000
 |      1    2.000000
 |      2    4.666667
 |      3    8.000000
 |      dtype: float64
 |      
 |      Fill the DataFrame forward (that is, going down) along each column
 |      using linear interpolation.
 |      
 |      Note how the last entry in column 'a' is interpolated differently,
 |      because there is no entry after it to use for interpolation.
 |      Note how the first entry in column 'b' remains ``NaN``, because there
 |      is no entry before it to use for interpolation.
 |      
 |      >>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),
 |      ...                    (np.nan, 2.0, np.nan, np.nan),
 |      ...                    (2.0, 3.0, np.nan, 9.0),
 |      ...                    (np.nan, 4.0, -4.0, 16.0)],
 |      ...                   columns=list('abcd'))
 |      >>> df
 |           a    b    c     d
 |      0  0.0  NaN -1.0   1.0
 |      1  NaN  2.0  NaN   NaN
 |      2  2.0  3.0  NaN   9.0
 |      3  NaN  4.0 -4.0  16.0
 |      >>> df.interpolate(method='linear', limit_direction='forward', axis=0)
 |           a    b    c     d
 |      0  0.0  NaN -1.0   1.0
 |      1  1.0  2.0 -2.0   5.0
 |      2  2.0  3.0 -3.0   9.0
 |      3  2.0  4.0 -4.0  16.0
 |      
 |      Using polynomial interpolation.
 |      
 |      >>> df['d'].interpolate(method='polynomial', order=2)
 |      0     1.0
 |      1     4.0
 |      2     9.0
 |      3    16.0
 |      Name: d, dtype: float64
 |  
 |  last(self, offset) -> 'Self'
 |      Select final periods of time series data based on a date offset.
 |      
 |      .. deprecated:: 2.1
 |          :meth:`.last` is deprecated and will be removed in a future version.
 |          Please create a mask and filter using `.loc` instead.
 |      
 |      For a DataFrame with a sorted DatetimeIndex, this function
 |      selects the last few rows based on a date offset.
 |      
 |      Parameters
 |      ----------
 |      offset : str, DateOffset, dateutil.relativedelta
 |          The offset length of the data that will be selected. For instance,
 |          '3D' will display all the rows having their index within the last 3 days.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A subset of the caller.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      first : Select initial periods of time series based on a date offset.
 |      at_time : Select values at a particular time of the day.
 |      between_time : Select values between particular times of the day.
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 2.1.0
 |          Please create a mask and filter using `.loc` instead
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Get the rows for the last 3 days:
 |      
 |      >>> ts.last('3D')  # doctest: +SKIP
 |                  A
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Notice the data for 3 last calendar days were returned, not the last
 |      3 observed days in the dataset, and therefore data for 2018-04-11 was
 |      not returned.
 |  
 |  last_valid_index(self) -> 'Hashable | None'
 |      Return index for last non-NA value or None, if no non-NA value is found.
 |      
 |      Returns
 |      -------
 |      type of index
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([None, 3, 4])
 |      >>> s.first_valid_index()
 |      1
 |      >>> s.last_valid_index()
 |      2
 |      
 |      >>> s = pd.Series([None, None])
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If all elements in Series are NA/null, returns None.
 |      
 |      >>> s = pd.Series()
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If Series is empty, returns None.
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})
 |      >>> df
 |           A      B
 |      0  NaN    NaN
 |      1  NaN    3.0
 |      2  2.0    4.0
 |      >>> df.first_valid_index()
 |      1
 |      >>> df.last_valid_index()
 |      2
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})
 |      >>> df
 |           A      B
 |      0  None   None
 |      1  None   None
 |      2  None   None
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If all elements in DataFrame are NA/null, returns None.
 |      
 |      >>> df = pd.DataFrame()
 |      >>> df
 |      Empty DataFrame
 |      Columns: []
 |      Index: []
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If DataFrame is empty, returns None.
 |  
 |  mask(self, cond, other=<no_default>, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'
 |      Replace values where the condition is True.
 |      
 |      Parameters
 |      ----------
 |      cond : bool Series/DataFrame, array-like, or callable
 |          Where `cond` is False, keep the original value. Where
 |          True, replace with corresponding value from `other`.
 |          If `cond` is callable, it is computed on the Series/DataFrame and
 |          should return boolean Series/DataFrame or array. The callable must
 |          not change input Series/DataFrame (though pandas doesn't check it).
 |      other : scalar, Series/DataFrame, or callable
 |          Entries where `cond` is True are replaced with
 |          corresponding value from `other`.
 |          If other is callable, it is computed on the Series/DataFrame and
 |          should return scalar or Series/DataFrame. The callable must not
 |          change input Series/DataFrame (though pandas doesn't check it).
 |          If not specified, entries will be filled with the corresponding
 |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension
 |          dtypes).
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      axis : int, default None
 |          Alignment axis if needed. For `Series` this parameter is
 |          unused and defaults to 0.
 |      level : int, default None
 |          Alignment level if needed.
 |      
 |      Returns
 |      -------
 |      Same type as caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      :func:`DataFrame.where` : Return an object of same shape as
 |          self.
 |      
 |      Notes
 |      -----
 |      The mask method is an application of the if-then idiom. For each
 |      element in the calling DataFrame, if ``cond`` is ``False`` the
 |      element is used; otherwise the corresponding element from the DataFrame
 |      ``other`` is used. If the axis of ``other`` does not align with axis of
 |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with
 |      True.
 |      
 |      The signature for :func:`DataFrame.where` differs from
 |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to
 |      ``np.where(m, df1, df2)``.
 |      
 |      For further details and examples see the ``mask`` documentation in
 |      :ref:`indexing <indexing.where_mask>`.
 |      
 |      The dtype of the object takes precedence. The fill value is casted to
 |      the object's dtype, if this can be done losslessly.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(range(5))
 |      >>> s.where(s > 0)
 |      0    NaN
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      4    4.0
 |      dtype: float64
 |      >>> s.mask(s > 0)
 |      0    0.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      >>> s = pd.Series(range(5))
 |      >>> t = pd.Series([True, False])
 |      >>> s.where(t, 99)
 |      0     0
 |      1    99
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      >>> s.mask(t, 99)
 |      0    99
 |      1     1
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      
 |      >>> s.where(s > 1, 10)
 |      0    10
 |      1    10
 |      2    2
 |      3    3
 |      4    4
 |      dtype: int64
 |      >>> s.mask(s > 1, 10)
 |      0     0
 |      1     1
 |      2    10
 |      3    10
 |      4    10
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  2  3
 |      2  4  5
 |      3  6  7
 |      4  8  9
 |      >>> m = df % 3 == 0
 |      >>> df.where(m, -df)
 |         A  B
 |      0  0 -1
 |      1 -2  3
 |      2 -4 -5
 |      3  6 -7
 |      4 -8  9
 |      >>> df.where(m, -df) == np.where(m, df, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |      >>> df.where(m, -df) == df.mask(~m, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |  
 |  pad(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by propagating the last valid observation to next valid.
 |      
 |      .. deprecated:: 2.0
 |      
 |          Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.ffill` or :meth:`Series.ffill`.
 |  
 |  pct_change(self, periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, freq=None, **kwargs) -> 'Self'
 |      Fractional change between the current and a prior element.
 |      
 |      Computes the fractional change from the immediately previous row by
 |      default. This is useful in comparing the fraction of change in a time
 |      series of elements.
 |      
 |      .. note::
 |      
 |          Despite the name of this method, it calculates fractional change
 |          (also known as per unit change or relative change) and not
 |          percentage change. If you need the percentage change, multiply
 |          these values by 100.
 |      
 |      Parameters
 |      ----------
 |      periods : int, default 1
 |          Periods to shift for forming percent change.
 |      fill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default 'pad'
 |          How to handle NAs **before** computing percent changes.
 |      
 |          .. deprecated:: 2.1
 |              All options of `fill_method` are deprecated except `fill_method=None`.
 |      
 |      limit : int, default None
 |          The number of consecutive NAs to fill before stopping.
 |      
 |          .. deprecated:: 2.1
 |      
 |      freq : DateOffset, timedelta, or str, optional
 |          Increment to use from time series API (e.g. 'ME' or BDay()).
 |      **kwargs
 |          Additional keyword arguments are passed into
 |          `DataFrame.shift` or `Series.shift`.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          The same type as the calling object.
 |      
 |      See Also
 |      --------
 |      Series.diff : Compute the difference of two elements in a Series.
 |      DataFrame.diff : Compute the difference of two elements in a DataFrame.
 |      Series.shift : Shift the index by some number of periods.
 |      DataFrame.shift : Shift the index by some number of periods.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([90, 91, 85])
 |      >>> s
 |      0    90
 |      1    91
 |      2    85
 |      dtype: int64
 |      
 |      >>> s.pct_change()
 |      0         NaN
 |      1    0.011111
 |      2   -0.065934
 |      dtype: float64
 |      
 |      >>> s.pct_change(periods=2)
 |      0         NaN
 |      1         NaN
 |      2   -0.055556
 |      dtype: float64
 |      
 |      See the percentage change in a Series where filling NAs with last
 |      valid observation forward to next valid.
 |      
 |      >>> s = pd.Series([90, 91, None, 85])
 |      >>> s
 |      0    90.0
 |      1    91.0
 |      2     NaN
 |      3    85.0
 |      dtype: float64
 |      
 |      >>> s.ffill().pct_change()
 |      0         NaN
 |      1    0.011111
 |      2    0.000000
 |      3   -0.065934
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      Percentage change in French franc, Deutsche Mark, and Italian lira from
 |      1980-01-01 to 1980-03-01.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'FR': [4.0405, 4.0963, 4.3149],
 |      ...     'GR': [1.7246, 1.7482, 1.8519],
 |      ...     'IT': [804.74, 810.01, 860.13]},
 |      ...     index=['1980-01-01', '1980-02-01', '1980-03-01'])
 |      >>> df
 |                      FR      GR      IT
 |      1980-01-01  4.0405  1.7246  804.74
 |      1980-02-01  4.0963  1.7482  810.01
 |      1980-03-01  4.3149  1.8519  860.13
 |      
 |      >>> df.pct_change()
 |                        FR        GR        IT
 |      1980-01-01       NaN       NaN       NaN
 |      1980-02-01  0.013810  0.013684  0.006549
 |      1980-03-01  0.053365  0.059318  0.061876
 |      
 |      Percentage of change in GOOG and APPL stock volume. Shows computing
 |      the percentage change between columns.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     '2016': [1769950, 30586265],
 |      ...     '2015': [1500923, 40912316],
 |      ...     '2014': [1371819, 41403351]},
 |      ...     index=['GOOG', 'APPL'])
 |      >>> df
 |                2016      2015      2014
 |      GOOG   1769950   1500923   1371819
 |      APPL  30586265  40912316  41403351
 |      
 |      >>> df.pct_change(axis='columns', periods=-1)
 |                2016      2015  2014
 |      GOOG  0.179241  0.094112   NaN
 |      APPL -0.252395 -0.011860   NaN
 |  
 |  pipe(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -> 'T'
 |      Apply chainable functions that expect Series or DataFrames.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          Function to apply to the Series/DataFrame.
 |          ``args``, and ``kwargs`` are passed into ``func``.
 |          Alternatively a ``(callable, data_keyword)`` tuple where
 |          ``data_keyword`` is a string indicating the keyword of
 |          ``callable`` that expects the Series/DataFrame.
 |      *args : iterable, optional
 |          Positional arguments passed into ``func``.
 |      **kwargs : mapping, optional
 |          A dictionary of keyword arguments passed into ``func``.
 |      
 |      Returns
 |      -------
 |      the return type of ``func``.
 |      
 |      See Also
 |      --------
 |      DataFrame.apply : Apply a function along input axis of DataFrame.
 |      DataFrame.map : Apply a function elementwise on a whole DataFrame.
 |      Series.map : Apply a mapping correspondence on a
 |          :class:`~pandas.Series`.
 |      
 |      Notes
 |      -----
 |      Use ``.pipe`` when chaining together functions that expect
 |      Series, DataFrames or GroupBy objects.
 |      
 |      Examples
 |      --------
 |      Constructing a income DataFrame from a dictionary.
 |      
 |      >>> data = [[8000, 1000], [9500, np.nan], [5000, 2000]]
 |      >>> df = pd.DataFrame(data, columns=['Salary', 'Others'])
 |      >>> df
 |         Salary  Others
 |      0    8000  1000.0
 |      1    9500     NaN
 |      2    5000  2000.0
 |      
 |      Functions that perform tax reductions on an income DataFrame.
 |      
 |      >>> def subtract_federal_tax(df):
 |      ...     return df * 0.9
 |      >>> def subtract_state_tax(df, rate):
 |      ...     return df * (1 - rate)
 |      >>> def subtract_national_insurance(df, rate, rate_increase):
 |      ...     new_rate = rate + rate_increase
 |      ...     return df * (1 - new_rate)
 |      
 |      Instead of writing
 |      
 |      >>> subtract_national_insurance(
 |      ...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),
 |      ...     rate=0.05,
 |      ...     rate_increase=0.02)  # doctest: +SKIP
 |      
 |      You can write
 |      
 |      >>> (
 |      ...     df.pipe(subtract_federal_tax)
 |      ...     .pipe(subtract_state_tax, rate=0.12)
 |      ...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)
 |      ... )
 |          Salary   Others
 |      0  5892.48   736.56
 |      1  6997.32      NaN
 |      2  3682.80  1473.12
 |      
 |      If you have a function that takes the data as (say) the second
 |      argument, pass a tuple indicating which keyword expects the
 |      data. For example, suppose ``national_insurance`` takes its data as ``df``
 |      in the second argument:
 |      
 |      >>> def subtract_national_insurance(rate, df, rate_increase):
 |      ...     new_rate = rate + rate_increase
 |      ...     return df * (1 - new_rate)
 |      >>> (
 |      ...     df.pipe(subtract_federal_tax)
 |      ...     .pipe(subtract_state_tax, rate=0.12)
 |      ...     .pipe(
 |      ...         (subtract_national_insurance, 'df'),
 |      ...         rate=0.05,
 |      ...         rate_increase=0.02
 |      ...     )
 |      ... )
 |          Salary   Others
 |      0  5892.48   736.56
 |      1  6997.32      NaN
 |      2  3682.80  1473.12
 |  
 |  rank(self, axis: 'Axis' = 0, method: "Literal['average', 'min', 'max', 'first', 'dense']" = 'average', numeric_only: 'bool_t' = False, na_option: "Literal['keep', 'top', 'bottom']" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -> 'Self'
 |      Compute numerical data ranks (1 through n) along axis.
 |      
 |      By default, equal values are assigned a rank that is the average of the
 |      ranks of those values.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Index to direct ranking.
 |          For `Series` this parameter is unused and defaults to 0.
 |      method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'
 |          How to rank the group of records that have the same value (i.e. ties):
 |      
 |          * average: average rank of the group
 |          * min: lowest rank in the group
 |          * max: highest rank in the group
 |          * first: ranks assigned in order they appear in the array
 |          * dense: like 'min', but rank always increases by 1 between groups.
 |      
 |      numeric_only : bool, default False
 |          For DataFrame objects, rank only numeric columns if set to True.
 |      
 |          .. versionchanged:: 2.0.0
 |              The default value of ``numeric_only`` is now ``False``.
 |      
 |      na_option : {'keep', 'top', 'bottom'}, default 'keep'
 |          How to rank NaN values:
 |      
 |          * keep: assign NaN rank to NaN values
 |          * top: assign lowest rank to NaN values
 |          * bottom: assign highest rank to NaN values
 |      
 |      ascending : bool, default True
 |          Whether or not the elements should be ranked in ascending order.
 |      pct : bool, default False
 |          Whether or not to display the returned rankings in percentile
 |          form.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          Return a Series or DataFrame with data ranks as values.
 |      
 |      See Also
 |      --------
 |      core.groupby.DataFrameGroupBy.rank : Rank of values within each group.
 |      core.groupby.SeriesGroupBy.rank : Rank of values within each group.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',
 |      ...                                    'spider', 'snake'],
 |      ...                         'Number_legs': [4, 2, 4, 8, np.nan]})
 |      >>> df
 |          Animal  Number_legs
 |      0      cat          4.0
 |      1  penguin          2.0
 |      2      dog          4.0
 |      3   spider          8.0
 |      4    snake          NaN
 |      
 |      Ties are assigned the mean of the ranks (by default) for the group.
 |      
 |      >>> s = pd.Series(range(5), index=list("abcde"))
 |      >>> s["d"] = s["b"]
 |      >>> s.rank()
 |      a    1.0
 |      b    2.5
 |      c    4.0
 |      d    2.5
 |      e    5.0
 |      dtype: float64
 |      
 |      The following example shows how the method behaves with the above
 |      parameters:
 |      
 |      * default_rank: this is the default behaviour obtained without using
 |        any parameter.
 |      * max_rank: setting ``method = 'max'`` the records that have the
 |        same values are ranked using the highest rank (e.g.: since 'cat'
 |        and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)
 |      * NA_bottom: choosing ``na_option = 'bottom'``, if there are records
 |        with NaN values they are placed at the bottom of the ranking.
 |      * pct_rank: when setting ``pct = True``, the ranking is expressed as
 |        percentile rank.
 |      
 |      >>> df['default_rank'] = df['Number_legs'].rank()
 |      >>> df['max_rank'] = df['Number_legs'].rank(method='max')
 |      >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')
 |      >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)
 |      >>> df
 |          Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank
 |      0      cat          4.0           2.5       3.0        2.5     0.625
 |      1  penguin          2.0           1.0       1.0        1.0     0.250
 |      2      dog          4.0           2.5       3.0        2.5     0.625
 |      3   spider          8.0           4.0       4.0        4.0     1.000
 |      4    snake          NaN           NaN       NaN        5.0       NaN
 |  
 |  reindex_like(self, other, method: "Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Self'
 |      Return an object with matching indices as other object.
 |      
 |      Conform the object to the same index on all axes. Optional
 |      filling logic, placing NaN in locations having no value
 |      in the previous index. A new object is produced unless the
 |      new index is equivalent to the current one and copy=False.
 |      
 |      Parameters
 |      ----------
 |      other : Object of the same data type
 |          Its row and column indices are used to define the new indices
 |          of this object.
 |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}
 |          Method to use for filling holes in reindexed DataFrame.
 |          Please note: this is only applicable to DataFrames/Series with a
 |          monotonically increasing/decreasing index.
 |      
 |          * None (default): don't fill gaps
 |          * pad / ffill: propagate last valid observation forward to next
 |            valid
 |          * backfill / bfill: use next valid observation to fill gap
 |          * nearest: use nearest valid observations to fill gap.
 |      
 |      copy : bool, default True
 |          Return a new object, even if the passed indexes are the same.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      limit : int, default None
 |          Maximum number of consecutive labels to fill for inexact matches.
 |      tolerance : optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations must
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Same type as caller, but with changed indices on each axis.
 |      
 |      See Also
 |      --------
 |      DataFrame.set_index : Set row labels.
 |      DataFrame.reset_index : Remove row labels or move them to new columns.
 |      DataFrame.reindex : Change to new indices or expand indices.
 |      
 |      Notes
 |      -----
 |      Same as calling
 |      ``.reindex(index=other.index, columns=other.columns,...)``.
 |      
 |      Examples
 |      --------
 |      >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],
 |      ...                     [31, 87.8, 'high'],
 |      ...                     [22, 71.6, 'medium'],
 |      ...                     [35, 95, 'medium']],
 |      ...                    columns=['temp_celsius', 'temp_fahrenheit',
 |      ...                             'windspeed'],
 |      ...                    index=pd.date_range(start='2014-02-12',
 |      ...                                        end='2014-02-15', freq='D'))
 |      
 |      >>> df1
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          24.3             75.7      high
 |      2014-02-13          31.0             87.8      high
 |      2014-02-14          22.0             71.6    medium
 |      2014-02-15          35.0             95.0    medium
 |      
 |      >>> df2 = pd.DataFrame([[28, 'low'],
 |      ...                     [30, 'low'],
 |      ...                     [35.1, 'medium']],
 |      ...                    columns=['temp_celsius', 'windspeed'],
 |      ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',
 |      ...                                            '2014-02-15']))
 |      
 |      >>> df2
 |                  temp_celsius windspeed
 |      2014-02-12          28.0       low
 |      2014-02-13          30.0       low
 |      2014-02-15          35.1    medium
 |      
 |      >>> df2.reindex_like(df1)
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          28.0              NaN       low
 |      2014-02-13          30.0              NaN       low
 |      2014-02-14           NaN              NaN       NaN
 |      2014-02-15          35.1              NaN    medium
 |  
 |  replace(self, to_replace=None, value=<no_default>, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: "Literal['pad', 'ffill', 'bfill'] | lib.NoDefault" = <no_default>) -> 'Self | None'
 |      Replace values given in `to_replace` with `value`.
 |      
 |      Values of the Series/DataFrame are replaced with other values dynamically.
 |      This differs from updating with ``.loc`` or ``.iloc``, which require
 |      you to specify a location to update with some value.
 |      
 |      Parameters
 |      ----------
 |      to_replace : str, regex, list, dict, Series, int, float, or None
 |          How to find the values that will be replaced.
 |      
 |          * numeric, str or regex:
 |      
 |              - numeric: numeric values equal to `to_replace` will be
 |                replaced with `value`
 |              - str: string exactly matching `to_replace` will be replaced
 |                with `value`
 |              - regex: regexs matching `to_replace` will be replaced with
 |                `value`
 |      
 |          * list of str, regex, or numeric:
 |      
 |              - First, if `to_replace` and `value` are both lists, they
 |                **must** be the same length.
 |              - Second, if ``regex=True`` then all of the strings in **both**
 |                lists will be interpreted as regexs otherwise they will match
 |                directly. This doesn't matter much for `value` since there
 |                are only a few possible substitution regexes you can use.
 |              - str, regex and numeric rules apply as above.
 |      
 |          * dict:
 |      
 |              - Dicts can be used to specify different replacement values
 |                for different existing values. For example,
 |                ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and
 |                'y' with 'z'. To use a dict in this way, the optional `value`
 |                parameter should not be given.
 |              - For a DataFrame a dict can specify that different values
 |                should be replaced in different columns. For example,
 |                ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'
 |                and the value 'z' in column 'b' and replaces these values
 |                with whatever is specified in `value`. The `value` parameter
 |                should not be ``None`` in this case. You can treat this as a
 |                special case of passing two lists except that you are
 |                specifying the column to search in.
 |              - For a DataFrame nested dictionaries, e.g.,
 |                ``{'a': {'b': np.nan}}``, are read as follows: look in column
 |                'a' for the value 'b' and replace it with NaN. The optional `value`
 |                parameter should not be specified to use a nested dict in this
 |                way. You can nest regular expressions as well. Note that
 |                column names (the top-level dictionary keys in a nested
 |                dictionary) **cannot** be regular expressions.
 |      
 |          * None:
 |      
 |              - This means that the `regex` argument must be a string,
 |                compiled regular expression, or list, dict, ndarray or
 |                Series of such elements. If `value` is also ``None`` then
 |                this **must** be a nested dictionary or Series.
 |      
 |          See the examples section for examples of each of these.
 |      value : scalar, dict, list, str, regex, default None
 |          Value to replace any values matching `to_replace` with.
 |          For a DataFrame a dict of values can be used to specify which
 |          value to use for each column (columns not in the dict will not be
 |          filled). Regular expressions, strings and lists or dicts of such
 |          objects are also allowed.
 |      
 |      inplace : bool, default False
 |          If True, performs operation inplace and returns None.
 |      limit : int, default None
 |          Maximum size gap to forward or backward fill.
 |      
 |          .. deprecated:: 2.1.0
 |      regex : bool or same types as `to_replace`, default False
 |          Whether to interpret `to_replace` and/or `value` as regular
 |          expressions. Alternatively, this could be a regular expression or a
 |          list, dict, or array of regular expressions in which case
 |          `to_replace` must be ``None``.
 |      method : {'pad', 'ffill', 'bfill'}
 |          The method to use when for replacement, when `to_replace` is a
 |          scalar, list or tuple and `value` is ``None``.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Object after replacement.
 |      
 |      Raises
 |      ------
 |      AssertionError
 |          * If `regex` is not a ``bool`` and `to_replace` is not
 |            ``None``.
 |      
 |      TypeError
 |          * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``
 |          * If `to_replace` is a ``dict`` and `value` is not a ``list``,
 |            ``dict``, ``ndarray``, or ``Series``
 |          * If `to_replace` is ``None`` and `regex` is not compilable
 |            into a regular expression or is a list, dict, ndarray, or
 |            Series.
 |          * When replacing multiple ``bool`` or ``datetime64`` objects and
 |            the arguments to `to_replace` does not match the type of the
 |            value being replaced
 |      
 |      ValueError
 |          * If a ``list`` or an ``ndarray`` is passed to `to_replace` and
 |            `value` but they are not the same length.
 |      
 |      See Also
 |      --------
 |      Series.fillna : Fill NA values.
 |      DataFrame.fillna : Fill NA values.
 |      Series.where : Replace values based on boolean condition.
 |      DataFrame.where : Replace values based on boolean condition.
 |      DataFrame.map: Apply a function to a Dataframe elementwise.
 |      Series.map: Map values of Series according to an input mapping or function.
 |      Series.str.replace : Simple string replacement.
 |      
 |      Notes
 |      -----
 |      * Regex substitution is performed under the hood with ``re.sub``. The
 |        rules for substitution for ``re.sub`` are the same.
 |      * Regular expressions will only substitute on strings, meaning you
 |        cannot provide, for example, a regular expression matching floating
 |        point numbers and expect the columns in your frame that have a
 |        numeric dtype to be matched. However, if those floating point
 |        numbers *are* strings, then you can do this.
 |      * This method has *a lot* of options. You are encouraged to experiment
 |        and play with this method to gain intuition about how it works.
 |      * When dict is used as the `to_replace` value, it is like
 |        key(s) in the dict are the to_replace part and
 |        value(s) in the dict are the value parameter.
 |      
 |      Examples
 |      --------
 |      
 |      **Scalar `to_replace` and `value`**
 |      
 |      >>> s = pd.Series([1, 2, 3, 4, 5])
 |      >>> s.replace(1, 5)
 |      0    5
 |      1    2
 |      2    3
 |      3    4
 |      4    5
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
 |      ...                    'B': [5, 6, 7, 8, 9],
 |      ...                    'C': ['a', 'b', 'c', 'd', 'e']})
 |      >>> df.replace(0, 5)
 |          A  B  C
 |      0  5  5  a
 |      1  1  6  b
 |      2  2  7  c
 |      3  3  8  d
 |      4  4  9  e
 |      
 |      **List-like `to_replace`**
 |      
 |      >>> df.replace([0, 1, 2, 3], 4)
 |          A  B  C
 |      0  4  5  a
 |      1  4  6  b
 |      2  4  7  c
 |      3  4  8  d
 |      4  4  9  e
 |      
 |      >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])
 |          A  B  C
 |      0  4  5  a
 |      1  3  6  b
 |      2  2  7  c
 |      3  1  8  d
 |      4  4  9  e
 |      
 |      >>> s.replace([1, 2], method='bfill')
 |      0    3
 |      1    3
 |      2    3
 |      3    4
 |      4    5
 |      dtype: int64
 |      
 |      **dict-like `to_replace`**
 |      
 |      >>> df.replace({0: 10, 1: 100})
 |              A  B  C
 |      0   10  5  a
 |      1  100  6  b
 |      2    2  7  c
 |      3    3  8  d
 |      4    4  9  e
 |      
 |      >>> df.replace({'A': 0, 'B': 5}, 100)
 |              A    B  C
 |      0  100  100  a
 |      1    1    6  b
 |      2    2    7  c
 |      3    3    8  d
 |      4    4    9  e
 |      
 |      >>> df.replace({'A': {0: 100, 4: 400}})
 |              A  B  C
 |      0  100  5  a
 |      1    1  6  b
 |      2    2  7  c
 |      3    3  8  d
 |      4  400  9  e
 |      
 |      **Regular expression `to_replace`**
 |      
 |      >>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],
 |      ...                    'B': ['abc', 'bar', 'xyz']})
 |      >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)
 |              A    B
 |      0   new  abc
 |      1   foo  new
 |      2  bait  xyz
 |      
 |      >>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)
 |              A    B
 |      0   new  abc
 |      1   foo  bar
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex=r'^ba.$', value='new')
 |              A    B
 |      0   new  abc
 |      1   foo  new
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})
 |              A    B
 |      0   new  abc
 |      1   xyz  new
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')
 |              A    B
 |      0   new  abc
 |      1   new  new
 |      2  bait  xyz
 |      
 |      Compare the behavior of ``s.replace({'a': None})`` and
 |      ``s.replace('a', None)`` to understand the peculiarities
 |      of the `to_replace` parameter:
 |      
 |      >>> s = pd.Series([10, 'a', 'a', 'b', 'a'])
 |      
 |      When one uses a dict as the `to_replace` value, it is like the
 |      value(s) in the dict are equal to the `value` parameter.
 |      ``s.replace({'a': None})`` is equivalent to
 |      ``s.replace(to_replace={'a': None}, value=None, method=None)``:
 |      
 |      >>> s.replace({'a': None})
 |      0      10
 |      1    None
 |      2    None
 |      3       b
 |      4    None
 |      dtype: object
 |      
 |      When ``value`` is not explicitly passed and `to_replace` is a scalar, list
 |      or tuple, `replace` uses the method parameter (default 'pad') to do the
 |      replacement. So this is why the 'a' values are being replaced by 10
 |      in rows 1 and 2 and 'b' in row 4 in this case.
 |      
 |      >>> s.replace('a')
 |      0    10
 |      1    10
 |      2    10
 |      3     b
 |      4     b
 |      dtype: object
 |      
 |          .. deprecated:: 2.1.0
 |              The 'method' parameter and padding behavior are deprecated.
 |      
 |      On the other hand, if ``None`` is explicitly passed for ``value``, it will
 |      be respected:
 |      
 |      >>> s.replace('a', None)
 |      0      10
 |      1    None
 |      2    None
 |      3       b
 |      4    None
 |      dtype: object
 |      
 |          .. versionchanged:: 1.4.0
 |              Previously the explicit ``None`` was silently ignored.
 |      
 |      When ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,
 |      the replacement will be applied in all columns of the DataFrame.
 |      
 |      >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
 |      ...                    'B': ['a', 'b', 'c', 'd', 'e'],
 |      ...                    'C': ['f', 'g', 'h', 'i', 'j']})
 |      
 |      >>> df.replace(to_replace='^[a-g]', value='e', regex=True)
 |          A  B  C
 |      0  0  e  e
 |      1  1  e  e
 |      2  2  e  h
 |      3  3  e  i
 |      4  4  e  j
 |      
 |      If ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary
 |      keys will be the DataFrame columns that the replacement will be applied.
 |      
 |      >>> df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)
 |          A  B  C
 |      0  0  e  f
 |      1  1  e  g
 |      2  2  e  e
 |      3  3  d  e
 |      4  4  e  e
 |  
 |  resample(self, rule, axis: 'Axis | lib.NoDefault' = <no_default>, closed: "Literal['right', 'left'] | None" = None, label: "Literal['right', 'left'] | None" = None, convention: "Literal['start', 'end', 's', 'e']" = 'start', kind: "Literal['timestamp', 'period'] | None | lib.NoDefault" = <no_default>, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -> 'Resampler'
 |      Resample time-series data.
 |      
 |      Convenience method for frequency conversion and resampling of time series.
 |      The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,
 |      or `TimedeltaIndex`), or the caller must pass the label of a datetime-like
 |      series/index to the ``on``/``level`` keyword parameter.
 |      
 |      Parameters
 |      ----------
 |      rule : DateOffset, Timedelta or str
 |          The offset string or object representing target conversion.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Which axis to use for up- or down-sampling. For `Series` this parameter
 |          is unused and defaults to 0. Must be
 |          `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.
 |      
 |          .. deprecated:: 2.0.0
 |              Use frame.T.resample(...) instead.
 |      closed : {'right', 'left'}, default None
 |          Which side of bin interval is closed. The default is 'left'
 |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',
 |          'BA', 'BQE', and 'W' which all have a default of 'right'.
 |      label : {'right', 'left'}, default None
 |          Which bin edge label to label bucket with. The default is 'left'
 |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',
 |          'BA', 'BQE', and 'W' which all have a default of 'right'.
 |      convention : {'start', 'end', 's', 'e'}, default 'start'
 |          For `PeriodIndex` only, controls whether to use the start or
 |          end of `rule`.
 |      
 |      kind : {'timestamp', 'period'}, optional, default None
 |          Pass 'timestamp' to convert the resulting index to a
 |          `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.
 |          By default the input representation is retained.
 |      
 |          .. deprecated:: 2.2.0
 |              Convert index to desired type explicitly instead.
 |      
 |      on : str, optional
 |          For a DataFrame, column to use instead of index for resampling.
 |          Column must be datetime-like.
 |      level : str or int, optional
 |          For a MultiIndex, level (name or number) to use for
 |          resampling. `level` must be datetime-like.
 |      origin : Timestamp or str, default 'start_day'
 |          The timestamp on which to adjust the grouping. The timezone of origin
 |          must match the timezone of the index.
 |          If string, must be one of the following:
 |      
 |          - 'epoch': `origin` is 1970-01-01
 |          - 'start': `origin` is the first value of the timeseries
 |          - 'start_day': `origin` is the first day at midnight of the timeseries
 |      
 |          - 'end': `origin` is the last value of the timeseries
 |          - 'end_day': `origin` is the ceiling midnight of the last day
 |      
 |          .. versionadded:: 1.3.0
 |      
 |          .. note::
 |      
 |              Only takes effect for Tick-frequencies (i.e. fixed frequencies like
 |              days, hours, and minutes, rather than months or quarters).
 |      offset : Timedelta or str, default is None
 |          An offset timedelta added to the origin.
 |      
 |      group_keys : bool, default False
 |          Whether to include the group keys in the result index when using
 |          ``.apply()`` on the resampled object.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |              Not specifying ``group_keys`` will retain values-dependent behavior
 |              from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes
 |              <whatsnew_150.enhancements.resample_group_keys>` for examples).
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              ``group_keys`` now defaults to ``False``.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Resampler
 |          :class:`~pandas.core.Resampler` object.
 |      
 |      See Also
 |      --------
 |      Series.resample : Resample a Series.
 |      DataFrame.resample : Resample a DataFrame.
 |      groupby : Group Series/DataFrame by mapping, function, label, or list of labels.
 |      asfreq : Reindex a Series/DataFrame with the given frequency without grouping.
 |      
 |      Notes
 |      -----
 |      See the `user guide
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__
 |      for more.
 |      
 |      To learn more about the offset strings, please see `this link
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.
 |      
 |      Examples
 |      --------
 |      Start by creating a series with 9 one minute timestamps.
 |      
 |      >>> index = pd.date_range('1/1/2000', periods=9, freq='min')
 |      >>> series = pd.Series(range(9), index=index)
 |      >>> series
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:02:00    2
 |      2000-01-01 00:03:00    3
 |      2000-01-01 00:04:00    4
 |      2000-01-01 00:05:00    5
 |      2000-01-01 00:06:00    6
 |      2000-01-01 00:07:00    7
 |      2000-01-01 00:08:00    8
 |      Freq: min, dtype: int64
 |      
 |      Downsample the series into 3 minute bins and sum the values
 |      of the timestamps falling into a bin.
 |      
 |      >>> series.resample('3min').sum()
 |      2000-01-01 00:00:00     3
 |      2000-01-01 00:03:00    12
 |      2000-01-01 00:06:00    21
 |      Freq: 3min, dtype: int64
 |      
 |      Downsample the series into 3 minute bins as above, but label each
 |      bin using the right edge instead of the left. Please note that the
 |      value in the bucket used as the label is not included in the bucket,
 |      which it labels. For example, in the original series the
 |      bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed
 |      value in the resampled bucket with the label ``2000-01-01 00:03:00``
 |      does not include 3 (if it did, the summed value would be 6, not 3).
 |      
 |      >>> series.resample('3min', label='right').sum()
 |      2000-01-01 00:03:00     3
 |      2000-01-01 00:06:00    12
 |      2000-01-01 00:09:00    21
 |      Freq: 3min, dtype: int64
 |      
 |      To include this value close the right side of the bin interval,
 |      as shown below.
 |      
 |      >>> series.resample('3min', label='right', closed='right').sum()
 |      2000-01-01 00:00:00     0
 |      2000-01-01 00:03:00     6
 |      2000-01-01 00:06:00    15
 |      2000-01-01 00:09:00    15
 |      Freq: 3min, dtype: int64
 |      
 |      Upsample the series into 30 second bins.
 |      
 |      >>> series.resample('30s').asfreq()[0:5]   # Select first 5 rows
 |      2000-01-01 00:00:00   0.0
 |      2000-01-01 00:00:30   NaN
 |      2000-01-01 00:01:00   1.0
 |      2000-01-01 00:01:30   NaN
 |      2000-01-01 00:02:00   2.0
 |      Freq: 30s, dtype: float64
 |      
 |      Upsample the series into 30 second bins and fill the ``NaN``
 |      values using the ``ffill`` method.
 |      
 |      >>> series.resample('30s').ffill()[0:5]
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:00:30    0
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:01:30    1
 |      2000-01-01 00:02:00    2
 |      Freq: 30s, dtype: int64
 |      
 |      Upsample the series into 30 second bins and fill the
 |      ``NaN`` values using the ``bfill`` method.
 |      
 |      >>> series.resample('30s').bfill()[0:5]
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:00:30    1
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:01:30    2
 |      2000-01-01 00:02:00    2
 |      Freq: 30s, dtype: int64
 |      
 |      Pass a custom function via ``apply``
 |      
 |      >>> def custom_resampler(arraylike):
 |      ...     return np.sum(arraylike) + 5
 |      ...
 |      >>> series.resample('3min').apply(custom_resampler)
 |      2000-01-01 00:00:00     8
 |      2000-01-01 00:03:00    17
 |      2000-01-01 00:06:00    26
 |      Freq: 3min, dtype: int64
 |      
 |      For a Series with a PeriodIndex, the keyword `convention` can be
 |      used to control whether to use the start or end of `rule`.
 |      
 |      Resample a year by quarter using 'start' `convention`. Values are
 |      assigned to the first quarter of the period.
 |      
 |      >>> s = pd.Series(
 |      ...     [1, 2], index=pd.period_range("2012-01-01", freq="Y", periods=2)
 |      ... )
 |      >>> s
 |      2012    1
 |      2013    2
 |      Freq: Y-DEC, dtype: int64
 |      >>> s.resample("Q", convention="start").asfreq()
 |      2012Q1    1.0
 |      2012Q2    NaN
 |      2012Q3    NaN
 |      2012Q4    NaN
 |      2013Q1    2.0
 |      2013Q2    NaN
 |      2013Q3    NaN
 |      2013Q4    NaN
 |      Freq: Q-DEC, dtype: float64
 |      
 |      Resample quarters by month using 'end' `convention`. Values are
 |      assigned to the last month of the period.
 |      
 |      >>> q = pd.Series(
 |      ...     [1, 2, 3, 4], index=pd.period_range("2018-01-01", freq="Q", periods=4)
 |      ... )
 |      >>> q
 |      2018Q1    1
 |      2018Q2    2
 |      2018Q3    3
 |      2018Q4    4
 |      Freq: Q-DEC, dtype: int64
 |      >>> q.resample("M", convention="end").asfreq()
 |      2018-03    1.0
 |      2018-04    NaN
 |      2018-05    NaN
 |      2018-06    2.0
 |      2018-07    NaN
 |      2018-08    NaN
 |      2018-09    3.0
 |      2018-10    NaN
 |      2018-11    NaN
 |      2018-12    4.0
 |      Freq: M, dtype: float64
 |      
 |      For DataFrame objects, the keyword `on` can be used to specify the
 |      column instead of the index for resampling.
 |      
 |      >>> d = {'price': [10, 11, 9, 13, 14, 18, 17, 19],
 |      ...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}
 |      >>> df = pd.DataFrame(d)
 |      >>> df['week_starting'] = pd.date_range('01/01/2018',
 |      ...                                     periods=8,
 |      ...                                     freq='W')
 |      >>> df
 |         price  volume week_starting
 |      0     10      50    2018-01-07
 |      1     11      60    2018-01-14
 |      2      9      40    2018-01-21
 |      3     13     100    2018-01-28
 |      4     14      50    2018-02-04
 |      5     18     100    2018-02-11
 |      6     17      40    2018-02-18
 |      7     19      50    2018-02-25
 |      >>> df.resample('ME', on='week_starting').mean()
 |                     price  volume
 |      week_starting
 |      2018-01-31     10.75    62.5
 |      2018-02-28     17.00    60.0
 |      
 |      For a DataFrame with MultiIndex, the keyword `level` can be used to
 |      specify on which level the resampling needs to take place.
 |      
 |      >>> days = pd.date_range('1/1/2000', periods=4, freq='D')
 |      >>> d2 = {'price': [10, 11, 9, 13, 14, 18, 17, 19],
 |      ...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}
 |      >>> df2 = pd.DataFrame(
 |      ...     d2,
 |      ...     index=pd.MultiIndex.from_product(
 |      ...         [days, ['morning', 'afternoon']]
 |      ...     )
 |      ... )
 |      >>> df2
 |                            price  volume
 |      2000-01-01 morning       10      50
 |                 afternoon     11      60
 |      2000-01-02 morning        9      40
 |                 afternoon     13     100
 |      2000-01-03 morning       14      50
 |                 afternoon     18     100
 |      2000-01-04 morning       17      40
 |                 afternoon     19      50
 |      >>> df2.resample('D', level=0).sum()
 |                  price  volume
 |      2000-01-01     21     110
 |      2000-01-02     22     140
 |      2000-01-03     32     150
 |      2000-01-04     36      90
 |      
 |      If you want to adjust the start of the bins based on a fixed timestamp:
 |      
 |      >>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'
 |      >>> rng = pd.date_range(start, end, freq='7min')
 |      >>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)
 |      >>> ts
 |      2000-10-01 23:30:00     0
 |      2000-10-01 23:37:00     3
 |      2000-10-01 23:44:00     6
 |      2000-10-01 23:51:00     9
 |      2000-10-01 23:58:00    12
 |      2000-10-02 00:05:00    15
 |      2000-10-02 00:12:00    18
 |      2000-10-02 00:19:00    21
 |      2000-10-02 00:26:00    24
 |      Freq: 7min, dtype: int64
 |      
 |      >>> ts.resample('17min').sum()
 |      2000-10-01 23:14:00     0
 |      2000-10-01 23:31:00     9
 |      2000-10-01 23:48:00    21
 |      2000-10-02 00:05:00    54
 |      2000-10-02 00:22:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', origin='epoch').sum()
 |      2000-10-01 23:18:00     0
 |      2000-10-01 23:35:00    18
 |      2000-10-01 23:52:00    27
 |      2000-10-02 00:09:00    39
 |      2000-10-02 00:26:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', origin='2000-01-01').sum()
 |      2000-10-01 23:24:00     3
 |      2000-10-01 23:41:00    15
 |      2000-10-01 23:58:00    45
 |      2000-10-02 00:15:00    45
 |      Freq: 17min, dtype: int64
 |      
 |      If you want to adjust the start of the bins with an `offset` Timedelta, the two
 |      following lines are equivalent:
 |      
 |      >>> ts.resample('17min', origin='start').sum()
 |      2000-10-01 23:30:00     9
 |      2000-10-01 23:47:00    21
 |      2000-10-02 00:04:00    54
 |      2000-10-02 00:21:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', offset='23h30min').sum()
 |      2000-10-01 23:30:00     9
 |      2000-10-01 23:47:00    21
 |      2000-10-02 00:04:00    54
 |      2000-10-02 00:21:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      If you want to take the largest Timestamp as the end of the bins:
 |      
 |      >>> ts.resample('17min', origin='end').sum()
 |      2000-10-01 23:35:00     0
 |      2000-10-01 23:52:00    18
 |      2000-10-02 00:09:00    27
 |      2000-10-02 00:26:00    63
 |      Freq: 17min, dtype: int64
 |      
 |      In contrast with the `start_day`, you can use `end_day` to take the ceiling
 |      midnight of the largest Timestamp as the end of the bins and drop the bins
 |      not containing data:
 |      
 |      >>> ts.resample('17min', origin='end_day').sum()
 |      2000-10-01 23:38:00     3
 |      2000-10-01 23:55:00    15
 |      2000-10-02 00:12:00    45
 |      2000-10-02 00:29:00    45
 |      Freq: 17min, dtype: int64
 |  
 |  rolling(self, window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = <no_default>, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -> 'Window | Rolling'
 |      Provide rolling window calculations.
 |      
 |      Parameters
 |      ----------
 |      window : int, timedelta, str, offset, or BaseIndexer subclass
 |          Size of the moving window.
 |      
 |          If an integer, the fixed number of observations used for
 |          each window.
 |      
 |          If a timedelta, str, or offset, the time period of each window. Each
 |          window will be a variable sized based on the observations included in
 |          the time-period. This is only valid for datetimelike indexes.
 |          To learn more about the offsets & frequency strings, please see `this link
 |          <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
 |      
 |          If a BaseIndexer subclass, the window boundaries
 |          based on the defined ``get_window_bounds`` method. Additional rolling
 |          keyword arguments, namely ``min_periods``, ``center``, ``closed`` and
 |          ``step`` will be passed to ``get_window_bounds``.
 |      
 |      min_periods : int, default None
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |          For a window that is specified by an offset, ``min_periods`` will default to 1.
 |      
 |          For a window that is specified by an integer, ``min_periods`` will default
 |          to the size of the window.
 |      
 |      center : bool, default False
 |          If False, set the window labels as the right edge of the window index.
 |      
 |          If True, set the window labels as the center of the window index.
 |      
 |      win_type : str, default None
 |          If ``None``, all points are evenly weighted.
 |      
 |          If a string, it must be a valid `scipy.signal window function
 |          <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`__.
 |      
 |          Certain Scipy window types require additional parameters to be passed
 |          in the aggregation function. The additional parameters must match
 |          the keywords specified in the Scipy window type method signature.
 |      
 |      on : str, optional
 |          For a DataFrame, a column label or Index level on which
 |          to calculate the rolling window, rather than the DataFrame's index.
 |      
 |          Provided integer column is ignored and excluded from result since
 |          an integer index is not used to calculate the rolling window.
 |      
 |      axis : int or str, default 0
 |          If ``0`` or ``'index'``, roll across the rows.
 |      
 |          If ``1`` or ``'columns'``, roll across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              The axis keyword is deprecated. For ``axis=1``,
 |              transpose the DataFrame first instead.
 |      
 |      closed : str, default None
 |          If ``'right'``, the first point in the window is excluded from calculations.
 |      
 |          If ``'left'``, the last point in the window is excluded from calculations.
 |      
 |          If ``'both'``, the no points in the window are excluded from calculations.
 |      
 |          If ``'neither'``, the first and last points in the window are excluded
 |          from calculations.
 |      
 |          Default ``None`` (``'right'``).
 |      
 |      step : int, default None
 |      
 |          .. versionadded:: 1.5.0
 |      
 |          Evaluate the window at every ``step`` result, equivalent to slicing as
 |          ``[::step]``. ``window`` must be an integer. Using a step argument other
 |          than None or 1 will produce a result with a different shape than the input.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |      
 |          .. versionadded:: 1.3.0
 |      
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Window or pandas.api.typing.Rolling
 |          An instance of Window is returned if ``win_type`` is passed. Otherwise,
 |          an instance of Rolling is returned.
 |      
 |      See Also
 |      --------
 |      expanding : Provides expanding transformations.
 |      ewm : Provides exponential weighted functions.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.generic>` for further usage details
 |      and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      **window**
 |      
 |      Rolling sum with a window length of 2 observations.
 |      
 |      >>> df.rolling(2).sum()
 |           B
 |      0  NaN
 |      1  1.0
 |      2  3.0
 |      3  NaN
 |      4  NaN
 |      
 |      Rolling sum with a window span of 2 seconds.
 |      
 |      >>> df_time = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},
 |      ...                        index=[pd.Timestamp('20130101 09:00:00'),
 |      ...                               pd.Timestamp('20130101 09:00:02'),
 |      ...                               pd.Timestamp('20130101 09:00:03'),
 |      ...                               pd.Timestamp('20130101 09:00:05'),
 |      ...                               pd.Timestamp('20130101 09:00:06')])
 |      
 |      >>> df_time
 |                             B
 |      2013-01-01 09:00:00  0.0
 |      2013-01-01 09:00:02  1.0
 |      2013-01-01 09:00:03  2.0
 |      2013-01-01 09:00:05  NaN
 |      2013-01-01 09:00:06  4.0
 |      
 |      >>> df_time.rolling('2s').sum()
 |                             B
 |      2013-01-01 09:00:00  0.0
 |      2013-01-01 09:00:02  1.0
 |      2013-01-01 09:00:03  3.0
 |      2013-01-01 09:00:05  NaN
 |      2013-01-01 09:00:06  4.0
 |      
 |      Rolling sum with forward looking windows with 2 observations.
 |      
 |      >>> indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)
 |      >>> df.rolling(window=indexer, min_periods=1).sum()
 |           B
 |      0  1.0
 |      1  3.0
 |      2  2.0
 |      3  4.0
 |      4  4.0
 |      
 |      **min_periods**
 |      
 |      Rolling sum with a window length of 2 observations, but only needs a minimum of 1
 |      observation to calculate a value.
 |      
 |      >>> df.rolling(2, min_periods=1).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  2.0
 |      4  4.0
 |      
 |      **center**
 |      
 |      Rolling sum with the result assigned to the center of the window index.
 |      
 |      >>> df.rolling(3, min_periods=1, center=True).sum()
 |           B
 |      0  1.0
 |      1  3.0
 |      2  3.0
 |      3  6.0
 |      4  4.0
 |      
 |      >>> df.rolling(3, min_periods=1, center=False).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  3.0
 |      4  6.0
 |      
 |      **step**
 |      
 |      Rolling sum with a window length of 2 observations, minimum of 1 observation to
 |      calculate a value, and a step of 2.
 |      
 |      >>> df.rolling(2, min_periods=1, step=2).sum()
 |           B
 |      0  0.0
 |      2  3.0
 |      4  4.0
 |      
 |      **win_type**
 |      
 |      Rolling sum with a window length of 2, using the Scipy ``'gaussian'``
 |      window type. ``std`` is required in the aggregation function.
 |      
 |      >>> df.rolling(2, win_type='gaussian').sum(std=3)
 |                B
 |      0       NaN
 |      1  0.986207
 |      2  2.958621
 |      3       NaN
 |      4       NaN
 |      
 |      **on**
 |      
 |      Rolling sum with a window length of 2 days.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'A': [pd.to_datetime('2020-01-01'),
 |      ...           pd.to_datetime('2020-01-01'),
 |      ...           pd.to_datetime('2020-01-02'),],
 |      ...     'B': [1, 2, 3], },
 |      ...     index=pd.date_range('2020', periods=3))
 |      
 |      >>> df
 |                          A  B
 |      2020-01-01 2020-01-01  1
 |      2020-01-02 2020-01-01  2
 |      2020-01-03 2020-01-02  3
 |      
 |      >>> df.rolling('2D', on='A').sum()
 |                          A    B
 |      2020-01-01 2020-01-01  1.0
 |      2020-01-02 2020-01-01  3.0
 |      2020-01-03 2020-01-02  6.0
 |  
 |  sample(self, n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'Self'
 |      Return a random sample of items from an axis of object.
 |      
 |      You can use `random_state` for reproducibility.
 |      
 |      Parameters
 |      ----------
 |      n : int, optional
 |          Number of items from axis to return. Cannot be used with `frac`.
 |          Default = 1 if `frac` = None.
 |      frac : float, optional
 |          Fraction of axis items to return. Cannot be used with `n`.
 |      replace : bool, default False
 |          Allow or disallow sampling of the same row more than once.
 |      weights : str or ndarray-like, optional
 |          Default 'None' results in equal probability weighting.
 |          If passed a Series, will align with target object on index. Index
 |          values in weights not found in sampled object will be ignored and
 |          index values in sampled object not in weights will be assigned
 |          weights of zero.
 |          If called on a DataFrame, will accept the name of a column
 |          when axis = 0.
 |          Unless weights are a Series, weights must be same length as axis
 |          being sampled.
 |          If weights do not sum to 1, they will be normalized to sum to 1.
 |          Missing values in the weights column will be treated as zero.
 |          Infinite values not allowed.
 |      random_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional
 |          If int, array-like, or BitGenerator, seed for random number generator.
 |          If np.random.RandomState or np.random.Generator, use as given.
 |      
 |          .. versionchanged:: 1.4.0
 |      
 |              np.random.Generator objects now accepted
 |      
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to sample. Accepts axis number or name. Default is stat axis
 |          for given data type. For `Series` this parameter is unused and defaults to `None`.
 |      ignore_index : bool, default False
 |          If True, the resulting index will be labeled 0, 1, …, n - 1.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A new object of same type as caller containing `n` items randomly
 |          sampled from the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrameGroupBy.sample: Generates random samples from each group of a
 |          DataFrame object.
 |      SeriesGroupBy.sample: Generates random samples from each group of a
 |          Series object.
 |      numpy.random.choice: Generates a random sample from a given 1-D numpy
 |          array.
 |      
 |      Notes
 |      -----
 |      If `frac` > 1, `replacement` should be set to `True`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],
 |      ...                    'num_wings': [2, 0, 0, 0],
 |      ...                    'num_specimen_seen': [10, 2, 1, 8]},
 |      ...                   index=['falcon', 'dog', 'spider', 'fish'])
 |      >>> df
 |              num_legs  num_wings  num_specimen_seen
 |      falcon         2          2                 10
 |      dog            4          0                  2
 |      spider         8          0                  1
 |      fish           0          0                  8
 |      
 |      Extract 3 random elements from the ``Series`` ``df['num_legs']``:
 |      Note that we use `random_state` to ensure the reproducibility of
 |      the examples.
 |      
 |      >>> df['num_legs'].sample(n=3, random_state=1)
 |      fish      0
 |      spider    8
 |      falcon    2
 |      Name: num_legs, dtype: int64
 |      
 |      A random 50% sample of the ``DataFrame`` with replacement:
 |      
 |      >>> df.sample(frac=0.5, replace=True, random_state=1)
 |            num_legs  num_wings  num_specimen_seen
 |      dog          4          0                  2
 |      fish         0          0                  8
 |      
 |      An upsample sample of the ``DataFrame`` with replacement:
 |      Note that `replace` parameter has to be `True` for `frac` parameter > 1.
 |      
 |      >>> df.sample(frac=2, replace=True, random_state=1)
 |              num_legs  num_wings  num_specimen_seen
 |      dog            4          0                  2
 |      fish           0          0                  8
 |      falcon         2          2                 10
 |      falcon         2          2                 10
 |      fish           0          0                  8
 |      dog            4          0                  2
 |      fish           0          0                  8
 |      dog            4          0                  2
 |      
 |      Using a DataFrame column as weights. Rows with larger value in the
 |      `num_specimen_seen` column are more likely to be sampled.
 |      
 |      >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)
 |              num_legs  num_wings  num_specimen_seen
 |      falcon         2          2                 10
 |      fish           0          0                  8
 |  
 |  set_flags(self, *, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -> 'Self'
 |      Return a new object with updated flags.
 |      
 |      Parameters
 |      ----------
 |      copy : bool, default False
 |          Specify if a copy of the object should be made.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      allows_duplicate_labels : bool, optional
 |          Whether the returned object allows duplicate labels.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          The same type as the caller.
 |      
 |      See Also
 |      --------
 |      DataFrame.attrs : Global metadata applying to this dataset.
 |      DataFrame.flags : Global flags applying to this object.
 |      
 |      Notes
 |      -----
 |      This method returns a new object that's a view on the same data
 |      as the input. Mutating the input or the output values will be reflected
 |      in the other.
 |      
 |      This method is intended to be used in method chains.
 |      
 |      "Flags" differ from "metadata". Flags reflect properties of the
 |      pandas object (the Series or DataFrame). Metadata refer to properties
 |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": [1, 2]})
 |      >>> df.flags.allows_duplicate_labels
 |      True
 |      >>> df2 = df.set_flags(allows_duplicate_labels=False)
 |      >>> df2.flags.allows_duplicate_labels
 |      False
 |  
 |  shift(self, periods: 'int | Sequence[int]' = 1, freq=None, axis: 'Axis' = 0, fill_value: 'Hashable' = <no_default>, suffix: 'str | None' = None) -> 'Self | DataFrame'
 |      Shift index by desired number of periods with an optional time `freq`.
 |      
 |      When `freq` is not passed, shift the index without realigning the data.
 |      If `freq` is passed (in this case, the index must be date or datetime,
 |      or it will raise a `NotImplementedError`), the index will be
 |      increased using the periods and the `freq`. `freq` can be inferred
 |      when specified as "infer" as long as either freq or inferred_freq
 |      attribute is set in the index.
 |      
 |      Parameters
 |      ----------
 |      periods : int or Sequence
 |          Number of periods to shift. Can be positive or negative.
 |          If an iterable of ints, the data will be shifted once by each int.
 |          This is equivalent to shifting by one value at a time and
 |          concatenating all resulting frames. The resulting columns will have
 |          the shift suffixed to their column names. For multiple periods,
 |          axis must not be 1.
 |      freq : DateOffset, tseries.offsets, timedelta, or str, optional
 |          Offset to use from the tseries module or time rule (e.g. 'EOM').
 |          If `freq` is specified then the index values are shifted but the
 |          data is not realigned. That is, use `freq` if you would like to
 |          extend the index when shifting and preserve the original data.
 |          If `freq` is specified as "infer" then it will be inferred from
 |          the freq or inferred_freq attributes of the index. If neither of
 |          those attributes exist, a ValueError is thrown.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Shift direction. For `Series` this parameter is unused and defaults to 0.
 |      fill_value : object, optional
 |          The scalar value to use for newly introduced missing values.
 |          the default depends on the dtype of `self`.
 |          For numeric data, ``np.nan`` is used.
 |          For datetime, timedelta, or period data, etc. :attr:`NaT` is used.
 |          For extension dtypes, ``self.dtype.na_value`` is used.
 |      suffix : str, optional
 |          If str and periods is an iterable, this is added after the column
 |          name and before the shift value for each shifted column name.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Copy of input object, shifted.
 |      
 |      See Also
 |      --------
 |      Index.shift : Shift values of Index.
 |      DatetimeIndex.shift : Shift values of DatetimeIndex.
 |      PeriodIndex.shift : Shift values of PeriodIndex.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"Col1": [10, 20, 15, 30, 45],
 |      ...                    "Col2": [13, 23, 18, 33, 48],
 |      ...                    "Col3": [17, 27, 22, 37, 52]},
 |      ...                   index=pd.date_range("2020-01-01", "2020-01-05"))
 |      >>> df
 |                  Col1  Col2  Col3
 |      2020-01-01    10    13    17
 |      2020-01-02    20    23    27
 |      2020-01-03    15    18    22
 |      2020-01-04    30    33    37
 |      2020-01-05    45    48    52
 |      
 |      >>> df.shift(periods=3)
 |                  Col1  Col2  Col3
 |      2020-01-01   NaN   NaN   NaN
 |      2020-01-02   NaN   NaN   NaN
 |      2020-01-03   NaN   NaN   NaN
 |      2020-01-04  10.0  13.0  17.0
 |      2020-01-05  20.0  23.0  27.0
 |      
 |      >>> df.shift(periods=1, axis="columns")
 |                  Col1  Col2  Col3
 |      2020-01-01   NaN    10    13
 |      2020-01-02   NaN    20    23
 |      2020-01-03   NaN    15    18
 |      2020-01-04   NaN    30    33
 |      2020-01-05   NaN    45    48
 |      
 |      >>> df.shift(periods=3, fill_value=0)
 |                  Col1  Col2  Col3
 |      2020-01-01     0     0     0
 |      2020-01-02     0     0     0
 |      2020-01-03     0     0     0
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      
 |      >>> df.shift(periods=3, freq="D")
 |                  Col1  Col2  Col3
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      2020-01-06    15    18    22
 |      2020-01-07    30    33    37
 |      2020-01-08    45    48    52
 |      
 |      >>> df.shift(periods=3, freq="infer")
 |                  Col1  Col2  Col3
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      2020-01-06    15    18    22
 |      2020-01-07    30    33    37
 |      2020-01-08    45    48    52
 |      
 |      >>> df['Col1'].shift(periods=[0, 1, 2])
 |                  Col1_0  Col1_1  Col1_2
 |      2020-01-01      10     NaN     NaN
 |      2020-01-02      20    10.0     NaN
 |      2020-01-03      15    20.0    10.0
 |      2020-01-04      30    15.0    20.0
 |      2020-01-05      45    30.0    15.0
 |  
 |  squeeze(self, axis: 'Axis | None' = None)
 |      Squeeze 1 dimensional axis objects into scalars.
 |      
 |      Series or DataFrames with a single element are squeezed to a scalar.
 |      DataFrames with a single column or a single row are squeezed to a
 |      Series. Otherwise the object is unchanged.
 |      
 |      This method is most useful when you don't know if your
 |      object is a Series or DataFrame, but you do know it has just a single
 |      column. In that case you can safely call `squeeze` to ensure you have a
 |      Series.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          A specific axis to squeeze. By default, all length-1 axes are
 |          squeezed. For `Series` this parameter is unused and defaults to `None`.
 |      
 |      Returns
 |      -------
 |      DataFrame, Series, or scalar
 |          The projection after squeezing `axis` or all the axes.
 |      
 |      See Also
 |      --------
 |      Series.iloc : Integer-location based indexing for selecting scalars.
 |      DataFrame.iloc : Integer-location based indexing for selecting Series.
 |      Series.to_frame : Inverse of DataFrame.squeeze for a
 |          single-column DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> primes = pd.Series([2, 3, 5, 7])
 |      
 |      Slicing might produce a Series with a single value:
 |      
 |      >>> even_primes = primes[primes % 2 == 0]
 |      >>> even_primes
 |      0    2
 |      dtype: int64
 |      
 |      >>> even_primes.squeeze()
 |      2
 |      
 |      Squeezing objects with more than one value in every axis does nothing:
 |      
 |      >>> odd_primes = primes[primes % 2 == 1]
 |      >>> odd_primes
 |      1    3
 |      2    5
 |      3    7
 |      dtype: int64
 |      
 |      >>> odd_primes.squeeze()
 |      1    3
 |      2    5
 |      3    7
 |      dtype: int64
 |      
 |      Squeezing is even more effective when used with DataFrames.
 |      
 |      >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])
 |      >>> df
 |         a  b
 |      0  1  2
 |      1  3  4
 |      
 |      Slicing a single column will produce a DataFrame with the columns
 |      having only one value:
 |      
 |      >>> df_a = df[['a']]
 |      >>> df_a
 |         a
 |      0  1
 |      1  3
 |      
 |      So the columns can be squeezed down, resulting in a Series:
 |      
 |      >>> df_a.squeeze('columns')
 |      0    1
 |      1    3
 |      Name: a, dtype: int64
 |      
 |      Slicing a single row from a single column will produce a single
 |      scalar DataFrame:
 |      
 |      >>> df_0a = df.loc[df.index < 1, ['a']]
 |      >>> df_0a
 |         a
 |      0  1
 |      
 |      Squeezing the rows produces a single scalar Series:
 |      
 |      >>> df_0a.squeeze('rows')
 |      a    1
 |      Name: 0, dtype: int64
 |      
 |      Squeezing all axes will project directly into a scalar:
 |      
 |      >>> df_0a.squeeze()
 |      1
 |  
 |  swapaxes(self, axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -> 'Self'
 |      Interchange axes and swap values axes appropriately.
 |      
 |      .. deprecated:: 2.1.0
 |          ``swapaxes`` is deprecated and will be removed.
 |          Please use ``transpose`` instead.
 |      
 |      Returns
 |      -------
 |      same as input
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.transpose`.
 |  
 |  tail(self, n: 'int' = 5) -> 'Self'
 |      Return the last `n` rows.
 |      
 |      This function returns last `n` rows from the object based on
 |      position. It is useful for quickly verifying data, for example,
 |      after sorting or appending rows.
 |      
 |      For negative values of `n`, this function returns all rows except
 |      the first `|n|` rows, equivalent to ``df[|n|:]``.
 |      
 |      If n is larger than the number of rows, this function returns all rows.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Number of rows to select.
 |      
 |      Returns
 |      -------
 |      type of caller
 |          The last `n` rows of the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrame.head : The first `n` rows of the caller object.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',
 |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})
 |      >>> df
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |      6      shark
 |      7      whale
 |      8      zebra
 |      
 |      Viewing the last 5 lines
 |      
 |      >>> df.tail()
 |         animal
 |      4  monkey
 |      5  parrot
 |      6   shark
 |      7   whale
 |      8   zebra
 |      
 |      Viewing the last `n` lines (three in this case)
 |      
 |      >>> df.tail(3)
 |        animal
 |      6  shark
 |      7  whale
 |      8  zebra
 |      
 |      For negative values of `n`
 |      
 |      >>> df.tail(-3)
 |         animal
 |      3    lion
 |      4  monkey
 |      5  parrot
 |      6   shark
 |      7   whale
 |      8   zebra
 |  
 |  take(self, indices, axis: 'Axis' = 0, **kwargs) -> 'Self'
 |      Return the elements in the given *positional* indices along an axis.
 |      
 |      This means that we are not indexing according to actual values in
 |      the index attribute of the object. We are indexing according to the
 |      actual position of the element in the object.
 |      
 |      Parameters
 |      ----------
 |      indices : array-like
 |          An array of ints indicating which positions to take.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          The axis on which to select elements. ``0`` means that we are
 |          selecting rows, ``1`` means that we are selecting columns.
 |          For `Series` this parameter is unused and defaults to 0.
 |      **kwargs
 |          For compatibility with :meth:`numpy.take`. Has no effect on the
 |          output.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          An array-like containing the elements taken from the object.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Select a subset of a DataFrame by labels.
 |      DataFrame.iloc : Select a subset of a DataFrame by positions.
 |      numpy.take : Take elements from an array along an axis.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('falcon', 'bird', 389.0),
 |      ...                    ('parrot', 'bird', 24.0),
 |      ...                    ('lion', 'mammal', 80.5),
 |      ...                    ('monkey', 'mammal', np.nan)],
 |      ...                   columns=['name', 'class', 'max_speed'],
 |      ...                   index=[0, 2, 3, 1])
 |      >>> df
 |           name   class  max_speed
 |      0  falcon    bird      389.0
 |      2  parrot    bird       24.0
 |      3    lion  mammal       80.5
 |      1  monkey  mammal        NaN
 |      
 |      Take elements at positions 0 and 3 along the axis 0 (default).
 |      
 |      Note how the actual indices selected (0 and 1) do not correspond to
 |      our selected indices 0 and 3. That's because we are selecting the 0th
 |      and 3rd rows, not rows whose indices equal 0 and 3.
 |      
 |      >>> df.take([0, 3])
 |           name   class  max_speed
 |      0  falcon    bird      389.0
 |      1  monkey  mammal        NaN
 |      
 |      Take elements at indices 1 and 2 along the axis 1 (column selection).
 |      
 |      >>> df.take([1, 2], axis=1)
 |          class  max_speed
 |      0    bird      389.0
 |      2    bird       24.0
 |      3  mammal       80.5
 |      1  mammal        NaN
 |      
 |      We may take elements using negative integers for positive indices,
 |      starting from the end of the object, just like with Python lists.
 |      
 |      >>> df.take([-1, -2])
 |           name   class  max_speed
 |      1  monkey  mammal        NaN
 |      3    lion  mammal       80.5
 |  
 |  to_clipboard(self, *, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -> 'None'
 |      Copy object to the system clipboard.
 |      
 |      Write a text representation of object to the system clipboard.
 |      This can be pasted into Excel, for example.
 |      
 |      Parameters
 |      ----------
 |      excel : bool, default True
 |          Produce output in a csv format for easy pasting into excel.
 |      
 |          - True, use the provided separator for csv pasting.
 |          - False, write a string representation of the object to the clipboard.
 |      
 |      sep : str, default ``'\t'``
 |          Field delimiter.
 |      **kwargs
 |          These parameters will be passed to DataFrame.to_csv.
 |      
 |      See Also
 |      --------
 |      DataFrame.to_csv : Write a DataFrame to a comma-separated values
 |          (csv) file.
 |      read_clipboard : Read text from clipboard and pass to read_csv.
 |      
 |      Notes
 |      -----
 |      Requirements for your platform.
 |      
 |        - Linux : `xclip`, or `xsel` (with `PyQt4` modules)
 |        - Windows : none
 |        - macOS : none
 |      
 |      This method uses the processes developed for the package `pyperclip`. A
 |      solution to render any output string format is given in the examples.
 |      
 |      Examples
 |      --------
 |      Copy the contents of a DataFrame to the clipboard.
 |      
 |      >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])
 |      
 |      >>> df.to_clipboard(sep=',')  # doctest: +SKIP
 |      ... # Wrote the following to the system clipboard:
 |      ... # ,A,B,C
 |      ... # 0,1,2,3
 |      ... # 1,4,5,6
 |      
 |      We can omit the index by passing the keyword `index` and setting
 |      it to false.
 |      
 |      >>> df.to_clipboard(sep=',', index=False)  # doctest: +SKIP
 |      ... # Wrote the following to the system clipboard:
 |      ... # A,B,C
 |      ... # 1,2,3
 |      ... # 4,5,6
 |      
 |      Using the original `pyperclip` package for any string output format.
 |      
 |      .. code-block:: python
 |      
 |         import pyperclip
 |         html = df.style.to_html()
 |         pyperclip.copy(html)
 |  
 |  to_csv(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -> 'str | None'
 |      Write object to a comma-separated values (csv) file.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str, path object, file-like object, or None, default None
 |          String, path object (implementing os.PathLike[str]), or file-like
 |          object implementing a write() function. If None, the result is
 |          returned as a string. If a non-binary file object is passed, it should
 |          be opened with `newline=''`, disabling universal newlines. If a binary
 |          file object is passed, `mode` might need to contain a `'b'`.
 |      sep : str, default ','
 |          String of length 1. Field delimiter for the output file.
 |      na_rep : str, default ''
 |          Missing data representation.
 |      float_format : str, Callable, default None
 |          Format string for floating point numbers. If a Callable is given, it takes
 |          precedence over other numeric formatting parameters, like decimal.
 |      columns : sequence, optional
 |          Columns to write.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of strings is given it is
 |          assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      index_label : str or sequence, or False, default None
 |          Column label for index column(s) if desired. If None is given, and
 |          `header` and `index` are True, then the index names are used. A
 |          sequence should be given if the object uses MultiIndex. If
 |          False do not print fields for index names. Use index_label=False
 |          for easier importing in R.
 |      mode : {'w', 'x', 'a'}, default 'w'
 |          Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control
 |          the file opening. Typical values include:
 |      
 |          - 'w', truncate the file first.
 |          - 'x', exclusive creation, failing if the file already exists.
 |          - 'a', append to the end of file if it exists.
 |      
 |      encoding : str, optional
 |          A string representing the encoding to use in the output file,
 |          defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`
 |          is a non-binary file object.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      
 |             May be a dict with key 'method' as compression mode
 |             and other entries as additional compression options if
 |             compression mode is 'zip'.
 |      
 |             Passing compression options as keys in dict is
 |             supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.
 |      quoting : optional constant from csv module
 |          Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`
 |          then floats are converted to strings and thus csv.QUOTE_NONNUMERIC
 |          will treat them as non-numeric.
 |      quotechar : str, default '\"'
 |          String of length 1. Character used to quote fields.
 |      lineterminator : str, optional
 |          The newline character or character sequence to use in the output
 |          file. Defaults to `os.linesep`, which depends on the OS in which
 |          this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).
 |      
 |          .. versionchanged:: 1.5.0
 |      
 |              Previously was line_terminator, changed for consistency with
 |              read_csv and the standard library 'csv' module.
 |      
 |      chunksize : int or None
 |          Rows to write at a time.
 |      date_format : str, default None
 |          Format string for datetime objects.
 |      doublequote : bool, default True
 |          Control quoting of `quotechar` inside a field.
 |      escapechar : str, default None
 |          String of length 1. Character used to escape `sep` and `quotechar`
 |          when appropriate.
 |      decimal : str, default '.'
 |          Character recognized as decimal separator. E.g. use ',' for
 |          European data.
 |      errors : str, default 'strict'
 |          Specifies how encoding and decoding errors are to be handled.
 |          See the errors argument for :func:`open` for a full list
 |          of options.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      Returns
 |      -------
 |      None or str
 |          If path_or_buf is None, returns the resulting csv format as a
 |          string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      read_csv : Load a CSV file into a DataFrame.
 |      to_excel : Write DataFrame to an Excel file.
 |      
 |      Examples
 |      --------
 |      Create 'out.csv' containing 'df' without indices
 |      
 |      >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],
 |      ...                    'mask': ['red', 'purple'],
 |      ...                    'weapon': ['sai', 'bo staff']})
 |      >>> df.to_csv('out.csv', index=False)  # doctest: +SKIP
 |      
 |      Create 'out.zip' containing 'out.csv'
 |      
 |      >>> df.to_csv(index=False)
 |      'name,mask,weapon\nRaphael,red,sai\nDonatello,purple,bo staff\n'
 |      >>> compression_opts = dict(method='zip',
 |      ...                         archive_name='out.csv')  # doctest: +SKIP
 |      >>> df.to_csv('out.zip', index=False,
 |      ...           compression=compression_opts)  # doctest: +SKIP
 |      
 |      To write a csv file to a new folder or nested folder you will first
 |      need to create it using either Pathlib or os:
 |      
 |      >>> from pathlib import Path  # doctest: +SKIP
 |      >>> filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP
 |      >>> filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP
 |      >>> df.to_csv(filepath)  # doctest: +SKIP
 |      
 |      >>> import os  # doctest: +SKIP
 |      >>> os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP
 |      >>> df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP
 |  
 |  to_excel(self, excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: "Literal['openpyxl', 'xlsxwriter'] | None" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'None'
 |      Write object to an Excel sheet.
 |      
 |      To write a single object to an Excel .xlsx file it is only necessary to
 |      specify a target file name. To write to multiple sheets it is necessary to
 |      create an `ExcelWriter` object with a target file name, and specify a sheet
 |      in the file to write to.
 |      
 |      Multiple sheets may be written to by specifying unique `sheet_name`.
 |      With all data written to the file it is necessary to save the changes.
 |      Note that creating an `ExcelWriter` object with a file name that already
 |      exists will result in the contents of the existing file being erased.
 |      
 |      Parameters
 |      ----------
 |      excel_writer : path-like, file-like, or ExcelWriter object
 |          File path or existing ExcelWriter.
 |      sheet_name : str, default 'Sheet1'
 |          Name of sheet which will contain DataFrame.
 |      na_rep : str, default ''
 |          Missing data representation.
 |      float_format : str, optional
 |          Format string for floating point numbers. For example
 |          ``float_format="%.2f"`` will format 0.1234 to 0.12.
 |      columns : sequence or list of str, optional
 |          Columns to write.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of string is given it is
 |          assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      index_label : str or sequence, optional
 |          Column label for index column(s) if desired. If not specified, and
 |          `header` and `index` are True, then the index names are used. A
 |          sequence should be given if the DataFrame uses MultiIndex.
 |      startrow : int, default 0
 |          Upper left cell row to dump data frame.
 |      startcol : int, default 0
 |          Upper left cell column to dump data frame.
 |      engine : str, optional
 |          Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this
 |          via the options ``io.excel.xlsx.writer`` or
 |          ``io.excel.xlsm.writer``.
 |      
 |      merge_cells : bool, default True
 |          Write MultiIndex and Hierarchical Rows as merged cells.
 |      inf_rep : str, default 'inf'
 |          Representation for infinity (there is no native representation for
 |          infinity in Excel).
 |      freeze_panes : tuple of int (length 2), optional
 |          Specifies the one-based bottommost row and rightmost column that
 |          is to be frozen.
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |          .. versionadded:: 1.2.0
 |      engine_kwargs : dict, optional
 |          Arbitrary keyword arguments passed to excel engine.
 |      
 |      See Also
 |      --------
 |      to_csv : Write DataFrame to a comma-separated values (csv) file.
 |      ExcelWriter : Class for writing DataFrame objects into excel sheets.
 |      read_excel : Read an Excel file into a pandas DataFrame.
 |      read_csv : Read a comma-separated values (csv) file into DataFrame.
 |      io.formats.style.Styler.to_excel : Add styles to Excel sheet.
 |      
 |      Notes
 |      -----
 |      For compatibility with :meth:`~DataFrame.to_csv`,
 |      to_excel serializes lists and dicts to strings before writing.
 |      
 |      Once a workbook has been saved it is not possible to write further
 |      data without rewriting the whole workbook.
 |      
 |      Examples
 |      --------
 |      
 |      Create, write to and save a workbook:
 |      
 |      >>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],
 |      ...                    index=['row 1', 'row 2'],
 |      ...                    columns=['col 1', 'col 2'])
 |      >>> df1.to_excel("output.xlsx")  # doctest: +SKIP
 |      
 |      To specify the sheet name:
 |      
 |      >>> df1.to_excel("output.xlsx",
 |      ...              sheet_name='Sheet_name_1')  # doctest: +SKIP
 |      
 |      If you wish to write to more than one sheet in the workbook, it is
 |      necessary to specify an ExcelWriter object:
 |      
 |      >>> df2 = df1.copy()
 |      >>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP
 |      ...     df1.to_excel(writer, sheet_name='Sheet_name_1')
 |      ...     df2.to_excel(writer, sheet_name='Sheet_name_2')
 |      
 |      ExcelWriter can also be used to append to an existing Excel file:
 |      
 |      >>> with pd.ExcelWriter('output.xlsx',
 |      ...                     mode='a') as writer:  # doctest: +SKIP
 |      ...     df1.to_excel(writer, sheet_name='Sheet_name_3')
 |      
 |      To set the library that is used to write the Excel file,
 |      you can pass the `engine` keyword (the default engine is
 |      automatically chosen depending on the file extension):
 |      
 |      >>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP
 |  
 |  to_hdf(self, path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: "Literal['a', 'w', 'r+']" = 'a', complevel: 'int | None' = None, complib: "Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None" = None, append: 'bool_t' = False, format: "Literal['fixed', 'table'] | None" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -> 'None'
 |      Write the contained data to an HDF5 file using HDFStore.
 |      
 |      Hierarchical Data Format (HDF) is self-describing, allowing an
 |      application to interpret the structure and contents of a file with
 |      no outside information. One HDF file can hold a mix of related objects
 |      which can be accessed as a group or as individual objects.
 |      
 |      In order to add another DataFrame or Series to an existing HDF file
 |      please use append mode and a different a key.
 |      
 |      .. warning::
 |      
 |         One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,
 |         but the type of the subclass is lost upon storing.
 |      
 |      For more information see the :ref:`user guide <io.hdf5>`.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str or pandas.HDFStore
 |          File path or HDFStore object.
 |      key : str
 |          Identifier for the group in the store.
 |      mode : {'a', 'w', 'r+'}, default 'a'
 |          Mode to open file:
 |      
 |          - 'w': write, a new file is created (an existing file with
 |            the same name would be deleted).
 |          - 'a': append, an existing file is opened for reading and
 |            writing, and if the file does not exist it is created.
 |          - 'r+': similar to 'a', but the file must already exist.
 |      complevel : {0-9}, default None
 |          Specifies a compression level for data.
 |          A value of 0 or None disables compression.
 |      complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'
 |          Specifies the compression library to be used.
 |          These additional compressors for Blosc are supported
 |          (default if no compressor specified: 'blosc:blosclz'):
 |          {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',
 |          'blosc:zlib', 'blosc:zstd'}.
 |          Specifying a compression library which is not available issues
 |          a ValueError.
 |      append : bool, default False
 |          For Table formats, append the input data to the existing.
 |      format : {'fixed', 'table', None}, default 'fixed'
 |          Possible values:
 |      
 |          - 'fixed': Fixed format. Fast writing/reading. Not-appendable,
 |            nor searchable.
 |          - 'table': Table format. Write as a PyTables Table structure
 |            which may perform worse but allow more flexible operations
 |            like searching / selecting subsets of the data.
 |          - If None, pd.get_option('io.hdf.default_format') is checked,
 |            followed by fallback to "fixed".
 |      index : bool, default True
 |          Write DataFrame index as a column.
 |      min_itemsize : dict or int, optional
 |          Map column names to minimum string sizes for columns.
 |      nan_rep : Any, optional
 |          How to represent null values as str.
 |          Not allowed with append=True.
 |      dropna : bool, default False, optional
 |          Remove missing values.
 |      data_columns : list of columns or True, optional
 |          List of columns to create as indexed data columns for on-disk
 |          queries, or True to use all columns. By default only the axes
 |          of the object are indexed. See
 |          :ref:`Query via data columns<io.hdf5-query-data-columns>`. for
 |          more information.
 |          Applicable only to format='table'.
 |      errors : str, default 'strict'
 |          Specifies how encoding and decoding errors are to be handled.
 |          See the errors argument for :func:`open` for a full list
 |          of options.
 |      encoding : str, default "UTF-8"
 |      
 |      See Also
 |      --------
 |      read_hdf : Read from HDF file.
 |      DataFrame.to_orc : Write a DataFrame to the binary orc format.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      DataFrame.to_sql : Write to a SQL table.
 |      DataFrame.to_feather : Write out feather-format for DataFrames.
 |      DataFrame.to_csv : Write out to a csv file.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},
 |      ...                   index=['a', 'b', 'c'])  # doctest: +SKIP
 |      >>> df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP
 |      
 |      We can add another object to the same file:
 |      
 |      >>> s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP
 |      >>> s.to_hdf('data.h5', key='s')  # doctest: +SKIP
 |      
 |      Reading from HDF file:
 |      
 |      >>> pd.read_hdf('data.h5', 'df')  # doctest: +SKIP
 |      A  B
 |      a  1  4
 |      b  2  5
 |      c  3  6
 |      >>> pd.read_hdf('data.h5', 's')  # doctest: +SKIP
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |  
 |  to_json(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: "Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: "Literal['a', 'w']" = 'w') -> 'str | None'
 |      Convert the object to a JSON string.
 |      
 |      Note NaN's and None will be converted to null and datetime objects
 |      will be converted to UNIX timestamps.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str, path object, file-like object, or None, default None
 |          String, path object (implementing os.PathLike[str]), or file-like
 |          object implementing a write() function. If None, the result is
 |          returned as a string.
 |      orient : str
 |          Indication of expected JSON string format.
 |      
 |          * Series:
 |      
 |              - default is 'index'
 |              - allowed values are: {'split', 'records', 'index', 'table'}.
 |      
 |          * DataFrame:
 |      
 |              - default is 'columns'
 |              - allowed values are: {'split', 'records', 'index', 'columns',
 |                'values', 'table'}.
 |      
 |          * The format of the JSON string:
 |      
 |              - 'split' : dict like {'index' -> [index], 'columns' -> [columns],
 |                'data' -> [values]}
 |              - 'records' : list like [{column -> value}, ... , {column -> value}]
 |              - 'index' : dict like {index -> {column -> value}}
 |              - 'columns' : dict like {column -> {index -> value}}
 |              - 'values' : just the values array
 |              - 'table' : dict like {'schema': {schema}, 'data': {data}}
 |      
 |              Describing the data, where data component is like ``orient='records'``.
 |      
 |      date_format : {None, 'epoch', 'iso'}
 |          Type of date conversion. 'epoch' = epoch milliseconds,
 |          'iso' = ISO8601. The default depends on the `orient`. For
 |          ``orient='table'``, the default is 'iso'. For all other orients,
 |          the default is 'epoch'.
 |      double_precision : int, default 10
 |          The number of decimal places to use when encoding
 |          floating point values. The possible maximal value is 15.
 |          Passing double_precision greater than 15 will raise a ValueError.
 |      force_ascii : bool, default True
 |          Force encoded string to be ASCII.
 |      date_unit : str, default 'ms' (milliseconds)
 |          The time unit to encode to, governs timestamp and ISO8601
 |          precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,
 |          microsecond, and nanosecond respectively.
 |      default_handler : callable, default None
 |          Handler to call if object cannot otherwise be converted to a
 |          suitable format for JSON. Should receive a single argument which is
 |          the object to convert and return a serialisable object.
 |      lines : bool, default False
 |          If 'orient' is 'records' write out line-delimited json format. Will
 |          throw ValueError if incorrect 'orient' since others are not
 |          list-like.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      
 |          .. versionchanged:: 1.4.0 Zstandard support.
 |      
 |      index : bool or None, default None
 |          The index is only used when 'orient' is 'split', 'index', 'column',
 |          or 'table'. Of these, 'index' and 'column' do not support
 |          `index=False`.
 |      
 |      indent : int, optional
 |         Length of whitespace used to indent each record.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      mode : str, default 'w' (writing)
 |          Specify the IO mode for output when supplying a path_or_buf.
 |          Accepted args are 'w' (writing) and 'a' (append) only.
 |          mode='a' is only supported when lines is True and orient is 'records'.
 |      
 |      Returns
 |      -------
 |      None or str
 |          If path_or_buf is None, returns the resulting json format as a
 |          string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      read_json : Convert a JSON string to pandas object.
 |      
 |      Notes
 |      -----
 |      The behavior of ``indent=0`` varies from the stdlib, which does not
 |      indent the output but does insert newlines. Currently, ``indent=0``
 |      and the default ``indent=None`` are equivalent in pandas, though this
 |      may change in a future release.
 |      
 |      ``orient='table'`` contains a 'pandas_version' field under 'schema'.
 |      This stores the version of `pandas` used in the latest revision of the
 |      schema.
 |      
 |      Examples
 |      --------
 |      >>> from json import loads, dumps
 |      >>> df = pd.DataFrame(
 |      ...     [["a", "b"], ["c", "d"]],
 |      ...     index=["row 1", "row 2"],
 |      ...     columns=["col 1", "col 2"],
 |      ... )
 |      
 |      >>> result = df.to_json(orient="split")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "columns": [
 |              "col 1",
 |              "col 2"
 |          ],
 |          "index": [
 |              "row 1",
 |              "row 2"
 |          ],
 |          "data": [
 |              [
 |                  "a",
 |                  "b"
 |              ],
 |              [
 |                  "c",
 |                  "d"
 |              ]
 |          ]
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'records'`` formatted JSON.
 |      Note that index labels are not preserved with this encoding.
 |      
 |      >>> result = df.to_json(orient="records")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      [
 |          {
 |              "col 1": "a",
 |              "col 2": "b"
 |          },
 |          {
 |              "col 1": "c",
 |              "col 2": "d"
 |          }
 |      ]
 |      
 |      Encoding/decoding a Dataframe using ``'index'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="index")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "row 1": {
 |              "col 1": "a",
 |              "col 2": "b"
 |          },
 |          "row 2": {
 |              "col 1": "c",
 |              "col 2": "d"
 |          }
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="columns")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "col 1": {
 |              "row 1": "a",
 |              "row 2": "c"
 |          },
 |          "col 2": {
 |              "row 1": "b",
 |              "row 2": "d"
 |          }
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'values'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="values")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      [
 |          [
 |              "a",
 |              "b"
 |          ],
 |          [
 |              "c",
 |              "d"
 |          ]
 |      ]
 |      
 |      Encoding with Table Schema:
 |      
 |      >>> result = df.to_json(orient="table")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "schema": {
 |              "fields": [
 |                  {
 |                      "name": "index",
 |                      "type": "string"
 |                  },
 |                  {
 |                      "name": "col 1",
 |                      "type": "string"
 |                  },
 |                  {
 |                      "name": "col 2",
 |                      "type": "string"
 |                  }
 |              ],
 |              "primaryKey": [
 |                  "index"
 |              ],
 |              "pandas_version": "1.4.0"
 |          },
 |          "data": [
 |              {
 |                  "index": "row 1",
 |                  "col 1": "a",
 |                  "col 2": "b"
 |              },
 |              {
 |                  "index": "row 2",
 |                  "col 1": "c",
 |                  "col 2": "d"
 |              }
 |          ]
 |      }
 |  
 |  to_latex(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -> 'str | None'
 |      Render object to a LaTeX tabular, longtable, or nested table.
 |      
 |      Requires ``\usepackage{{booktabs}}``.  The output can be copy/pasted
 |      into a main LaTeX document or read from an external file
 |      with ``\input{{table.tex}}``.
 |      
 |      .. versionchanged:: 2.0.0
 |         Refactored to use the Styler implementation via jinja2 templating.
 |      
 |      Parameters
 |      ----------
 |      buf : str, Path or StringIO-like, optional, default None
 |          Buffer to write to. If None, the output is returned as a string.
 |      columns : list of label, optional
 |          The subset of columns to write. Writes all columns by default.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of strings is given,
 |          it is assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      na_rep : str, default 'NaN'
 |          Missing data representation.
 |      formatters : list of functions or dict of {{str: function}}, optional
 |          Formatter functions to apply to columns' elements by position or
 |          name. The result of each function must be a unicode string.
 |          List must be of length equal to the number of columns.
 |      float_format : one-parameter function or str, optional, default None
 |          Formatter for floating point numbers. For example
 |          ``float_format="%.2f"`` and ``float_format="{{:0.2f}}".format`` will
 |          both result in 0.1234 being formatted as 0.12.
 |      sparsify : bool, optional
 |          Set to False for a DataFrame with a hierarchical index to print
 |          every multiindex key at each row. By default, the value will be
 |          read from the config module.
 |      index_names : bool, default True
 |          Prints the names of the indexes.
 |      bold_rows : bool, default False
 |          Make the row labels bold in the output.
 |      column_format : str, optional
 |          The columns format as specified in `LaTeX table format
 |          <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3
 |          columns. By default, 'l' will be used for all columns except
 |          columns of numbers, which default to 'r'.
 |      longtable : bool, optional
 |          Use a longtable environment instead of tabular. Requires
 |          adding a \usepackage{{longtable}} to your LaTeX preamble.
 |          By default, the value will be read from the pandas config
 |          module, and set to `True` if the option ``styler.latex.environment`` is
 |          `"longtable"`.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed.
 |      escape : bool, optional
 |          By default, the value will be read from the pandas config
 |          module and set to `True` if the option ``styler.format.escape`` is
 |          `"latex"`. When set to False prevents from escaping latex special
 |          characters in column names.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to `False`.
 |      encoding : str, optional
 |          A string representing the encoding to use in the output file,
 |          defaults to 'utf-8'.
 |      decimal : str, default '.'
 |          Character recognized as decimal separator, e.g. ',' in Europe.
 |      multicolumn : bool, default True
 |          Use \multicolumn to enhance MultiIndex columns.
 |          The default will be read from the config module, and is set
 |          as the option ``styler.sparse.columns``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed.
 |      multicolumn_format : str, default 'r'
 |          The alignment for multicolumns, similar to `column_format`
 |          The default will be read from the config module, and is set as the option
 |          ``styler.latex.multicol_align``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to "r".
 |      multirow : bool, default True
 |          Use \multirow to enhance MultiIndex rows. Requires adding a
 |          \usepackage{{multirow}} to your LaTeX preamble. Will print
 |          centered labels (instead of top-aligned) across the contained
 |          rows, separating groups via clines. The default will be read
 |          from the pandas config module, and is set as the option
 |          ``styler.sparse.index``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to `True`.
 |      caption : str or tuple, optional
 |          Tuple (full_caption, short_caption),
 |          which results in ``\caption[short_caption]{{full_caption}}``;
 |          if a single string is passed, no short caption will be set.
 |      label : str, optional
 |          The LaTeX label to be placed inside ``\label{{}}`` in the output.
 |          This is used with ``\ref{{}}`` in the main ``.tex`` file.
 |      
 |      position : str, optional
 |          The LaTeX positional argument for tables, to be placed after
 |          ``\begin{{}}`` in the output.
 |      
 |      Returns
 |      -------
 |      str or None
 |          If buf is None, returns the result as a string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      io.formats.style.Styler.to_latex : Render a DataFrame to LaTeX
 |          with conditional formatting.
 |      DataFrame.to_string : Render a DataFrame to a console-friendly
 |          tabular output.
 |      DataFrame.to_html : Render a DataFrame as an HTML table.
 |      
 |      Notes
 |      -----
 |      As of v2.0.0 this method has changed to use the Styler implementation as
 |      part of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means
 |      that ``jinja2`` is a requirement, and needs to be installed, for this method
 |      to function. It is advised that users switch to using Styler, since that
 |      implementation is more frequently updated and contains much more
 |      flexibility with the output.
 |      
 |      Examples
 |      --------
 |      Convert a general DataFrame to LaTeX with formatting:
 |      
 |      >>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],
 |      ...                        age=[26, 45],
 |      ...                        height=[181.23, 177.65]))
 |      >>> print(df.to_latex(index=False,
 |      ...                   formatters={"name": str.upper},
 |      ...                   float_format="{:.1f}".format,
 |      ... ))  # doctest: +SKIP
 |      \begin{tabular}{lrr}
 |      \toprule
 |      name & age & height \\
 |      \midrule
 |      RAPHAEL & 26 & 181.2 \\
 |      DONATELLO & 45 & 177.7 \\
 |      \bottomrule
 |      \end{tabular}
 |  
 |  to_pickle(self, path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -> 'None'
 |      Pickle (serialize) object to file.
 |      
 |      Parameters
 |      ----------
 |      path : str, path object, or file-like object
 |          String, path object (implementing ``os.PathLike[str]``), or file-like
 |          object implementing a binary ``write()`` function. File path where
 |          the pickled object will be stored.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      protocol : int
 |          Int which indicates which protocol should be used by the pickler,
 |          default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible
 |          values are 0, 1, 2, 3, 4, 5. A negative value for the protocol
 |          parameter is equivalent to setting its value to HIGHEST_PROTOCOL.
 |      
 |          .. [1] https://docs.python.org/3/library/pickle.html.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      See Also
 |      --------
 |      read_pickle : Load pickled pandas object (or any object) from file.
 |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.
 |      DataFrame.to_sql : Write DataFrame to a SQL database.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      
 |      Examples
 |      --------
 |      >>> original_df = pd.DataFrame({"foo": range(5), "bar": range(5, 10)})  # doctest: +SKIP
 |      >>> original_df  # doctest: +SKIP
 |         foo  bar
 |      0    0    5
 |      1    1    6
 |      2    2    7
 |      3    3    8
 |      4    4    9
 |      >>> original_df.to_pickle("./dummy.pkl")  # doctest: +SKIP
 |      
 |      >>> unpickled_df = pd.read_pickle("./dummy.pkl")  # doctest: +SKIP
 |      >>> unpickled_df  # doctest: +SKIP
 |         foo  bar
 |      0    0    5
 |      1    1    6
 |      2    2    7
 |      3    3    8
 |      4    4    9
 |  
 |  to_sql(self, name: 'str', con, *, schema: 'str | None' = None, if_exists: "Literal['fail', 'replace', 'append']" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: "Literal['multi'] | Callable | None" = None) -> 'int | None'
 |      Write records stored in a DataFrame to a SQL database.
 |      
 |      Databases supported by SQLAlchemy [1]_ are supported. Tables can be
 |      newly created, appended to, or overwritten.
 |      
 |      Parameters
 |      ----------
 |      name : str
 |          Name of SQL table.
 |      con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection
 |          Using SQLAlchemy makes it possible to use any DB supported by that
 |          library. Legacy support is provided for sqlite3.Connection objects. The user
 |          is responsible for engine disposal and connection closure for the SQLAlchemy
 |          connectable. See `here                 <https://docs.sqlalchemy.org/en/20/core/connections.html>`_.
 |          If passing a sqlalchemy.engine.Connection which is already in a transaction,
 |          the transaction will not be committed.  If passing a sqlite3.Connection,
 |          it will not be possible to roll back the record insertion.
 |      
 |      schema : str, optional
 |          Specify the schema (if database flavor supports this). If None, use
 |          default schema.
 |      if_exists : {'fail', 'replace', 'append'}, default 'fail'
 |          How to behave if the table already exists.
 |      
 |          * fail: Raise a ValueError.
 |          * replace: Drop the table before inserting new values.
 |          * append: Insert new values to the existing table.
 |      
 |      index : bool, default True
 |          Write DataFrame index as a column. Uses `index_label` as the column
 |          name in the table. Creates a table index for this column.
 |      index_label : str or sequence, default None
 |          Column label for index column(s). If None is given (default) and
 |          `index` is True, then the index names are used.
 |          A sequence should be given if the DataFrame uses MultiIndex.
 |      chunksize : int, optional
 |          Specify the number of rows in each batch to be written at a time.
 |          By default, all rows will be written at once.
 |      dtype : dict or scalar, optional
 |          Specifying the datatype for columns. If a dictionary is used, the
 |          keys should be the column names and the values should be the
 |          SQLAlchemy types or strings for the sqlite3 legacy mode. If a
 |          scalar is provided, it will be applied to all columns.
 |      method : {None, 'multi', callable}, optional
 |          Controls the SQL insertion clause used:
 |      
 |          * None : Uses standard SQL ``INSERT`` clause (one per row).
 |          * 'multi': Pass multiple values in a single ``INSERT`` clause.
 |          * callable with signature ``(pd_table, conn, keys, data_iter)``.
 |      
 |          Details and a sample callable implementation can be found in the
 |          section :ref:`insert method <io.sql.method>`.
 |      
 |      Returns
 |      -------
 |      None or int
 |          Number of rows affected by to_sql. None is returned if the callable
 |          passed into ``method`` does not return an integer number of rows.
 |      
 |          The number of returned rows affected is the sum of the ``rowcount``
 |          attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not
 |          reflect the exact number of written rows as stipulated in the
 |          `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or
 |          `SQLAlchemy <https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount>`__.
 |      
 |          .. versionadded:: 1.4.0
 |      
 |      Raises
 |      ------
 |      ValueError
 |          When the table already exists and `if_exists` is 'fail' (the
 |          default).
 |      
 |      See Also
 |      --------
 |      read_sql : Read a DataFrame from a table.
 |      
 |      Notes
 |      -----
 |      Timezone aware datetime columns will be written as
 |      ``Timestamp with timezone`` type with SQLAlchemy if supported by the
 |      database. Otherwise, the datetimes will be stored as timezone unaware
 |      timestamps local to the original timezone.
 |      
 |      Not all datastores support ``method="multi"``. Oracle, for example,
 |      does not support multi-value insert.
 |      
 |      References
 |      ----------
 |      .. [1] https://docs.sqlalchemy.org
 |      .. [2] https://www.python.org/dev/peps/pep-0249/
 |      
 |      Examples
 |      --------
 |      Create an in-memory SQLite database.
 |      
 |      >>> from sqlalchemy import create_engine
 |      >>> engine = create_engine('sqlite://', echo=False)
 |      
 |      Create a table from scratch with 3 rows.
 |      
 |      >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})
 |      >>> df
 |           name
 |      0  User 1
 |      1  User 2
 |      2  User 3
 |      
 |      >>> df.to_sql(name='users', con=engine)
 |      3
 |      >>> from sqlalchemy import text
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]
 |      
 |      An `sqlalchemy.engine.Connection` can also be passed to `con`:
 |      
 |      >>> with engine.begin() as connection:
 |      ...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})
 |      ...     df1.to_sql(name='users', con=connection, if_exists='append')
 |      2
 |      
 |      This is allowed to support operations that require that the same
 |      DBAPI connection is used for the entire operation.
 |      
 |      >>> df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})
 |      >>> df2.to_sql(name='users', con=engine, if_exists='append')
 |      2
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),
 |       (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),
 |       (1, 'User 7')]
 |      
 |      Overwrite the table with just ``df2``.
 |      
 |      >>> df2.to_sql(name='users', con=engine, if_exists='replace',
 |      ...            index_label='id')
 |      2
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 6'), (1, 'User 7')]
 |      
 |      Use ``method`` to define a callable insertion method to do nothing
 |      if there's a primary key conflict on a table in a PostgreSQL database.
 |      
 |      >>> from sqlalchemy.dialects.postgresql import insert
 |      >>> def insert_on_conflict_nothing(table, conn, keys, data_iter):
 |      ...     # "a" is the primary key in "conflict_table"
 |      ...     data = [dict(zip(keys, row)) for row in data_iter]
 |      ...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=["a"])
 |      ...     result = conn.execute(stmt)
 |      ...     return result.rowcount
 |      >>> df_conflict.to_sql(name="conflict_table", con=conn, if_exists="append", method=insert_on_conflict_nothing)  # doctest: +SKIP
 |      0
 |      
 |      For MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict
 |      on a primary key.
 |      
 |      >>> from sqlalchemy.dialects.mysql import insert
 |      >>> def insert_on_conflict_update(table, conn, keys, data_iter):
 |      ...     # update columns "b" and "c" on primary key conflict
 |      ...     data = [dict(zip(keys, row)) for row in data_iter]
 |      ...     stmt = (
 |      ...         insert(table.table)
 |      ...         .values(data)
 |      ...     )
 |      ...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)
 |      ...     result = conn.execute(stmt)
 |      ...     return result.rowcount
 |      >>> df_conflict.to_sql(name="conflict_table", con=conn, if_exists="append", method=insert_on_conflict_update)  # doctest: +SKIP
 |      2
 |      
 |      Specify the dtype (especially useful for integers with missing values).
 |      Notice that while pandas is forced to store the data as floating point,
 |      the database supports nullable integers. When fetching the data with
 |      Python, we get back integer scalars.
 |      
 |      >>> df = pd.DataFrame({"A": [1, None, 2]})
 |      >>> df
 |           A
 |      0  1.0
 |      1  NaN
 |      2  2.0
 |      
 |      >>> from sqlalchemy.types import Integer
 |      >>> df.to_sql(name='integers', con=engine, index=False,
 |      ...           dtype={"A": Integer()})
 |      3
 |      
 |      >>> with engine.connect() as conn:
 |      ...   conn.execute(text("SELECT * FROM integers")).fetchall()
 |      [(1,), (None,), (2,)]
 |  
 |  to_xarray(self)
 |      Return an xarray object from the pandas object.
 |      
 |      Returns
 |      -------
 |      xarray.DataArray or xarray.Dataset
 |          Data in the pandas structure converted to Dataset if the object is
 |          a DataFrame, or a DataArray if the object is a Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      
 |      Notes
 |      -----
 |      See the `xarray docs <https://xarray.pydata.org/en/stable/>`__
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),
 |      ...                    ('parrot', 'bird', 24.0, 2),
 |      ...                    ('lion', 'mammal', 80.5, 4),
 |      ...                    ('monkey', 'mammal', np.nan, 4)],
 |      ...                   columns=['name', 'class', 'max_speed',
 |      ...                            'num_legs'])
 |      >>> df
 |           name   class  max_speed  num_legs
 |      0  falcon    bird      389.0         2
 |      1  parrot    bird       24.0         2
 |      2    lion  mammal       80.5         4
 |      3  monkey  mammal        NaN         4
 |      
 |      >>> df.to_xarray()  # doctest: +SKIP
 |      <xarray.Dataset>
 |      Dimensions:    (index: 4)
 |      Coordinates:
 |        * index      (index) int64 32B 0 1 2 3
 |      Data variables:
 |          name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'
 |          class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'
 |          max_speed  (index) float64 32B 389.0 24.0 80.5 nan
 |          num_legs   (index) int64 32B 2 2 4 4
 |      
 |      >>> df['max_speed'].to_xarray()  # doctest: +SKIP
 |      <xarray.DataArray 'max_speed' (index: 4)>
 |      array([389. ,  24. ,  80.5,   nan])
 |      Coordinates:
 |        * index    (index) int64 0 1 2 3
 |      
 |      >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',
 |      ...                         '2018-01-02', '2018-01-02'])
 |      >>> df_multiindex = pd.DataFrame({'date': dates,
 |      ...                               'animal': ['falcon', 'parrot',
 |      ...                                          'falcon', 'parrot'],
 |      ...                               'speed': [350, 18, 361, 15]})
 |      >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])
 |      
 |      >>> df_multiindex
 |                         speed
 |      date       animal
 |      2018-01-01 falcon    350
 |                 parrot     18
 |      2018-01-02 falcon    361
 |                 parrot     15
 |      
 |      >>> df_multiindex.to_xarray()  # doctest: +SKIP
 |      <xarray.Dataset>
 |      Dimensions:  (date: 2, animal: 2)
 |      Coordinates:
 |        * date     (date) datetime64[ns] 2018-01-01 2018-01-02
 |        * animal   (animal) object 'falcon' 'parrot'
 |      Data variables:
 |          speed    (date, animal) int64 350 18 361 15
 |  
 |  truncate(self, before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -> 'Self'
 |      Truncate a Series or DataFrame before and after some index value.
 |      
 |      This is a useful shorthand for boolean indexing based on index
 |      values above or below certain thresholds.
 |      
 |      Parameters
 |      ----------
 |      before : date, str, int
 |          Truncate all rows before this index value.
 |      after : date, str, int
 |          Truncate all rows after this index value.
 |      axis : {0 or 'index', 1 or 'columns'}, optional
 |          Axis to truncate. Truncates the index (rows) by default.
 |          For `Series` this parameter is unused and defaults to 0.
 |      copy : bool, default is True,
 |          Return a copy of the truncated section.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      type of caller
 |          The truncated Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Select a subset of a DataFrame by label.
 |      DataFrame.iloc : Select a subset of a DataFrame by position.
 |      
 |      Notes
 |      -----
 |      If the index being truncated contains only datetime values,
 |      `before` and `after` may be specified as strings instead of
 |      Timestamps.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],
 |      ...                    'B': ['f', 'g', 'h', 'i', 'j'],
 |      ...                    'C': ['k', 'l', 'm', 'n', 'o']},
 |      ...                   index=[1, 2, 3, 4, 5])
 |      >>> df
 |         A  B  C
 |      1  a  f  k
 |      2  b  g  l
 |      3  c  h  m
 |      4  d  i  n
 |      5  e  j  o
 |      
 |      >>> df.truncate(before=2, after=4)
 |         A  B  C
 |      2  b  g  l
 |      3  c  h  m
 |      4  d  i  n
 |      
 |      The columns of a DataFrame can be truncated.
 |      
 |      >>> df.truncate(before="A", after="B", axis="columns")
 |         A  B
 |      1  a  f
 |      2  b  g
 |      3  c  h
 |      4  d  i
 |      5  e  j
 |      
 |      For Series, only rows can be truncated.
 |      
 |      >>> df['A'].truncate(before=2, after=4)
 |      2    b
 |      3    c
 |      4    d
 |      Name: A, dtype: object
 |      
 |      The index values in ``truncate`` can be datetimes or string
 |      dates.
 |      
 |      >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')
 |      >>> df = pd.DataFrame(index=dates, data={'A': 1})
 |      >>> df.tail()
 |                           A
 |      2016-01-31 23:59:56  1
 |      2016-01-31 23:59:57  1
 |      2016-01-31 23:59:58  1
 |      2016-01-31 23:59:59  1
 |      2016-02-01 00:00:00  1
 |      
 |      >>> df.truncate(before=pd.Timestamp('2016-01-05'),
 |      ...             after=pd.Timestamp('2016-01-10')).tail()
 |                           A
 |      2016-01-09 23:59:56  1
 |      2016-01-09 23:59:57  1
 |      2016-01-09 23:59:58  1
 |      2016-01-09 23:59:59  1
 |      2016-01-10 00:00:00  1
 |      
 |      Because the index is a DatetimeIndex containing only dates, we can
 |      specify `before` and `after` as strings. They will be coerced to
 |      Timestamps before truncation.
 |      
 |      >>> df.truncate('2016-01-05', '2016-01-10').tail()
 |                           A
 |      2016-01-09 23:59:56  1
 |      2016-01-09 23:59:57  1
 |      2016-01-09 23:59:58  1
 |      2016-01-09 23:59:59  1
 |      2016-01-10 00:00:00  1
 |      
 |      Note that ``truncate`` assumes a 0 value for any unspecified time
 |      component (midnight). This differs from partial string slicing, which
 |      returns any partially matching dates.
 |      
 |      >>> df.loc['2016-01-05':'2016-01-10', :].tail()
 |                           A
 |      2016-01-10 23:59:55  1
 |      2016-01-10 23:59:56  1
 |      2016-01-10 23:59:57  1
 |      2016-01-10 23:59:58  1
 |      2016-01-10 23:59:59  1
 |  
 |  tz_convert(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -> 'Self'
 |      Convert tz-aware axis to target time zone.
 |      
 |      Parameters
 |      ----------
 |      tz : str or tzinfo object or None
 |          Target time zone. Passing ``None`` will convert to
 |          UTC and remove the timezone information.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to convert
 |      level : int, str, default None
 |          If axis is a MultiIndex, convert a specific level. Otherwise
 |          must be None.
 |      copy : bool, default True
 |          Also make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Object with time zone converted axis.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the axis is tz-naive.
 |      
 |      Examples
 |      --------
 |      Change to another time zone:
 |      
 |      >>> s = pd.Series(
 |      ...     [1],
 |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']),
 |      ... )
 |      >>> s.tz_convert('Asia/Shanghai')
 |      2018-09-15 07:30:00+08:00    1
 |      dtype: int64
 |      
 |      Pass None to convert to UTC and get a tz-naive index:
 |      
 |      >>> s = pd.Series([1],
 |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))
 |      >>> s.tz_convert(None)
 |      2018-09-14 23:30:00    1
 |      dtype: int64
 |  
 |  tz_localize(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -> 'Self'
 |      Localize tz-naive index of a Series or DataFrame to target time zone.
 |      
 |      This operation localizes the Index. To localize the values in a
 |      timezone-naive Series, use :meth:`Series.dt.tz_localize`.
 |      
 |      Parameters
 |      ----------
 |      tz : str or tzinfo or None
 |          Time zone to localize. Passing ``None`` will remove the
 |          time zone information and preserve local time.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to localize
 |      level : int, str, default None
 |          If axis ia a MultiIndex, localize a specific level. Otherwise
 |          must be None.
 |      copy : bool, default True
 |          Also make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'
 |          When clocks moved backward due to DST, ambiguous times may arise.
 |          For example in Central European Time (UTC+01), when going from
 |          03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at
 |          00:30:00 UTC and at 01:30:00 UTC. In such a situation, the
 |          `ambiguous` parameter dictates how ambiguous times should be
 |          handled.
 |      
 |          - 'infer' will attempt to infer fall dst-transition hours based on
 |            order
 |          - bool-ndarray where True signifies a DST time, False designates
 |            a non-DST time (note that this flag is only applicable for
 |            ambiguous times)
 |          - 'NaT' will return NaT where there are ambiguous times
 |          - 'raise' will raise an AmbiguousTimeError if there are ambiguous
 |            times.
 |      nonexistent : str, default 'raise'
 |          A nonexistent time does not exist in a particular timezone
 |          where clocks moved forward due to DST. Valid values are:
 |      
 |          - 'shift_forward' will shift the nonexistent time forward to the
 |            closest existing time
 |          - 'shift_backward' will shift the nonexistent time backward to the
 |            closest existing time
 |          - 'NaT' will return NaT where there are nonexistent times
 |          - timedelta objects will shift nonexistent times by the timedelta
 |          - 'raise' will raise an NonExistentTimeError if there are
 |            nonexistent times.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Same type as the input.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the TimeSeries is tz-aware and tz is not None.
 |      
 |      Examples
 |      --------
 |      Localize local times:
 |      
 |      >>> s = pd.Series(
 |      ...     [1],
 |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00']),
 |      ... )
 |      >>> s.tz_localize('CET')
 |      2018-09-15 01:30:00+02:00    1
 |      dtype: int64
 |      
 |      Pass None to convert to tz-naive index and preserve local time:
 |      
 |      >>> s = pd.Series([1],
 |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))
 |      >>> s.tz_localize(None)
 |      2018-09-15 01:30:00    1
 |      dtype: int64
 |      
 |      Be careful with DST changes. When there is sequential data, pandas
 |      can infer the DST time:
 |      
 |      >>> s = pd.Series(range(7),
 |      ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',
 |      ...                                       '2018-10-28 02:00:00',
 |      ...                                       '2018-10-28 02:30:00',
 |      ...                                       '2018-10-28 02:00:00',
 |      ...                                       '2018-10-28 02:30:00',
 |      ...                                       '2018-10-28 03:00:00',
 |      ...                                       '2018-10-28 03:30:00']))
 |      >>> s.tz_localize('CET', ambiguous='infer')
 |      2018-10-28 01:30:00+02:00    0
 |      2018-10-28 02:00:00+02:00    1
 |      2018-10-28 02:30:00+02:00    2
 |      2018-10-28 02:00:00+01:00    3
 |      2018-10-28 02:30:00+01:00    4
 |      2018-10-28 03:00:00+01:00    5
 |      2018-10-28 03:30:00+01:00    6
 |      dtype: int64
 |      
 |      In some cases, inferring the DST is impossible. In such cases, you can
 |      pass an ndarray to the ambiguous parameter to set the DST explicitly
 |      
 |      >>> s = pd.Series(range(3),
 |      ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',
 |      ...                                       '2018-10-28 02:36:00',
 |      ...                                       '2018-10-28 03:46:00']))
 |      >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))
 |      2018-10-28 01:20:00+02:00    0
 |      2018-10-28 02:36:00+02:00    1
 |      2018-10-28 03:46:00+01:00    2
 |      dtype: int64
 |      
 |      If the DST transition causes nonexistent times, you can shift these
 |      dates forward or backward with a timedelta object or `'shift_forward'`
 |      or `'shift_backward'`.
 |      
 |      >>> s = pd.Series(range(2),
 |      ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',
 |      ...                                       '2015-03-29 03:30:00']))
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')
 |      2015-03-29 03:00:00+02:00    0
 |      2015-03-29 03:30:00+02:00    1
 |      dtype: int64
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')
 |      2015-03-29 01:59:59.999999999+01:00    0
 |      2015-03-29 03:30:00+02:00              1
 |      dtype: int64
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))
 |      2015-03-29 03:30:00+02:00    0
 |      2015-03-29 03:30:00+02:00    1
 |      dtype: int64
 |  
 |  where(self, cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'
 |      Replace values where the condition is False.
 |      
 |      Parameters
 |      ----------
 |      cond : bool Series/DataFrame, array-like, or callable
 |          Where `cond` is True, keep the original value. Where
 |          False, replace with corresponding value from `other`.
 |          If `cond` is callable, it is computed on the Series/DataFrame and
 |          should return boolean Series/DataFrame or array. The callable must
 |          not change input Series/DataFrame (though pandas doesn't check it).
 |      other : scalar, Series/DataFrame, or callable
 |          Entries where `cond` is False are replaced with
 |          corresponding value from `other`.
 |          If other is callable, it is computed on the Series/DataFrame and
 |          should return scalar or Series/DataFrame. The callable must not
 |          change input Series/DataFrame (though pandas doesn't check it).
 |          If not specified, entries will be filled with the corresponding
 |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension
 |          dtypes).
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      axis : int, default None
 |          Alignment axis if needed. For `Series` this parameter is
 |          unused and defaults to 0.
 |      level : int, default None
 |          Alignment level if needed.
 |      
 |      Returns
 |      -------
 |      Same type as caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      :func:`DataFrame.mask` : Return an object of same shape as
 |          self.
 |      
 |      Notes
 |      -----
 |      The where method is an application of the if-then idiom. For each
 |      element in the calling DataFrame, if ``cond`` is ``True`` the
 |      element is used; otherwise the corresponding element from the DataFrame
 |      ``other`` is used. If the axis of ``other`` does not align with axis of
 |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with
 |      False.
 |      
 |      The signature for :func:`DataFrame.where` differs from
 |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to
 |      ``np.where(m, df1, df2)``.
 |      
 |      For further details and examples see the ``where`` documentation in
 |      :ref:`indexing <indexing.where_mask>`.
 |      
 |      The dtype of the object takes precedence. The fill value is casted to
 |      the object's dtype, if this can be done losslessly.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(range(5))
 |      >>> s.where(s > 0)
 |      0    NaN
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      4    4.0
 |      dtype: float64
 |      >>> s.mask(s > 0)
 |      0    0.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      >>> s = pd.Series(range(5))
 |      >>> t = pd.Series([True, False])
 |      >>> s.where(t, 99)
 |      0     0
 |      1    99
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      >>> s.mask(t, 99)
 |      0    99
 |      1     1
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      
 |      >>> s.where(s > 1, 10)
 |      0    10
 |      1    10
 |      2    2
 |      3    3
 |      4    4
 |      dtype: int64
 |      >>> s.mask(s > 1, 10)
 |      0     0
 |      1     1
 |      2    10
 |      3    10
 |      4    10
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  2  3
 |      2  4  5
 |      3  6  7
 |      4  8  9
 |      >>> m = df % 3 == 0
 |      >>> df.where(m, -df)
 |         A  B
 |      0  0 -1
 |      1 -2  3
 |      2 -4 -5
 |      3  6 -7
 |      4 -8  9
 |      >>> df.where(m, -df) == np.where(m, df, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |      >>> df.where(m, -df) == df.mask(~m, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |  
 |  xs(self, key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -> 'Self'
 |      Return cross-section from the Series/DataFrame.
 |      
 |      This method takes a `key` argument to select data at a particular
 |      level of a MultiIndex.
 |      
 |      Parameters
 |      ----------
 |      key : label or tuple of label
 |          Label contained in the index, or partially in a MultiIndex.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Axis to retrieve cross-section on.
 |      level : object, defaults to first n levels (n=1 or len(key))
 |          In case of a key partially contained in a MultiIndex, indicate
 |          which levels are used. Levels can be referred by label or position.
 |      drop_level : bool, default True
 |          If False, returns object with same levels as self.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Cross-section from the original Series or DataFrame
 |          corresponding to the selected index levels.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Access a group of rows and columns
 |          by label(s) or a boolean array.
 |      DataFrame.iloc : Purely integer-location based indexing
 |          for selection by position.
 |      
 |      Notes
 |      -----
 |      `xs` can not be used to set values.
 |      
 |      MultiIndex Slicers is a generic way to get/set values on
 |      any level or levels.
 |      It is a superset of `xs` functionality, see
 |      :ref:`MultiIndex Slicers <advanced.mi_slicers>`.
 |      
 |      Examples
 |      --------
 |      >>> d = {'num_legs': [4, 4, 2, 2],
 |      ...      'num_wings': [0, 0, 2, 2],
 |      ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],
 |      ...      'animal': ['cat', 'dog', 'bat', 'penguin'],
 |      ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}
 |      >>> df = pd.DataFrame(data=d)
 |      >>> df = df.set_index(['class', 'animal', 'locomotion'])
 |      >>> df
 |                                 num_legs  num_wings
 |      class  animal  locomotion
 |      mammal cat     walks              4          0
 |             dog     walks              4          0
 |             bat     flies              2          2
 |      bird   penguin walks              2          2
 |      
 |      Get values at specified index
 |      
 |      >>> df.xs('mammal')
 |                         num_legs  num_wings
 |      animal locomotion
 |      cat    walks              4          0
 |      dog    walks              4          0
 |      bat    flies              2          2
 |      
 |      Get values at several indexes
 |      
 |      >>> df.xs(('mammal', 'dog', 'walks'))
 |      num_legs     4
 |      num_wings    0
 |      Name: (mammal, dog, walks), dtype: int64
 |      
 |      Get values at specified index and level
 |      
 |      >>> df.xs('cat', level=1)
 |                         num_legs  num_wings
 |      class  locomotion
 |      mammal walks              4          0
 |      
 |      Get values at several indexes and levels
 |      
 |      >>> df.xs(('bird', 'walks'),
 |      ...       level=[0, 'locomotion'])
 |               num_legs  num_wings
 |      animal
 |      penguin         2          2
 |      
 |      Get values at specified column and axis
 |      
 |      >>> df.xs('num_wings', axis=1)
 |      class   animal   locomotion
 |      mammal  cat      walks         0
 |              dog      walks         0
 |              bat      flies         2
 |      bird    penguin  walks         2
 |      Name: num_wings, dtype: int64
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.generic.NDFrame:
 |  
 |  flags
 |      Get the properties associated with this pandas object.
 |      
 |      The available flags are
 |      
 |      * :attr:`Flags.allows_duplicate_labels`
 |      
 |      See Also
 |      --------
 |      Flags : Flags that apply to pandas objects.
 |      DataFrame.attrs : Global metadata applying to this dataset.
 |      
 |      Notes
 |      -----
 |      "Flags" differ from "metadata". Flags reflect properties of the
 |      pandas object (the Series or DataFrame). Metadata refer to properties
 |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": [1, 2]})
 |      >>> df.flags
 |      <Flags(allows_duplicate_labels=True)>
 |      
 |      Flags can be get or set using ``.``
 |      
 |      >>> df.flags.allows_duplicate_labels
 |      True
 |      >>> df.flags.allows_duplicate_labels = False
 |      
 |      Or by slicing with a key
 |      
 |      >>> df.flags["allows_duplicate_labels"]
 |      False
 |      >>> df.flags["allows_duplicate_labels"] = True
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.generic.NDFrame:
 |  
 |  attrs
 |      Dictionary of global attributes of this dataset.
 |      
 |      .. warning::
 |      
 |         attrs is experimental and may change without warning.
 |      
 |      See Also
 |      --------
 |      DataFrame.flags : Global flags applying to this object.
 |      
 |      Notes
 |      -----
 |      Many operations that create new datasets will copy ``attrs``. Copies
 |      are always deep so that changing ``attrs`` will only affect the
 |      present dataset. ``pandas.concat`` copies ``attrs`` only if all input
 |      datasets have the same ``attrs``.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> ser.attrs = {"A": [10, 20, 30]}
 |      >>> ser.attrs
 |      {'A': [10, 20, 30]}
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> df.attrs = {"A": [10, 20, 30]}
 |      >>> df.attrs
 |      {'A': [10, 20, 30]}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.PandasObject:
 |  
 |  __sizeof__(self) -> 'int'
 |      Generates the total memory usage for an object that returns
 |      either a value or Series of values
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  __dir__(self) -> 'list[str]'
 |      Provide method name lookup and completion.
 |      
 |      Notes
 |      -----
 |      Only provide 'public' methods.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.indexing.IndexingMixin:
 |  
 |  at
 |      Access a single value for a row/column label pair.
 |      
 |      Similar to ``loc``, in that both provide label-based lookups. Use
 |      ``at`` if you only need to get or set a single value in a DataFrame
 |      or Series.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If getting a value and 'label' does not exist in a DataFrame or Series.
 |      
 |      ValueError
 |          If row/column label pair is not a tuple or if any label
 |          from the pair is not a scalar for DataFrame.
 |          If label is list-like (*excluding* NamedTuple) for Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column pair by label.
 |      DataFrame.iat : Access a single value for a row/column pair by integer
 |          position.
 |      DataFrame.loc : Access a group of rows and columns by label(s).
 |      DataFrame.iloc : Access a group of rows and columns by integer
 |          position(s).
 |      Series.at : Access a single value by label.
 |      Series.iat : Access a single value by integer position.
 |      Series.loc : Access a group of rows by label(s).
 |      Series.iloc : Access a group of rows by integer position(s).
 |      
 |      Notes
 |      -----
 |      See :ref:`Fast scalar value getting and setting <indexing.basics.get_value>`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
 |      ...                   index=[4, 5, 6], columns=['A', 'B', 'C'])
 |      >>> df
 |          A   B   C
 |      4   0   2   3
 |      5   0   4   1
 |      6  10  20  30
 |      
 |      Get value at specified row/column pair
 |      
 |      >>> df.at[4, 'B']
 |      2
 |      
 |      Set value at specified row/column pair
 |      
 |      >>> df.at[4, 'B'] = 10
 |      >>> df.at[4, 'B']
 |      10
 |      
 |      Get value within a Series
 |      
 |      >>> df.loc[5].at['B']
 |      4
 |  
 |  iat
 |      Access a single value for a row/column pair by integer position.
 |      
 |      Similar to ``iloc``, in that both provide integer-based lookups. Use
 |      ``iat`` if you only need to get or set a single value in a DataFrame
 |      or Series.
 |      
 |      Raises
 |      ------
 |      IndexError
 |          When integer position is out of bounds.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column label pair.
 |      DataFrame.loc : Access a group of rows and columns by label(s).
 |      DataFrame.iloc : Access a group of rows and columns by integer position(s).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
 |      ...                   columns=['A', 'B', 'C'])
 |      >>> df
 |          A   B   C
 |      0   0   2   3
 |      1   0   4   1
 |      2  10  20  30
 |      
 |      Get value at specified row/column pair
 |      
 |      >>> df.iat[1, 2]
 |      1
 |      
 |      Set value at specified row/column pair
 |      
 |      >>> df.iat[1, 2] = 10
 |      >>> df.iat[1, 2]
 |      10
 |      
 |      Get value within a series
 |      
 |      >>> df.loc[0].iat[1]
 |      2
 |  
 |  iloc
 |      Purely integer-location based indexing for selection by position.
 |      
 |      .. deprecated:: 2.2.0
 |      
 |         Returning a tuple from a callable is deprecated.
 |      
 |      ``.iloc[]`` is primarily integer position based (from ``0`` to
 |      ``length-1`` of the axis), but may also be used with a boolean
 |      array.
 |      
 |      Allowed inputs are:
 |      
 |      - An integer, e.g. ``5``.
 |      - A list or array of integers, e.g. ``[4, 3, 0]``.
 |      - A slice object with ints, e.g. ``1:7``.
 |      - A boolean array.
 |      - A ``callable`` function with one argument (the calling Series or
 |        DataFrame) and that returns valid output for indexing (one of the above).
 |        This is useful in method chains, when you don't have a reference to the
 |        calling object, but would like to base your selection on
 |        some value.
 |      - A tuple of row and column indexes. The tuple elements consist of one of the
 |        above inputs, e.g. ``(0, 1)``.
 |      
 |      ``.iloc`` will raise ``IndexError`` if a requested indexer is
 |      out-of-bounds, except *slice* indexers which allow out-of-bounds
 |      indexing (this conforms with python/numpy *slice* semantics).
 |      
 |      See more at :ref:`Selection by Position <indexing.integer>`.
 |      
 |      See Also
 |      --------
 |      DataFrame.iat : Fast integer location scalar accessor.
 |      DataFrame.loc : Purely label-location based indexer for selection by label.
 |      Series.iloc : Purely integer-location based indexing for
 |                     selection by position.
 |      
 |      Examples
 |      --------
 |      >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},
 |      ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},
 |      ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000}]
 |      >>> df = pd.DataFrame(mydict)
 |      >>> df
 |            a     b     c     d
 |      0     1     2     3     4
 |      1   100   200   300   400
 |      2  1000  2000  3000  4000
 |      
 |      **Indexing just the rows**
 |      
 |      With a scalar integer.
 |      
 |      >>> type(df.iloc[0])
 |      <class 'pandas.core.series.Series'>
 |      >>> df.iloc[0]
 |      a    1
 |      b    2
 |      c    3
 |      d    4
 |      Name: 0, dtype: int64
 |      
 |      With a list of integers.
 |      
 |      >>> df.iloc[[0]]
 |         a  b  c  d
 |      0  1  2  3  4
 |      >>> type(df.iloc[[0]])
 |      <class 'pandas.core.frame.DataFrame'>
 |      
 |      >>> df.iloc[[0, 1]]
 |           a    b    c    d
 |      0    1    2    3    4
 |      1  100  200  300  400
 |      
 |      With a `slice` object.
 |      
 |      >>> df.iloc[:3]
 |            a     b     c     d
 |      0     1     2     3     4
 |      1   100   200   300   400
 |      2  1000  2000  3000  4000
 |      
 |      With a boolean mask the same length as the index.
 |      
 |      >>> df.iloc[[True, False, True]]
 |            a     b     c     d
 |      0     1     2     3     4
 |      2  1000  2000  3000  4000
 |      
 |      With a callable, useful in method chains. The `x` passed
 |      to the ``lambda`` is the DataFrame being sliced. This selects
 |      the rows whose index label even.
 |      
 |      >>> df.iloc[lambda x: x.index % 2 == 0]
 |            a     b     c     d
 |      0     1     2     3     4
 |      2  1000  2000  3000  4000
 |      
 |      **Indexing both axes**
 |      
 |      You can mix the indexer types for the index and columns. Use ``:`` to
 |      select the entire axis.
 |      
 |      With scalar integers.
 |      
 |      >>> df.iloc[0, 1]
 |      2
 |      
 |      With lists of integers.
 |      
 |      >>> df.iloc[[0, 2], [1, 3]]
 |            b     d
 |      0     2     4
 |      2  2000  4000
 |      
 |      With `slice` objects.
 |      
 |      >>> df.iloc[1:3, 0:3]
 |            a     b     c
 |      1   100   200   300
 |      2  1000  2000  3000
 |      
 |      With a boolean array whose length matches the columns.
 |      
 |      >>> df.iloc[:, [True, False, True, False]]
 |            a     c
 |      0     1     3
 |      1   100   300
 |      2  1000  3000
 |      
 |      With a callable function that expects the Series or DataFrame.
 |      
 |      >>> df.iloc[:, lambda df: [0, 2]]
 |            a     c
 |      0     1     3
 |      1   100   300
 |      2  1000  3000
 |  
 |  loc
 |      Access a group of rows and columns by label(s) or a boolean array.
 |      
 |      ``.loc[]`` is primarily label based, but may also be used with a
 |      boolean array.
 |      
 |      Allowed inputs are:
 |      
 |      - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is
 |        interpreted as a *label* of the index, and **never** as an
 |        integer position along the index).
 |      - A list or array of labels, e.g. ``['a', 'b', 'c']``.
 |      - A slice object with labels, e.g. ``'a':'f'``.
 |      
 |        .. warning:: Note that contrary to usual python slices, **both** the
 |            start and the stop are included
 |      
 |      - A boolean array of the same length as the axis being sliced,
 |        e.g. ``[True, False, True]``.
 |      - An alignable boolean Series. The index of the key will be aligned before
 |        masking.
 |      - An alignable Index. The Index of the returned selection will be the input.
 |      - A ``callable`` function with one argument (the calling Series or
 |        DataFrame) and that returns valid output for indexing (one of the above)
 |      
 |      See more at :ref:`Selection by Label <indexing.label>`.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If any items are not found.
 |      IndexingError
 |          If an indexed key is passed and its index is unalignable to the frame index.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column label pair.
 |      DataFrame.iloc : Access group of rows and columns by integer position(s).
 |      DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the
 |                     Series/DataFrame.
 |      Series.loc : Access group of values using labels.
 |      
 |      Examples
 |      --------
 |      **Getting values**
 |      
 |      >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
 |      ...                   index=['cobra', 'viper', 'sidewinder'],
 |      ...                   columns=['max_speed', 'shield'])
 |      >>> df
 |                  max_speed  shield
 |      cobra               1       2
 |      viper               4       5
 |      sidewinder          7       8
 |      
 |      Single label. Note this returns the row as a Series.
 |      
 |      >>> df.loc['viper']
 |      max_speed    4
 |      shield       5
 |      Name: viper, dtype: int64
 |      
 |      List of labels. Note using ``[[]]`` returns a DataFrame.
 |      
 |      >>> df.loc[['viper', 'sidewinder']]
 |                  max_speed  shield
 |      viper               4       5
 |      sidewinder          7       8
 |      
 |      Single label for row and column
 |      
 |      >>> df.loc['cobra', 'shield']
 |      2
 |      
 |      Slice with labels for row and single label for column. As mentioned
 |      above, note that both the start and stop of the slice are included.
 |      
 |      >>> df.loc['cobra':'viper', 'max_speed']
 |      cobra    1
 |      viper    4
 |      Name: max_speed, dtype: int64
 |      
 |      Boolean list with the same length as the row axis
 |      
 |      >>> df.loc[[False, False, True]]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      Alignable boolean Series:
 |      
 |      >>> df.loc[pd.Series([False, True, False],
 |      ...                  index=['viper', 'sidewinder', 'cobra'])]
 |                           max_speed  shield
 |      sidewinder          7       8
 |      
 |      Index (same behavior as ``df.reindex``)
 |      
 |      >>> df.loc[pd.Index(["cobra", "viper"], name="foo")]
 |             max_speed  shield
 |      foo
 |      cobra          1       2
 |      viper          4       5
 |      
 |      Conditional that returns a boolean Series
 |      
 |      >>> df.loc[df['shield'] > 6]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      Conditional that returns a boolean Series with column labels specified
 |      
 |      >>> df.loc[df['shield'] > 6, ['max_speed']]
 |                  max_speed
 |      sidewinder          7
 |      
 |      Multiple conditional using ``&`` that returns a boolean Series
 |      
 |      >>> df.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]
 |                  max_speed  shield
 |      viper          4       5
 |      
 |      Multiple conditional using ``|`` that returns a boolean Series
 |      
 |      >>> df.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]
 |                  max_speed  shield
 |      cobra               1       2
 |      sidewinder          7       8
 |      
 |      Please ensure that each condition is wrapped in parentheses ``()``.
 |      See the :ref:`user guide<indexing.boolean>`
 |      for more details and explanations of Boolean indexing.
 |      
 |      .. note::
 |          If you find yourself using 3 or more conditionals in ``.loc[]``,
 |          consider using :ref:`advanced indexing<advanced.advanced_hierarchical>`.
 |      
 |          See below for using ``.loc[]`` on MultiIndex DataFrames.
 |      
 |      Callable that returns a boolean Series
 |      
 |      >>> df.loc[lambda df: df['shield'] == 8]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      **Setting values**
 |      
 |      Set value for all items matching the list of labels
 |      
 |      >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50
 |      >>> df
 |                  max_speed  shield
 |      cobra               1       2
 |      viper               4      50
 |      sidewinder          7      50
 |      
 |      Set value for an entire row
 |      
 |      >>> df.loc['cobra'] = 10
 |      >>> df
 |                  max_speed  shield
 |      cobra              10      10
 |      viper               4      50
 |      sidewinder          7      50
 |      
 |      Set value for an entire column
 |      
 |      >>> df.loc[:, 'max_speed'] = 30
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper              30      50
 |      sidewinder         30      50
 |      
 |      Set value for rows matching callable condition
 |      
 |      >>> df.loc[df['shield'] > 35] = 0
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper               0       0
 |      sidewinder          0       0
 |      
 |      Add value matching location
 |      
 |      >>> df.loc["viper", "shield"] += 5
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper               0       5
 |      sidewinder          0       0
 |      
 |      Setting using a ``Series`` or a ``DataFrame`` sets the values matching the
 |      index labels, not the index positions.
 |      
 |      >>> shuffled_df = df.loc[["viper", "cobra", "sidewinder"]]
 |      >>> df.loc[:] += shuffled_df
 |      >>> df
 |                  max_speed  shield
 |      cobra              60      20
 |      viper               0      10
 |      sidewinder          0       0
 |      
 |      **Getting values on a DataFrame with an index that has integer labels**
 |      
 |      Another example using integers for the index
 |      
 |      >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
 |      ...                   index=[7, 8, 9], columns=['max_speed', 'shield'])
 |      >>> df
 |         max_speed  shield
 |      7          1       2
 |      8          4       5
 |      9          7       8
 |      
 |      Slice with integer labels for rows. As mentioned above, note that both
 |      the start and stop of the slice are included.
 |      
 |      >>> df.loc[7:9]
 |         max_speed  shield
 |      7          1       2
 |      8          4       5
 |      9          7       8
 |      
 |      **Getting values with a MultiIndex**
 |      
 |      A number of examples using a DataFrame with a MultiIndex
 |      
 |      >>> tuples = [
 |      ...     ('cobra', 'mark i'), ('cobra', 'mark ii'),
 |      ...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),
 |      ...     ('viper', 'mark ii'), ('viper', 'mark iii')
 |      ... ]
 |      >>> index = pd.MultiIndex.from_tuples(tuples)
 |      >>> values = [[12, 2], [0, 4], [10, 20],
 |      ...           [1, 4], [7, 1], [16, 36]]
 |      >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)
 |      >>> df
 |                           max_speed  shield
 |      cobra      mark i           12       2
 |                 mark ii           0       4
 |      sidewinder mark i           10      20
 |                 mark ii           1       4
 |      viper      mark ii           7       1
 |                 mark iii         16      36
 |      
 |      Single label. Note this returns a DataFrame with a single index.
 |      
 |      >>> df.loc['cobra']
 |               max_speed  shield
 |      mark i          12       2
 |      mark ii          0       4
 |      
 |      Single index tuple. Note this returns a Series.
 |      
 |      >>> df.loc[('cobra', 'mark ii')]
 |      max_speed    0
 |      shield       4
 |      Name: (cobra, mark ii), dtype: int64
 |      
 |      Single label for row and column. Similar to passing in a tuple, this
 |      returns a Series.
 |      
 |      >>> df.loc['cobra', 'mark i']
 |      max_speed    12
 |      shield        2
 |      Name: (cobra, mark i), dtype: int64
 |      
 |      Single tuple. Note using ``[[]]`` returns a DataFrame.
 |      
 |      >>> df.loc[[('cobra', 'mark ii')]]
 |                     max_speed  shield
 |      cobra mark ii          0       4
 |      
 |      Single tuple for the index with a single label for the column
 |      
 |      >>> df.loc[('cobra', 'mark i'), 'shield']
 |      2
 |      
 |      Slice from index tuple to single label
 |      
 |      >>> df.loc[('cobra', 'mark i'):'viper']
 |                           max_speed  shield
 |      cobra      mark i           12       2
 |                 mark ii           0       4
 |      sidewinder mark i           10      20
 |                 mark ii           1       4
 |      viper      mark ii           7       1
 |                 mark iii         16      36
 |      
 |      Slice from index tuple to index tuple
 |      
 |      >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]
 |                          max_speed  shield
 |      cobra      mark i          12       2
 |                 mark ii          0       4
 |      sidewinder mark i          10      20
 |                 mark ii          1       4
 |      viper      mark ii          7       1
 |      
 |      Please see the :ref:`user guide<advanced.advanced_hierarchical>`
 |      for more details and explanations of advanced indexing.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& duplicated &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method duplicated in module pandas.core.frame:

duplicated(subset: 'Hashable | Sequence[Hashable] | None' = None, keep: 'DropKeep' = 'first') -> 'Series' method of pandas.core.frame.DataFrame instance
    Return boolean Series denoting duplicate rows.
    
    Considering certain columns is optional.
    
    Parameters
    ----------
    subset : column label or sequence of labels, optional
        Only consider certain columns for identifying duplicates, by
        default use all of the columns.
    keep : {'first', 'last', False}, default 'first'
        Determines which duplicates (if any) to mark.
    
        - ``first`` : Mark duplicates as ``True`` except for the first occurrence.
        - ``last`` : Mark duplicates as ``True`` except for the last occurrence.
        - False : Mark all duplicates as ``True``.
    
    Returns
    -------
    Series
        Boolean series for each duplicated rows.
    
    See Also
    --------
    Index.duplicated : Equivalent method on index.
    Series.duplicated : Equivalent method on Series.
    Series.drop_duplicates : Remove duplicate values from Series.
    DataFrame.drop_duplicates : Remove duplicate values from DataFrame.
    
    Examples
    --------
    Consider dataset containing ramen rating.
    
    >>> df = pd.DataFrame({
    ...     'brand': ['Yum Yum', 'Yum Yum', 'Indomie', 'Indomie', 'Indomie'],
    ...     'style': ['cup', 'cup', 'cup', 'pack', 'pack'],
    ...     'rating': [4, 4, 3.5, 15, 5]
    ... })
    >>> df
        brand style  rating
    0  Yum Yum   cup     4.0
    1  Yum Yum   cup     4.0
    2  Indomie   cup     3.5
    3  Indomie  pack    15.0
    4  Indomie  pack     5.0
    
    By default, for each set of duplicated values, the first occurrence
    is set on False and all others on True.
    
    >>> df.duplicated()
    0    False
    1     True
    2    False
    3    False
    4    False
    dtype: bool
    
    By using 'last', the last occurrence of each set of duplicated values
    is set on False and all others on True.
    
    >>> df.duplicated(keep='last')
    0     True
    1    False
    2    False
    3    False
    4    False
    dtype: bool
    
    By setting ``keep`` on False, all duplicates are True.
    
    >>> df.duplicated(keep=False)
    0     True
    1     True
    2    False
    3    False
    4    False
    dtype: bool
    
    To find duplicates on specific column(s), use ``subset``.
    
    >>> df.duplicated(subset=['brand'])
    0    False
    1     True
    2    False
    3     True
    4     True
    dtype: bool

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& empty &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on bool object:

class bool(int)
 |  bool(x) -> bool
 |  
 |  Returns True when the argument x is true, False otherwise.
 |  The builtins True and False are the only two instances of the class bool.
 |  The class bool is a subclass of the class int, and cannot be subclassed.
 |  
 |  Method resolution order:
 |      bool
 |      int
 |      object
 |  
 |  Methods defined here:
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from int:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original int
 |      and with a positive denominator.
 |      
 |      >>> (10).as_integer_ratio()
 |      (10, 1)
 |      >>> (-10).as_integer_ratio()
 |      (-10, 1)
 |      >>> (0).as_integer_ratio()
 |      (0, 1)
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Determines whether two's complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from int:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Indicates whether two's complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from int:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& eq &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method eq in module pandas.core.frame:

eq(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Equal to of dataframe and other, element-wise (binary operator `eq`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
    Parameters
    ----------
    other : scalar, sequence, Series, or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}, default 'columns'
        Whether to compare by the index (0 or 'index') or columns
        (1 or 'columns').
    level : int or label
        Broadcast across a level, matching Index values on the passed
        MultiIndex level.
    
    Returns
    -------
    DataFrame of bool
        Result of the comparison.
    
    See Also
    --------
    DataFrame.eq : Compare DataFrames for equality elementwise.
    DataFrame.ne : Compare DataFrames for inequality elementwise.
    DataFrame.le : Compare DataFrames for less than inequality
        or equality elementwise.
    DataFrame.lt : Compare DataFrames for strictly less than
        inequality elementwise.
    DataFrame.ge : Compare DataFrames for greater than inequality
        or equality elementwise.
    DataFrame.gt : Compare DataFrames for strictly greater than
        inequality elementwise.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    `NaN` values are considered different (i.e. `NaN` != `NaN`).
    
    Examples
    --------
    >>> df = pd.DataFrame({'cost': [250, 150, 100],
    ...                    'revenue': [100, 250, 300]},
    ...                   index=['A', 'B', 'C'])
    >>> df
       cost  revenue
    A   250      100
    B   150      250
    C   100      300
    
    Comparison with a scalar, using either the operator or method:
    
    >>> df == 100
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    >>> df.eq(100)
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    When `other` is a :class:`Series`, the columns of a DataFrame are aligned
    with the index of `other` and broadcast:
    
    >>> df != pd.Series([100, 250], index=["cost", "revenue"])
        cost  revenue
    A   True     True
    B   True    False
    C  False     True
    
    Use the method to control the broadcast axis:
    
    >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
       cost  revenue
    A  True    False
    B  True     True
    C  True     True
    D  True     True
    
    When comparing to an arbitrary sequence, the number of columns must
    match the number elements in `other`:
    
    >>> df == [250, 100]
        cost  revenue
    A   True     True
    B  False    False
    C  False    False
    
    Use the method to control the axis:
    
    >>> df.eq([250, 250, 100], axis='index')
        cost  revenue
    A   True    False
    B  False     True
    C   True    False
    
    Compare to a DataFrame of different shape.
    
    >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
    ...                      index=['A', 'B', 'C', 'D'])
    >>> other
       revenue
    A      300
    B      250
    C      100
    D      150
    
    >>> df.gt(other)
        cost  revenue
    A  False    False
    B  False    False
    C  False     True
    D  False    False
    
    Compare to a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
    ...                              'revenue': [100, 250, 300, 200, 175, 225]},
    ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
    ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
    >>> df_multindex
          cost  revenue
    Q1 A   250      100
       B   150      250
       C   100      300
    Q2 A   150      200
       B   300      175
       C   220      225
    
    >>> df.le(df_multindex, level=1)
           cost  revenue
    Q1 A   True     True
       B   True     True
       C   True     True
    Q2 A  False     True
       B   True    False
       C   True    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& equals &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method equals in module pandas.core.generic:

equals(other: 'object') -> 'bool_t' method of pandas.core.frame.DataFrame instance
    Test whether two objects contain the same elements.
    
    This function allows two Series or DataFrames to be compared against
    each other to see if they have the same shape and elements. NaNs in
    the same location are considered equal.
    
    The row/column index do not need to have the same type, as long
    as the values are considered equal. Corresponding columns and
    index must be of the same dtype.
    
    Parameters
    ----------
    other : Series or DataFrame
        The other Series or DataFrame to be compared with the first.
    
    Returns
    -------
    bool
        True if all elements are the same in both objects, False
        otherwise.
    
    See Also
    --------
    Series.eq : Compare two Series objects of the same length
        and return a Series where each element is True if the element
        in each Series is equal, False otherwise.
    DataFrame.eq : Compare two DataFrame objects of the same shape and
        return a DataFrame where each element is True if the respective
        element in each DataFrame is equal, False otherwise.
    testing.assert_series_equal : Raises an AssertionError if left and
        right are not equal. Provides an easy interface to ignore
        inequality in dtypes, indexes and precision among others.
    testing.assert_frame_equal : Like assert_series_equal, but targets
        DataFrames.
    numpy.array_equal : Return True if two arrays have the same shape
        and elements, False otherwise.
    
    Examples
    --------
    >>> df = pd.DataFrame({1: [10], 2: [20]})
    >>> df
        1   2
    0  10  20
    
    DataFrames df and exactly_equal have the same types and values for
    their elements and column labels, which will return True.
    
    >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})
    >>> exactly_equal
        1   2
    0  10  20
    >>> df.equals(exactly_equal)
    True
    
    DataFrames df and different_column_type have the same element
    types and values, but have different types for the column labels,
    which will still return True.
    
    >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})
    >>> different_column_type
       1.0  2.0
    0   10   20
    >>> df.equals(different_column_type)
    True
    
    DataFrames df and different_data_type have different types for the
    same values for their elements, and will return False even though
    their column labels are the same values and types.
    
    >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})
    >>> different_data_type
          1     2
    0  10.0  20.0
    >>> df.equals(different_data_type)
    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& eval &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method eval in module pandas.core.frame:

eval(expr: 'str', *, inplace: 'bool' = False, **kwargs) -> 'Any | None' method of pandas.core.frame.DataFrame instance
    Evaluate a string describing operations on DataFrame columns.
    
    Operates on columns only, not specific rows or elements.  This allows
    `eval` to run arbitrary code, which can make you vulnerable to code
    injection if you pass user input to this function.
    
    Parameters
    ----------
    expr : str
        The expression string to evaluate.
    inplace : bool, default False
        If the expression contains an assignment, whether to perform the
        operation inplace and mutate the existing DataFrame. Otherwise,
        a new DataFrame is returned.
    **kwargs
        See the documentation for :func:`eval` for complete details
        on the keyword arguments accepted by
        :meth:`~pandas.DataFrame.query`.
    
    Returns
    -------
    ndarray, scalar, pandas object, or None
        The result of the evaluation or None if ``inplace=True``.
    
    See Also
    --------
    DataFrame.query : Evaluates a boolean expression to query the columns
        of a frame.
    DataFrame.assign : Can evaluate an expression or function to create new
        values for a column.
    eval : Evaluate a Python expression as a string using various
        backends.
    
    Notes
    -----
    For more details see the API documentation for :func:`~eval`.
    For detailed examples see :ref:`enhancing performance with eval
    <enhancingperf.eval>`.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})
    >>> df
       A   B
    0  1  10
    1  2   8
    2  3   6
    3  4   4
    4  5   2
    >>> df.eval('A + B')
    0    11
    1    10
    2     9
    3     8
    4     7
    dtype: int64
    
    Assignment is allowed though by default the original DataFrame is not
    modified.
    
    >>> df.eval('C = A + B')
       A   B   C
    0  1  10  11
    1  2   8  10
    2  3   6   9
    3  4   4   8
    4  5   2   7
    >>> df
       A   B
    0  1  10
    1  2   8
    2  3   6
    3  4   4
    4  5   2
    
    Multiple columns can be assigned to using multi-line expressions:
    
    >>> df.eval(
    ...     '''
    ... C = A + B
    ... D = A - B
    ... '''
    ... )
       A   B   C  D
    0  1  10  11 -9
    1  2   8  10 -6
    2  3   6   9 -3
    3  4   4   8  0
    4  5   2   7  3

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& ewm &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method ewm in module pandas.core.generic:

ewm(com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = <no_default>, times: 'np.ndarray | DataFrame | Series | None' = None, method: "Literal['single', 'table']" = 'single') -> 'ExponentialMovingWindow' method of pandas.core.frame.DataFrame instance
    Provide exponentially weighted (EW) calculations.
    
    Exactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be
    provided if ``times`` is not provided. If ``times`` is provided,
    ``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.
    
    Parameters
    ----------
    com : float, optional
        Specify decay in terms of center of mass
    
        :math:`\alpha = 1 / (1 + com)`, for :math:`com \geq 0`.
    
    span : float, optional
        Specify decay in terms of span
    
        :math:`\alpha = 2 / (span + 1)`, for :math:`span \geq 1`.
    
    halflife : float, str, timedelta, optional
        Specify decay in terms of half-life
    
        :math:`\alpha = 1 - \exp\left(-\ln(2) / halflife\right)`, for
        :math:`halflife > 0`.
    
        If ``times`` is specified, a timedelta convertible unit over which an
        observation decays to half its value. Only applicable to ``mean()``,
        and halflife value will not apply to the other functions.
    
    alpha : float, optional
        Specify smoothing factor :math:`\alpha` directly
    
        :math:`0 < \alpha \leq 1`.
    
    min_periods : int, default 0
        Minimum number of observations in window required to have a value;
        otherwise, result is ``np.nan``.
    
    adjust : bool, default True
        Divide by decaying adjustment factor in beginning periods to account
        for imbalance in relative weightings (viewing EWMA as a moving average).
    
        - When ``adjust=True`` (default), the EW function is calculated using weights
          :math:`w_i = (1 - \alpha)^i`. For example, the EW moving average of the series
          [:math:`x_0, x_1, ..., x_t`] would be:
    
        .. math::
            y_t = \frac{x_t + (1 - \alpha)x_{t-1} + (1 - \alpha)^2 x_{t-2} + ... + (1 -
            \alpha)^t x_0}{1 + (1 - \alpha) + (1 - \alpha)^2 + ... + (1 - \alpha)^t}
    
        - When ``adjust=False``, the exponentially weighted function is calculated
          recursively:
    
        .. math::
            \begin{split}
                y_0 &= x_0\\
                y_t &= (1 - \alpha) y_{t-1} + \alpha x_t,
            \end{split}
    ignore_na : bool, default False
        Ignore missing values when calculating weights.
    
        - When ``ignore_na=False`` (default), weights are based on absolute positions.
          For example, the weights of :math:`x_0` and :math:`x_2` used in calculating
          the final weighted average of [:math:`x_0`, None, :math:`x_2`] are
          :math:`(1-\alpha)^2` and :math:`1` if ``adjust=True``, and
          :math:`(1-\alpha)^2` and :math:`\alpha` if ``adjust=False``.
    
        - When ``ignore_na=True``, weights are based
          on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`
          used in calculating the final weighted average of
          [:math:`x_0`, None, :math:`x_2`] are :math:`1-\alpha` and :math:`1` if
          ``adjust=True``, and :math:`1-\alpha` and :math:`\alpha` if ``adjust=False``.
    
    axis : {0, 1}, default 0
        If ``0`` or ``'index'``, calculate across the rows.
    
        If ``1`` or ``'columns'``, calculate across the columns.
    
        For `Series` this parameter is unused and defaults to 0.
    
    times : np.ndarray, Series, default None
    
        Only applicable to ``mean()``.
    
        Times corresponding to the observations. Must be monotonically increasing and
        ``datetime64[ns]`` dtype.
    
        If 1-D array like, a sequence with the same shape as the observations.
    
    method : str {'single', 'table'}, default 'single'
        .. versionadded:: 1.4.0
    
        Execute the rolling operation per single column or row (``'single'``)
        or over the entire object (``'table'``).
    
        This argument is only implemented when specifying ``engine='numba'``
        in the method call.
    
        Only applicable to ``mean()``
    
    Returns
    -------
    pandas.api.typing.ExponentialMovingWindow
    
    See Also
    --------
    rolling : Provides rolling window calculations.
    expanding : Provides expanding transformations.
    
    Notes
    -----
    See :ref:`Windowing Operations <window.exponentially_weighted>`
    for further usage details and examples.
    
    Examples
    --------
    >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
    >>> df
         B
    0  0.0
    1  1.0
    2  2.0
    3  NaN
    4  4.0
    
    >>> df.ewm(com=0.5).mean()
              B
    0  0.000000
    1  0.750000
    2  1.615385
    3  1.615385
    4  3.670213
    >>> df.ewm(alpha=2 / 3).mean()
              B
    0  0.000000
    1  0.750000
    2  1.615385
    3  1.615385
    4  3.670213
    
    **adjust**
    
    >>> df.ewm(com=0.5, adjust=True).mean()
              B
    0  0.000000
    1  0.750000
    2  1.615385
    3  1.615385
    4  3.670213
    >>> df.ewm(com=0.5, adjust=False).mean()
              B
    0  0.000000
    1  0.666667
    2  1.555556
    3  1.555556
    4  3.650794
    
    **ignore_na**
    
    >>> df.ewm(com=0.5, ignore_na=True).mean()
              B
    0  0.000000
    1  0.750000
    2  1.615385
    3  1.615385
    4  3.225000
    >>> df.ewm(com=0.5, ignore_na=False).mean()
              B
    0  0.000000
    1  0.750000
    2  1.615385
    3  1.615385
    4  3.670213
    
    **times**
    
    Exponentially weighted mean with weights calculated with a timedelta ``halflife``
    relative to ``times``.
    
    >>> times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']
    >>> df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()
              B
    0  0.000000
    1  0.585786
    2  1.523889
    3  1.523889
    4  3.233686

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& expanding &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method expanding in module pandas.core.generic:

expanding(min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = <no_default>, method: "Literal['single', 'table']" = 'single') -> 'Expanding' method of pandas.core.frame.DataFrame instance
    Provide expanding window calculations.
    
    Parameters
    ----------
    min_periods : int, default 1
        Minimum number of observations in window required to have a value;
        otherwise, result is ``np.nan``.
    
    axis : int or str, default 0
        If ``0`` or ``'index'``, roll across the rows.
    
        If ``1`` or ``'columns'``, roll across the columns.
    
        For `Series` this parameter is unused and defaults to 0.
    
    method : str {'single', 'table'}, default 'single'
        Execute the rolling operation per single column or row (``'single'``)
        or over the entire object (``'table'``).
    
        This argument is only implemented when specifying ``engine='numba'``
        in the method call.
    
        .. versionadded:: 1.3.0
    
    Returns
    -------
    pandas.api.typing.Expanding
    
    See Also
    --------
    rolling : Provides rolling window calculations.
    ewm : Provides exponential weighted functions.
    
    Notes
    -----
    See :ref:`Windowing Operations <window.expanding>` for further usage details
    and examples.
    
    Examples
    --------
    >>> df = pd.DataFrame({"B": [0, 1, 2, np.nan, 4]})
    >>> df
         B
    0  0.0
    1  1.0
    2  2.0
    3  NaN
    4  4.0
    
    **min_periods**
    
    Expanding sum with 1 vs 3 observations needed to calculate a value.
    
    >>> df.expanding(1).sum()
         B
    0  0.0
    1  1.0
    2  3.0
    3  3.0
    4  7.0
    >>> df.expanding(3).sum()
         B
    0  NaN
    1  NaN
    2  3.0
    3  3.0
    4  7.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& explode &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method explode in module pandas.core.frame:

explode(column: 'IndexLabel', ignore_index: 'bool' = False) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Transform each element of a list-like to a row, replicating index values.
    
    Parameters
    ----------
    column : IndexLabel
        Column(s) to explode.
        For multiple columns, specify a non-empty list with each element
        be str or tuple, and all specified columns their list-like data
        on same row of the frame must have matching length.
    
        .. versionadded:: 1.3.0
            Multi-column explode
    
    ignore_index : bool, default False
        If True, the resulting index will be labeled 0, 1, …, n - 1.
    
    Returns
    -------
    DataFrame
        Exploded lists to rows of the subset columns;
        index will be duplicated for these rows.
    
    Raises
    ------
    ValueError :
        * If columns of the frame are not unique.
        * If specified columns to explode is empty list.
        * If specified columns to explode have not matching count of
          elements rowwise in the frame.
    
    See Also
    --------
    DataFrame.unstack : Pivot a level of the (necessarily hierarchical)
        index labels.
    DataFrame.melt : Unpivot a DataFrame from wide format to long format.
    Series.explode : Explode a DataFrame from list-like columns to long format.
    
    Notes
    -----
    This routine will explode list-likes including lists, tuples, sets,
    Series, and np.ndarray. The result dtype of the subset rows will
    be object. Scalars will be returned unchanged, and empty list-likes will
    result in a np.nan for that row. In addition, the ordering of rows in the
    output will be non-deterministic when exploding sets.
    
    Reference :ref:`the user guide <reshaping.explode>` for more examples.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': [[0, 1, 2], 'foo', [], [3, 4]],
    ...                    'B': 1,
    ...                    'C': [['a', 'b', 'c'], np.nan, [], ['d', 'e']]})
    >>> df
               A  B          C
    0  [0, 1, 2]  1  [a, b, c]
    1        foo  1        NaN
    2         []  1         []
    3     [3, 4]  1     [d, e]
    
    Single-column explode.
    
    >>> df.explode('A')
         A  B          C
    0    0  1  [a, b, c]
    0    1  1  [a, b, c]
    0    2  1  [a, b, c]
    1  foo  1        NaN
    2  NaN  1         []
    3    3  1     [d, e]
    3    4  1     [d, e]
    
    Multi-column explode.
    
    >>> df.explode(list('AC'))
         A  B    C
    0    0  1    a
    0    1  1    b
    0    2  1    c
    1  foo  1  NaN
    2  NaN  1  NaN
    3    3  1    d
    3    4  1    e

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& ffill &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method ffill in module pandas.core.generic:

ffill(*, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values by propagating the last valid observation to next valid.
    
    Parameters
    ----------
    axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
        Axis along which to fill missing values. For `Series`
        this parameter is unused and defaults to 0.
    inplace : bool, default False
        If True, fill in-place. Note: this will modify any
        other views on this object (e.g., a no-copy slice for a column in a
        DataFrame).
    limit : int, default None
        If method is specified, this is the maximum number of consecutive
        NaN values to forward/backward fill. In other words, if there is
        a gap with more than this number of consecutive NaNs, it will only
        be partially filled. If method is not specified, this is the
        maximum number of entries along the entire axis where NaNs will be
        filled. Must be greater than 0 if not None.
    limit_area : {`None`, 'inside', 'outside'}, default None
        If limit is specified, consecutive NaNs will be filled with this
        restriction.
    
        * ``None``: No fill restriction.
        * 'inside': Only fill NaNs surrounded by valid values
          (interpolate).
        * 'outside': Only fill NaNs outside valid values (extrapolate).
    
        .. versionadded:: 2.2.0
    
    downcast : dict, default is None
        A dict of item->dtype of what to downcast if possible,
        or the string 'infer' which will try to downcast to an appropriate
        equal type (e.g. float64 to int64 if possible).
    
        .. deprecated:: 2.2.0
    
    Returns
    -------
    Series/DataFrame or None
        Object with missing values filled or None if ``inplace=True``.
    
    Examples
    --------
    >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],
    ...                    [3, 4, np.nan, 1],
    ...                    [np.nan, np.nan, np.nan, np.nan],
    ...                    [np.nan, 3, np.nan, 4]],
    ...                   columns=list("ABCD"))
    >>> df
         A    B   C    D
    0  NaN  2.0 NaN  0.0
    1  3.0  4.0 NaN  1.0
    2  NaN  NaN NaN  NaN
    3  NaN  3.0 NaN  4.0
    
    >>> df.ffill()
         A    B   C    D
    0  NaN  2.0 NaN  0.0
    1  3.0  4.0 NaN  1.0
    2  3.0  4.0 NaN  1.0
    3  3.0  3.0 NaN  4.0
    
    >>> ser = pd.Series([1, np.nan, 2, 3])
    >>> ser.ffill()
    0   1.0
    1   1.0
    2   2.0
    3   3.0
    dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& fillna &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method fillna in module pandas.core.generic:

fillna(value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values using the specified method.
    
    Parameters
    ----------
    value : scalar, dict, Series, or DataFrame
        Value to use to fill holes (e.g. 0), alternately a
        dict/Series/DataFrame of values specifying which value to use for
        each index (for a Series) or column (for a DataFrame).  Values not
        in the dict/Series/DataFrame will not be filled. This value cannot
        be a list.
    method : {'backfill', 'bfill', 'ffill', None}, default None
        Method to use for filling holes in reindexed Series:
    
        * ffill: propagate last valid observation forward to next valid.
        * backfill / bfill: use next valid observation to fill gap.
    
        .. deprecated:: 2.1.0
            Use ffill or bfill instead.
    
    axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
        Axis along which to fill missing values. For `Series`
        this parameter is unused and defaults to 0.
    inplace : bool, default False
        If True, fill in-place. Note: this will modify any
        other views on this object (e.g., a no-copy slice for a column in a
        DataFrame).
    limit : int, default None
        If method is specified, this is the maximum number of consecutive
        NaN values to forward/backward fill. In other words, if there is
        a gap with more than this number of consecutive NaNs, it will only
        be partially filled. If method is not specified, this is the
        maximum number of entries along the entire axis where NaNs will be
        filled. Must be greater than 0 if not None.
    downcast : dict, default is None
        A dict of item->dtype of what to downcast if possible,
        or the string 'infer' which will try to downcast to an appropriate
        equal type (e.g. float64 to int64 if possible).
    
        .. deprecated:: 2.2.0
    
    Returns
    -------
    Series/DataFrame or None
        Object with missing values filled or None if ``inplace=True``.
    
    See Also
    --------
    ffill : Fill values by propagating the last valid observation to next valid.
    bfill : Fill values by using the next valid observation to fill the gap.
    interpolate : Fill NaN values using interpolation.
    reindex : Conform object to new index.
    asfreq : Convert TimeSeries to specified frequency.
    
    Examples
    --------
    >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],
    ...                    [3, 4, np.nan, 1],
    ...                    [np.nan, np.nan, np.nan, np.nan],
    ...                    [np.nan, 3, np.nan, 4]],
    ...                   columns=list("ABCD"))
    >>> df
         A    B   C    D
    0  NaN  2.0 NaN  0.0
    1  3.0  4.0 NaN  1.0
    2  NaN  NaN NaN  NaN
    3  NaN  3.0 NaN  4.0
    
    Replace all NaN elements with 0s.
    
    >>> df.fillna(0)
         A    B    C    D
    0  0.0  2.0  0.0  0.0
    1  3.0  4.0  0.0  1.0
    2  0.0  0.0  0.0  0.0
    3  0.0  3.0  0.0  4.0
    
    Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,
    2, and 3 respectively.
    
    >>> values = {"A": 0, "B": 1, "C": 2, "D": 3}
    >>> df.fillna(value=values)
         A    B    C    D
    0  0.0  2.0  2.0  0.0
    1  3.0  4.0  2.0  1.0
    2  0.0  1.0  2.0  3.0
    3  0.0  3.0  2.0  4.0
    
    Only replace the first NaN element.
    
    >>> df.fillna(value=values, limit=1)
         A    B    C    D
    0  0.0  2.0  2.0  0.0
    1  3.0  4.0  NaN  1.0
    2  NaN  1.0  NaN  3.0
    3  NaN  3.0  NaN  4.0
    
    When filling using a DataFrame, replacement happens along
    the same column names and same indices
    
    >>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list("ABCE"))
    >>> df.fillna(df2)
         A    B    C    D
    0  0.0  2.0  0.0  0.0
    1  3.0  4.0  0.0  1.0
    2  0.0  0.0  0.0  NaN
    3  0.0  3.0  0.0  4.0
    
    Note that column D is not affected since it is not present in df2.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& filter &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method filter in module pandas.core.generic:

filter(items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Subset the dataframe rows or columns according to the specified index labels.
    
    Note that this routine does not filter a dataframe on its
    contents. The filter is applied to the labels of the index.
    
    Parameters
    ----------
    items : list-like
        Keep labels from axis which are in items.
    like : str
        Keep labels from axis for which "like in label == True".
    regex : str (regular expression)
        Keep labels from axis for which re.search(regex, label) == True.
    axis : {0 or 'index', 1 or 'columns', None}, default None
        The axis to filter on, expressed either as an index (int)
        or axis name (str). By default this is the info axis, 'columns' for
        DataFrame. For `Series` this parameter is unused and defaults to `None`.
    
    Returns
    -------
    same type as input object
    
    See Also
    --------
    DataFrame.loc : Access a group of rows and columns
        by label(s) or a boolean array.
    
    Notes
    -----
    The ``items``, ``like``, and ``regex`` parameters are
    enforced to be mutually exclusive.
    
    ``axis`` defaults to the info axis that is used when indexing
    with ``[]``.
    
    Examples
    --------
    >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),
    ...                   index=['mouse', 'rabbit'],
    ...                   columns=['one', 'two', 'three'])
    >>> df
            one  two  three
    mouse     1    2      3
    rabbit    4    5      6
    
    >>> # select columns by name
    >>> df.filter(items=['one', 'three'])
             one  three
    mouse     1      3
    rabbit    4      6
    
    >>> # select columns by regular expression
    >>> df.filter(regex='e$', axis=1)
             one  three
    mouse     1      3
    rabbit    4      6
    
    >>> # select rows containing 'bbi'
    >>> df.filter(like='bbi', axis=0)
             one  two  three
    rabbit    4    5      6

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& first &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method first in module pandas.core.generic:

first(offset) -> 'Self' method of pandas.core.frame.DataFrame instance
    Select initial periods of time series data based on a date offset.
    
    .. deprecated:: 2.1
        :meth:`.first` is deprecated and will be removed in a future version.
        Please create a mask and filter using `.loc` instead.
    
    For a DataFrame with a sorted DatetimeIndex, this function can
    select the first few rows based on a date offset.
    
    Parameters
    ----------
    offset : str, DateOffset or dateutil.relativedelta
        The offset length of the data that will be selected. For instance,
        '1ME' will display all the rows having their index within the first month.
    
    Returns
    -------
    Series or DataFrame
        A subset of the caller.
    
    Raises
    ------
    TypeError
        If the index is not  a :class:`DatetimeIndex`
    
    See Also
    --------
    last : Select final periods of time series based on a date offset.
    at_time : Select values at a particular time of the day.
    between_time : Select values between particular times of the day.
    
    Examples
    --------
    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')
    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
    >>> ts
                A
    2018-04-09  1
    2018-04-11  2
    2018-04-13  3
    2018-04-15  4
    
    Get the rows for the first 3 days:
    
    >>> ts.first('3D')
                A
    2018-04-09  1
    2018-04-11  2
    
    Notice the data for 3 first calendar days were returned, not the first
    3 days observed in the dataset, and therefore data for 2018-04-13 was
    not returned.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& first_valid_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method first_valid_index in module pandas.core.generic:

first_valid_index() -> 'Hashable | None' method of pandas.core.frame.DataFrame instance
    Return index for first non-NA value or None, if no non-NA value is found.
    
    Returns
    -------
    type of index
    
    Examples
    --------
    For Series:
    
    >>> s = pd.Series([None, 3, 4])
    >>> s.first_valid_index()
    1
    >>> s.last_valid_index()
    2
    
    >>> s = pd.Series([None, None])
    >>> print(s.first_valid_index())
    None
    >>> print(s.last_valid_index())
    None
    
    If all elements in Series are NA/null, returns None.
    
    >>> s = pd.Series()
    >>> print(s.first_valid_index())
    None
    >>> print(s.last_valid_index())
    None
    
    If Series is empty, returns None.
    
    For DataFrame:
    
    >>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})
    >>> df
         A      B
    0  NaN    NaN
    1  NaN    3.0
    2  2.0    4.0
    >>> df.first_valid_index()
    1
    >>> df.last_valid_index()
    2
    
    >>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})
    >>> df
         A      B
    0  None   None
    1  None   None
    2  None   None
    >>> print(df.first_valid_index())
    None
    >>> print(df.last_valid_index())
    None
    
    If all elements in DataFrame are NA/null, returns None.
    
    >>> df = pd.DataFrame()
    >>> df
    Empty DataFrame
    Columns: []
    Index: []
    >>> print(df.first_valid_index())
    None
    >>> print(df.last_valid_index())
    None
    
    If DataFrame is empty, returns None.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& flags &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Flags in module pandas.core.flags object:

class Flags(builtins.object)
 |  Flags(obj: 'NDFrame', *, allows_duplicate_labels: 'bool') -> 'None'
 |  
 |  Flags that apply to pandas objects.
 |  
 |  Parameters
 |  ----------
 |  obj : Series or DataFrame
 |      The object these flags are associated with.
 |  allows_duplicate_labels : bool, default True
 |      Whether to allow duplicate labels in this object. By default,
 |      duplicate labels are permitted. Setting this to ``False`` will
 |      cause an :class:`errors.DuplicateLabelError` to be raised when
 |      `index` (or columns for DataFrame) is not unique, or any
 |      subsequent operation on introduces duplicates.
 |      See :ref:`duplicates.disallow` for more.
 |  
 |      .. warning::
 |  
 |         This is an experimental feature. Currently, many methods fail to
 |         propagate the ``allows_duplicate_labels`` value. In future versions
 |         it is expected that every method taking or returning one or more
 |         DataFrame or Series objects will propagate ``allows_duplicate_labels``.
 |  
 |  Examples
 |  --------
 |  Attributes can be set in two ways:
 |  
 |  >>> df = pd.DataFrame()
 |  >>> df.flags
 |  <Flags(allows_duplicate_labels=True)>
 |  >>> df.flags.allows_duplicate_labels = False
 |  >>> df.flags
 |  <Flags(allows_duplicate_labels=False)>
 |  
 |  >>> df.flags['allows_duplicate_labels'] = True
 |  >>> df.flags
 |  <Flags(allows_duplicate_labels=True)>
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other) -> 'bool'
 |      Return self==value.
 |  
 |  __getitem__(self, key: 'str')
 |  
 |  __init__(self, obj: 'NDFrame', *, allows_duplicate_labels: 'bool') -> 'None'
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self) -> 'str'
 |      Return repr(self).
 |  
 |  __setitem__(self, key: 'str', value) -> 'None'
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  allows_duplicate_labels
 |      Whether this object allows duplicate labels.
 |      
 |      Setting ``allows_duplicate_labels=False`` ensures that the
 |      index (and columns of a DataFrame) are unique. Most methods
 |      that accept and return a Series or DataFrame will propagate
 |      the value of ``allows_duplicate_labels``.
 |      
 |      See :ref:`duplicates` for more.
 |      
 |      See Also
 |      --------
 |      DataFrame.attrs : Set global metadata on this object.
 |      DataFrame.set_flags : Set global flags on this object.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": [1, 2]}, index=['a', 'a'])
 |      >>> df.flags.allows_duplicate_labels
 |      True
 |      >>> df.flags.allows_duplicate_labels = False
 |      Traceback (most recent call last):
 |          ...
 |      pandas.errors.DuplicateLabelError: Index has duplicates.
 |            positions
 |      label
 |      a        [0, 1]
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'_keys': 'set[str]'}
 |  
 |  __hash__ = None

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& floordiv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method floordiv in module pandas.core.frame:

floordiv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Integer division of dataframe and other, element-wise (binary operator `floordiv`).
    
    Equivalent to ``dataframe // other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rfloordiv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& from_dict &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_dict in module pandas.core.frame:

from_dict(data: 'dict', orient: 'FromDictOrient' = 'columns', dtype: 'Dtype | None' = None, columns: 'Axes | None' = None) -> 'DataFrame' method of builtins.type instance
    Construct DataFrame from dict of array-like or dicts.
    
    Creates DataFrame object from dictionary by columns or by index
    allowing dtype specification.
    
    Parameters
    ----------
    data : dict
        Of the form {field : array-like} or {field : dict}.
    orient : {'columns', 'index', 'tight'}, default 'columns'
        The "orientation" of the data. If the keys of the passed dict
        should be the columns of the resulting DataFrame, pass 'columns'
        (default). Otherwise if the keys should be rows, pass 'index'.
        If 'tight', assume a dict with keys ['index', 'columns', 'data',
        'index_names', 'column_names'].
    
        .. versionadded:: 1.4.0
           'tight' as an allowed value for the ``orient`` argument
    
    dtype : dtype, default None
        Data type to force after DataFrame construction, otherwise infer.
    columns : list, default None
        Column labels to use when ``orient='index'``. Raises a ValueError
        if used with ``orient='columns'`` or ``orient='tight'``.
    
    Returns
    -------
    DataFrame
    
    See Also
    --------
    DataFrame.from_records : DataFrame from structured ndarray, sequence
        of tuples or dicts, or DataFrame.
    DataFrame : DataFrame object creation using constructor.
    DataFrame.to_dict : Convert the DataFrame to a dictionary.
    
    Examples
    --------
    By default the keys of the dict become the DataFrame columns:
    
    >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}
    >>> pd.DataFrame.from_dict(data)
       col_1 col_2
    0      3     a
    1      2     b
    2      1     c
    3      0     d
    
    Specify ``orient='index'`` to create the DataFrame using dictionary
    keys as rows:
    
    >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}
    >>> pd.DataFrame.from_dict(data, orient='index')
           0  1  2  3
    row_1  3  2  1  0
    row_2  a  b  c  d
    
    When using the 'index' orientation, the column names can be
    specified manually:
    
    >>> pd.DataFrame.from_dict(data, orient='index',
    ...                        columns=['A', 'B', 'C', 'D'])
           A  B  C  D
    row_1  3  2  1  0
    row_2  a  b  c  d
    
    Specify ``orient='tight'`` to create the DataFrame using a 'tight'
    format:
    
    >>> data = {'index': [('a', 'b'), ('a', 'c')],
    ...         'columns': [('x', 1), ('y', 2)],
    ...         'data': [[1, 3], [2, 4]],
    ...         'index_names': ['n1', 'n2'],
    ...         'column_names': ['z1', 'z2']}
    >>> pd.DataFrame.from_dict(data, orient='tight')
    z1     x  y
    z2     1  2
    n1 n2
    a  b   1  3
       c   2  4

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& from_records &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method from_records in module pandas.core.frame:

from_records(data, index=None, exclude=None, columns=None, coerce_float: 'bool' = False, nrows: 'int | None' = None) -> 'DataFrame' method of builtins.type instance
    Convert structured or record ndarray to DataFrame.
    
    Creates a DataFrame object from a structured ndarray, sequence of
    tuples or dicts, or DataFrame.
    
    Parameters
    ----------
    data : structured ndarray, sequence of tuples or dicts, or DataFrame
        Structured input data.
    
        .. deprecated:: 2.1.0
            Passing a DataFrame is deprecated.
    index : str, list of fields, array-like
        Field of array to use as the index, alternately a specific set of
        input labels to use.
    exclude : sequence, default None
        Columns or fields to exclude.
    columns : sequence, default None
        Column names to use. If the passed data do not have names
        associated with them, this argument provides names for the
        columns. Otherwise this argument indicates the order of the columns
        in the result (any names not found in the data will become all-NA
        columns).
    coerce_float : bool, default False
        Attempt to convert values of non-string, non-numeric objects (like
        decimal.Decimal) to floating point, useful for SQL result sets.
    nrows : int, default None
        Number of rows to read if data is an iterator.
    
    Returns
    -------
    DataFrame
    
    See Also
    --------
    DataFrame.from_dict : DataFrame from dict of array-like or dicts.
    DataFrame : DataFrame object creation using constructor.
    
    Examples
    --------
    Data can be provided as a structured ndarray:
    
    >>> data = np.array([(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')],
    ...                 dtype=[('col_1', 'i4'), ('col_2', 'U1')])
    >>> pd.DataFrame.from_records(data)
       col_1 col_2
    0      3     a
    1      2     b
    2      1     c
    3      0     d
    
    Data can be provided as a list of dicts:
    
    >>> data = [{'col_1': 3, 'col_2': 'a'},
    ...         {'col_1': 2, 'col_2': 'b'},
    ...         {'col_1': 1, 'col_2': 'c'},
    ...         {'col_1': 0, 'col_2': 'd'}]
    >>> pd.DataFrame.from_records(data)
       col_1 col_2
    0      3     a
    1      2     b
    2      1     c
    3      0     d
    
    Data can be provided as a list of tuples with corresponding columns:
    
    >>> data = [(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')]
    >>> pd.DataFrame.from_records(data, columns=['col_1', 'col_2'])
       col_1 col_2
    0      3     a
    1      2     b
    2      1     c
    3      0     d

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& ge &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method ge in module pandas.core.frame:

ge(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Greater than or equal to of dataframe and other, element-wise (binary operator `ge`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
    Parameters
    ----------
    other : scalar, sequence, Series, or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}, default 'columns'
        Whether to compare by the index (0 or 'index') or columns
        (1 or 'columns').
    level : int or label
        Broadcast across a level, matching Index values on the passed
        MultiIndex level.
    
    Returns
    -------
    DataFrame of bool
        Result of the comparison.
    
    See Also
    --------
    DataFrame.eq : Compare DataFrames for equality elementwise.
    DataFrame.ne : Compare DataFrames for inequality elementwise.
    DataFrame.le : Compare DataFrames for less than inequality
        or equality elementwise.
    DataFrame.lt : Compare DataFrames for strictly less than
        inequality elementwise.
    DataFrame.ge : Compare DataFrames for greater than inequality
        or equality elementwise.
    DataFrame.gt : Compare DataFrames for strictly greater than
        inequality elementwise.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    `NaN` values are considered different (i.e. `NaN` != `NaN`).
    
    Examples
    --------
    >>> df = pd.DataFrame({'cost': [250, 150, 100],
    ...                    'revenue': [100, 250, 300]},
    ...                   index=['A', 'B', 'C'])
    >>> df
       cost  revenue
    A   250      100
    B   150      250
    C   100      300
    
    Comparison with a scalar, using either the operator or method:
    
    >>> df == 100
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    >>> df.eq(100)
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    When `other` is a :class:`Series`, the columns of a DataFrame are aligned
    with the index of `other` and broadcast:
    
    >>> df != pd.Series([100, 250], index=["cost", "revenue"])
        cost  revenue
    A   True     True
    B   True    False
    C  False     True
    
    Use the method to control the broadcast axis:
    
    >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
       cost  revenue
    A  True    False
    B  True     True
    C  True     True
    D  True     True
    
    When comparing to an arbitrary sequence, the number of columns must
    match the number elements in `other`:
    
    >>> df == [250, 100]
        cost  revenue
    A   True     True
    B  False    False
    C  False    False
    
    Use the method to control the axis:
    
    >>> df.eq([250, 250, 100], axis='index')
        cost  revenue
    A   True    False
    B  False     True
    C   True    False
    
    Compare to a DataFrame of different shape.
    
    >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
    ...                      index=['A', 'B', 'C', 'D'])
    >>> other
       revenue
    A      300
    B      250
    C      100
    D      150
    
    >>> df.gt(other)
        cost  revenue
    A  False    False
    B  False    False
    C  False     True
    D  False    False
    
    Compare to a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
    ...                              'revenue': [100, 250, 300, 200, 175, 225]},
    ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
    ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
    >>> df_multindex
          cost  revenue
    Q1 A   250      100
       B   150      250
       C   100      300
    Q2 A   150      200
       B   300      175
       C   220      225
    
    >>> df.le(df_multindex, level=1)
           cost  revenue
    Q1 A   True     True
       B   True     True
       C   True     True
    Q2 A  False     True
       B   True    False
       C   True    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& get &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method get in module pandas.core.generic:

get(key, default=None) method of pandas.core.frame.DataFrame instance
    Get item from object for given key (ex: DataFrame column).
    
    Returns default value if not found.
    
    Parameters
    ----------
    key : object
    
    Returns
    -------
    same type as items contained in object
    
    Examples
    --------
    >>> df = pd.DataFrame(
    ...     [
    ...         [24.3, 75.7, "high"],
    ...         [31, 87.8, "high"],
    ...         [22, 71.6, "medium"],
    ...         [35, 95, "medium"],
    ...     ],
    ...     columns=["temp_celsius", "temp_fahrenheit", "windspeed"],
    ...     index=pd.date_range(start="2014-02-12", end="2014-02-15", freq="D"),
    ... )
    
    >>> df
                temp_celsius  temp_fahrenheit windspeed
    2014-02-12          24.3             75.7      high
    2014-02-13          31.0             87.8      high
    2014-02-14          22.0             71.6    medium
    2014-02-15          35.0             95.0    medium
    
    >>> df.get(["temp_celsius", "windspeed"])
                temp_celsius windspeed
    2014-02-12          24.3      high
    2014-02-13          31.0      high
    2014-02-14          22.0    medium
    2014-02-15          35.0    medium
    
    >>> ser = df['windspeed']
    >>> ser.get('2014-02-13')
    'high'
    
    If the key isn't found, the default value will be used.
    
    >>> df.get(["temp_celsius", "temp_kelvin"], default="default_value")
    'default_value'
    
    >>> ser.get('2014-02-10', '[unknown]')
    '[unknown]'

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& groupby &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method groupby in module pandas.core.frame:

groupby(by=None, axis: 'Axis | lib.NoDefault' = <no_default>, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = <no_default>, dropna: 'bool' = True) -> 'DataFrameGroupBy' method of pandas.core.frame.DataFrame instance
    Group DataFrame using a mapper or by a Series of columns.
    
    A groupby operation involves some combination of splitting the
    object, applying a function, and combining the results. This can be
    used to group large amounts of data and compute operations on these
    groups.
    
    Parameters
    ----------
    by : mapping, function, label, pd.Grouper or list of such
        Used to determine the groups for the groupby.
        If ``by`` is a function, it's called on each value of the object's
        index. If a dict or Series is passed, the Series or dict VALUES
        will be used to determine the groups (the Series' values are first
        aligned; see ``.align()`` method). If a list or ndarray of length
        equal to the selected axis is passed (see the `groupby user guide
        <https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups>`_),
        the values are used as-is to determine the groups. A label or list
        of labels may be passed to group by the columns in ``self``.
        Notice that a tuple is interpreted as a (single) key.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Split along rows (0) or columns (1). For `Series` this parameter
        is unused and defaults to 0.
    
        .. deprecated:: 2.1.0
    
            Will be removed and behave like axis=0 in a future version.
            For ``axis=1``, do ``frame.T.groupby(...)`` instead.
    
    level : int, level name, or sequence of such, default None
        If the axis is a MultiIndex (hierarchical), group by a particular
        level or levels. Do not specify both ``by`` and ``level``.
    as_index : bool, default True
        Return object with group labels as the
        index. Only relevant for DataFrame input. as_index=False is
        effectively "SQL-style" grouped output. This argument has no effect
        on filtrations (see the `filtrations in the user guide
        <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),
        such as ``head()``, ``tail()``, ``nth()`` and in transformations
        (see the `transformations in the user guide
        <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).
    sort : bool, default True
        Sort group keys. Get better performance by turning this off.
        Note this does not influence the order of observations within each
        group. Groupby preserves the order of rows within each group. If False,
        the groups will appear in the same order as they did in the original DataFrame.
        This argument has no effect on filtrations (see the `filtrations in the user guide
        <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),
        such as ``head()``, ``tail()``, ``nth()`` and in transformations
        (see the `transformations in the user guide
        <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).
    
        .. versionchanged:: 2.0.0
    
            Specifying ``sort=False`` with an ordered categorical grouper will no
            longer sort the values.
    
    group_keys : bool, default True
        When calling apply and the ``by`` argument produces a like-indexed
        (i.e. :ref:`a transform <groupby.transform>`) result, add group keys to
        index to identify pieces. By default group keys are not included
        when the result's index (and column) labels match the inputs, and
        are included otherwise.
    
        .. versionchanged:: 1.5.0
    
           Warns that ``group_keys`` will no longer be ignored when the
           result from ``apply`` is a like-indexed Series or DataFrame.
           Specify ``group_keys`` explicitly to include the group keys or
           not.
    
        .. versionchanged:: 2.0.0
    
           ``group_keys`` now defaults to ``True``.
    
    observed : bool, default False
        This only applies if any of the groupers are Categoricals.
        If True: only show observed values for categorical groupers.
        If False: show all values for categorical groupers.
    
        .. deprecated:: 2.1.0
    
            The default value will change to True in a future version of pandas.
    
    dropna : bool, default True
        If True, and if group keys contain NA values, NA values together
        with row/column will be dropped.
        If False, NA values will also be treated as the key in groups.
    
    Returns
    -------
    pandas.api.typing.DataFrameGroupBy
        Returns a groupby object that contains information about the groups.
    
    See Also
    --------
    resample : Convenience method for frequency conversion and resampling
        of time series.
    
    Notes
    -----
    See the `user guide
    <https://pandas.pydata.org/pandas-docs/stable/groupby.html>`__ for more
    detailed usage and examples, including splitting an object into groups,
    iterating through groups, selecting a group, aggregation, and more.
    
    Examples
    --------
    >>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',
    ...                               'Parrot', 'Parrot'],
    ...                    'Max Speed': [380., 370., 24., 26.]})
    >>> df
       Animal  Max Speed
    0  Falcon      380.0
    1  Falcon      370.0
    2  Parrot       24.0
    3  Parrot       26.0
    >>> df.groupby(['Animal']).mean()
            Max Speed
    Animal
    Falcon      375.0
    Parrot       25.0
    
    **Hierarchical Indexes**
    
    We can groupby different levels of a hierarchical index
    using the `level` parameter:
    
    >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],
    ...           ['Captive', 'Wild', 'Captive', 'Wild']]
    >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))
    >>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},
    ...                   index=index)
    >>> df
                    Max Speed
    Animal Type
    Falcon Captive      390.0
           Wild         350.0
    Parrot Captive       30.0
           Wild          20.0
    >>> df.groupby(level=0).mean()
            Max Speed
    Animal
    Falcon      370.0
    Parrot       25.0
    >>> df.groupby(level="Type").mean()
             Max Speed
    Type
    Captive      210.0
    Wild         185.0
    
    We can also choose to include NA in group keys or not by setting
    `dropna` parameter, the default setting is `True`.
    
    >>> l = [[1, 2, 3], [1, None, 4], [2, 1, 3], [1, 2, 2]]
    >>> df = pd.DataFrame(l, columns=["a", "b", "c"])
    
    >>> df.groupby(by=["b"]).sum()
        a   c
    b
    1.0 2   3
    2.0 2   5
    
    >>> df.groupby(by=["b"], dropna=False).sum()
        a   c
    b
    1.0 2   3
    2.0 2   5
    NaN 1   4
    
    >>> l = [["a", 12, 12], [None, 12.3, 33.], ["b", 12.3, 123], ["a", 1, 1]]
    >>> df = pd.DataFrame(l, columns=["a", "b", "c"])
    
    >>> df.groupby(by="a").sum()
        b     c
    a
    a   13.0   13.0
    b   12.3  123.0
    
    >>> df.groupby(by="a", dropna=False).sum()
        b     c
    a
    a   13.0   13.0
    b   12.3  123.0
    NaN 12.3   33.0
    
    When using ``.apply()``, use ``group_keys`` to include or exclude the
    group keys. The ``group_keys`` argument defaults to ``True`` (include).
    
    >>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',
    ...                               'Parrot', 'Parrot'],
    ...                    'Max Speed': [380., 370., 24., 26.]})
    >>> df.groupby("Animal", group_keys=True)[['Max Speed']].apply(lambda x: x)
              Max Speed
    Animal
    Falcon 0      380.0
           1      370.0
    Parrot 2       24.0
           3       26.0
    
    >>> df.groupby("Animal", group_keys=False)[['Max Speed']].apply(lambda x: x)
       Max Speed
    0      380.0
    1      370.0
    2       24.0
    3       26.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& gt &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method gt in module pandas.core.frame:

gt(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Greater than of dataframe and other, element-wise (binary operator `gt`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
    Parameters
    ----------
    other : scalar, sequence, Series, or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}, default 'columns'
        Whether to compare by the index (0 or 'index') or columns
        (1 or 'columns').
    level : int or label
        Broadcast across a level, matching Index values on the passed
        MultiIndex level.
    
    Returns
    -------
    DataFrame of bool
        Result of the comparison.
    
    See Also
    --------
    DataFrame.eq : Compare DataFrames for equality elementwise.
    DataFrame.ne : Compare DataFrames for inequality elementwise.
    DataFrame.le : Compare DataFrames for less than inequality
        or equality elementwise.
    DataFrame.lt : Compare DataFrames for strictly less than
        inequality elementwise.
    DataFrame.ge : Compare DataFrames for greater than inequality
        or equality elementwise.
    DataFrame.gt : Compare DataFrames for strictly greater than
        inequality elementwise.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    `NaN` values are considered different (i.e. `NaN` != `NaN`).
    
    Examples
    --------
    >>> df = pd.DataFrame({'cost': [250, 150, 100],
    ...                    'revenue': [100, 250, 300]},
    ...                   index=['A', 'B', 'C'])
    >>> df
       cost  revenue
    A   250      100
    B   150      250
    C   100      300
    
    Comparison with a scalar, using either the operator or method:
    
    >>> df == 100
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    >>> df.eq(100)
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    When `other` is a :class:`Series`, the columns of a DataFrame are aligned
    with the index of `other` and broadcast:
    
    >>> df != pd.Series([100, 250], index=["cost", "revenue"])
        cost  revenue
    A   True     True
    B   True    False
    C  False     True
    
    Use the method to control the broadcast axis:
    
    >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
       cost  revenue
    A  True    False
    B  True     True
    C  True     True
    D  True     True
    
    When comparing to an arbitrary sequence, the number of columns must
    match the number elements in `other`:
    
    >>> df == [250, 100]
        cost  revenue
    A   True     True
    B  False    False
    C  False    False
    
    Use the method to control the axis:
    
    >>> df.eq([250, 250, 100], axis='index')
        cost  revenue
    A   True    False
    B  False     True
    C   True    False
    
    Compare to a DataFrame of different shape.
    
    >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
    ...                      index=['A', 'B', 'C', 'D'])
    >>> other
       revenue
    A      300
    B      250
    C      100
    D      150
    
    >>> df.gt(other)
        cost  revenue
    A  False    False
    B  False    False
    C  False     True
    D  False    False
    
    Compare to a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
    ...                              'revenue': [100, 250, 300, 200, 175, 225]},
    ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
    ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
    >>> df_multindex
          cost  revenue
    Q1 A   250      100
       B   150      250
       C   100      300
    Q2 A   150      200
       B   300      175
       C   220      225
    
    >>> df.le(df_multindex, level=1)
           cost  revenue
    Q1 A   True     True
       B   True     True
       C   True     True
    Q2 A  False     True
       B   True    False
       C   True    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& head &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method head in module pandas.core.generic:

head(n: 'int' = 5) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return the first `n` rows.
    
    This function returns the first `n` rows for the object based
    on position. It is useful for quickly testing if your object
    has the right type of data in it.
    
    For negative values of `n`, this function returns all rows except
    the last `|n|` rows, equivalent to ``df[:n]``.
    
    If n is larger than the number of rows, this function returns all rows.
    
    Parameters
    ----------
    n : int, default 5
        Number of rows to select.
    
    Returns
    -------
    same type as caller
        The first `n` rows of the caller object.
    
    See Also
    --------
    DataFrame.tail: Returns the last `n` rows.
    
    Examples
    --------
    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',
    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})
    >>> df
          animal
    0  alligator
    1        bee
    2     falcon
    3       lion
    4     monkey
    5     parrot
    6      shark
    7      whale
    8      zebra
    
    Viewing the first 5 lines
    
    >>> df.head()
          animal
    0  alligator
    1        bee
    2     falcon
    3       lion
    4     monkey
    
    Viewing the first `n` lines (three in this case)
    
    >>> df.head(3)
          animal
    0  alligator
    1        bee
    2     falcon
    
    For negative values of `n`
    
    >>> df.head(-3)
          animal
    0  alligator
    1        bee
    2     falcon
    3       lion
    4     monkey
    5     parrot

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& hist &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method hist_frame in module pandas.plotting._core:

hist_frame(column: 'IndexLabel | None' = None, by=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, ax=None, sharex: 'bool' = False, sharey: 'bool' = False, figsize: 'tuple[int, int] | None' = None, layout: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Make a histogram of the DataFrame's columns.
    
    A `histogram`_ is a representation of the distribution of data.
    This function calls :meth:`matplotlib.pyplot.hist`, on each series in
    the DataFrame, resulting in one histogram per column.
    
    .. _histogram: https://en.wikipedia.org/wiki/Histogram
    
    Parameters
    ----------
    data : DataFrame
        The pandas object holding the data.
    column : str or sequence, optional
        If passed, will be used to limit data to a subset of columns.
    by : object, optional
        If passed, then used to form histograms for separate groups.
    grid : bool, default True
        Whether to show axis grid lines.
    xlabelsize : int, default None
        If specified changes the x-axis label size.
    xrot : float, default None
        Rotation of x axis labels. For example, a value of 90 displays the
        x labels rotated 90 degrees clockwise.
    ylabelsize : int, default None
        If specified changes the y-axis label size.
    yrot : float, default None
        Rotation of y axis labels. For example, a value of 90 displays the
        y labels rotated 90 degrees clockwise.
    ax : Matplotlib axes object, default None
        The axes to plot the histogram on.
    sharex : bool, default True if ax is None else False
        In case subplots=True, share x axis and set some x axis labels to
        invisible; defaults to True if ax is None otherwise False if an ax
        is passed in.
        Note that passing in both an ax and sharex=True will alter all x axis
        labels for all subplots in a figure.
    sharey : bool, default False
        In case subplots=True, share y axis and set some y axis labels to
        invisible.
    figsize : tuple, optional
        The size in inches of the figure to create. Uses the value in
        `matplotlib.rcParams` by default.
    layout : tuple, optional
        Tuple of (rows, columns) for the layout of the histograms.
    bins : int or sequence, default 10
        Number of histogram bins to be used. If an integer is given, bins + 1
        bin edges are calculated and returned. If bins is a sequence, gives
        bin edges, including left edge of first bin and right edge of last
        bin. In this case, bins is returned unmodified.
    
    backend : str, default None
        Backend to use instead of the backend specified in the option
        ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
        specify the ``plotting.backend`` for the whole session, set
        ``pd.options.plotting.backend``.
    
    legend : bool, default False
        Whether to show the legend.
    
    **kwargs
        All other plotting keyword arguments to be passed to
        :meth:`matplotlib.pyplot.hist`.
    
    Returns
    -------
    matplotlib.AxesSubplot or numpy.ndarray of them
    
    See Also
    --------
    matplotlib.pyplot.hist : Plot a histogram using matplotlib.
    
    Examples
    --------
    This example draws a histogram based on the length and width of
    some animals, displayed in three bins
    
    .. plot::
        :context: close-figs
    
        >>> data = {'length': [1.5, 0.5, 1.2, 0.9, 3],
        ...         'width': [0.7, 0.2, 0.15, 0.2, 1.1]}
        >>> index = ['pig', 'rabbit', 'duck', 'chicken', 'horse']
        >>> df = pd.DataFrame(data, index=index)
        >>> hist = df.hist(bins=3)

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& iat &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on _iAtIndexer in module pandas.core.indexing object:

class _iAtIndexer(_ScalarAccessIndexer)
 |  Access a single value for a row/column pair by integer position.
 |  
 |  Similar to ``iloc``, in that both provide integer-based lookups. Use
 |  ``iat`` if you only need to get or set a single value in a DataFrame
 |  or Series.
 |  
 |  Raises
 |  ------
 |  IndexError
 |      When integer position is out of bounds.
 |  
 |  See Also
 |  --------
 |  DataFrame.at : Access a single value for a row/column label pair.
 |  DataFrame.loc : Access a group of rows and columns by label(s).
 |  DataFrame.iloc : Access a group of rows and columns by integer position(s).
 |  
 |  Examples
 |  --------
 |  >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
 |  ...                   columns=['A', 'B', 'C'])
 |  >>> df
 |      A   B   C
 |  0   0   2   3
 |  1   0   4   1
 |  2  10  20  30
 |  
 |  Get value at specified row/column pair
 |  
 |  >>> df.iat[1, 2]
 |  1
 |  
 |  Set value at specified row/column pair
 |  
 |  >>> df.iat[1, 2] = 10
 |  >>> df.iat[1, 2]
 |  10
 |  
 |  Get value within a series
 |  
 |  >>> df.loc[0].iat[1]
 |  2
 |  
 |  Method resolution order:
 |      _iAtIndexer
 |      _ScalarAccessIndexer
 |      pandas._libs.indexing.NDFrameIndexerBase
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _ScalarAccessIndexer:
 |  
 |  __getitem__(self, key)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _ScalarAccessIndexer:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from _ScalarAccessIndexer:
 |  
 |  __annotations__ = {'_takeable': 'bool'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__ = __reduce_cython__(...)
 |  
 |  __reduce_cython__(self)
 |  
 |  __setstate__ = __setstate_cython__(...)
 |  
 |  __setstate_cython__(self, __pyx_state)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  name
 |  
 |  ndim
 |  
 |  obj

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& idxmax &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method idxmax in module pandas.core.frame:

idxmax(axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -> 'Series' method of pandas.core.frame.DataFrame instance
    Return index of first occurrence of maximum over requested axis.
    
    NA/null values are excluded.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    numeric_only : bool, default False
        Include only `float`, `int` or `boolean` data.
    
        .. versionadded:: 1.5.0
    
    Returns
    -------
    Series
        Indexes of maxima along the specified axis.
    
    Raises
    ------
    ValueError
        * If the row/column is empty
    
    See Also
    --------
    Series.idxmax : Return index of the maximum element.
    
    Notes
    -----
    This method is the DataFrame version of ``ndarray.argmax``.
    
    Examples
    --------
    Consider a dataset containing food consumption in Argentina.
    
    >>> df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],
    ...                     'co2_emissions': [37.2, 19.66, 1712]},
    ...                   index=['Pork', 'Wheat Products', 'Beef'])
    
    >>> df
                    consumption  co2_emissions
    Pork                  10.51         37.20
    Wheat Products       103.11         19.66
    Beef                  55.48       1712.00
    
    By default, it returns the index for the maximum value in each column.
    
    >>> df.idxmax()
    consumption     Wheat Products
    co2_emissions             Beef
    dtype: object
    
    To return the index for the maximum value in each row, use ``axis="columns"``.
    
    >>> df.idxmax(axis="columns")
    Pork              co2_emissions
    Wheat Products     consumption
    Beef              co2_emissions
    dtype: object

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& idxmin &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method idxmin in module pandas.core.frame:

idxmin(axis: 'Axis' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False) -> 'Series' method of pandas.core.frame.DataFrame instance
    Return index of first occurrence of minimum over requested axis.
    
    NA/null values are excluded.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    numeric_only : bool, default False
        Include only `float`, `int` or `boolean` data.
    
        .. versionadded:: 1.5.0
    
    Returns
    -------
    Series
        Indexes of minima along the specified axis.
    
    Raises
    ------
    ValueError
        * If the row/column is empty
    
    See Also
    --------
    Series.idxmin : Return index of the minimum element.
    
    Notes
    -----
    This method is the DataFrame version of ``ndarray.argmin``.
    
    Examples
    --------
    Consider a dataset containing food consumption in Argentina.
    
    >>> df = pd.DataFrame({'consumption': [10.51, 103.11, 55.48],
    ...                     'co2_emissions': [37.2, 19.66, 1712]},
    ...                   index=['Pork', 'Wheat Products', 'Beef'])
    
    >>> df
                    consumption  co2_emissions
    Pork                  10.51         37.20
    Wheat Products       103.11         19.66
    Beef                  55.48       1712.00
    
    By default, it returns the index for the minimum value in each column.
    
    >>> df.idxmin()
    consumption                Pork
    co2_emissions    Wheat Products
    dtype: object
    
    To return the index for the minimum value in each row, use ``axis="columns"``.
    
    >>> df.idxmin(axis="columns")
    Pork                consumption
    Wheat Products    co2_emissions
    Beef                consumption
    dtype: object

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& iloc &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on _iLocIndexer in module pandas.core.indexing object:

class _iLocIndexer(_LocationIndexer)
 |  Purely integer-location based indexing for selection by position.
 |  
 |  .. deprecated:: 2.2.0
 |  
 |     Returning a tuple from a callable is deprecated.
 |  
 |  ``.iloc[]`` is primarily integer position based (from ``0`` to
 |  ``length-1`` of the axis), but may also be used with a boolean
 |  array.
 |  
 |  Allowed inputs are:
 |  
 |  - An integer, e.g. ``5``.
 |  - A list or array of integers, e.g. ``[4, 3, 0]``.
 |  - A slice object with ints, e.g. ``1:7``.
 |  - A boolean array.
 |  - A ``callable`` function with one argument (the calling Series or
 |    DataFrame) and that returns valid output for indexing (one of the above).
 |    This is useful in method chains, when you don't have a reference to the
 |    calling object, but would like to base your selection on
 |    some value.
 |  - A tuple of row and column indexes. The tuple elements consist of one of the
 |    above inputs, e.g. ``(0, 1)``.
 |  
 |  ``.iloc`` will raise ``IndexError`` if a requested indexer is
 |  out-of-bounds, except *slice* indexers which allow out-of-bounds
 |  indexing (this conforms with python/numpy *slice* semantics).
 |  
 |  See more at :ref:`Selection by Position <indexing.integer>`.
 |  
 |  See Also
 |  --------
 |  DataFrame.iat : Fast integer location scalar accessor.
 |  DataFrame.loc : Purely label-location based indexer for selection by label.
 |  Series.iloc : Purely integer-location based indexing for
 |                 selection by position.
 |  
 |  Examples
 |  --------
 |  >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},
 |  ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},
 |  ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000}]
 |  >>> df = pd.DataFrame(mydict)
 |  >>> df
 |        a     b     c     d
 |  0     1     2     3     4
 |  1   100   200   300   400
 |  2  1000  2000  3000  4000
 |  
 |  **Indexing just the rows**
 |  
 |  With a scalar integer.
 |  
 |  >>> type(df.iloc[0])
 |  <class 'pandas.core.series.Series'>
 |  >>> df.iloc[0]
 |  a    1
 |  b    2
 |  c    3
 |  d    4
 |  Name: 0, dtype: int64
 |  
 |  With a list of integers.
 |  
 |  >>> df.iloc[[0]]
 |     a  b  c  d
 |  0  1  2  3  4
 |  >>> type(df.iloc[[0]])
 |  <class 'pandas.core.frame.DataFrame'>
 |  
 |  >>> df.iloc[[0, 1]]
 |       a    b    c    d
 |  0    1    2    3    4
 |  1  100  200  300  400
 |  
 |  With a `slice` object.
 |  
 |  >>> df.iloc[:3]
 |        a     b     c     d
 |  0     1     2     3     4
 |  1   100   200   300   400
 |  2  1000  2000  3000  4000
 |  
 |  With a boolean mask the same length as the index.
 |  
 |  >>> df.iloc[[True, False, True]]
 |        a     b     c     d
 |  0     1     2     3     4
 |  2  1000  2000  3000  4000
 |  
 |  With a callable, useful in method chains. The `x` passed
 |  to the ``lambda`` is the DataFrame being sliced. This selects
 |  the rows whose index label even.
 |  
 |  >>> df.iloc[lambda x: x.index % 2 == 0]
 |        a     b     c     d
 |  0     1     2     3     4
 |  2  1000  2000  3000  4000
 |  
 |  **Indexing both axes**
 |  
 |  You can mix the indexer types for the index and columns. Use ``:`` to
 |  select the entire axis.
 |  
 |  With scalar integers.
 |  
 |  >>> df.iloc[0, 1]
 |  2
 |  
 |  With lists of integers.
 |  
 |  >>> df.iloc[[0, 2], [1, 3]]
 |        b     d
 |  0     2     4
 |  2  2000  4000
 |  
 |  With `slice` objects.
 |  
 |  >>> df.iloc[1:3, 0:3]
 |        a     b     c
 |  1   100   200   300
 |  2  1000  2000  3000
 |  
 |  With a boolean array whose length matches the columns.
 |  
 |  >>> df.iloc[:, [True, False, True, False]]
 |        a     c
 |  0     1     3
 |  1   100   300
 |  2  1000  3000
 |  
 |  With a callable function that expects the Series or DataFrame.
 |  
 |  >>> df.iloc[:, lambda df: [0, 2]]
 |        a     c
 |  0     1     3
 |  1   100   300
 |  2  1000  3000
 |  
 |  Method resolution order:
 |      _iLocIndexer
 |      _LocationIndexer
 |      pandas._libs.indexing.NDFrameIndexerBase
 |      builtins.object
 |  
 |  Methods inherited from _LocationIndexer:
 |  
 |  __call__(self, axis: 'Axis | None' = None) -> 'Self'
 |      Call self as a function.
 |  
 |  __getitem__(self, key)
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _LocationIndexer:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from _LocationIndexer:
 |  
 |  __annotations__ = {'_takeable': 'bool', '_valid_types': 'str', 'axis':...
 |  
 |  axis = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__ = __reduce_cython__(...)
 |  
 |  __reduce_cython__(self)
 |  
 |  __setstate__ = __setstate_cython__(...)
 |  
 |  __setstate_cython__(self, __pyx_state)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  name
 |  
 |  ndim
 |  
 |  obj

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on RangeIndex in module pandas.core.indexes.range object:

class RangeIndex(pandas.core.indexes.base.Index)
 |  RangeIndex(start=None, stop=None, step=None, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None) -> 'Self'
 |  
 |  Immutable Index implementing a monotonic integer range.
 |  
 |  RangeIndex is a memory-saving special case of an Index limited to representing
 |  monotonic ranges with a 64-bit dtype. Using RangeIndex may in some instances
 |  improve computing speed.
 |  
 |  This is the default index type used
 |  by DataFrame and Series when no explicit index is provided by the user.
 |  
 |  Parameters
 |  ----------
 |  start : int (default: 0), range, or other RangeIndex instance
 |      If int and "stop" is not given, interpreted as "stop" instead.
 |  stop : int (default: 0)
 |  step : int (default: 1)
 |  dtype : np.int64
 |      Unused, accepted for homogeneity with other index types.
 |  copy : bool, default False
 |      Unused, accepted for homogeneity with other index types.
 |  name : object, optional
 |      Name to be stored in the index.
 |  
 |  Attributes
 |  ----------
 |  start
 |  stop
 |  step
 |  
 |  Methods
 |  -------
 |  from_range
 |  
 |  See Also
 |  --------
 |  Index : The base pandas Index type.
 |  
 |  Examples
 |  --------
 |  >>> list(pd.RangeIndex(5))
 |  [0, 1, 2, 3, 4]
 |  
 |  >>> list(pd.RangeIndex(-2, 4))
 |  [-2, -1, 0, 1, 2, 3]
 |  
 |  >>> list(pd.RangeIndex(0, 10, 2))
 |  [0, 2, 4, 6, 8]
 |  
 |  >>> list(pd.RangeIndex(2, -10, -3))
 |  [2, -1, -4, -7]
 |  
 |  >>> list(pd.RangeIndex(0))
 |  []
 |  
 |  >>> list(pd.RangeIndex(1, 0))
 |  []
 |  
 |  Method resolution order:
 |      RangeIndex
 |      pandas.core.indexes.base.Index
 |      pandas.core.base.IndexOpsMixin
 |      pandas.core.arraylike.OpsMixin
 |      pandas.core.base.PandasObject
 |      pandas.core.accessor.DirNamesMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, key: 'Any') -> 'bool'
 |      Return a boolean indicating whether the provided key is in the index.
 |      
 |      Parameters
 |      ----------
 |      key : label
 |          The key to check if it is present in the index.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether the key search is in the index.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the key is not hashable.
 |      
 |      See Also
 |      --------
 |      Index.isin : Returns an ndarray of boolean dtype indicating whether the
 |          list-like key is in the index.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx
 |      Index([1, 2, 3, 4], dtype='int64')
 |      
 |      >>> 2 in idx
 |      True
 |      >>> 6 in idx
 |      False
 |  
 |  __floordiv__(self, other)
 |  
 |  __getitem__(self, key)
 |      Conserve RangeIndex type for scalar and slice keys.
 |  
 |  __iter__(self) -> 'Iterator[int]'
 |      Return an iterator of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      iterator
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> for x in s:
 |      ...     print(x)
 |      1
 |      2
 |      3
 |  
 |  __len__(self) -> 'int'
 |      return the length of the RangeIndex
 |  
 |  __reduce__(self)
 |      Helper for pickle.
 |  
 |  all(self, *args, **kwargs) -> 'bool'
 |      Return whether all elements are Truthy.
 |      
 |      Parameters
 |      ----------
 |      *args
 |          Required for compatibility with numpy.
 |      **kwargs
 |          Required for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      bool or array-like (if axis is specified)
 |          A single element array-like may be converted to bool.
 |      
 |      See Also
 |      --------
 |      Index.any : Return whether any element in an Index is True.
 |      Series.any : Return whether any element in a Series is True.
 |      Series.all : Return whether all elements in a Series are True.
 |      
 |      Notes
 |      -----
 |      Not a Number (NaN), positive infinity and negative infinity
 |      evaluate to True because these are not equal to zero.
 |      
 |      Examples
 |      --------
 |      True, because nonzero integers are considered True.
 |      
 |      >>> pd.Index([1, 2, 3]).all()
 |      True
 |      
 |      False, because ``0`` is considered False.
 |      
 |      >>> pd.Index([0, 1, 2]).all()
 |      False
 |  
 |  any(self, *args, **kwargs) -> 'bool'
 |      Return whether any element is Truthy.
 |      
 |      Parameters
 |      ----------
 |      *args
 |          Required for compatibility with numpy.
 |      **kwargs
 |          Required for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      bool or array-like (if axis is specified)
 |          A single element array-like may be converted to bool.
 |      
 |      See Also
 |      --------
 |      Index.all : Return whether all elements are True.
 |      Series.all : Return whether all elements are True.
 |      
 |      Notes
 |      -----
 |      Not a Number (NaN), positive infinity and negative infinity
 |      evaluate to True because these are not equal to zero.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index([0, 1, 2])
 |      >>> index.any()
 |      True
 |      
 |      >>> index = pd.Index([0, 0, 0])
 |      >>> index.any()
 |      False
 |  
 |  argsort(self, *args, **kwargs) -> 'npt.NDArray[np.intp]'
 |      Returns the indices that would sort the index and its
 |      underlying data.
 |      
 |      Returns
 |      -------
 |      np.ndarray[np.intp]
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.argsort
 |  
 |  copy(self, name: 'Hashable | None' = None, deep: 'bool' = False) -> 'Self'
 |      Make a copy of this object.
 |      
 |      Name is set on the new object.
 |      
 |      Parameters
 |      ----------
 |      name : Label, optional
 |          Set name for new object.
 |      deep : bool, default False
 |      
 |      Returns
 |      -------
 |      Index
 |          Index refer to new object which is a copy of this object.
 |      
 |      Notes
 |      -----
 |      In most cases, there should be no functional difference from using
 |      ``deep``, but if ``deep`` is passed it will attempt to deepcopy.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> new_idx = idx.copy()
 |      >>> idx is new_idx
 |      False
 |  
 |  delete(self, loc) -> 'Index'
 |      Make new Index with passed location(-s) deleted.
 |      
 |      Parameters
 |      ----------
 |      loc : int or list of int
 |          Location of item(-s) which will be deleted.
 |          Use a list of locations to delete more than one value at the same time.
 |      
 |      Returns
 |      -------
 |      Index
 |          Will be same type as self, except for RangeIndex.
 |      
 |      See Also
 |      --------
 |      numpy.delete : Delete any rows and column from NumPy array (ndarray).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.delete(1)
 |      Index(['a', 'c'], dtype='object')
 |      
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.delete([0, 2])
 |      Index(['b'], dtype='object')
 |  
 |  equals(self, other: 'object') -> 'bool'
 |      Determines if two Index objects contain the same elements.
 |  
 |  factorize(self, sort: 'bool' = False, use_na_sentinel: 'bool' = True) -> 'tuple[npt.NDArray[np.intp], RangeIndex]'
 |      Encode the object as an enumerated type or categorical variable.
 |      
 |      This method is useful for obtaining a numeric representation of an
 |      array when all that matters is identifying distinct values. `factorize`
 |      is available as both a top-level function :func:`pandas.factorize`,
 |      and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.
 |      
 |      Parameters
 |      ----------
 |      sort : bool, default False
 |          Sort `uniques` and shuffle `codes` to maintain the
 |          relationship.
 |      
 |      use_na_sentinel : bool, default True
 |          If True, the sentinel -1 will be used for NaN values. If False,
 |          NaN values will be encoded as non-negative integers and will not drop the
 |          NaN from the uniques of the values.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      codes : ndarray
 |          An integer ndarray that's an indexer into `uniques`.
 |          ``uniques.take(codes)`` will have the same values as `values`.
 |      uniques : ndarray, Index, or Categorical
 |          The unique valid values. When `values` is Categorical, `uniques`
 |          is a Categorical. When `values` is some other pandas object, an
 |          `Index` is returned. Otherwise, a 1-D ndarray is returned.
 |      
 |          .. note::
 |      
 |             Even if there's a missing value in `values`, `uniques` will
 |             *not* contain an entry for it.
 |      
 |      See Also
 |      --------
 |      cut : Discretize continuous-valued array.
 |      unique : Find the unique value in an array.
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.factorize>` for more examples.
 |      
 |      Examples
 |      --------
 |      These examples all show factorize as a top-level method like
 |      ``pd.factorize(values)``. The results are identical for methods like
 |      :meth:`Series.factorize`.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype="O"))
 |      >>> codes
 |      array([0, 0, 1, 2, 0])
 |      >>> uniques
 |      array(['b', 'a', 'c'], dtype=object)
 |      
 |      With ``sort=True``, the `uniques` will be sorted, and `codes` will be
 |      shuffled so that the relationship is the maintained.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype="O"),
 |      ...                               sort=True)
 |      >>> codes
 |      array([1, 1, 0, 2, 1])
 |      >>> uniques
 |      array(['a', 'b', 'c'], dtype=object)
 |      
 |      When ``use_na_sentinel=True`` (the default), missing values are indicated in
 |      the `codes` with the sentinel value ``-1`` and missing values are not
 |      included in `uniques`.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype="O"))
 |      >>> codes
 |      array([ 0, -1,  1,  2,  0])
 |      >>> uniques
 |      array(['b', 'a', 'c'], dtype=object)
 |      
 |      Thus far, we've only factorized lists (which are internally coerced to
 |      NumPy arrays). When factorizing pandas objects, the type of `uniques`
 |      will differ. For Categoricals, a `Categorical` is returned.
 |      
 |      >>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])
 |      >>> codes, uniques = pd.factorize(cat)
 |      >>> codes
 |      array([0, 0, 1])
 |      >>> uniques
 |      ['a', 'c']
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      Notice that ``'b'`` is in ``uniques.categories``, despite not being
 |      present in ``cat.values``.
 |      
 |      For all other pandas objects, an Index of the appropriate type is
 |      returned.
 |      
 |      >>> cat = pd.Series(['a', 'a', 'c'])
 |      >>> codes, uniques = pd.factorize(cat)
 |      >>> codes
 |      array([0, 0, 1])
 |      >>> uniques
 |      Index(['a', 'c'], dtype='object')
 |      
 |      If NaN is in the values, and we want to include NaN in the uniques of the
 |      values, it can be achieved by setting ``use_na_sentinel=False``.
 |      
 |      >>> values = np.array([1, 2, 1, np.nan])
 |      >>> codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True
 |      >>> codes
 |      array([ 0,  1,  0, -1])
 |      >>> uniques
 |      array([1., 2.])
 |      
 |      >>> codes, uniques = pd.factorize(values, use_na_sentinel=False)
 |      >>> codes
 |      array([0, 1, 0, 2])
 |      >>> uniques
 |      array([ 1.,  2., nan])
 |  
 |  get_loc(self, key) -> 'int'
 |      Get integer location, slice or boolean mask for requested label.
 |      
 |      Parameters
 |      ----------
 |      key : label
 |      
 |      Returns
 |      -------
 |      int if unique index, slice if monotonic index, else mask
 |      
 |      Examples
 |      --------
 |      >>> unique_index = pd.Index(list('abc'))
 |      >>> unique_index.get_loc('b')
 |      1
 |      
 |      >>> monotonic_index = pd.Index(list('abbc'))
 |      >>> monotonic_index.get_loc('b')
 |      slice(1, 3, None)
 |      
 |      >>> non_monotonic_index = pd.Index(list('abcb'))
 |      >>> non_monotonic_index.get_loc('b')
 |      array([False,  True, False,  True])
 |  
 |  insert(self, loc: 'int', item) -> 'Index'
 |      Make new Index inserting new item at location.
 |      
 |      Follows Python numpy.insert semantics for negative values.
 |      
 |      Parameters
 |      ----------
 |      loc : int
 |      item : object
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.insert(1, 'x')
 |      Index(['a', 'x', 'b', 'c'], dtype='object')
 |  
 |  max(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      The maximum value of the RangeIndex
 |  
 |  memory_usage(self, deep: 'bool' = False) -> 'int'
 |      Memory usage of my values
 |      
 |      Parameters
 |      ----------
 |      deep : bool
 |          Introspect the data deeply, interrogate
 |          `object` dtypes for system-level memory consumption
 |      
 |      Returns
 |      -------
 |      bytes used
 |      
 |      Notes
 |      -----
 |      Memory usage does not include memory consumed by elements that
 |      are not components of the array if deep=False
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.nbytes
 |  
 |  min(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      The minimum value of the RangeIndex
 |  
 |  sort_values(self, *, return_indexer: 'bool' = False, ascending: 'bool' = True, na_position: 'NaPosition' = 'last', key: 'Callable | None' = None) -> 'Self | tuple[Self, np.ndarray | RangeIndex]'
 |      Return a sorted copy of the index.
 |      
 |      Return a sorted copy of the index, and optionally return the indices
 |      that sorted the index itself.
 |      
 |      Parameters
 |      ----------
 |      return_indexer : bool, default False
 |          Should the indices that would sort the index be returned.
 |      ascending : bool, default True
 |          Should the index values be sorted in an ascending order.
 |      na_position : {'first' or 'last'}, default 'last'
 |          Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at
 |          the end.
 |      key : callable, optional
 |          If not None, apply the key function to the index values
 |          before sorting. This is similar to the `key` argument in the
 |          builtin :meth:`sorted` function, with the notable difference that
 |          this `key` function should be *vectorized*. It should expect an
 |          ``Index`` and return an ``Index`` of the same shape.
 |      
 |      Returns
 |      -------
 |      sorted_index : pandas.Index
 |          Sorted copy of the index.
 |      indexer : numpy.ndarray, optional
 |          The indices that the index itself was sorted by.
 |      
 |      See Also
 |      --------
 |      Series.sort_values : Sort values of a Series.
 |      DataFrame.sort_values : Sort values in a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([10, 100, 1, 1000])
 |      >>> idx
 |      Index([10, 100, 1, 1000], dtype='int64')
 |      
 |      Sort values in ascending order (default behavior).
 |      
 |      >>> idx.sort_values()
 |      Index([1, 10, 100, 1000], dtype='int64')
 |      
 |      Sort values in descending order, and also get the indices `idx` was
 |      sorted by.
 |      
 |      >>> idx.sort_values(ascending=False, return_indexer=True)
 |      (Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))
 |  
 |  symmetric_difference(self, other, result_name: 'Hashable | None' = None, sort=None)
 |      Compute the symmetric difference of two Index objects.
 |      
 |      Parameters
 |      ----------
 |      other : Index or array-like
 |      result_name : str
 |      sort : bool or None, default None
 |          Whether to sort the resulting index. By default, the
 |          values are attempted to be sorted, but any TypeError from
 |          incomparable elements is caught by pandas.
 |      
 |          * None : Attempt to sort the result, but catch any TypeErrors
 |            from comparing incomparable elements.
 |          * False : Do not sort the result.
 |          * True : Sort the result (which may raise TypeError).
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Notes
 |      -----
 |      ``symmetric_difference`` contains elements that appear in either
 |      ``idx1`` or ``idx2`` but not both. Equivalent to the Index created by
 |      ``idx1.difference(idx2) | idx2.difference(idx1)`` with duplicates
 |      dropped.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3, 4])
 |      >>> idx2 = pd.Index([2, 3, 4, 5])
 |      >>> idx1.symmetric_difference(idx2)
 |      Index([1, 5], dtype='int64')
 |  
 |  take(self, indices, axis: 'Axis' = 0, allow_fill: 'bool' = True, fill_value=None, **kwargs) -> 'Index'
 |      Return a new Index of the values selected by the indices.
 |      
 |      For internal compatibility with numpy arrays.
 |      
 |      Parameters
 |      ----------
 |      indices : array-like
 |          Indices to be taken.
 |      axis : int, optional
 |          The axis over which to select values, always 0.
 |      allow_fill : bool, default True
 |      fill_value : scalar, default None
 |          If allow_fill=True and fill_value is not None, indices specified by
 |          -1 are regarded as NA. If Index doesn't hold NA, raise ValueError.
 |      
 |      Returns
 |      -------
 |      Index
 |          An index formed of elements at the given indices. Will be the same
 |          type as self, except for RangeIndex.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.take: Return an array formed from the
 |          elements of a at the given indices.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.take([2, 2, 1, 2])
 |      Index(['c', 'c', 'b', 'c'], dtype='object')
 |  
 |  tolist(self) -> 'list[int]'
 |      Return a list of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      list
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.tolist : Return the array as an a.ndim-levels deep
 |          nested list of Python scalars.
 |      
 |      Examples
 |      --------
 |      For Series
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.to_list()
 |      [1, 2, 3]
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      
 |      >>> idx.to_list()
 |      [1, 2, 3]
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_range(data: 'range', name=None, dtype: 'Dtype | None' = None) -> 'Self' from builtins.type
 |      Create :class:`pandas.RangeIndex` from a ``range`` object.
 |      
 |      Returns
 |      -------
 |      RangeIndex
 |      
 |      Examples
 |      --------
 |      >>> pd.RangeIndex.from_range(range(5))
 |      RangeIndex(start=0, stop=5, step=1)
 |      
 |      >>> pd.RangeIndex.from_range(range(2, -10, -3))
 |      RangeIndex(start=2, stop=-10, step=-3)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(cls, start=None, stop=None, step=None, dtype: 'Dtype | None' = None, copy: 'bool' = False, name: 'Hashable | None' = None) -> 'Self'
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  dtype
 |      Return the dtype object of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.dtype
 |      dtype('int64')
 |  
 |  inferred_type
 |      Return a string of the type inferred from the values.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.inferred_type
 |      'integer'
 |  
 |  is_unique
 |      return if the index has unique values
 |  
 |  size
 |      Return the number of elements in the underlying data.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.size
 |      3
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.size
 |      3
 |  
 |  start
 |      The value of the `start` parameter (``0`` if this was not supplied).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.RangeIndex(5)
 |      >>> idx.start
 |      0
 |      
 |      >>> idx = pd.RangeIndex(2, -10, -3)
 |      >>> idx.start
 |      2
 |  
 |  step
 |      The value of the `step` parameter (``1`` if this was not supplied).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.RangeIndex(5)
 |      >>> idx.step
 |      1
 |      
 |      >>> idx = pd.RangeIndex(2, -10, -3)
 |      >>> idx.step
 |      -3
 |      
 |      Even if :class:`pandas.RangeIndex` is empty, ``step`` is still ``1`` if
 |      not supplied.
 |      
 |      >>> idx = pd.RangeIndex(1, 0)
 |      >>> idx.step
 |      1
 |  
 |  stop
 |      The value of the `stop` parameter.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.RangeIndex(5)
 |      >>> idx.stop
 |      5
 |      
 |      >>> idx = pd.RangeIndex(2, -10, -3)
 |      >>> idx.stop
 |      -10
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  is_monotonic_decreasing
 |  
 |  is_monotonic_increasing
 |  
 |  nbytes
 |      Return the number of bytes in the underlying data.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'_range': 'range', '_values': 'np.ndarray'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.indexes.base.Index:
 |  
 |  __abs__(self) -> 'Index'
 |  
 |  __array__(self, dtype=None, copy=None) -> 'np.ndarray'
 |      The array interface, return my values.
 |  
 |  __array_ufunc__(self, ufunc: 'np.ufunc', method: 'str_t', *inputs, **kwargs)
 |  
 |  __array_wrap__(self, result, context=None, return_scalar=False)
 |      Gets called after a ufunc and other functions e.g. np.split.
 |  
 |  __bool__ = __nonzero__(self) -> 'NoReturn'
 |  
 |  __copy__(self, **kwargs) -> 'Self'
 |  
 |  __deepcopy__(self, memo=None) -> 'Self'
 |      Parameters
 |      ----------
 |      memo, default None
 |          Standard signature. Unused
 |  
 |  __iadd__(self, other)
 |  
 |  __invert__(self) -> 'Index'
 |  
 |  __neg__(self) -> 'Index'
 |  
 |  __nonzero__(self) -> 'NoReturn'
 |  
 |  __pos__(self) -> 'Index'
 |  
 |  __repr__(self) -> 'str_t'
 |      Return a string representation for this object.
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  append(self, other: 'Index | Sequence[Index]') -> 'Index'
 |      Append a collection of Index options together.
 |      
 |      Parameters
 |      ----------
 |      other : Index or list/tuple of indices
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.append(pd.Index([4]))
 |      Index([1, 2, 3, 4], dtype='int64')
 |  
 |  argmax(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      Return int position of the largest value in the Series.
 |      
 |      If the maximum is achieved in multiple locations,
 |      the first row position is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      int
 |          Row position of the maximum value.
 |      
 |      See Also
 |      --------
 |      Series.argmax : Return position of the maximum value.
 |      Series.argmin : Return position of the minimum value.
 |      numpy.ndarray.argmax : Equivalent method for numpy arrays.
 |      Series.idxmax : Return index label of the maximum values.
 |      Series.idxmin : Return index label of the minimum values.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing cereal calories
 |      
 |      >>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,
 |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})
 |      >>> s
 |      Corn Flakes              100.0
 |      Almond Delight           110.0
 |      Cinnamon Toast Crunch    120.0
 |      Cocoa Puff               110.0
 |      dtype: float64
 |      
 |      >>> s.argmax()
 |      2
 |      >>> s.argmin()
 |      0
 |      
 |      The maximum cereal calories is the third element and
 |      the minimum cereal calories is the first element,
 |      since series is zero-indexed.
 |  
 |  argmin(self, axis=None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      Return int position of the smallest value in the Series.
 |      
 |      If the minimum is achieved in multiple locations,
 |      the first row position is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      int
 |          Row position of the minimum value.
 |      
 |      See Also
 |      --------
 |      Series.argmin : Return position of the minimum value.
 |      Series.argmax : Return position of the maximum value.
 |      numpy.ndarray.argmin : Equivalent method for numpy arrays.
 |      Series.idxmax : Return index label of the maximum values.
 |      Series.idxmin : Return index label of the minimum values.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing cereal calories
 |      
 |      >>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,
 |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})
 |      >>> s
 |      Corn Flakes              100.0
 |      Almond Delight           110.0
 |      Cinnamon Toast Crunch    120.0
 |      Cocoa Puff               110.0
 |      dtype: float64
 |      
 |      >>> s.argmax()
 |      2
 |      >>> s.argmin()
 |      0
 |      
 |      The maximum cereal calories is the third element and
 |      the minimum cereal calories is the first element,
 |      since series is zero-indexed.
 |  
 |  asof(self, label)
 |      Return the label from the index, or, if not present, the previous one.
 |      
 |      Assuming that the index is sorted, return the passed index label if it
 |      is in the index, or return the previous index label if the passed one
 |      is not in the index.
 |      
 |      Parameters
 |      ----------
 |      label : object
 |          The label up to which the method returns the latest index label.
 |      
 |      Returns
 |      -------
 |      object
 |          The passed label if it is in the index. The previous label if the
 |          passed label is not in the sorted index or `NaN` if there is no
 |          such label.
 |      
 |      See Also
 |      --------
 |      Series.asof : Return the latest value in a Series up to the
 |          passed index.
 |      merge_asof : Perform an asof merge (similar to left join but it
 |          matches on nearest key rather than equal key).
 |      Index.get_loc : An `asof` is a thin wrapper around `get_loc`
 |          with method='pad'.
 |      
 |      Examples
 |      --------
 |      `Index.asof` returns the latest index label up to the passed label.
 |      
 |      >>> idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])
 |      >>> idx.asof('2014-01-01')
 |      '2013-12-31'
 |      
 |      If the label is in the index, the method returns the passed label.
 |      
 |      >>> idx.asof('2014-01-02')
 |      '2014-01-02'
 |      
 |      If all of the labels in the index are later than the passed label,
 |      NaN is returned.
 |      
 |      >>> idx.asof('1999-01-02')
 |      nan
 |      
 |      If the index is not sorted, an error is raised.
 |      
 |      >>> idx_not_sorted = pd.Index(['2013-12-31', '2015-01-02',
 |      ...                            '2014-01-03'])
 |      >>> idx_not_sorted.asof('2013-12-31')
 |      Traceback (most recent call last):
 |      ValueError: index must be monotonic increasing or decreasing
 |  
 |  asof_locs(self, where: 'Index', mask: 'npt.NDArray[np.bool_]') -> 'npt.NDArray[np.intp]'
 |      Return the locations (indices) of labels in the index.
 |      
 |      As in the :meth:`pandas.Index.asof`, if the label (a particular entry in
 |      ``where``) is not in the index, the latest index label up to the
 |      passed label is chosen and its index returned.
 |      
 |      If all of the labels in the index are later than a label in ``where``,
 |      -1 is returned.
 |      
 |      ``mask`` is used to ignore ``NA`` values in the index during calculation.
 |      
 |      Parameters
 |      ----------
 |      where : Index
 |          An Index consisting of an array of timestamps.
 |      mask : np.ndarray[bool]
 |          Array of booleans denoting where values in the original
 |          data are not ``NA``.
 |      
 |      Returns
 |      -------
 |      np.ndarray[np.intp]
 |          An array of locations (indices) of the labels from the index
 |          which correspond to the return values of :meth:`pandas.Index.asof`
 |          for every element in ``where``.
 |      
 |      See Also
 |      --------
 |      Index.asof : Return the label from the index, or, if not present, the
 |          previous one.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.date_range('2023-06-01', periods=3, freq='D')
 |      >>> where = pd.DatetimeIndex(['2023-05-30 00:12:00', '2023-06-01 00:00:00',
 |      ...                           '2023-06-02 23:59:59'])
 |      >>> mask = np.ones(3, dtype=bool)
 |      >>> idx.asof_locs(where, mask)
 |      array([-1,  0,  1])
 |      
 |      We can use ``mask`` to ignore certain values in the index during calculation.
 |      
 |      >>> mask[1] = False
 |      >>> idx.asof_locs(where, mask)
 |      array([-1,  0,  0])
 |  
 |  astype(self, dtype, copy: 'bool' = True)
 |      Create an Index with values cast to dtypes.
 |      
 |      The class of a new Index is determined by dtype. When conversion is
 |      impossible, a TypeError exception is raised.
 |      
 |      Parameters
 |      ----------
 |      dtype : numpy dtype or pandas type
 |          Note that any signed integer `dtype` is treated as ``'int64'``,
 |          and any unsigned integer `dtype` is treated as ``'uint64'``,
 |          regardless of the size.
 |      copy : bool, default True
 |          By default, astype always returns a newly allocated object.
 |          If copy is set to False and internal requirements on dtype are
 |          satisfied, the original data is used to create a new Index
 |          or the original Index is returned.
 |      
 |      Returns
 |      -------
 |      Index
 |          Index with values cast to specified dtype.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.astype('float')
 |      Index([1.0, 2.0, 3.0], dtype='float64')
 |  
 |  diff(self, periods: 'int' = 1) -> 'Index'
 |      Computes the difference between consecutive values in the Index object.
 |      
 |      If periods is greater than 1, computes the difference between values that
 |      are `periods` number of positions apart.
 |      
 |      Parameters
 |      ----------
 |      periods : int, optional
 |          The number of positions between the current and previous
 |          value to compute the difference with. Default is 1.
 |      
 |      Returns
 |      -------
 |      Index
 |          A new Index object with the computed differences.
 |      
 |      Examples
 |      --------
 |      >>> import pandas as pd
 |      >>> idx = pd.Index([10, 20, 30, 40, 50])
 |      >>> idx.diff()
 |      Index([nan, 10.0, 10.0, 10.0, 10.0], dtype='float64')
 |  
 |  difference(self, other, sort=None)
 |      Return a new Index with elements of index not in `other`.
 |      
 |      This is the set difference of two Index objects.
 |      
 |      Parameters
 |      ----------
 |      other : Index or array-like
 |      sort : bool or None, default None
 |          Whether to sort the resulting index. By default, the
 |          values are attempted to be sorted, but any TypeError from
 |          incomparable elements is caught by pandas.
 |      
 |          * None : Attempt to sort the result, but catch any TypeErrors
 |            from comparing incomparable elements.
 |          * False : Do not sort the result.
 |          * True : Sort the result (which may raise TypeError).
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([2, 1, 3, 4])
 |      >>> idx2 = pd.Index([3, 4, 5, 6])
 |      >>> idx1.difference(idx2)
 |      Index([1, 2], dtype='int64')
 |      >>> idx1.difference(idx2, sort=False)
 |      Index([2, 1], dtype='int64')
 |  
 |  drop(self, labels: 'Index | np.ndarray | Iterable[Hashable]', errors: 'IgnoreRaise' = 'raise') -> 'Index'
 |      Make new Index with passed list of labels deleted.
 |      
 |      Parameters
 |      ----------
 |      labels : array-like or scalar
 |      errors : {'ignore', 'raise'}, default 'raise'
 |          If 'ignore', suppress error and existing labels are dropped.
 |      
 |      Returns
 |      -------
 |      Index
 |          Will be same type as self, except for RangeIndex.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If not all of the labels are found in the selected axis
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.drop(['a'])
 |      Index(['b', 'c'], dtype='object')
 |  
 |  drop_duplicates(self, *, keep: 'DropKeep' = 'first') -> 'Self'
 |      Return Index with duplicate values removed.
 |      
 |      Parameters
 |      ----------
 |      keep : {'first', 'last', ``False``}, default 'first'
 |          - 'first' : Drop duplicates except for the first occurrence.
 |          - 'last' : Drop duplicates except for the last occurrence.
 |          - ``False`` : Drop all duplicates.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      Series.drop_duplicates : Equivalent method on Series.
 |      DataFrame.drop_duplicates : Equivalent method on DataFrame.
 |      Index.duplicated : Related method on Index, indicating duplicate
 |          Index values.
 |      
 |      Examples
 |      --------
 |      Generate an pandas.Index with duplicate values.
 |      
 |      >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'])
 |      
 |      The `keep` parameter controls  which duplicate values are removed.
 |      The value 'first' keeps the first occurrence for each
 |      set of duplicated entries. The default value of keep is 'first'.
 |      
 |      >>> idx.drop_duplicates(keep='first')
 |      Index(['lama', 'cow', 'beetle', 'hippo'], dtype='object')
 |      
 |      The value 'last' keeps the last occurrence for each set of duplicated
 |      entries.
 |      
 |      >>> idx.drop_duplicates(keep='last')
 |      Index(['cow', 'beetle', 'lama', 'hippo'], dtype='object')
 |      
 |      The value ``False`` discards all sets of duplicated entries.
 |      
 |      >>> idx.drop_duplicates(keep=False)
 |      Index(['cow', 'beetle', 'hippo'], dtype='object')
 |  
 |  droplevel(self, level: 'IndexLabel' = 0)
 |      Return index with requested level(s) removed.
 |      
 |      If resulting index has only 1 level left, the result will be
 |      of Index type, not MultiIndex. The original index is not modified inplace.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, or list-like, default 0
 |          If a string is given, must be the name of a level
 |          If list-like, elements must be names or indexes of levels.
 |      
 |      Returns
 |      -------
 |      Index or MultiIndex
 |      
 |      Examples
 |      --------
 |      >>> mi = pd.MultiIndex.from_arrays(
 |      ... [[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])
 |      >>> mi
 |      MultiIndex([(1, 3, 5),
 |                  (2, 4, 6)],
 |                 names=['x', 'y', 'z'])
 |      
 |      >>> mi.droplevel()
 |      MultiIndex([(3, 5),
 |                  (4, 6)],
 |                 names=['y', 'z'])
 |      
 |      >>> mi.droplevel(2)
 |      MultiIndex([(1, 3),
 |                  (2, 4)],
 |                 names=['x', 'y'])
 |      
 |      >>> mi.droplevel('z')
 |      MultiIndex([(1, 3),
 |                  (2, 4)],
 |                 names=['x', 'y'])
 |      
 |      >>> mi.droplevel(['x', 'y'])
 |      Index([5, 6], dtype='int64', name='z')
 |  
 |  dropna(self, how: 'AnyAll' = 'any') -> 'Self'
 |      Return Index without NA/NaN values.
 |      
 |      Parameters
 |      ----------
 |      how : {'any', 'all'}, default 'any'
 |          If the Index is a MultiIndex, drop the value when any or all levels
 |          are NaN.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, np.nan, 3])
 |      >>> idx.dropna()
 |      Index([1.0, 3.0], dtype='float64')
 |  
 |  duplicated(self, keep: 'DropKeep' = 'first') -> 'npt.NDArray[np.bool_]'
 |      Indicate duplicate index values.
 |      
 |      Duplicated values are indicated as ``True`` values in the resulting
 |      array. Either all duplicates, all except the first, or all except the
 |      last occurrence of duplicates can be indicated.
 |      
 |      Parameters
 |      ----------
 |      keep : {'first', 'last', False}, default 'first'
 |          The value or values in a set of duplicates to mark as missing.
 |      
 |          - 'first' : Mark duplicates as ``True`` except for the first
 |            occurrence.
 |          - 'last' : Mark duplicates as ``True`` except for the last
 |            occurrence.
 |          - ``False`` : Mark all duplicates as ``True``.
 |      
 |      Returns
 |      -------
 |      np.ndarray[bool]
 |      
 |      See Also
 |      --------
 |      Series.duplicated : Equivalent method on pandas.Series.
 |      DataFrame.duplicated : Equivalent method on pandas.DataFrame.
 |      Index.drop_duplicates : Remove duplicate values from Index.
 |      
 |      Examples
 |      --------
 |      By default, for each set of duplicated values, the first occurrence is
 |      set to False and all others to True:
 |      
 |      >>> idx = pd.Index(['lama', 'cow', 'lama', 'beetle', 'lama'])
 |      >>> idx.duplicated()
 |      array([False, False,  True, False,  True])
 |      
 |      which is equivalent to
 |      
 |      >>> idx.duplicated(keep='first')
 |      array([False, False,  True, False,  True])
 |      
 |      By using 'last', the last occurrence of each set of duplicated values
 |      is set on False and all others on True:
 |      
 |      >>> idx.duplicated(keep='last')
 |      array([ True, False,  True, False, False])
 |      
 |      By setting keep on ``False``, all duplicates are True:
 |      
 |      >>> idx.duplicated(keep=False)
 |      array([ True, False,  True, False,  True])
 |  
 |  fillna(self, value=None, downcast=<no_default>)
 |      Fill NA/NaN values with the specified value.
 |      
 |      Parameters
 |      ----------
 |      value : scalar
 |          Scalar value to use to fill holes (e.g. 0).
 |          This value cannot be a list-likes.
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.1.0
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      DataFrame.fillna : Fill NaN values of a DataFrame.
 |      Series.fillna : Fill NaN Values of a Series.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([np.nan, np.nan, 3])
 |      >>> idx.fillna(0)
 |      Index([0.0, 0.0, 3.0], dtype='float64')
 |  
 |  format(self, name: 'bool' = False, formatter: 'Callable | None' = None, na_rep: 'str_t' = 'NaN') -> 'list[str_t]'
 |      Render a string representation of the Index.
 |  
 |  get_indexer(self, target, method: 'ReindexMethod | None' = None, limit: 'int | None' = None, tolerance=None) -> 'npt.NDArray[np.intp]'
 |      Compute indexer and mask for new index given the current index.
 |      
 |      The indexer should be then used as an input to ndarray.take to align the
 |      current data to the new index.
 |      
 |      Parameters
 |      ----------
 |      target : Index
 |      method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional
 |          * default: exact matches only.
 |          * pad / ffill: find the PREVIOUS index value if no exact match.
 |          * backfill / bfill: use NEXT index value if no exact match
 |          * nearest: use the NEAREST index value if no exact match. Tied
 |            distances are broken by preferring the larger index value.
 |      limit : int, optional
 |          Maximum number of consecutive labels in ``target`` to match for
 |          inexact matches.
 |      tolerance : optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations must
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      np.ndarray[np.intp]
 |          Integers from 0 to n - 1 indicating that the index at these
 |          positions matches the corresponding target values. Missing values
 |          in the target are marked by -1.
 |      
 |      Notes
 |      -----
 |      Returns -1 for unmatched values, for further explanation see the
 |      example below.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index(['c', 'a', 'b'])
 |      >>> index.get_indexer(['a', 'b', 'x'])
 |      array([ 1,  2, -1])
 |      
 |      Notice that the return value is an array of locations in ``index``
 |      and ``x`` is marked by -1, as it is not in ``index``.
 |  
 |  get_indexer_for(self, target) -> 'npt.NDArray[np.intp]'
 |      Guaranteed return of an indexer even when non-unique.
 |      
 |      This dispatches to get_indexer or get_indexer_non_unique
 |      as appropriate.
 |      
 |      Returns
 |      -------
 |      np.ndarray[np.intp]
 |          List of indices.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([np.nan, 'var1', np.nan])
 |      >>> idx.get_indexer_for([np.nan])
 |      array([0, 2])
 |  
 |  get_indexer_non_unique(self, target) -> 'tuple[npt.NDArray[np.intp], npt.NDArray[np.intp]]'
 |      Compute indexer and mask for new index given the current index.
 |      
 |      The indexer should be then used as an input to ndarray.take to align the
 |      current data to the new index.
 |      
 |      Parameters
 |      ----------
 |      target : Index
 |      
 |      Returns
 |      -------
 |      indexer : np.ndarray[np.intp]
 |          Integers from 0 to n - 1 indicating that the index at these
 |          positions matches the corresponding target values. Missing values
 |          in the target are marked by -1.
 |      missing : np.ndarray[np.intp]
 |          An indexer into the target of the values not found.
 |          These correspond to the -1 in the indexer array.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])
 |      >>> index.get_indexer_non_unique(['b', 'b'])
 |      (array([1, 3, 4, 1, 3, 4]), array([], dtype=int64))
 |      
 |      In the example below there are no matched values.
 |      
 |      >>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])
 |      >>> index.get_indexer_non_unique(['q', 'r', 't'])
 |      (array([-1, -1, -1]), array([0, 1, 2]))
 |      
 |      For this reason, the returned ``indexer`` contains only integers equal to -1.
 |      It demonstrates that there's no match between the index and the ``target``
 |      values at these positions. The mask [0, 1, 2] in the return value shows that
 |      the first, second, and third elements are missing.
 |      
 |      Notice that the return value is a tuple contains two items. In the example
 |      below the first item is an array of locations in ``index``. The second
 |      item is a mask shows that the first and third elements are missing.
 |      
 |      >>> index = pd.Index(['c', 'b', 'a', 'b', 'b'])
 |      >>> index.get_indexer_non_unique(['f', 'b', 's'])
 |      (array([-1,  1,  3,  4, -1]), array([0, 2]))
 |  
 |  get_level_values = _get_level_values(self, level) -> 'Index'
 |  
 |  get_slice_bound(self, label, side: "Literal['left', 'right']") -> 'int'
 |      Calculate slice bound that corresponds to given label.
 |      
 |      Returns leftmost (one-past-the-rightmost if ``side=='right'``) position
 |      of given label.
 |      
 |      Parameters
 |      ----------
 |      label : object
 |      side : {'left', 'right'}
 |      
 |      Returns
 |      -------
 |      int
 |          Index of label.
 |      
 |      See Also
 |      --------
 |      Index.get_loc : Get integer location, slice or boolean mask for requested
 |          label.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.RangeIndex(5)
 |      >>> idx.get_slice_bound(3, 'left')
 |      3
 |      
 |      >>> idx.get_slice_bound(3, 'right')
 |      4
 |      
 |      If ``label`` is non-unique in the index, an error will be raised.
 |      
 |      >>> idx_duplicate = pd.Index(['a', 'b', 'a', 'c', 'd'])
 |      >>> idx_duplicate.get_slice_bound('a', 'left')
 |      Traceback (most recent call last):
 |      KeyError: Cannot get left slice bound for non-unique label: 'a'
 |  
 |  groupby(self, values) -> 'PrettyDict[Hashable, np.ndarray]'
 |      Group the index labels by a given array of values.
 |      
 |      Parameters
 |      ----------
 |      values : array
 |          Values used to determine the groups.
 |      
 |      Returns
 |      -------
 |      dict
 |          {group name -> group labels}
 |  
 |  holds_integer(self) -> 'bool'
 |      Whether the type is an integer type.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.infer_dtype` instead
 |  
 |  identical(self, other) -> 'bool'
 |      Similar to equals, but checks that object attributes and types are also equal.
 |      
 |      Returns
 |      -------
 |      bool
 |          If two Index objects have equal elements and same type True,
 |          otherwise False.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index(['1', '2', '3'])
 |      >>> idx2 = pd.Index(['1', '2', '3'])
 |      >>> idx2.identical(idx1)
 |      True
 |      
 |      >>> idx1 = pd.Index(['1', '2', '3'], name="A")
 |      >>> idx2 = pd.Index(['1', '2', '3'], name="B")
 |      >>> idx2.identical(idx1)
 |      False
 |  
 |  infer_objects(self, copy: 'bool' = True) -> 'Index'
 |      If we have an object dtype, try to infer a non-object dtype.
 |      
 |      Parameters
 |      ----------
 |      copy : bool, default True
 |          Whether to make a copy in cases where no inference occurs.
 |  
 |  intersection(self, other, sort: 'bool' = False)
 |      Form the intersection of two Index objects.
 |      
 |      This returns a new Index with elements common to the index and `other`.
 |      
 |      Parameters
 |      ----------
 |      other : Index or array-like
 |      sort : True, False or None, default False
 |          Whether to sort the resulting index.
 |      
 |          * None : sort the result, except when `self` and `other` are equal
 |            or when the values cannot be compared.
 |          * False : do not sort the result.
 |          * True : Sort the result (which may raise TypeError).
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3, 4])
 |      >>> idx2 = pd.Index([3, 4, 5, 6])
 |      >>> idx1.intersection(idx2)
 |      Index([3, 4], dtype='int64')
 |  
 |  is_(self, other) -> 'bool'
 |      More flexible, faster check like ``is`` but that works through views.
 |      
 |      Note: this is *not* the same as ``Index.identical()``, which checks
 |      that metadata is also the same.
 |      
 |      Parameters
 |      ----------
 |      other : object
 |          Other object to compare against.
 |      
 |      Returns
 |      -------
 |      bool
 |          True if both have same underlying data, False otherwise.
 |      
 |      See Also
 |      --------
 |      Index.identical : Works like ``Index.is_`` but also checks metadata.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index(['1', '2', '3'])
 |      >>> idx1.is_(idx1.view())
 |      True
 |      
 |      >>> idx1.is_(idx1.copy())
 |      False
 |  
 |  is_boolean(self) -> 'bool'
 |      Check if the Index only consists of booleans.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.is_bool_dtype` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index only consists of booleans.
 |      
 |      See Also
 |      --------
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype (deprecated).
 |      is_categorical : Check if the Index holds categorical data.
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([True, False, True])
 |      >>> idx.is_boolean()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index(["True", "False", "True"])
 |      >>> idx.is_boolean()  # doctest: +SKIP
 |      False
 |      
 |      >>> idx = pd.Index([True, False, "True"])
 |      >>> idx.is_boolean()  # doctest: +SKIP
 |      False
 |  
 |  is_categorical(self) -> 'bool'
 |      Check if the Index holds categorical data.
 |      
 |      .. deprecated:: 2.0.0
 |            Use `isinstance(index.dtype, pd.CategoricalDtype)` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          True if the Index is categorical.
 |      
 |      See Also
 |      --------
 |      CategoricalIndex : Index for categorical data.
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(["Watermelon", "Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.is_categorical()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 3, 5, 7])
 |      >>> idx.is_categorical()  # doctest: +SKIP
 |      False
 |      
 |      >>> s = pd.Series(["Peter", "Victor", "Elisabeth", "Mar"])
 |      >>> s
 |      0        Peter
 |      1       Victor
 |      2    Elisabeth
 |      3          Mar
 |      dtype: object
 |      >>> s.index.is_categorical()  # doctest: +SKIP
 |      False
 |  
 |  is_floating(self) -> 'bool'
 |      Check if the Index is a floating type.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.is_float_dtype` instead
 |      
 |      The Index may consist of only floats, NaNs, or a mix of floats,
 |      integers, or NaNs.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index only consists of only consists of floats, NaNs, or
 |          a mix of floats, integers, or NaNs.
 |      
 |      See Also
 |      --------
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])
 |      >>> idx.is_floating()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1.0, 2.0, np.nan, 4.0])
 |      >>> idx.is_floating()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4, np.nan])
 |      >>> idx.is_floating()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx.is_floating()  # doctest: +SKIP
 |      False
 |  
 |  is_integer(self) -> 'bool'
 |      Check if the Index only consists of integers.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.is_integer_dtype` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index only consists of integers.
 |      
 |      See Also
 |      --------
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx.is_integer()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])
 |      >>> idx.is_integer()  # doctest: +SKIP
 |      False
 |      
 |      >>> idx = pd.Index(["Apple", "Mango", "Watermelon"])
 |      >>> idx.is_integer()  # doctest: +SKIP
 |      False
 |  
 |  is_interval(self) -> 'bool'
 |      Check if the Index holds Interval objects.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `isinstance(index.dtype, pd.IntervalDtype)` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index holds Interval objects.
 |      
 |      See Also
 |      --------
 |      IntervalIndex : Index for Interval objects.
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([pd.Interval(left=0, right=5),
 |      ...                 pd.Interval(left=5, right=10)])
 |      >>> idx.is_interval()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 3, 5, 7])
 |      >>> idx.is_interval()  # doctest: +SKIP
 |      False
 |  
 |  is_numeric(self) -> 'bool'
 |      Check if the Index only consists of numeric data.
 |      
 |      .. deprecated:: 2.0.0
 |          Use `pandas.api.types.is_numeric_dtype` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index only consists of numeric data.
 |      
 |      See Also
 |      --------
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_object : Check if the Index is of the object dtype. (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4.0])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4.0, np.nan])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index([1, 2, 3, 4.0, np.nan, "Apple"])
 |      >>> idx.is_numeric()  # doctest: +SKIP
 |      False
 |  
 |  is_object(self) -> 'bool'
 |      Check if the Index is of the object dtype.
 |      
 |      .. deprecated:: 2.0.0
 |         Use `pandas.api.types.is_object_dtype` instead.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index is of the object dtype.
 |      
 |      See Also
 |      --------
 |      is_boolean : Check if the Index only consists of booleans (deprecated).
 |      is_integer : Check if the Index only consists of integers (deprecated).
 |      is_floating : Check if the Index is a floating type (deprecated).
 |      is_numeric : Check if the Index only consists of numeric data (deprecated).
 |      is_categorical : Check if the Index holds categorical data (deprecated).
 |      is_interval : Check if the Index holds Interval objects (deprecated).
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(["Apple", "Mango", "Watermelon"])
 |      >>> idx.is_object()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index(["Apple", "Mango", 2.0])
 |      >>> idx.is_object()  # doctest: +SKIP
 |      True
 |      
 |      >>> idx = pd.Index(["Watermelon", "Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.is_object()  # doctest: +SKIP
 |      False
 |      
 |      >>> idx = pd.Index([1.0, 2.0, 3.0, 4.0])
 |      >>> idx.is_object()  # doctest: +SKIP
 |      False
 |  
 |  isin(self, values, level=None) -> 'npt.NDArray[np.bool_]'
 |      Return a boolean array where the index values are in `values`.
 |      
 |      Compute boolean array of whether each index value is found in the
 |      passed set of values. The length of the returned boolean array matches
 |      the length of the index.
 |      
 |      Parameters
 |      ----------
 |      values : set or list-like
 |          Sought values.
 |      level : str or int, optional
 |          Name or position of the index level to use (if the index is a
 |          `MultiIndex`).
 |      
 |      Returns
 |      -------
 |      np.ndarray[bool]
 |          NumPy array of boolean values.
 |      
 |      See Also
 |      --------
 |      Series.isin : Same for Series.
 |      DataFrame.isin : Same method for DataFrames.
 |      
 |      Notes
 |      -----
 |      In the case of `MultiIndex` you must either specify `values` as a
 |      list-like object containing tuples that are the same length as the
 |      number of levels, or specify `level`. Otherwise it will raise a
 |      ``ValueError``.
 |      
 |      If `level` is specified:
 |      
 |      - if it is the name of one *and only one* index level, use that level;
 |      - otherwise it should be a number indicating level position.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1,2,3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      
 |      Check whether each index value in a list of values.
 |      
 |      >>> idx.isin([1, 4])
 |      array([ True, False, False])
 |      
 |      >>> midx = pd.MultiIndex.from_arrays([[1,2,3],
 |      ...                                  ['red', 'blue', 'green']],
 |      ...                                  names=('number', 'color'))
 |      >>> midx
 |      MultiIndex([(1,   'red'),
 |                  (2,  'blue'),
 |                  (3, 'green')],
 |                 names=['number', 'color'])
 |      
 |      Check whether the strings in the 'color' level of the MultiIndex
 |      are in a list of colors.
 |      
 |      >>> midx.isin(['red', 'orange', 'yellow'], level='color')
 |      array([ True, False, False])
 |      
 |      To check across the levels of a MultiIndex, pass a list of tuples:
 |      
 |      >>> midx.isin([(1, 'red'), (3, 'red')])
 |      array([ True, False, False])
 |  
 |  isna(self) -> 'npt.NDArray[np.bool_]'
 |      Detect missing values.
 |      
 |      Return a boolean same-sized object indicating if the values are NA.
 |      NA values, such as ``None``, :attr:`numpy.NaN` or :attr:`pd.NaT`, get
 |      mapped to ``True`` values.
 |      Everything else get mapped to ``False`` values. Characters such as
 |      empty strings `''` or :attr:`numpy.inf` are not considered NA values.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray[bool]
 |          A boolean array of whether my values are NA.
 |      
 |      See Also
 |      --------
 |      Index.notna : Boolean inverse of isna.
 |      Index.dropna : Omit entries with missing values.
 |      isna : Top-level isna.
 |      Series.isna : Detect missing values in Series object.
 |      
 |      Examples
 |      --------
 |      Show which entries in a pandas.Index are NA. The result is an
 |      array.
 |      
 |      >>> idx = pd.Index([5.2, 6.0, np.nan])
 |      >>> idx
 |      Index([5.2, 6.0, nan], dtype='float64')
 |      >>> idx.isna()
 |      array([False, False,  True])
 |      
 |      Empty strings are not considered NA values. None is considered an NA
 |      value.
 |      
 |      >>> idx = pd.Index(['black', '', 'red', None])
 |      >>> idx
 |      Index(['black', '', 'red', None], dtype='object')
 |      >>> idx.isna()
 |      array([False, False, False,  True])
 |      
 |      For datetimes, `NaT` (Not a Time) is considered as an NA value.
 |      
 |      >>> idx = pd.DatetimeIndex([pd.Timestamp('1940-04-25'),
 |      ...                         pd.Timestamp(''), None, pd.NaT])
 |      >>> idx
 |      DatetimeIndex(['1940-04-25', 'NaT', 'NaT', 'NaT'],
 |                    dtype='datetime64[ns]', freq=None)
 |      >>> idx.isna()
 |      array([False,  True,  True,  True])
 |  
 |  isnull = isna(self) -> 'npt.NDArray[np.bool_]'
 |  
 |  join(self, other: 'Index', *, how: 'JoinHow' = 'left', level: 'Level | None' = None, return_indexers: 'bool' = False, sort: 'bool' = False) -> 'Index | tuple[Index, npt.NDArray[np.intp] | None, npt.NDArray[np.intp] | None]'
 |      Compute join_index and indexers to conform data structures to the new index.
 |      
 |      Parameters
 |      ----------
 |      other : Index
 |      how : {'left', 'right', 'inner', 'outer'}
 |      level : int or level name, default None
 |      return_indexers : bool, default False
 |      sort : bool, default False
 |          Sort the join keys lexicographically in the result Index. If False,
 |          the order of the join keys depends on the join type (how keyword).
 |      
 |      Returns
 |      -------
 |      join_index, (left_indexer, right_indexer)
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3])
 |      >>> idx2 = pd.Index([4, 5, 6])
 |      >>> idx1.join(idx2, how='outer')
 |      Index([1, 2, 3, 4, 5, 6], dtype='int64')
 |  
 |  map(self, mapper, na_action: "Literal['ignore'] | None" = None)
 |      Map values using an input mapping or function.
 |      
 |      Parameters
 |      ----------
 |      mapper : function, dict, or Series
 |          Mapping correspondence.
 |      na_action : {None, 'ignore'}
 |          If 'ignore', propagate NA values, without passing them to the
 |          mapping correspondence.
 |      
 |      Returns
 |      -------
 |      Union[Index, MultiIndex]
 |          The output of the mapping function applied to the index.
 |          If the function returns a tuple with more than one element
 |          a MultiIndex will be returned.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.map({1: 'a', 2: 'b', 3: 'c'})
 |      Index(['a', 'b', 'c'], dtype='object')
 |      
 |      Using `map` with a function:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.map('I am a {}'.format)
 |      Index(['I am a 1', 'I am a 2', 'I am a 3'], dtype='object')
 |      
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx.map(lambda x: x.upper())
 |      Index(['A', 'B', 'C'], dtype='object')
 |  
 |  notna(self) -> 'npt.NDArray[np.bool_]'
 |      Detect existing (non-missing) values.
 |      
 |      Return a boolean same-sized object indicating if the values are not NA.
 |      Non-missing values get mapped to ``True``. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values.
 |      NA values, such as None or :attr:`numpy.NaN`, get mapped to ``False``
 |      values.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray[bool]
 |          Boolean array to indicate which entries are not NA.
 |      
 |      See Also
 |      --------
 |      Index.notnull : Alias of notna.
 |      Index.isna: Inverse of notna.
 |      notna : Top-level notna.
 |      
 |      Examples
 |      --------
 |      Show which entries in an Index are not NA. The result is an
 |      array.
 |      
 |      >>> idx = pd.Index([5.2, 6.0, np.nan])
 |      >>> idx
 |      Index([5.2, 6.0, nan], dtype='float64')
 |      >>> idx.notna()
 |      array([ True,  True, False])
 |      
 |      Empty strings are not considered NA values. None is considered a NA
 |      value.
 |      
 |      >>> idx = pd.Index(['black', '', 'red', None])
 |      >>> idx
 |      Index(['black', '', 'red', None], dtype='object')
 |      >>> idx.notna()
 |      array([ True,  True,  True, False])
 |  
 |  notnull = notna(self) -> 'npt.NDArray[np.bool_]'
 |  
 |  putmask(self, mask, value) -> 'Index'
 |      Return a new Index of the values set with the mask.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.putmask : Changes elements of an array
 |          based on conditional and input values.
 |      
 |      Examples
 |      --------
 |      >>> idx1 = pd.Index([1, 2, 3])
 |      >>> idx2 = pd.Index([5, 6, 7])
 |      >>> idx1.putmask([True, False, False], idx2)
 |      Index([5, 2, 3], dtype='int64')
 |  
 |  ravel(self, order: 'str_t' = 'C') -> 'Self'
 |      Return a view on self.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.ravel : Return a flattened array.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3], index=['a', 'b', 'c'])
 |      >>> s.index.ravel()
 |      Index(['a', 'b', 'c'], dtype='object')
 |  
 |  reindex(self, target, method: 'ReindexMethod | None' = None, level=None, limit: 'int | None' = None, tolerance: 'float | None' = None) -> 'tuple[Index, npt.NDArray[np.intp] | None]'
 |      Create index with target's values.
 |      
 |      Parameters
 |      ----------
 |      target : an iterable
 |      method : {None, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'}, optional
 |          * default: exact matches only.
 |          * pad / ffill: find the PREVIOUS index value if no exact match.
 |          * backfill / bfill: use NEXT index value if no exact match
 |          * nearest: use the NEAREST index value if no exact match. Tied
 |            distances are broken by preferring the larger index value.
 |      level : int, optional
 |          Level of multiindex.
 |      limit : int, optional
 |          Maximum number of consecutive labels in ``target`` to match for
 |          inexact matches.
 |      tolerance : int or float, optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations must
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      new_index : pd.Index
 |          Resulting index.
 |      indexer : np.ndarray[np.intp] or None
 |          Indices of output values in original index.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If ``method`` passed along with ``level``.
 |      ValueError
 |          If non-unique multi-index
 |      ValueError
 |          If non-unique index and ``method`` or ``limit`` passed.
 |      
 |      See Also
 |      --------
 |      Series.reindex : Conform Series to new index with optional filling logic.
 |      DataFrame.reindex : Conform DataFrame to new index with optional filling logic.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])
 |      >>> idx
 |      Index(['car', 'bike', 'train', 'tractor'], dtype='object')
 |      >>> idx.reindex(['car', 'bike'])
 |      (Index(['car', 'bike'], dtype='object'), array([0, 1]))
 |  
 |  rename(self, name, *, inplace: 'bool' = False) -> 'Self | None'
 |      Alter Index or MultiIndex name.
 |      
 |      Able to set new names without level. Defaults to returning new index.
 |      Length of names must match number of levels in MultiIndex.
 |      
 |      Parameters
 |      ----------
 |      name : label or list of labels
 |          Name(s) to set.
 |      inplace : bool, default False
 |          Modifies the object directly, instead of creating a new Index or
 |          MultiIndex.
 |      
 |      Returns
 |      -------
 |      Index or None
 |          The same type as the caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Index.set_names : Able to set new names partially and by level.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['A', 'C', 'A', 'B'], name='score')
 |      >>> idx.rename('grade')
 |      Index(['A', 'C', 'A', 'B'], dtype='object', name='grade')
 |      
 |      >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],
 |      ...                                   [2018, 2019]],
 |      ...                                   names=['kind', 'year'])
 |      >>> idx
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 names=['kind', 'year'])
 |      >>> idx.rename(['species', 'year'])
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 names=['species', 'year'])
 |      >>> idx.rename('species')
 |      Traceback (most recent call last):
 |      TypeError: Must pass list-like as `names`.
 |  
 |  repeat(self, repeats, axis: 'None' = None) -> 'Self'
 |      Repeat elements of a Index.
 |      
 |      Returns a new Index where each element of the current Index
 |      is repeated consecutively a given number of times.
 |      
 |      Parameters
 |      ----------
 |      repeats : int or array of ints
 |          The number of repetitions for each element. This should be a
 |          non-negative integer. Repeating 0 times will return an empty
 |          Index.
 |      axis : None
 |          Must be ``None``. Has no effect but is accepted for compatibility
 |          with numpy.
 |      
 |      Returns
 |      -------
 |      Index
 |          Newly created Index with repeated elements.
 |      
 |      See Also
 |      --------
 |      Series.repeat : Equivalent function for Series.
 |      numpy.repeat : Similar method for :class:`numpy.ndarray`.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['a', 'b', 'c'])
 |      >>> idx
 |      Index(['a', 'b', 'c'], dtype='object')
 |      >>> idx.repeat(2)
 |      Index(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object')
 |      >>> idx.repeat([1, 2, 3])
 |      Index(['a', 'b', 'b', 'c', 'c', 'c'], dtype='object')
 |  
 |  round(self, decimals: 'int' = 0) -> 'Self'
 |      Round each value in the Index to the given number of decimals.
 |      
 |      Parameters
 |      ----------
 |      decimals : int, optional
 |          Number of decimal places to round to. If decimals is negative,
 |          it specifies the number of positions to the left of the decimal point.
 |      
 |      Returns
 |      -------
 |      Index
 |          A new Index with the rounded values.
 |      
 |      Examples
 |      --------
 |      >>> import pandas as pd
 |      >>> idx = pd.Index([10.1234, 20.5678, 30.9123, 40.4567, 50.7890])
 |      >>> idx.round(decimals=2)
 |      Index([10.12, 20.57, 30.91, 40.46, 50.79], dtype='float64')
 |  
 |  set_names(self, names, *, level=None, inplace: 'bool' = False) -> 'Self | None'
 |      Set Index or MultiIndex name.
 |      
 |      Able to set new names partially and by level.
 |      
 |      Parameters
 |      ----------
 |      
 |      names : label or list of label or dict-like for MultiIndex
 |          Name(s) to set.
 |      
 |          .. versionchanged:: 1.3.0
 |      
 |      level : int, label or list of int or label, optional
 |          If the index is a MultiIndex and names is not dict-like, level(s) to set
 |          (None for all levels). Otherwise level must be None.
 |      
 |          .. versionchanged:: 1.3.0
 |      
 |      inplace : bool, default False
 |          Modifies the object directly, instead of creating a new Index or
 |          MultiIndex.
 |      
 |      Returns
 |      -------
 |      Index or None
 |          The same type as the caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Index.rename : Able to set new names without level.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3, 4])
 |      >>> idx
 |      Index([1, 2, 3, 4], dtype='int64')
 |      >>> idx.set_names('quarter')
 |      Index([1, 2, 3, 4], dtype='int64', name='quarter')
 |      
 |      >>> idx = pd.MultiIndex.from_product([['python', 'cobra'],
 |      ...                                   [2018, 2019]])
 |      >>> idx
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 )
 |      >>> idx = idx.set_names(['kind', 'year'])
 |      >>> idx.set_names('species', level=0)
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 names=['species', 'year'])
 |      
 |      When renaming levels with a dict, levels can not be passed.
 |      
 |      >>> idx.set_names({'kind': 'snake'})
 |      MultiIndex([('python', 2018),
 |                  ('python', 2019),
 |                  ( 'cobra', 2018),
 |                  ( 'cobra', 2019)],
 |                 names=['snake', 'year'])
 |  
 |  shift(self, periods: 'int' = 1, freq=None)
 |      Shift index by desired number of time frequency increments.
 |      
 |      This method is for shifting the values of datetime-like indexes
 |      by a specified time increment a given number of times.
 |      
 |      Parameters
 |      ----------
 |      periods : int, default 1
 |          Number of periods (or increments) to shift by,
 |          can be positive or negative.
 |      freq : pandas.DateOffset, pandas.Timedelta or str, optional
 |          Frequency increment to shift by.
 |          If None, the index is shifted by its own `freq` attribute.
 |          Offset aliases are valid strings, e.g., 'D', 'W', 'M' etc.
 |      
 |      Returns
 |      -------
 |      pandas.Index
 |          Shifted index.
 |      
 |      See Also
 |      --------
 |      Series.shift : Shift values of Series.
 |      
 |      Notes
 |      -----
 |      This method is only implemented for datetime-like index classes,
 |      i.e., DatetimeIndex, PeriodIndex and TimedeltaIndex.
 |      
 |      Examples
 |      --------
 |      Put the first 5 month starts of 2011 into an index.
 |      
 |      >>> month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')
 |      >>> month_starts
 |      DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01', '2011-04-01',
 |                     '2011-05-01'],
 |                    dtype='datetime64[ns]', freq='MS')
 |      
 |      Shift the index by 10 days.
 |      
 |      >>> month_starts.shift(10, freq='D')
 |      DatetimeIndex(['2011-01-11', '2011-02-11', '2011-03-11', '2011-04-11',
 |                     '2011-05-11'],
 |                    dtype='datetime64[ns]', freq=None)
 |      
 |      The default value of `freq` is the `freq` attribute of the index,
 |      which is 'MS' (month start) in this example.
 |      
 |      >>> month_starts.shift(10)
 |      DatetimeIndex(['2011-11-01', '2011-12-01', '2012-01-01', '2012-02-01',
 |                     '2012-03-01'],
 |                    dtype='datetime64[ns]', freq='MS')
 |  
 |  slice_indexer(self, start: 'Hashable | None' = None, end: 'Hashable | None' = None, step: 'int | None' = None) -> 'slice'
 |      Compute the slice indexer for input labels and step.
 |      
 |      Index needs to be ordered and unique.
 |      
 |      Parameters
 |      ----------
 |      start : label, default None
 |          If None, defaults to the beginning.
 |      end : label, default None
 |          If None, defaults to the end.
 |      step : int, default None
 |      
 |      Returns
 |      -------
 |      slice
 |      
 |      Raises
 |      ------
 |      KeyError : If key does not exist, or key is not unique and index is
 |          not ordered.
 |      
 |      Notes
 |      -----
 |      This function assumes that the data is sorted, so use at your own peril
 |      
 |      Examples
 |      --------
 |      This is a method on all index types. For example you can do:
 |      
 |      >>> idx = pd.Index(list('abcd'))
 |      >>> idx.slice_indexer(start='b', end='c')
 |      slice(1, 3, None)
 |      
 |      >>> idx = pd.MultiIndex.from_arrays([list('abcd'), list('efgh')])
 |      >>> idx.slice_indexer(start='b', end=('c', 'g'))
 |      slice(1, 3, None)
 |  
 |  slice_locs(self, start=None, end=None, step=None) -> 'tuple[int, int]'
 |      Compute slice locations for input labels.
 |      
 |      Parameters
 |      ----------
 |      start : label, default None
 |          If None, defaults to the beginning.
 |      end : label, default None
 |          If None, defaults to the end.
 |      step : int, defaults None
 |          If None, defaults to 1.
 |      
 |      Returns
 |      -------
 |      tuple[int, int]
 |      
 |      See Also
 |      --------
 |      Index.get_loc : Get location for a single label.
 |      
 |      Notes
 |      -----
 |      This method only works if the index is monotonic or unique.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(list('abcd'))
 |      >>> idx.slice_locs(start='b', end='c')
 |      (1, 3)
 |  
 |  sort(self, *args, **kwargs)
 |      Use sort_values instead.
 |  
 |  sortlevel(self, level=None, ascending: 'bool | list[bool]' = True, sort_remaining=None, na_position: 'NaPosition' = 'first')
 |      For internal compatibility with the Index API.
 |      
 |      Sort the Index. This is for compat with MultiIndex
 |      
 |      Parameters
 |      ----------
 |      ascending : bool, default True
 |          False to sort in descending order
 |      na_position : {'first' or 'last'}, default 'first'
 |          Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at
 |          the end.
 |      
 |          .. versionadded:: 2.1.0
 |      
 |      level, sort_remaining are compat parameters
 |      
 |      Returns
 |      -------
 |      Index
 |  
 |  to_flat_index(self) -> 'Self'
 |      Identity method.
 |      
 |      This is implemented for compatibility with subclass implementations
 |      when chaining.
 |      
 |      Returns
 |      -------
 |      pd.Index
 |          Caller.
 |      
 |      See Also
 |      --------
 |      MultiIndex.to_flat_index : Subclass implementation.
 |  
 |  to_frame(self, index: 'bool' = True, name: 'Hashable' = <no_default>) -> 'DataFrame'
 |      Create a DataFrame with a column containing the Index.
 |      
 |      Parameters
 |      ----------
 |      index : bool, default True
 |          Set the index of the returned DataFrame as the original Index.
 |      
 |      name : object, defaults to index.name
 |          The passed name should substitute for the index name (if it has
 |          one).
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          DataFrame containing the original Index data.
 |      
 |      See Also
 |      --------
 |      Index.to_series : Convert an Index to a Series.
 |      Series.to_frame : Convert Series to DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')
 |      >>> idx.to_frame()
 |             animal
 |      animal
 |      Ant       Ant
 |      Bear     Bear
 |      Cow       Cow
 |      
 |      By default, the original Index is reused. To enforce a new Index:
 |      
 |      >>> idx.to_frame(index=False)
 |          animal
 |      0   Ant
 |      1  Bear
 |      2   Cow
 |      
 |      To override the name of the resulting column, specify `name`:
 |      
 |      >>> idx.to_frame(index=False, name='zoo')
 |          zoo
 |      0   Ant
 |      1  Bear
 |      2   Cow
 |  
 |  to_series(self, index=None, name: 'Hashable | None' = None) -> 'Series'
 |      Create a Series with both index and values equal to the index keys.
 |      
 |      Useful with map for returning an indexer based on an index.
 |      
 |      Parameters
 |      ----------
 |      index : Index, optional
 |          Index of resulting Series. If None, defaults to original index.
 |      name : str, optional
 |          Name of resulting Series. If None, defaults to name of original
 |          index.
 |      
 |      Returns
 |      -------
 |      Series
 |          The dtype will be based on the type of the Index values.
 |      
 |      See Also
 |      --------
 |      Index.to_frame : Convert an Index to a DataFrame.
 |      Series.to_frame : Convert Series to DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')
 |      
 |      By default, the original index and original name is reused.
 |      
 |      >>> idx.to_series()
 |      animal
 |      Ant      Ant
 |      Bear    Bear
 |      Cow      Cow
 |      Name: animal, dtype: object
 |      
 |      To enforce a new index, specify new labels to ``index``:
 |      
 |      >>> idx.to_series(index=[0, 1, 2])
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      Name: animal, dtype: object
 |      
 |      To override the name of the resulting column, specify ``name``:
 |      
 |      >>> idx.to_series(name='zoo')
 |      animal
 |      Ant      Ant
 |      Bear    Bear
 |      Cow      Cow
 |      Name: zoo, dtype: object
 |  
 |  union(self, other, sort=None)
 |      Form the union of two Index objects.
 |      
 |      If the Index objects are incompatible, both Index objects will be
 |      cast to dtype('object') first.
 |      
 |      Parameters
 |      ----------
 |      other : Index or array-like
 |      sort : bool or None, default None
 |          Whether to sort the resulting Index.
 |      
 |          * None : Sort the result, except when
 |      
 |            1. `self` and `other` are equal.
 |            2. `self` or `other` has length 0.
 |            3. Some values in `self` or `other` cannot be compared.
 |               A RuntimeWarning is issued in this case.
 |      
 |          * False : do not sort the result.
 |          * True : Sort the result (which may raise TypeError).
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      Examples
 |      --------
 |      Union matching dtypes
 |      
 |      >>> idx1 = pd.Index([1, 2, 3, 4])
 |      >>> idx2 = pd.Index([3, 4, 5, 6])
 |      >>> idx1.union(idx2)
 |      Index([1, 2, 3, 4, 5, 6], dtype='int64')
 |      
 |      Union mismatched dtypes
 |      
 |      >>> idx1 = pd.Index(['a', 'b', 'c', 'd'])
 |      >>> idx2 = pd.Index([1, 2, 3, 4])
 |      >>> idx1.union(idx2)
 |      Index(['a', 'b', 'c', 'd', 1, 2, 3, 4], dtype='object')
 |      
 |      MultiIndex case
 |      
 |      >>> idx1 = pd.MultiIndex.from_arrays(
 |      ...     [[1, 1, 2, 2], ["Red", "Blue", "Red", "Blue"]]
 |      ... )
 |      >>> idx1
 |      MultiIndex([(1,  'Red'),
 |          (1, 'Blue'),
 |          (2,  'Red'),
 |          (2, 'Blue')],
 |         )
 |      >>> idx2 = pd.MultiIndex.from_arrays(
 |      ...     [[3, 3, 2, 2], ["Red", "Green", "Red", "Green"]]
 |      ... )
 |      >>> idx2
 |      MultiIndex([(3,   'Red'),
 |          (3, 'Green'),
 |          (2,   'Red'),
 |          (2, 'Green')],
 |         )
 |      >>> idx1.union(idx2)
 |      MultiIndex([(1,  'Blue'),
 |          (1,   'Red'),
 |          (2,  'Blue'),
 |          (2, 'Green'),
 |          (2,   'Red'),
 |          (3, 'Green'),
 |          (3,   'Red')],
 |         )
 |      >>> idx1.union(idx2, sort=False)
 |      MultiIndex([(1,   'Red'),
 |          (1,  'Blue'),
 |          (2,   'Red'),
 |          (2,  'Blue'),
 |          (3,   'Red'),
 |          (3, 'Green'),
 |          (2, 'Green')],
 |         )
 |  
 |  unique(self, level: 'Hashable | None' = None) -> 'Self'
 |      Return unique values in the index.
 |      
 |      Unique values are returned in order of appearance, this does NOT sort.
 |      
 |      Parameters
 |      ----------
 |      level : int or hashable, optional
 |          Only return values from specified level (for MultiIndex).
 |          If int, gets the level by integer position, else by level name.
 |      
 |      Returns
 |      -------
 |      Index
 |      
 |      See Also
 |      --------
 |      unique : Numpy array of unique values in that column.
 |      Series.unique : Return unique values of Series object.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 1, 2, 3, 3])
 |      >>> idx.unique()
 |      Index([1, 2, 3], dtype='int64')
 |  
 |  view(self, cls=None)
 |  
 |  where(self, cond, other=None) -> 'Index'
 |      Replace values where the condition is False.
 |      
 |      The replacement is taken from other.
 |      
 |      Parameters
 |      ----------
 |      cond : bool array-like with the same length as self
 |          Condition to select the values on.
 |      other : scalar, or array-like, default None
 |          Replacement if the condition is False.
 |      
 |      Returns
 |      -------
 |      pandas.Index
 |          A copy of self with values replaced from other
 |          where the condition is False.
 |      
 |      See Also
 |      --------
 |      Series.where : Same method for Series.
 |      DataFrame.where : Same method for DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index(['car', 'bike', 'train', 'tractor'])
 |      >>> idx
 |      Index(['car', 'bike', 'train', 'tractor'], dtype='object')
 |      >>> idx.where(idx.isin(['car', 'train']), 'other')
 |      Index(['car', 'other', 'train', 'other'], dtype='object')
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.indexes.base.Index:
 |  
 |  has_duplicates
 |      Check if the Index has duplicate values.
 |      
 |      Returns
 |      -------
 |      bool
 |          Whether or not the Index has duplicate values.
 |      
 |      See Also
 |      --------
 |      Index.is_unique : Inverse method that checks if it has unique values.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 5, 7, 7])
 |      >>> idx.has_duplicates
 |      True
 |      
 |      >>> idx = pd.Index([1, 5, 7])
 |      >>> idx.has_duplicates
 |      False
 |      
 |      >>> idx = pd.Index(["Watermelon", "Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.has_duplicates
 |      True
 |      
 |      >>> idx = pd.Index(["Orange", "Apple",
 |      ...                 "Watermelon"]).astype("category")
 |      >>> idx.has_duplicates
 |      False
 |  
 |  nlevels
 |      Number of levels.
 |  
 |  shape
 |      Return a tuple of the shape of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.shape
 |      (3,)
 |  
 |  values
 |      Return an array representing the data in the Index.
 |      
 |      .. warning::
 |      
 |         We recommend using :attr:`Index.array` or
 |         :meth:`Index.to_numpy`, depending on whether you need
 |         a reference to the underlying data or a NumPy array.
 |      
 |      Returns
 |      -------
 |      array: numpy.ndarray or ExtensionArray
 |      
 |      See Also
 |      --------
 |      Index.array : Reference to the underlying data.
 |      Index.to_numpy : A NumPy array representing the underlying data.
 |      
 |      Examples
 |      --------
 |      For :class:`pandas.Index`:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.values
 |      array([1, 2, 3])
 |      
 |      For :class:`pandas.IntervalIndex`:
 |      
 |      >>> idx = pd.interval_range(start=0, end=5)
 |      >>> idx.values
 |      <IntervalArray>
 |      [(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]]
 |      Length: 5, dtype: interval[int64, right]
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.indexes.base.Index:
 |  
 |  array
 |      The ExtensionArray of the data backing this Series or Index.
 |      
 |      Returns
 |      -------
 |      ExtensionArray
 |          An ExtensionArray of the values stored within. For extension
 |          types, this is the actual array. For NumPy native types, this
 |          is a thin (no copy) wrapper around :class:`numpy.ndarray`.
 |      
 |          ``.array`` differs from ``.values``, which may require converting
 |          the data to a different form.
 |      
 |      See Also
 |      --------
 |      Index.to_numpy : Similar method that always returns a NumPy array.
 |      Series.to_numpy : Similar method that always returns a NumPy array.
 |      
 |      Notes
 |      -----
 |      This table lays out the different array types for each extension
 |      dtype within pandas.
 |      
 |      ================== =============================
 |      dtype              array type
 |      ================== =============================
 |      category           Categorical
 |      period             PeriodArray
 |      interval           IntervalArray
 |      IntegerNA          IntegerArray
 |      string             StringArray
 |      boolean            BooleanArray
 |      datetime64[ns, tz] DatetimeArray
 |      ================== =============================
 |      
 |      For any 3rd-party extension types, the array type will be an
 |      ExtensionArray.
 |      
 |      For all remaining dtypes ``.array`` will be a
 |      :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray
 |      stored within. If you absolutely need a NumPy array (possibly with
 |      copying / coercing data), then use :meth:`Series.to_numpy` instead.
 |      
 |      Examples
 |      --------
 |      For regular NumPy types like int, and float, a NumpyExtensionArray
 |      is returned.
 |      
 |      >>> pd.Series([1, 2, 3]).array
 |      <NumpyExtensionArray>
 |      [1, 2, 3]
 |      Length: 3, dtype: int64
 |      
 |      For extension types, like Categorical, the actual ExtensionArray
 |      is returned
 |      
 |      >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))
 |      >>> ser.array
 |      ['a', 'b', 'a']
 |      Categories (2, object): ['a', 'b']
 |  
 |  hasnans
 |      Return True if there are any NaNs.
 |      
 |      Enables various performance speedups.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3], index=['a', 'b', None])
 |      >>> s
 |      a    1
 |      b    2
 |      None 3
 |      dtype: int64
 |      >>> s.index.hasnans
 |      True
 |  
 |  name
 |      Return Index or MultiIndex name.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.Index([1, 2, 3], name='x')
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64',  name='x')
 |      >>> idx.name
 |      'x'
 |  
 |  names
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.indexes.base.Index:
 |  
 |  __pandas_priority__ = 2000
 |  
 |  str = <class 'pandas.core.strings.accessor.StringMethods'>
 |      Vectorized string functions for Series and Index.
 |      
 |      NAs stay NA unless handled otherwise by a particular method.
 |      Patterned after Python's string methods, with some inspiration from
 |      R's stringr package.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(["A_Str_Series"])
 |      >>> s
 |      0    A_Str_Series
 |      dtype: object
 |      
 |      >>> s.str.split("_")
 |      0    [A, Str, Series]
 |      dtype: object
 |      
 |      >>> s.str.replace("_", "")
 |      0    AStrSeries
 |      dtype: object
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  item(self)
 |      Return the first element of the underlying data as a Python scalar.
 |      
 |      Returns
 |      -------
 |      scalar
 |          The first element of Series or Index.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If the data is not length = 1.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1])
 |      >>> s.item()
 |      1
 |      
 |      For an index:
 |      
 |      >>> s = pd.Series([1], index=['a'])
 |      >>> s.index.item()
 |      'a'
 |  
 |  nunique(self, dropna: 'bool' = True) -> 'int'
 |      Return number of unique elements in the object.
 |      
 |      Excludes NA values by default.
 |      
 |      Parameters
 |      ----------
 |      dropna : bool, default True
 |          Don't include NaN in the count.
 |      
 |      Returns
 |      -------
 |      int
 |      
 |      See Also
 |      --------
 |      DataFrame.nunique: Method nunique for DataFrame.
 |      Series.count: Count non-NA/null observations in the Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 3, 5, 7, 7])
 |      >>> s
 |      0    1
 |      1    3
 |      2    5
 |      3    7
 |      4    7
 |      dtype: int64
 |      
 |      >>> s.nunique()
 |      4
 |  
 |  searchsorted(self, value: 'NumpyValueArrayLike | ExtensionArray', side: "Literal['left', 'right']" = 'left', sorter: 'NumpySorter | None' = None) -> 'npt.NDArray[np.intp] | np.intp'
 |      Find indices where elements should be inserted to maintain order.
 |      
 |      Find the indices into a sorted Index `self` such that, if the
 |      corresponding elements in `value` were inserted before the indices,
 |      the order of `self` would be preserved.
 |      
 |      .. note::
 |      
 |          The Index *must* be monotonically sorted, otherwise
 |          wrong locations will likely be returned. Pandas does *not*
 |          check this for you.
 |      
 |      Parameters
 |      ----------
 |      value : array-like or scalar
 |          Values to insert into `self`.
 |      side : {'left', 'right'}, optional
 |          If 'left', the index of the first suitable location found is given.
 |          If 'right', return the last such index.  If there is no suitable
 |          index, return either 0 or N (where N is the length of `self`).
 |      sorter : 1-D array-like, optional
 |          Optional array of integer indices that sort `self` into ascending
 |          order. They are typically the result of ``np.argsort``.
 |      
 |      Returns
 |      -------
 |      int or array of int
 |          A scalar or array of insertion points with the
 |          same shape as `value`.
 |      
 |      See Also
 |      --------
 |      sort_values : Sort by the values along either axis.
 |      numpy.searchsorted : Similar method from NumPy.
 |      
 |      Notes
 |      -----
 |      Binary search is used to find the required insertion points.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> ser
 |      0    1
 |      1    2
 |      2    3
 |      dtype: int64
 |      
 |      >>> ser.searchsorted(4)
 |      3
 |      
 |      >>> ser.searchsorted([0, 4])
 |      array([0, 3])
 |      
 |      >>> ser.searchsorted([1, 3], side='left')
 |      array([0, 2])
 |      
 |      >>> ser.searchsorted([1, 3], side='right')
 |      array([1, 3])
 |      
 |      >>> ser = pd.Series(pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000']))
 |      >>> ser
 |      0   2000-03-11
 |      1   2000-03-12
 |      2   2000-03-13
 |      dtype: datetime64[ns]
 |      
 |      >>> ser.searchsorted('3/14/2000')
 |      3
 |      
 |      >>> ser = pd.Categorical(
 |      ...     ['apple', 'bread', 'bread', 'cheese', 'milk'], ordered=True
 |      ... )
 |      >>> ser
 |      ['apple', 'bread', 'bread', 'cheese', 'milk']
 |      Categories (4, object): ['apple' < 'bread' < 'cheese' < 'milk']
 |      
 |      >>> ser.searchsorted('bread')
 |      1
 |      
 |      >>> ser.searchsorted(['bread'], side='right')
 |      array([3])
 |      
 |      If the values are not monotonically sorted, wrong locations
 |      may be returned:
 |      
 |      >>> ser = pd.Series([2, 1, 3])
 |      >>> ser
 |      0    2
 |      1    1
 |      2    3
 |      dtype: int64
 |      
 |      >>> ser.searchsorted(1)  # doctest: +SKIP
 |      0  # wrong result, correct would be 1
 |  
 |  to_list = tolist(self)
 |      Return a list of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      list
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.tolist : Return the array as an a.ndim-levels deep
 |          nested list of Python scalars.
 |      
 |      Examples
 |      --------
 |      For Series
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.to_list()
 |      [1, 2, 3]
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      
 |      >>> idx.to_list()
 |      [1, 2, 3]
 |  
 |  to_numpy(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>, **kwargs) -> 'np.ndarray'
 |      A NumPy ndarray representing the values in this Series or Index.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or numpy.dtype, optional
 |          The dtype to pass to :meth:`numpy.asarray`.
 |      copy : bool, default False
 |          Whether to ensure that the returned value is not a view on
 |          another array. Note that ``copy=False`` does not *ensure* that
 |          ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that
 |          a copy is made, even if not strictly necessary.
 |      na_value : Any, optional
 |          The value to use for missing values. The default value depends
 |          on `dtype` and the type of the array.
 |      **kwargs
 |          Additional keywords passed through to the ``to_numpy`` method
 |          of the underlying array (for extension arrays).
 |      
 |      Returns
 |      -------
 |      numpy.ndarray
 |      
 |      See Also
 |      --------
 |      Series.array : Get the actual data stored within.
 |      Index.array : Get the actual data stored within.
 |      DataFrame.to_numpy : Similar method for DataFrame.
 |      
 |      Notes
 |      -----
 |      The returned array will be the same up to equality (values equal
 |      in `self` will be equal in the returned array; likewise for values
 |      that are not equal). When `self` contains an ExtensionArray, the
 |      dtype may be different. For example, for a category-dtype Series,
 |      ``to_numpy()`` will return a NumPy array and the categorical dtype
 |      will be lost.
 |      
 |      For NumPy dtypes, this will be a reference to the actual data stored
 |      in this Series or Index (assuming ``copy=False``). Modifying the result
 |      in place will modify the data stored in the Series or Index (not that
 |      we recommend doing that).
 |      
 |      For extension types, ``to_numpy()`` *may* require copying data and
 |      coercing the result to a NumPy type (possibly object), which may be
 |      expensive. When you need a no-copy reference to the underlying data,
 |      :attr:`Series.array` should be used instead.
 |      
 |      This table lays out the different dtypes and default return types of
 |      ``to_numpy()`` for various dtypes within pandas.
 |      
 |      ================== ================================
 |      dtype              array type
 |      ================== ================================
 |      category[T]        ndarray[T] (same dtype as input)
 |      period             ndarray[object] (Periods)
 |      interval           ndarray[object] (Intervals)
 |      IntegerNA          ndarray[object]
 |      datetime64[ns]     datetime64[ns]
 |      datetime64[ns, tz] ndarray[object] (Timestamps)
 |      ================== ================================
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))
 |      >>> ser.to_numpy()
 |      array(['a', 'b', 'a'], dtype=object)
 |      
 |      Specify the `dtype` to control how datetime-aware data is represented.
 |      Use ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`
 |      objects, each with the correct ``tz``.
 |      
 |      >>> ser = pd.Series(pd.date_range('2000', periods=2, tz="CET"))
 |      >>> ser.to_numpy(dtype=object)
 |      array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),
 |             Timestamp('2000-01-02 00:00:00+0100', tz='CET')],
 |            dtype=object)
 |      
 |      Or ``dtype='datetime64[ns]'`` to return an ndarray of native
 |      datetime64 values. The values are converted to UTC and the timezone
 |      info is dropped.
 |      
 |      >>> ser.to_numpy(dtype="datetime64[ns]")
 |      ... # doctest: +ELLIPSIS
 |      array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],
 |            dtype='datetime64[ns]')
 |  
 |  transpose(self, *args, **kwargs) -> 'Self'
 |      Return the transpose, which is by definition self.
 |      
 |      Returns
 |      -------
 |      %(klass)s
 |  
 |  value_counts(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True) -> 'Series'
 |      Return a Series containing counts of unique values.
 |      
 |      The resulting object will be in descending order so that the
 |      first element is the most frequently-occurring element.
 |      Excludes NA values by default.
 |      
 |      Parameters
 |      ----------
 |      normalize : bool, default False
 |          If True then the object returned will contain the relative
 |          frequencies of the unique values.
 |      sort : bool, default True
 |          Sort by frequencies when True. Preserve the order of the data when False.
 |      ascending : bool, default False
 |          Sort in ascending order.
 |      bins : int, optional
 |          Rather than count values, group them into half-open bins,
 |          a convenience for ``pd.cut``, only works with numeric data.
 |      dropna : bool, default True
 |          Don't include counts of NaN.
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      See Also
 |      --------
 |      Series.count: Number of non-NA elements in a Series.
 |      DataFrame.count: Number of non-NA elements in a DataFrame.
 |      DataFrame.value_counts: Equivalent method on DataFrames.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index([3, 1, 2, 3, 4, np.nan])
 |      >>> index.value_counts()
 |      3.0    2
 |      1.0    1
 |      2.0    1
 |      4.0    1
 |      Name: count, dtype: int64
 |      
 |      With `normalize` set to `True`, returns the relative frequency by
 |      dividing all values by the sum of values.
 |      
 |      >>> s = pd.Series([3, 1, 2, 3, 4, np.nan])
 |      >>> s.value_counts(normalize=True)
 |      3.0    0.4
 |      1.0    0.2
 |      2.0    0.2
 |      4.0    0.2
 |      Name: proportion, dtype: float64
 |      
 |      **bins**
 |      
 |      Bins can be useful for going from a continuous variable to a
 |      categorical variable; instead of counting unique
 |      apparitions of values, divide the index in the specified
 |      number of half-open bins.
 |      
 |      >>> s.value_counts(bins=3)
 |      (0.996, 2.0]    2
 |      (2.0, 3.0]      2
 |      (3.0, 4.0]      1
 |      Name: count, dtype: int64
 |      
 |      **dropna**
 |      
 |      With `dropna` set to `False` we can also see NaN index values.
 |      
 |      >>> s.value_counts(dropna=False)
 |      3.0    2
 |      1.0    1
 |      2.0    1
 |      4.0    1
 |      NaN    1
 |      Name: count, dtype: int64
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  T
 |      Return the transpose, which is by definition self.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.T
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.T
 |      Index([1, 2, 3], dtype='int64')
 |  
 |  empty
 |  
 |  ndim
 |      Number of dimensions of the underlying data, by definition 1.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.ndim
 |      1
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.ndim
 |      1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  __array_priority__ = 1000
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __add__(self, other)
 |      Get Addition of DataFrame and other, column-wise.
 |      
 |      Equivalent to ``DataFrame.add(other)``.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Object to be added to the DataFrame.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The result of adding ``other`` to DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add a DataFrame and another object, with option for index-
 |          or column-oriented addition.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'height': [1.5, 2.6], 'weight': [500, 800]},
 |      ...                   index=['elk', 'moose'])
 |      >>> df
 |             height  weight
 |      elk       1.5     500
 |      moose     2.6     800
 |      
 |      Adding a scalar affects all rows and columns.
 |      
 |      >>> df[['height', 'weight']] + 1.5
 |             height  weight
 |      elk       3.0   501.5
 |      moose     4.1   801.5
 |      
 |      Each element of a list is added to a column of the DataFrame, in order.
 |      
 |      >>> df[['height', 'weight']] + [0.5, 1.5]
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      Keys of a dictionary are aligned to the DataFrame, based on column names;
 |      each value in the dictionary is added to the corresponding column.
 |      
 |      >>> df[['height', 'weight']] + {'height': 0.5, 'weight': 1.5}
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      When `other` is a :class:`Series`, the index of `other` is aligned with the
 |      columns of the DataFrame.
 |      
 |      >>> s1 = pd.Series([0.5, 1.5], index=['weight', 'height'])
 |      >>> df[['height', 'weight']] + s1
 |             height  weight
 |      elk       3.0   500.5
 |      moose     4.1   800.5
 |      
 |      Even when the index of `other` is the same as the index of the DataFrame,
 |      the :class:`Series` will not be reoriented. If index-wise alignment is desired,
 |      :meth:`DataFrame.add` should be used with `axis='index'`.
 |      
 |      >>> s2 = pd.Series([0.5, 1.5], index=['elk', 'moose'])
 |      >>> df[['height', 'weight']] + s2
 |             elk  height  moose  weight
 |      elk    NaN     NaN    NaN     NaN
 |      moose  NaN     NaN    NaN     NaN
 |      
 |      >>> df[['height', 'weight']].add(s2, axis='index')
 |             height  weight
 |      elk       2.0   500.5
 |      moose     4.1   801.5
 |      
 |      When `other` is a :class:`DataFrame`, both columns names and the
 |      index are aligned.
 |      
 |      >>> other = pd.DataFrame({'height': [0.2, 0.4, 0.6]},
 |      ...                      index=['elk', 'moose', 'deer'])
 |      >>> df[['height', 'weight']] + other
 |             height  weight
 |      deer      NaN     NaN
 |      elk       1.7     NaN
 |      moose     3.0     NaN
 |  
 |  __and__(self, other)
 |  
 |  __divmod__(self, other)
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __ge__(self, other)
 |      Return self>=value.
 |  
 |  __gt__(self, other)
 |      Return self>value.
 |  
 |  __le__(self, other)
 |      Return self<=value.
 |  
 |  __lt__(self, other)
 |      Return self<value.
 |  
 |  __mod__(self, other)
 |  
 |  __mul__(self, other)
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __or__(self, other)
 |  
 |  __pow__(self, other)
 |  
 |  __radd__(self, other)
 |  
 |  __rand__(self, other)
 |  
 |  __rdivmod__(self, other)
 |  
 |  __rfloordiv__(self, other)
 |  
 |  __rmod__(self, other)
 |  
 |  __rmul__(self, other)
 |  
 |  __ror__(self, other)
 |  
 |  __rpow__(self, other)
 |  
 |  __rsub__(self, other)
 |  
 |  __rtruediv__(self, other)
 |  
 |  __rxor__(self, other)
 |  
 |  __sub__(self, other)
 |  
 |  __truediv__(self, other)
 |  
 |  __xor__(self, other)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __hash__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.PandasObject:
 |  
 |  __sizeof__(self) -> 'int'
 |      Generates the total memory usage for an object that returns
 |      either a value or Series of values
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  __dir__(self) -> 'list[str]'
 |      Provide method name lookup and completion.
 |      
 |      Notes
 |      -----
 |      Only provide 'public' methods.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& infer_objects &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method infer_objects in module pandas.core.generic:

infer_objects(copy: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Attempt to infer better dtypes for object columns.
    
    Attempts soft conversion of object-dtyped
    columns, leaving non-object and unconvertible
    columns unchanged. The inference rules are the
    same as during normal Series/DataFrame construction.
    
    Parameters
    ----------
    copy : bool, default True
        Whether to make a copy for non-object or non-inferable columns
        or Series.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    
    Returns
    -------
    same type as input object
    
    See Also
    --------
    to_datetime : Convert argument to datetime.
    to_timedelta : Convert argument to timedelta.
    to_numeric : Convert argument to numeric type.
    convert_dtypes : Convert argument to best possible dtype.
    
    Examples
    --------
    >>> df = pd.DataFrame({"A": ["a", 1, 2, 3]})
    >>> df = df.iloc[1:]
    >>> df
       A
    1  1
    2  2
    3  3
    
    >>> df.dtypes
    A    object
    dtype: object
    
    >>> df.infer_objects().dtypes
    A    int64
    dtype: object

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& info &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method info in module pandas.core.frame:

info(verbose: 'bool | None' = None, buf: 'WriteBuffer[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool | None' = None) -> 'None' method of pandas.core.frame.DataFrame instance
    Print a concise summary of a DataFrame.
    
    This method prints information about a DataFrame including
    the index dtype and columns, non-null values and memory usage.
    
    Parameters
    ----------
    verbose : bool, optional
        Whether to print the full summary. By default, the setting in
        ``pandas.options.display.max_info_columns`` is followed.
    buf : writable buffer, defaults to sys.stdout
        Where to send the output. By default, the output is printed to
        sys.stdout. Pass a writable buffer if you need to further process
        the output.
    max_cols : int, optional
        When to switch from the verbose to the truncated output. If the
        DataFrame has more than `max_cols` columns, the truncated output
        is used. By default, the setting in
        ``pandas.options.display.max_info_columns`` is used.
    memory_usage : bool, str, optional
        Specifies whether total memory usage of the DataFrame
        elements (including the index) should be displayed. By default,
        this follows the ``pandas.options.display.memory_usage`` setting.
    
        True always show memory usage. False never shows memory usage.
        A value of 'deep' is equivalent to "True with deep introspection".
        Memory usage is shown in human-readable units (base-2
        representation). Without deep introspection a memory estimation is
        made based in column dtype and number of rows assuming values
        consume the same memory amount for corresponding dtypes. With deep
        memory introspection, a real memory usage calculation is performed
        at the cost of computational resources. See the
        :ref:`Frequently Asked Questions <df-memory-usage>` for more
        details.
    show_counts : bool, optional
        Whether to show the non-null counts. By default, this is shown
        only if the DataFrame is smaller than
        ``pandas.options.display.max_info_rows`` and
        ``pandas.options.display.max_info_columns``. A value of True always
        shows the counts, and False never shows the counts.
    
    Returns
    -------
    None
        This method prints a summary of a DataFrame and returns None.
    
    See Also
    --------
    DataFrame.describe: Generate descriptive statistics of DataFrame
        columns.
    DataFrame.memory_usage: Memory usage of DataFrame columns.
    
    Examples
    --------
    >>> int_values = [1, 2, 3, 4, 5]
    >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']
    >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]
    >>> df = pd.DataFrame({"int_col": int_values, "text_col": text_values,
    ...                   "float_col": float_values})
    >>> df
        int_col text_col  float_col
    0        1    alpha       0.00
    1        2     beta       0.25
    2        3    gamma       0.50
    3        4    delta       0.75
    4        5  epsilon       1.00
    
    Prints information of all columns:
    
    >>> df.info(verbose=True)
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 5 entries, 0 to 4
    Data columns (total 3 columns):
     #   Column     Non-Null Count  Dtype
    ---  ------     --------------  -----
     0   int_col    5 non-null      int64
     1   text_col   5 non-null      object
     2   float_col  5 non-null      float64
    dtypes: float64(1), int64(1), object(1)
    memory usage: 248.0+ bytes
    
    Prints a summary of columns count and its dtypes but not per column
    information:
    
    >>> df.info(verbose=False)
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 5 entries, 0 to 4
    Columns: 3 entries, int_col to float_col
    dtypes: float64(1), int64(1), object(1)
    memory usage: 248.0+ bytes
    
    Pipe output of DataFrame.info to buffer instead of sys.stdout, get
    buffer content and writes to a text file:
    
    >>> import io
    >>> buffer = io.StringIO()
    >>> df.info(buf=buffer)
    >>> s = buffer.getvalue()
    >>> with open("df_info.txt", "w",
    ...           encoding="utf-8") as f:  # doctest: +SKIP
    ...     f.write(s)
    260
    
    The `memory_usage` parameter allows deep introspection mode, specially
    useful for big DataFrames and fine-tune memory optimization:
    
    >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)
    >>> df = pd.DataFrame({
    ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),
    ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),
    ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)
    ... })
    >>> df.info()
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 1000000 entries, 0 to 999999
    Data columns (total 3 columns):
     #   Column    Non-Null Count    Dtype
    ---  ------    --------------    -----
     0   column_1  1000000 non-null  object
     1   column_2  1000000 non-null  object
     2   column_3  1000000 non-null  object
    dtypes: object(3)
    memory usage: 22.9+ MB
    
    >>> df.info(memory_usage='deep')
    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 1000000 entries, 0 to 999999
    Data columns (total 3 columns):
     #   Column    Non-Null Count    Dtype
    ---  ------    --------------    -----
     0   column_1  1000000 non-null  object
     1   column_2  1000000 non-null  object
     2   column_3  1000000 non-null  object
    dtypes: object(3)
    memory usage: 165.9 MB

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& insert &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method insert in module pandas.core.frame:

insert(loc: 'int', column: 'Hashable', value: 'Scalar | AnyArrayLike', allow_duplicates: 'bool | lib.NoDefault' = <no_default>) -> 'None' method of pandas.core.frame.DataFrame instance
    Insert column into DataFrame at specified location.
    
    Raises a ValueError if `column` is already contained in the DataFrame,
    unless `allow_duplicates` is set to True.
    
    Parameters
    ----------
    loc : int
        Insertion index. Must verify 0 <= loc <= len(columns).
    column : str, number, or hashable object
        Label of the inserted column.
    value : Scalar, Series, or array-like
        Content of the inserted column.
    allow_duplicates : bool, optional, default lib.no_default
        Allow duplicate column labels to be created.
    
    See Also
    --------
    Index.insert : Insert new item by index.
    
    Examples
    --------
    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})
    >>> df
       col1  col2
    0     1     3
    1     2     4
    >>> df.insert(1, "newcol", [99, 99])
    >>> df
       col1  newcol  col2
    0     1      99     3
    1     2      99     4
    >>> df.insert(0, "col1", [100, 100], allow_duplicates=True)
    >>> df
       col1  col1  newcol  col2
    0   100     1      99     3
    1   100     2      99     4
    
    Notice that pandas uses index alignment in case of `value` from type `Series`:
    
    >>> df.insert(0, "col0", pd.Series([5, 6], index=[1, 2]))
    >>> df
       col0  col1  col1  newcol  col2
    0   NaN   100     1      99     3
    1   5.0   100     2      99     4

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& interpolate &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method interpolate in module pandas.core.generic:

interpolate(method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: "Literal['forward', 'backward', 'both'] | None" = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: "Literal['infer'] | None | lib.NoDefault" = <no_default>, **kwargs) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NaN values using an interpolation method.
    
    Please note that only ``method='linear'`` is supported for
    DataFrame/Series with a MultiIndex.
    
    Parameters
    ----------
    method : str, default 'linear'
        Interpolation technique to use. One of:
    
        * 'linear': Ignore the index and treat the values as equally
          spaced. This is the only method supported on MultiIndexes.
        * 'time': Works on daily and higher resolution data to interpolate
          given length of interval.
        * 'index', 'values': use the actual numerical values of the index.
        * 'pad': Fill in NaNs using existing values.
        * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',
          'barycentric', 'polynomial': Passed to
          `scipy.interpolate.interp1d`, whereas 'spline' is passed to
          `scipy.interpolate.UnivariateSpline`. These methods use the numerical
          values of the index.  Both 'polynomial' and 'spline' require that
          you also specify an `order` (int), e.g.
          ``df.interpolate(method='polynomial', order=5)``. Note that,
          `slinear` method in Pandas refers to the Scipy first order `spline`
          instead of Pandas first order `spline`.
        * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',
          'cubicspline': Wrappers around the SciPy interpolation methods of
          similar names. See `Notes`.
        * 'from_derivatives': Refers to
          `scipy.interpolate.BPoly.from_derivatives`.
    
    axis : {{0 or 'index', 1 or 'columns', None}}, default None
        Axis to interpolate along. For `Series` this parameter is unused
        and defaults to 0.
    limit : int, optional
        Maximum number of consecutive NaNs to fill. Must be greater than
        0.
    inplace : bool, default False
        Update the data in place if possible.
    limit_direction : {{'forward', 'backward', 'both'}}, Optional
        Consecutive NaNs will be filled in this direction.
    
        If limit is specified:
            * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.
            * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be
              'backwards'.
    
        If 'limit' is not specified:
            * If 'method' is 'backfill' or 'bfill', the default is 'backward'
            * else the default is 'forward'
    
        raises ValueError if `limit_direction` is 'forward' or 'both' and
            method is 'backfill' or 'bfill'.
        raises ValueError if `limit_direction` is 'backward' or 'both' and
            method is 'pad' or 'ffill'.
    
    limit_area : {{`None`, 'inside', 'outside'}}, default None
        If limit is specified, consecutive NaNs will be filled with this
        restriction.
    
        * ``None``: No fill restriction.
        * 'inside': Only fill NaNs surrounded by valid values
          (interpolate).
        * 'outside': Only fill NaNs outside valid values (extrapolate).
    
    downcast : optional, 'infer' or None, defaults to None
        Downcast dtypes if possible.
    
        .. deprecated:: 2.1.0
    
    ``**kwargs`` : optional
        Keyword arguments to pass on to the interpolating function.
    
    Returns
    -------
    Series or DataFrame or None
        Returns the same object type as the caller, interpolated at
        some or all ``NaN`` values or None if ``inplace=True``.
    
    See Also
    --------
    fillna : Fill missing values using different methods.
    scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials
        (Akima interpolator).
    scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the
        Bernstein basis.
    scipy.interpolate.interp1d : Interpolate a 1-D function.
    scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh
        interpolator).
    scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic
        interpolation.
    scipy.interpolate.CubicSpline : Cubic spline data interpolator.
    
    Notes
    -----
    The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'
    methods are wrappers around the respective SciPy implementations of
    similar names. These use the actual numerical values of the index.
    For more information on their behavior, see the
    `SciPy documentation
    <https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.
    
    Examples
    --------
    Filling in ``NaN`` in a :class:`~pandas.Series` via linear
    interpolation.
    
    >>> s = pd.Series([0, 1, np.nan, 3])
    >>> s
    0    0.0
    1    1.0
    2    NaN
    3    3.0
    dtype: float64
    >>> s.interpolate()
    0    0.0
    1    1.0
    2    2.0
    3    3.0
    dtype: float64
    
    Filling in ``NaN`` in a Series via polynomial interpolation or splines:
    Both 'polynomial' and 'spline' methods require that you also specify
    an ``order`` (int).
    
    >>> s = pd.Series([0, 2, np.nan, 8])
    >>> s.interpolate(method='polynomial', order=2)
    0    0.000000
    1    2.000000
    2    4.666667
    3    8.000000
    dtype: float64
    
    Fill the DataFrame forward (that is, going down) along each column
    using linear interpolation.
    
    Note how the last entry in column 'a' is interpolated differently,
    because there is no entry after it to use for interpolation.
    Note how the first entry in column 'b' remains ``NaN``, because there
    is no entry before it to use for interpolation.
    
    >>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),
    ...                    (np.nan, 2.0, np.nan, np.nan),
    ...                    (2.0, 3.0, np.nan, 9.0),
    ...                    (np.nan, 4.0, -4.0, 16.0)],
    ...                   columns=list('abcd'))
    >>> df
         a    b    c     d
    0  0.0  NaN -1.0   1.0
    1  NaN  2.0  NaN   NaN
    2  2.0  3.0  NaN   9.0
    3  NaN  4.0 -4.0  16.0
    >>> df.interpolate(method='linear', limit_direction='forward', axis=0)
         a    b    c     d
    0  0.0  NaN -1.0   1.0
    1  1.0  2.0 -2.0   5.0
    2  2.0  3.0 -3.0   9.0
    3  2.0  4.0 -4.0  16.0
    
    Using polynomial interpolation.
    
    >>> df['d'].interpolate(method='polynomial', order=2)
    0     1.0
    1     4.0
    2     9.0
    3    16.0
    Name: d, dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& isetitem &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method isetitem in module pandas.core.frame:

isetitem(loc, value) -> 'None' method of pandas.core.frame.DataFrame instance
    Set the given value in the column with position `loc`.
    
    This is a positional analogue to ``__setitem__``.
    
    Parameters
    ----------
    loc : int or sequence of ints
        Index position for the column.
    value : scalar or arraylike
        Value(s) for the column.
    
    Notes
    -----
    ``frame.isetitem(loc, value)`` is an in-place method as it will
    modify the DataFrame in place (not returning a new object). In contrast to
    ``frame.iloc[:, i] = value`` which will try to update the existing values in
    place, ``frame.isetitem(loc, value)`` will not update the values of the column
    itself in place, it will instead insert a new array.
    
    In cases where ``frame.columns`` is unique, this is equivalent to
    ``frame[frame.columns[i]] = value``.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& isin &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method isin in module pandas.core.frame:

isin(values: 'Series | DataFrame | Sequence | Mapping') -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Whether each element in the DataFrame is contained in values.
    
    Parameters
    ----------
    values : iterable, Series, DataFrame or dict
        The result will only be true at a location if all the
        labels match. If `values` is a Series, that's the index. If
        `values` is a dict, the keys must be the column names,
        which must match. If `values` is a DataFrame,
        then both the index and column labels must match.
    
    Returns
    -------
    DataFrame
        DataFrame of booleans showing whether each element in the DataFrame
        is contained in values.
    
    See Also
    --------
    DataFrame.eq: Equality test for DataFrame.
    Series.isin: Equivalent method on Series.
    Series.str.contains: Test if pattern or regex is contained within a
        string of a Series or Index.
    
    Examples
    --------
    >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},
    ...                   index=['falcon', 'dog'])
    >>> df
            num_legs  num_wings
    falcon         2          2
    dog            4          0
    
    When ``values`` is a list check whether every value in the DataFrame
    is present in the list (which animals have 0 or 2 legs or wings)
    
    >>> df.isin([0, 2])
            num_legs  num_wings
    falcon      True       True
    dog        False       True
    
    To check if ``values`` is *not* in the DataFrame, use the ``~`` operator:
    
    >>> ~df.isin([0, 2])
            num_legs  num_wings
    falcon     False      False
    dog         True      False
    
    When ``values`` is a dict, we can pass values to check for each
    column separately:
    
    >>> df.isin({'num_wings': [0, 3]})
            num_legs  num_wings
    falcon     False      False
    dog        False       True
    
    When ``values`` is a Series or DataFrame the index and column must
    match. Note that 'falcon' does not match based on the number of legs
    in other.
    
    >>> other = pd.DataFrame({'num_legs': [8, 3], 'num_wings': [0, 2]},
    ...                      index=['spider', 'falcon'])
    >>> df.isin(other)
            num_legs  num_wings
    falcon     False       True
    dog        False      False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& isna &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method isna in module pandas.core.frame:

isna() -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Detect missing values.
    
    Return a boolean same-sized object indicating if the values are NA.
    NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
    values.
    Everything else gets mapped to False values. Characters such as empty
    strings ``''`` or :attr:`numpy.inf` are not considered NA values
    (unless you set ``pandas.options.mode.use_inf_as_na = True``).
    
    Returns
    -------
    DataFrame
        Mask of bool values for each element in DataFrame that
        indicates whether an element is an NA value.
    
    See Also
    --------
    DataFrame.isnull : Alias of isna.
    DataFrame.notna : Boolean inverse of isna.
    DataFrame.dropna : Omit axes labels with missing values.
    isna : Top-level isna.
    
    Examples
    --------
    Show which entries in a DataFrame are NA.
    
    >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
    ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
    ...                              pd.Timestamp('1940-04-25')],
    ...                        name=['Alfred', 'Batman', ''],
    ...                        toy=[None, 'Batmobile', 'Joker']))
    >>> df
       age       born    name        toy
    0  5.0        NaT  Alfred       None
    1  6.0 1939-05-27  Batman  Batmobile
    2  NaN 1940-04-25              Joker
    
    >>> df.isna()
         age   born   name    toy
    0  False   True  False   True
    1  False  False  False  False
    2   True  False  False  False
    
    Show which entries in a Series are NA.
    
    >>> ser = pd.Series([5, 6, np.nan])
    >>> ser
    0    5.0
    1    6.0
    2    NaN
    dtype: float64
    
    >>> ser.isna()
    0    False
    1    False
    2     True
    dtype: bool

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& isnull &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method isnull in module pandas.core.frame:

isnull() -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    DataFrame.isnull is an alias for DataFrame.isna.
    
    Detect missing values.
    
    Return a boolean same-sized object indicating if the values are NA.
    NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
    values.
    Everything else gets mapped to False values. Characters such as empty
    strings ``''`` or :attr:`numpy.inf` are not considered NA values
    (unless you set ``pandas.options.mode.use_inf_as_na = True``).
    
    Returns
    -------
    DataFrame
        Mask of bool values for each element in DataFrame that
        indicates whether an element is an NA value.
    
    See Also
    --------
    DataFrame.isnull : Alias of isna.
    DataFrame.notna : Boolean inverse of isna.
    DataFrame.dropna : Omit axes labels with missing values.
    isna : Top-level isna.
    
    Examples
    --------
    Show which entries in a DataFrame are NA.
    
    >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
    ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
    ...                              pd.Timestamp('1940-04-25')],
    ...                        name=['Alfred', 'Batman', ''],
    ...                        toy=[None, 'Batmobile', 'Joker']))
    >>> df
       age       born    name        toy
    0  5.0        NaT  Alfred       None
    1  6.0 1939-05-27  Batman  Batmobile
    2  NaN 1940-04-25              Joker
    
    >>> df.isna()
         age   born   name    toy
    0  False   True  False   True
    1  False  False  False  False
    2   True  False  False  False
    
    Show which entries in a Series are NA.
    
    >>> ser = pd.Series([5, 6, np.nan])
    >>> ser
    0    5.0
    1    6.0
    2    NaN
    dtype: float64
    
    >>> ser.isna()
    0    False
    1    False
    2     True
    dtype: bool

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& items &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method items in module pandas.core.frame:

items() -> 'Iterable[tuple[Hashable, Series]]' method of pandas.core.frame.DataFrame instance
    Iterate over (column name, Series) pairs.
    
    Iterates over the DataFrame columns, returning a tuple with
    the column name and the content as a Series.
    
    Yields
    ------
    label : object
        The column names for the DataFrame being iterated over.
    content : Series
        The column entries belonging to each label, as a Series.
    
    See Also
    --------
    DataFrame.iterrows : Iterate over DataFrame rows as
        (index, Series) pairs.
    DataFrame.itertuples : Iterate over DataFrame rows as namedtuples
        of the values.
    
    Examples
    --------
    >>> df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],
    ...                   'population': [1864, 22000, 80000]},
    ...                   index=['panda', 'polar', 'koala'])
    >>> df
            species   population
    panda   bear      1864
    polar   bear      22000
    koala   marsupial 80000
    >>> for label, content in df.items():
    ...     print(f'label: {label}')
    ...     print(f'content: {content}', sep='\n')
    ...
    label: species
    content:
    panda         bear
    polar         bear
    koala    marsupial
    Name: species, dtype: object
    label: population
    content:
    panda     1864
    polar    22000
    koala    80000
    Name: population, dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& iterrows &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method iterrows in module pandas.core.frame:

iterrows() -> 'Iterable[tuple[Hashable, Series]]' method of pandas.core.frame.DataFrame instance
    Iterate over DataFrame rows as (index, Series) pairs.
    
    Yields
    ------
    index : label or tuple of label
        The index of the row. A tuple for a `MultiIndex`.
    data : Series
        The data of the row as a Series.
    
    See Also
    --------
    DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.
    DataFrame.items : Iterate over (column name, Series) pairs.
    
    Notes
    -----
    1. Because ``iterrows`` returns a Series for each row,
       it does **not** preserve dtypes across the rows (dtypes are
       preserved across columns for DataFrames).
    
       To preserve dtypes while iterating over the rows, it is better
       to use :meth:`itertuples` which returns namedtuples of the values
       and which is generally faster than ``iterrows``.
    
    2. You should **never modify** something you are iterating over.
       This is not guaranteed to work in all cases. Depending on the
       data types, the iterator returns a copy and not a view, and writing
       to it will have no effect.
    
    Examples
    --------
    
    >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])
    >>> row = next(df.iterrows())[1]
    >>> row
    int      1.0
    float    1.5
    Name: 0, dtype: float64
    >>> print(row['int'].dtype)
    float64
    >>> print(df['int'].dtype)
    int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& itertuples &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method itertuples in module pandas.core.frame:

itertuples(index: 'bool' = True, name: 'str | None' = 'Pandas') -> 'Iterable[tuple[Any, ...]]' method of pandas.core.frame.DataFrame instance
    Iterate over DataFrame rows as namedtuples.
    
    Parameters
    ----------
    index : bool, default True
        If True, return the index as the first element of the tuple.
    name : str or None, default "Pandas"
        The name of the returned namedtuples or None to return regular
        tuples.
    
    Returns
    -------
    iterator
        An object to iterate over namedtuples for each row in the
        DataFrame with the first field possibly being the index and
        following fields being the column values.
    
    See Also
    --------
    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)
        pairs.
    DataFrame.items : Iterate over (column name, Series) pairs.
    
    Notes
    -----
    The column names will be renamed to positional names if they are
    invalid Python identifiers, repeated, or start with an underscore.
    
    Examples
    --------
    >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},
    ...                   index=['dog', 'hawk'])
    >>> df
          num_legs  num_wings
    dog          4          0
    hawk         2          2
    >>> for row in df.itertuples():
    ...     print(row)
    ...
    Pandas(Index='dog', num_legs=4, num_wings=0)
    Pandas(Index='hawk', num_legs=2, num_wings=2)
    
    By setting the `index` parameter to False we can remove the index
    as the first element of the tuple:
    
    >>> for row in df.itertuples(index=False):
    ...     print(row)
    ...
    Pandas(num_legs=4, num_wings=0)
    Pandas(num_legs=2, num_wings=2)
    
    With the `name` parameter set we set a custom name for the yielded
    namedtuples:
    
    >>> for row in df.itertuples(name='Animal'):
    ...     print(row)
    ...
    Animal(Index='dog', num_legs=4, num_wings=0)
    Animal(Index='hawk', num_legs=2, num_wings=2)

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& join &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method join in module pandas.core.frame:

join(other: 'DataFrame | Series | Iterable[DataFrame | Series]', on: 'IndexLabel | None' = None, how: 'MergeHow' = 'left', lsuffix: 'str' = '', rsuffix: 'str' = '', sort: 'bool' = False, validate: 'JoinValidate | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Join columns of another DataFrame.
    
    Join columns with `other` DataFrame either on index or on a key
    column. Efficiently join multiple DataFrame objects by index at once by
    passing a list.
    
    Parameters
    ----------
    other : DataFrame, Series, or a list containing any combination of them
        Index should be similar to one of the columns in this one. If a
        Series is passed, its name attribute must be set, and that will be
        used as the column name in the resulting joined DataFrame.
    on : str, list of str, or array-like, optional
        Column or index level name(s) in the caller to join on the index
        in `other`, otherwise joins index-on-index. If multiple
        values given, the `other` DataFrame must have a MultiIndex. Can
        pass an array as the join key if it is not already contained in
        the calling DataFrame. Like an Excel VLOOKUP operation.
    how : {'left', 'right', 'outer', 'inner', 'cross'}, default 'left'
        How to handle the operation of the two objects.
    
        * left: use calling frame's index (or column if on is specified)
        * right: use `other`'s index.
        * outer: form union of calling frame's index (or column if on is
          specified) with `other`'s index, and sort it lexicographically.
        * inner: form intersection of calling frame's index (or column if
          on is specified) with `other`'s index, preserving the order
          of the calling's one.
        * cross: creates the cartesian product from both frames, preserves the order
          of the left keys.
    lsuffix : str, default ''
        Suffix to use from left frame's overlapping columns.
    rsuffix : str, default ''
        Suffix to use from right frame's overlapping columns.
    sort : bool, default False
        Order result DataFrame lexicographically by the join key. If False,
        the order of the join key depends on the join type (how keyword).
    validate : str, optional
        If specified, checks if join is of specified type.
    
        * "one_to_one" or "1:1": check if join keys are unique in both left
          and right datasets.
        * "one_to_many" or "1:m": check if join keys are unique in left dataset.
        * "many_to_one" or "m:1": check if join keys are unique in right dataset.
        * "many_to_many" or "m:m": allowed, but does not result in checks.
    
        .. versionadded:: 1.5.0
    
    Returns
    -------
    DataFrame
        A dataframe containing columns from both the caller and `other`.
    
    See Also
    --------
    DataFrame.merge : For column(s)-on-column(s) operations.
    
    Notes
    -----
    Parameters `on`, `lsuffix`, and `rsuffix` are not supported when
    passing a list of `DataFrame` objects.
    
    Examples
    --------
    >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],
    ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})
    
    >>> df
      key   A
    0  K0  A0
    1  K1  A1
    2  K2  A2
    3  K3  A3
    4  K4  A4
    5  K5  A5
    
    >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],
    ...                       'B': ['B0', 'B1', 'B2']})
    
    >>> other
      key   B
    0  K0  B0
    1  K1  B1
    2  K2  B2
    
    Join DataFrames using their indexes.
    
    >>> df.join(other, lsuffix='_caller', rsuffix='_other')
      key_caller   A key_other    B
    0         K0  A0        K0   B0
    1         K1  A1        K1   B1
    2         K2  A2        K2   B2
    3         K3  A3       NaN  NaN
    4         K4  A4       NaN  NaN
    5         K5  A5       NaN  NaN
    
    If we want to join using the key columns, we need to set key to be
    the index in both `df` and `other`. The joined DataFrame will have
    key as its index.
    
    >>> df.set_index('key').join(other.set_index('key'))
          A    B
    key
    K0   A0   B0
    K1   A1   B1
    K2   A2   B2
    K3   A3  NaN
    K4   A4  NaN
    K5   A5  NaN
    
    Another option to join using the key columns is to use the `on`
    parameter. DataFrame.join always uses `other`'s index but we can use
    any column in `df`. This method preserves the original DataFrame's
    index in the result.
    
    >>> df.join(other.set_index('key'), on='key')
      key   A    B
    0  K0  A0   B0
    1  K1  A1   B1
    2  K2  A2   B2
    3  K3  A3  NaN
    4  K4  A4  NaN
    5  K5  A5  NaN
    
    Using non-unique key values shows how they are matched.
    
    >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K1', 'K3', 'K0', 'K1'],
    ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})
    
    >>> df
      key   A
    0  K0  A0
    1  K1  A1
    2  K1  A2
    3  K3  A3
    4  K0  A4
    5  K1  A5
    
    >>> df.join(other.set_index('key'), on='key', validate='m:1')
      key   A    B
    0  K0  A0   B0
    1  K1  A1   B1
    2  K1  A2   B1
    3  K3  A3  NaN
    4  K0  A4   B0
    5  K1  A5   B1

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& keys &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method keys in module pandas.core.generic:

keys() -> 'Index' method of pandas.core.frame.DataFrame instance
    Get the 'info axis' (see Indexing for more).
    
    This is index for Series, columns for DataFrame.
    
    Returns
    -------
    Index
        Info axis.
    
    Examples
    --------
    >>> d = pd.DataFrame(data={'A': [1, 2, 3], 'B': [0, 4, 8]},
    ...                  index=['a', 'b', 'c'])
    >>> d
       A  B
    a  1  0
    b  2  4
    c  3  8
    >>> d.keys()
    Index(['A', 'B'], dtype='object')

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& kurt &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method kurt in module pandas.core.frame:

kurt(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased kurtosis over requested axis.
    
    Kurtosis obtained using Fisher's definition of
    kurtosis (kurtosis of normal == 0.0). Normalized by N-1.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        For DataFrames, specifying ``axis=None`` will apply the aggregation
        across both axes.
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
                Examples
                --------
                >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])
                >>> s
                cat    1
                dog    2
                dog    2
                mouse  3
                dtype: int64
                >>> s.kurt()
                1.5
    
                With a DataFrame
    
                >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},
                ...                   index=['cat', 'dog', 'dog', 'mouse'])
                >>> df
                       a   b
                  cat  1   3
                  dog  2   4
                  dog  2   4
                mouse  3   4
                >>> df.kurt()
                a   1.5
                b   4.0
                dtype: float64
    
                With axis=None
    
                >>> df.kurt(axis=None).round(6)
                -0.988693
    
                Using axis=1
    
                >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},
                ...                   index=['cat', 'dog'])
                >>> df.kurt(axis=1)
                cat   -6.0
                dog   -6.0
                dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& kurtosis &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method kurt in module pandas.core.frame:

kurt(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased kurtosis over requested axis.
    
    Kurtosis obtained using Fisher's definition of
    kurtosis (kurtosis of normal == 0.0). Normalized by N-1.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        For DataFrames, specifying ``axis=None`` will apply the aggregation
        across both axes.
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
                Examples
                --------
                >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])
                >>> s
                cat    1
                dog    2
                dog    2
                mouse  3
                dtype: int64
                >>> s.kurt()
                1.5
    
                With a DataFrame
    
                >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},
                ...                   index=['cat', 'dog', 'dog', 'mouse'])
                >>> df
                       a   b
                  cat  1   3
                  dog  2   4
                  dog  2   4
                mouse  3   4
                >>> df.kurt()
                a   1.5
                b   4.0
                dtype: float64
    
                With axis=None
    
                >>> df.kurt(axis=None).round(6)
                -0.988693
    
                Using axis=1
    
                >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},
                ...                   index=['cat', 'dog'])
                >>> df.kurt(axis=1)
                cat   -6.0
                dog   -6.0
                dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& last &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method last in module pandas.core.generic:

last(offset) -> 'Self' method of pandas.core.frame.DataFrame instance
    Select final periods of time series data based on a date offset.
    
    .. deprecated:: 2.1
        :meth:`.last` is deprecated and will be removed in a future version.
        Please create a mask and filter using `.loc` instead.
    
    For a DataFrame with a sorted DatetimeIndex, this function
    selects the last few rows based on a date offset.
    
    Parameters
    ----------
    offset : str, DateOffset, dateutil.relativedelta
        The offset length of the data that will be selected. For instance,
        '3D' will display all the rows having their index within the last 3 days.
    
    Returns
    -------
    Series or DataFrame
        A subset of the caller.
    
    Raises
    ------
    TypeError
        If the index is not  a :class:`DatetimeIndex`
    
    See Also
    --------
    first : Select initial periods of time series based on a date offset.
    at_time : Select values at a particular time of the day.
    between_time : Select values between particular times of the day.
    
    Notes
    -----
    .. deprecated:: 2.1.0
        Please create a mask and filter using `.loc` instead
    
    Examples
    --------
    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')
    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
    >>> ts
                A
    2018-04-09  1
    2018-04-11  2
    2018-04-13  3
    2018-04-15  4
    
    Get the rows for the last 3 days:
    
    >>> ts.last('3D')  # doctest: +SKIP
                A
    2018-04-13  3
    2018-04-15  4
    
    Notice the data for 3 last calendar days were returned, not the last
    3 observed days in the dataset, and therefore data for 2018-04-11 was
    not returned.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& last_valid_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method last_valid_index in module pandas.core.generic:

last_valid_index() -> 'Hashable | None' method of pandas.core.frame.DataFrame instance
    Return index for last non-NA value or None, if no non-NA value is found.
    
    Returns
    -------
    type of index
    
    Examples
    --------
    For Series:
    
    >>> s = pd.Series([None, 3, 4])
    >>> s.first_valid_index()
    1
    >>> s.last_valid_index()
    2
    
    >>> s = pd.Series([None, None])
    >>> print(s.first_valid_index())
    None
    >>> print(s.last_valid_index())
    None
    
    If all elements in Series are NA/null, returns None.
    
    >>> s = pd.Series()
    >>> print(s.first_valid_index())
    None
    >>> print(s.last_valid_index())
    None
    
    If Series is empty, returns None.
    
    For DataFrame:
    
    >>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})
    >>> df
         A      B
    0  NaN    NaN
    1  NaN    3.0
    2  2.0    4.0
    >>> df.first_valid_index()
    1
    >>> df.last_valid_index()
    2
    
    >>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})
    >>> df
         A      B
    0  None   None
    1  None   None
    2  None   None
    >>> print(df.first_valid_index())
    None
    >>> print(df.last_valid_index())
    None
    
    If all elements in DataFrame are NA/null, returns None.
    
    >>> df = pd.DataFrame()
    >>> df
    Empty DataFrame
    Columns: []
    Index: []
    >>> print(df.first_valid_index())
    None
    >>> print(df.last_valid_index())
    None
    
    If DataFrame is empty, returns None.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& le &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method le in module pandas.core.frame:

le(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Less than or equal to of dataframe and other, element-wise (binary operator `le`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
    Parameters
    ----------
    other : scalar, sequence, Series, or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}, default 'columns'
        Whether to compare by the index (0 or 'index') or columns
        (1 or 'columns').
    level : int or label
        Broadcast across a level, matching Index values on the passed
        MultiIndex level.
    
    Returns
    -------
    DataFrame of bool
        Result of the comparison.
    
    See Also
    --------
    DataFrame.eq : Compare DataFrames for equality elementwise.
    DataFrame.ne : Compare DataFrames for inequality elementwise.
    DataFrame.le : Compare DataFrames for less than inequality
        or equality elementwise.
    DataFrame.lt : Compare DataFrames for strictly less than
        inequality elementwise.
    DataFrame.ge : Compare DataFrames for greater than inequality
        or equality elementwise.
    DataFrame.gt : Compare DataFrames for strictly greater than
        inequality elementwise.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    `NaN` values are considered different (i.e. `NaN` != `NaN`).
    
    Examples
    --------
    >>> df = pd.DataFrame({'cost': [250, 150, 100],
    ...                    'revenue': [100, 250, 300]},
    ...                   index=['A', 'B', 'C'])
    >>> df
       cost  revenue
    A   250      100
    B   150      250
    C   100      300
    
    Comparison with a scalar, using either the operator or method:
    
    >>> df == 100
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    >>> df.eq(100)
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    When `other` is a :class:`Series`, the columns of a DataFrame are aligned
    with the index of `other` and broadcast:
    
    >>> df != pd.Series([100, 250], index=["cost", "revenue"])
        cost  revenue
    A   True     True
    B   True    False
    C  False     True
    
    Use the method to control the broadcast axis:
    
    >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
       cost  revenue
    A  True    False
    B  True     True
    C  True     True
    D  True     True
    
    When comparing to an arbitrary sequence, the number of columns must
    match the number elements in `other`:
    
    >>> df == [250, 100]
        cost  revenue
    A   True     True
    B  False    False
    C  False    False
    
    Use the method to control the axis:
    
    >>> df.eq([250, 250, 100], axis='index')
        cost  revenue
    A   True    False
    B  False     True
    C   True    False
    
    Compare to a DataFrame of different shape.
    
    >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
    ...                      index=['A', 'B', 'C', 'D'])
    >>> other
       revenue
    A      300
    B      250
    C      100
    D      150
    
    >>> df.gt(other)
        cost  revenue
    A  False    False
    B  False    False
    C  False     True
    D  False    False
    
    Compare to a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
    ...                              'revenue': [100, 250, 300, 200, 175, 225]},
    ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
    ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
    >>> df_multindex
          cost  revenue
    Q1 A   250      100
       B   150      250
       C   100      300
    Q2 A   150      200
       B   300      175
       C   220      225
    
    >>> df.le(df_multindex, level=1)
           cost  revenue
    Q1 A   True     True
       B   True     True
       C   True     True
    Q2 A  False     True
       B   True    False
       C   True    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& loc &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on _LocIndexer in module pandas.core.indexing object:

class _LocIndexer(_LocationIndexer)
 |  Access a group of rows and columns by label(s) or a boolean array.
 |  
 |  ``.loc[]`` is primarily label based, but may also be used with a
 |  boolean array.
 |  
 |  Allowed inputs are:
 |  
 |  - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is
 |    interpreted as a *label* of the index, and **never** as an
 |    integer position along the index).
 |  - A list or array of labels, e.g. ``['a', 'b', 'c']``.
 |  - A slice object with labels, e.g. ``'a':'f'``.
 |  
 |    .. warning:: Note that contrary to usual python slices, **both** the
 |        start and the stop are included
 |  
 |  - A boolean array of the same length as the axis being sliced,
 |    e.g. ``[True, False, True]``.
 |  - An alignable boolean Series. The index of the key will be aligned before
 |    masking.
 |  - An alignable Index. The Index of the returned selection will be the input.
 |  - A ``callable`` function with one argument (the calling Series or
 |    DataFrame) and that returns valid output for indexing (one of the above)
 |  
 |  See more at :ref:`Selection by Label <indexing.label>`.
 |  
 |  Raises
 |  ------
 |  KeyError
 |      If any items are not found.
 |  IndexingError
 |      If an indexed key is passed and its index is unalignable to the frame index.
 |  
 |  See Also
 |  --------
 |  DataFrame.at : Access a single value for a row/column label pair.
 |  DataFrame.iloc : Access group of rows and columns by integer position(s).
 |  DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the
 |                 Series/DataFrame.
 |  Series.loc : Access group of values using labels.
 |  
 |  Examples
 |  --------
 |  **Getting values**
 |  
 |  >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
 |  ...                   index=['cobra', 'viper', 'sidewinder'],
 |  ...                   columns=['max_speed', 'shield'])
 |  >>> df
 |              max_speed  shield
 |  cobra               1       2
 |  viper               4       5
 |  sidewinder          7       8
 |  
 |  Single label. Note this returns the row as a Series.
 |  
 |  >>> df.loc['viper']
 |  max_speed    4
 |  shield       5
 |  Name: viper, dtype: int64
 |  
 |  List of labels. Note using ``[[]]`` returns a DataFrame.
 |  
 |  >>> df.loc[['viper', 'sidewinder']]
 |              max_speed  shield
 |  viper               4       5
 |  sidewinder          7       8
 |  
 |  Single label for row and column
 |  
 |  >>> df.loc['cobra', 'shield']
 |  2
 |  
 |  Slice with labels for row and single label for column. As mentioned
 |  above, note that both the start and stop of the slice are included.
 |  
 |  >>> df.loc['cobra':'viper', 'max_speed']
 |  cobra    1
 |  viper    4
 |  Name: max_speed, dtype: int64
 |  
 |  Boolean list with the same length as the row axis
 |  
 |  >>> df.loc[[False, False, True]]
 |              max_speed  shield
 |  sidewinder          7       8
 |  
 |  Alignable boolean Series:
 |  
 |  >>> df.loc[pd.Series([False, True, False],
 |  ...                  index=['viper', 'sidewinder', 'cobra'])]
 |                       max_speed  shield
 |  sidewinder          7       8
 |  
 |  Index (same behavior as ``df.reindex``)
 |  
 |  >>> df.loc[pd.Index(["cobra", "viper"], name="foo")]
 |         max_speed  shield
 |  foo
 |  cobra          1       2
 |  viper          4       5
 |  
 |  Conditional that returns a boolean Series
 |  
 |  >>> df.loc[df['shield'] > 6]
 |              max_speed  shield
 |  sidewinder          7       8
 |  
 |  Conditional that returns a boolean Series with column labels specified
 |  
 |  >>> df.loc[df['shield'] > 6, ['max_speed']]
 |              max_speed
 |  sidewinder          7
 |  
 |  Multiple conditional using ``&`` that returns a boolean Series
 |  
 |  >>> df.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]
 |              max_speed  shield
 |  viper          4       5
 |  
 |  Multiple conditional using ``|`` that returns a boolean Series
 |  
 |  >>> df.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]
 |              max_speed  shield
 |  cobra               1       2
 |  sidewinder          7       8
 |  
 |  Please ensure that each condition is wrapped in parentheses ``()``.
 |  See the :ref:`user guide<indexing.boolean>`
 |  for more details and explanations of Boolean indexing.
 |  
 |  .. note::
 |      If you find yourself using 3 or more conditionals in ``.loc[]``,
 |      consider using :ref:`advanced indexing<advanced.advanced_hierarchical>`.
 |  
 |      See below for using ``.loc[]`` on MultiIndex DataFrames.
 |  
 |  Callable that returns a boolean Series
 |  
 |  >>> df.loc[lambda df: df['shield'] == 8]
 |              max_speed  shield
 |  sidewinder          7       8
 |  
 |  **Setting values**
 |  
 |  Set value for all items matching the list of labels
 |  
 |  >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50
 |  >>> df
 |              max_speed  shield
 |  cobra               1       2
 |  viper               4      50
 |  sidewinder          7      50
 |  
 |  Set value for an entire row
 |  
 |  >>> df.loc['cobra'] = 10
 |  >>> df
 |              max_speed  shield
 |  cobra              10      10
 |  viper               4      50
 |  sidewinder          7      50
 |  
 |  Set value for an entire column
 |  
 |  >>> df.loc[:, 'max_speed'] = 30
 |  >>> df
 |              max_speed  shield
 |  cobra              30      10
 |  viper              30      50
 |  sidewinder         30      50
 |  
 |  Set value for rows matching callable condition
 |  
 |  >>> df.loc[df['shield'] > 35] = 0
 |  >>> df
 |              max_speed  shield
 |  cobra              30      10
 |  viper               0       0
 |  sidewinder          0       0
 |  
 |  Add value matching location
 |  
 |  >>> df.loc["viper", "shield"] += 5
 |  >>> df
 |              max_speed  shield
 |  cobra              30      10
 |  viper               0       5
 |  sidewinder          0       0
 |  
 |  Setting using a ``Series`` or a ``DataFrame`` sets the values matching the
 |  index labels, not the index positions.
 |  
 |  >>> shuffled_df = df.loc[["viper", "cobra", "sidewinder"]]
 |  >>> df.loc[:] += shuffled_df
 |  >>> df
 |              max_speed  shield
 |  cobra              60      20
 |  viper               0      10
 |  sidewinder          0       0
 |  
 |  **Getting values on a DataFrame with an index that has integer labels**
 |  
 |  Another example using integers for the index
 |  
 |  >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
 |  ...                   index=[7, 8, 9], columns=['max_speed', 'shield'])
 |  >>> df
 |     max_speed  shield
 |  7          1       2
 |  8          4       5
 |  9          7       8
 |  
 |  Slice with integer labels for rows. As mentioned above, note that both
 |  the start and stop of the slice are included.
 |  
 |  >>> df.loc[7:9]
 |     max_speed  shield
 |  7          1       2
 |  8          4       5
 |  9          7       8
 |  
 |  **Getting values with a MultiIndex**
 |  
 |  A number of examples using a DataFrame with a MultiIndex
 |  
 |  >>> tuples = [
 |  ...     ('cobra', 'mark i'), ('cobra', 'mark ii'),
 |  ...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),
 |  ...     ('viper', 'mark ii'), ('viper', 'mark iii')
 |  ... ]
 |  >>> index = pd.MultiIndex.from_tuples(tuples)
 |  >>> values = [[12, 2], [0, 4], [10, 20],
 |  ...           [1, 4], [7, 1], [16, 36]]
 |  >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)
 |  >>> df
 |                       max_speed  shield
 |  cobra      mark i           12       2
 |             mark ii           0       4
 |  sidewinder mark i           10      20
 |             mark ii           1       4
 |  viper      mark ii           7       1
 |             mark iii         16      36
 |  
 |  Single label. Note this returns a DataFrame with a single index.
 |  
 |  >>> df.loc['cobra']
 |           max_speed  shield
 |  mark i          12       2
 |  mark ii          0       4
 |  
 |  Single index tuple. Note this returns a Series.
 |  
 |  >>> df.loc[('cobra', 'mark ii')]
 |  max_speed    0
 |  shield       4
 |  Name: (cobra, mark ii), dtype: int64
 |  
 |  Single label for row and column. Similar to passing in a tuple, this
 |  returns a Series.
 |  
 |  >>> df.loc['cobra', 'mark i']
 |  max_speed    12
 |  shield        2
 |  Name: (cobra, mark i), dtype: int64
 |  
 |  Single tuple. Note using ``[[]]`` returns a DataFrame.
 |  
 |  >>> df.loc[[('cobra', 'mark ii')]]
 |                 max_speed  shield
 |  cobra mark ii          0       4
 |  
 |  Single tuple for the index with a single label for the column
 |  
 |  >>> df.loc[('cobra', 'mark i'), 'shield']
 |  2
 |  
 |  Slice from index tuple to single label
 |  
 |  >>> df.loc[('cobra', 'mark i'):'viper']
 |                       max_speed  shield
 |  cobra      mark i           12       2
 |             mark ii           0       4
 |  sidewinder mark i           10      20
 |             mark ii           1       4
 |  viper      mark ii           7       1
 |             mark iii         16      36
 |  
 |  Slice from index tuple to index tuple
 |  
 |  >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]
 |                      max_speed  shield
 |  cobra      mark i          12       2
 |             mark ii          0       4
 |  sidewinder mark i          10      20
 |             mark ii          1       4
 |  viper      mark ii          7       1
 |  
 |  Please see the :ref:`user guide<advanced.advanced_hierarchical>`
 |  for more details and explanations of advanced indexing.
 |  
 |  Method resolution order:
 |      _LocIndexer
 |      _LocationIndexer
 |      pandas._libs.indexing.NDFrameIndexerBase
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'_takeable': 'bool'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _LocationIndexer:
 |  
 |  __call__(self, axis: 'Axis | None' = None) -> 'Self'
 |      Call self as a function.
 |  
 |  __getitem__(self, key)
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _LocationIndexer:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from _LocationIndexer:
 |  
 |  axis = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__ = __reduce_cython__(...)
 |  
 |  __reduce_cython__(self)
 |  
 |  __setstate__ = __setstate_cython__(...)
 |  
 |  __setstate_cython__(self, __pyx_state)
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas._libs.indexing.NDFrameIndexerBase:
 |  
 |  name
 |  
 |  ndim
 |  
 |  obj

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& lt &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method lt in module pandas.core.frame:

lt(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Less than of dataframe and other, element-wise (binary operator `lt`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
    Parameters
    ----------
    other : scalar, sequence, Series, or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}, default 'columns'
        Whether to compare by the index (0 or 'index') or columns
        (1 or 'columns').
    level : int or label
        Broadcast across a level, matching Index values on the passed
        MultiIndex level.
    
    Returns
    -------
    DataFrame of bool
        Result of the comparison.
    
    See Also
    --------
    DataFrame.eq : Compare DataFrames for equality elementwise.
    DataFrame.ne : Compare DataFrames for inequality elementwise.
    DataFrame.le : Compare DataFrames for less than inequality
        or equality elementwise.
    DataFrame.lt : Compare DataFrames for strictly less than
        inequality elementwise.
    DataFrame.ge : Compare DataFrames for greater than inequality
        or equality elementwise.
    DataFrame.gt : Compare DataFrames for strictly greater than
        inequality elementwise.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    `NaN` values are considered different (i.e. `NaN` != `NaN`).
    
    Examples
    --------
    >>> df = pd.DataFrame({'cost': [250, 150, 100],
    ...                    'revenue': [100, 250, 300]},
    ...                   index=['A', 'B', 'C'])
    >>> df
       cost  revenue
    A   250      100
    B   150      250
    C   100      300
    
    Comparison with a scalar, using either the operator or method:
    
    >>> df == 100
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    >>> df.eq(100)
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    When `other` is a :class:`Series`, the columns of a DataFrame are aligned
    with the index of `other` and broadcast:
    
    >>> df != pd.Series([100, 250], index=["cost", "revenue"])
        cost  revenue
    A   True     True
    B   True    False
    C  False     True
    
    Use the method to control the broadcast axis:
    
    >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
       cost  revenue
    A  True    False
    B  True     True
    C  True     True
    D  True     True
    
    When comparing to an arbitrary sequence, the number of columns must
    match the number elements in `other`:
    
    >>> df == [250, 100]
        cost  revenue
    A   True     True
    B  False    False
    C  False    False
    
    Use the method to control the axis:
    
    >>> df.eq([250, 250, 100], axis='index')
        cost  revenue
    A   True    False
    B  False     True
    C   True    False
    
    Compare to a DataFrame of different shape.
    
    >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
    ...                      index=['A', 'B', 'C', 'D'])
    >>> other
       revenue
    A      300
    B      250
    C      100
    D      150
    
    >>> df.gt(other)
        cost  revenue
    A  False    False
    B  False    False
    C  False     True
    D  False    False
    
    Compare to a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
    ...                              'revenue': [100, 250, 300, 200, 175, 225]},
    ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
    ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
    >>> df_multindex
          cost  revenue
    Q1 A   250      100
       B   150      250
       C   100      300
    Q2 A   150      200
       B   300      175
       C   220      225
    
    >>> df.le(df_multindex, level=1)
           cost  revenue
    Q1 A   True     True
       B   True     True
       C   True     True
    Q2 A  False     True
       B   True    False
       C   True    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& map &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method map in module pandas.core.frame:

map(func: 'PythonFuncType', na_action: 'str | None' = None, **kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Apply a function to a Dataframe elementwise.
    
    .. versionadded:: 2.1.0
    
       DataFrame.applymap was deprecated and renamed to DataFrame.map.
    
    This method applies a function that accepts and returns a scalar
    to every element of a DataFrame.
    
    Parameters
    ----------
    func : callable
        Python function, returns a single value from a single value.
    na_action : {None, 'ignore'}, default None
        If 'ignore', propagate NaN values, without passing them to func.
    **kwargs
        Additional keyword arguments to pass as keywords arguments to
        `func`.
    
    Returns
    -------
    DataFrame
        Transformed DataFrame.
    
    See Also
    --------
    DataFrame.apply : Apply a function along input axis of DataFrame.
    DataFrame.replace: Replace values given in `to_replace` with `value`.
    Series.map : Apply a function elementwise on a Series.
    
    Examples
    --------
    >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])
    >>> df
           0      1
    0  1.000  2.120
    1  3.356  4.567
    
    >>> df.map(lambda x: len(str(x)))
       0  1
    0  3  4
    1  5  5
    
    Like Series.map, NA values can be ignored:
    
    >>> df_copy = df.copy()
    >>> df_copy.iloc[0, 0] = pd.NA
    >>> df_copy.map(lambda x: len(str(x)), na_action='ignore')
         0  1
    0  NaN  4
    1  5.0  5
    
    It is also possible to use `map` with functions that are not
    `lambda` functions:
    
    >>> df.map(round, ndigits=1)
         0    1
    0  1.0  2.1
    1  3.4  4.6
    
    Note that a vectorized version of `func` often exists, which will
    be much faster. You could square each number elementwise.
    
    >>> df.map(lambda x: x**2)
               0          1
    0   1.000000   4.494400
    1  11.262736  20.857489
    
    But it's better to avoid map in that case.
    
    >>> df ** 2
               0          1
    0   1.000000   4.494400
    1  11.262736  20.857489

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& mask &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mask in module pandas.core.generic:

mask(cond, other=<no_default>, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Replace values where the condition is True.
    
    Parameters
    ----------
    cond : bool Series/DataFrame, array-like, or callable
        Where `cond` is False, keep the original value. Where
        True, replace with corresponding value from `other`.
        If `cond` is callable, it is computed on the Series/DataFrame and
        should return boolean Series/DataFrame or array. The callable must
        not change input Series/DataFrame (though pandas doesn't check it).
    other : scalar, Series/DataFrame, or callable
        Entries where `cond` is True are replaced with
        corresponding value from `other`.
        If other is callable, it is computed on the Series/DataFrame and
        should return scalar or Series/DataFrame. The callable must not
        change input Series/DataFrame (though pandas doesn't check it).
        If not specified, entries will be filled with the corresponding
        NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension
        dtypes).
    inplace : bool, default False
        Whether to perform the operation in place on the data.
    axis : int, default None
        Alignment axis if needed. For `Series` this parameter is
        unused and defaults to 0.
    level : int, default None
        Alignment level if needed.
    
    Returns
    -------
    Same type as caller or None if ``inplace=True``.
    
    See Also
    --------
    :func:`DataFrame.where` : Return an object of same shape as
        self.
    
    Notes
    -----
    The mask method is an application of the if-then idiom. For each
    element in the calling DataFrame, if ``cond`` is ``False`` the
    element is used; otherwise the corresponding element from the DataFrame
    ``other`` is used. If the axis of ``other`` does not align with axis of
    ``cond`` Series/DataFrame, the misaligned index positions will be filled with
    True.
    
    The signature for :func:`DataFrame.where` differs from
    :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to
    ``np.where(m, df1, df2)``.
    
    For further details and examples see the ``mask`` documentation in
    :ref:`indexing <indexing.where_mask>`.
    
    The dtype of the object takes precedence. The fill value is casted to
    the object's dtype, if this can be done losslessly.
    
    Examples
    --------
    >>> s = pd.Series(range(5))
    >>> s.where(s > 0)
    0    NaN
    1    1.0
    2    2.0
    3    3.0
    4    4.0
    dtype: float64
    >>> s.mask(s > 0)
    0    0.0
    1    NaN
    2    NaN
    3    NaN
    4    NaN
    dtype: float64
    
    >>> s = pd.Series(range(5))
    >>> t = pd.Series([True, False])
    >>> s.where(t, 99)
    0     0
    1    99
    2    99
    3    99
    4    99
    dtype: int64
    >>> s.mask(t, 99)
    0    99
    1     1
    2    99
    3    99
    4    99
    dtype: int64
    
    >>> s.where(s > 1, 10)
    0    10
    1    10
    2    2
    3    3
    4    4
    dtype: int64
    >>> s.mask(s > 1, 10)
    0     0
    1     1
    2    10
    3    10
    4    10
    dtype: int64
    
    >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])
    >>> df
       A  B
    0  0  1
    1  2  3
    2  4  5
    3  6  7
    4  8  9
    >>> m = df % 3 == 0
    >>> df.where(m, -df)
       A  B
    0  0 -1
    1 -2  3
    2 -4 -5
    3  6 -7
    4 -8  9
    >>> df.where(m, -df) == np.where(m, df, -df)
          A     B
    0  True  True
    1  True  True
    2  True  True
    3  True  True
    4  True  True
    >>> df.where(m, -df) == df.mask(~m, -df)
          A     B
    0  True  True
    1  True  True
    2  True  True
    3  True  True
    4  True  True

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& max &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method max in module pandas.core.frame:

max(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the maximum of the values over the requested axis.
    
    If you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        For DataFrames, specifying ``axis=None`` will apply the aggregation
        across both axes.
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
    See Also
    --------
    Series.sum : Return the sum.
    Series.min : Return the minimum.
    Series.max : Return the maximum.
    Series.idxmin : Return the index of the minimum.
    Series.idxmax : Return the index of the maximum.
    DataFrame.sum : Return the sum over the requested axis.
    DataFrame.min : Return the minimum over the requested axis.
    DataFrame.max : Return the maximum over the requested axis.
    DataFrame.idxmin : Return the index of the minimum over the requested axis.
    DataFrame.idxmax : Return the index of the maximum over the requested axis.
    
    Examples
    --------
    >>> idx = pd.MultiIndex.from_arrays([
    ...     ['warm', 'warm', 'cold', 'cold'],
    ...     ['dog', 'falcon', 'fish', 'spider']],
    ...     names=['blooded', 'animal'])
    >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
    >>> s
    blooded  animal
    warm     dog       4
             falcon    2
    cold     fish      0
             spider    8
    Name: legs, dtype: int64
    
    >>> s.max()
    8

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& mean &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mean in module pandas.core.frame:

mean(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the mean of the values over the requested axis.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        For DataFrames, specifying ``axis=None`` will apply the aggregation
        across both axes.
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
                Examples
                --------
                >>> s = pd.Series([1, 2, 3])
                >>> s.mean()
                2.0
    
                With a DataFrame
    
                >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
                >>> df
                       a   b
                tiger  1   2
                zebra  2   3
                >>> df.mean()
                a   1.5
                b   2.5
                dtype: float64
    
                Using axis=1
    
                >>> df.mean(axis=1)
                tiger   1.5
                zebra   2.5
                dtype: float64
    
                In this case, `numeric_only` should be set to `True` to avoid
                getting an error.
    
                >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
                ...                   index=['tiger', 'zebra'])
                >>> df.mean(numeric_only=True)
                a   1.5
                dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& median &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method median in module pandas.core.frame:

median(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the median of the values over the requested axis.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        For DataFrames, specifying ``axis=None`` will apply the aggregation
        across both axes.
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
                Examples
                --------
                >>> s = pd.Series([1, 2, 3])
                >>> s.median()
                2.0
    
                With a DataFrame
    
                >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
                >>> df
                       a   b
                tiger  1   2
                zebra  2   3
                >>> df.median()
                a   1.5
                b   2.5
                dtype: float64
    
                Using axis=1
    
                >>> df.median(axis=1)
                tiger   1.5
                zebra   2.5
                dtype: float64
    
                In this case, `numeric_only` should be set to `True`
                to avoid getting an error.
    
                >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
                ...                   index=['tiger', 'zebra'])
                >>> df.median(numeric_only=True)
                a   1.5
                dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& melt &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method melt in module pandas.core.frame:

melt(id_vars=None, value_vars=None, var_name=None, value_name: 'Hashable' = 'value', col_level: 'Level | None' = None, ignore_index: 'bool' = True) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.
    
    This function is useful to massage a DataFrame into a format where one
    or more columns are identifier variables (`id_vars`), while all other
    columns, considered measured variables (`value_vars`), are "unpivoted" to
    the row axis, leaving just two non-identifier columns, 'variable' and
    'value'.
    
    Parameters
    ----------
    id_vars : scalar, tuple, list, or ndarray, optional
        Column(s) to use as identifier variables.
    value_vars : scalar, tuple, list, or ndarray, optional
        Column(s) to unpivot. If not specified, uses all columns that
        are not set as `id_vars`.
    var_name : scalar, default None
        Name to use for the 'variable' column. If None it uses
        ``frame.columns.name`` or 'variable'.
    value_name : scalar, default 'value'
        Name to use for the 'value' column, can't be an existing column label.
    col_level : scalar, optional
        If columns are a MultiIndex then use this level to melt.
    ignore_index : bool, default True
        If True, original index is ignored. If False, the original index is retained.
        Index labels will be repeated as necessary.
    
    Returns
    -------
    DataFrame
        Unpivoted DataFrame.
    
    See Also
    --------
    melt : Identical method.
    pivot_table : Create a spreadsheet-style pivot table as a DataFrame.
    DataFrame.pivot : Return reshaped DataFrame organized
        by given index / column values.
    DataFrame.explode : Explode a DataFrame from list-like
            columns to long format.
    
    Notes
    -----
    Reference :ref:`the user guide <reshaping.melt>` for more examples.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},
    ...                    'B': {0: 1, 1: 3, 2: 5},
    ...                    'C': {0: 2, 1: 4, 2: 6}})
    >>> df
       A  B  C
    0  a  1  2
    1  b  3  4
    2  c  5  6
    
    >>> df.melt(id_vars=['A'], value_vars=['B'])
       A variable  value
    0  a        B      1
    1  b        B      3
    2  c        B      5
    
    >>> df.melt(id_vars=['A'], value_vars=['B', 'C'])
       A variable  value
    0  a        B      1
    1  b        B      3
    2  c        B      5
    3  a        C      2
    4  b        C      4
    5  c        C      6
    
    The names of 'variable' and 'value' columns can be customized:
    
    >>> df.melt(id_vars=['A'], value_vars=['B'],
    ...         var_name='myVarname', value_name='myValname')
       A myVarname  myValname
    0  a         B          1
    1  b         B          3
    2  c         B          5
    
    Original index values can be kept around:
    
    >>> df.melt(id_vars=['A'], value_vars=['B', 'C'], ignore_index=False)
       A variable  value
    0  a        B      1
    1  b        B      3
    2  c        B      5
    0  a        C      2
    1  b        C      4
    2  c        C      6
    
    If you have multi-index columns:
    
    >>> df.columns = [list('ABC'), list('DEF')]
    >>> df
       A  B  C
       D  E  F
    0  a  1  2
    1  b  3  4
    2  c  5  6
    
    >>> df.melt(col_level=0, id_vars=['A'], value_vars=['B'])
       A variable  value
    0  a        B      1
    1  b        B      3
    2  c        B      5
    
    >>> df.melt(id_vars=[('A', 'D')], value_vars=[('B', 'E')])
      (A, D) variable_0 variable_1  value
    0      a          B          E      1
    1      b          B          E      3
    2      c          B          E      5

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& memory_usage &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method memory_usage in module pandas.core.frame:

memory_usage(index: 'bool' = True, deep: 'bool' = False) -> 'Series' method of pandas.core.frame.DataFrame instance
    Return the memory usage of each column in bytes.
    
    The memory usage can optionally include the contribution of
    the index and elements of `object` dtype.
    
    This value is displayed in `DataFrame.info` by default. This can be
    suppressed by setting ``pandas.options.display.memory_usage`` to False.
    
    Parameters
    ----------
    index : bool, default True
        Specifies whether to include the memory usage of the DataFrame's
        index in returned Series. If ``index=True``, the memory usage of
        the index is the first item in the output.
    deep : bool, default False
        If True, introspect the data deeply by interrogating
        `object` dtypes for system-level memory consumption, and include
        it in the returned values.
    
    Returns
    -------
    Series
        A Series whose index is the original column names and whose values
        is the memory usage of each column in bytes.
    
    See Also
    --------
    numpy.ndarray.nbytes : Total bytes consumed by the elements of an
        ndarray.
    Series.memory_usage : Bytes consumed by a Series.
    Categorical : Memory-efficient array for string values with
        many repeated values.
    DataFrame.info : Concise summary of a DataFrame.
    
    Notes
    -----
    See the :ref:`Frequently Asked Questions <df-memory-usage>` for more
    details.
    
    Examples
    --------
    >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']
    >>> data = dict([(t, np.ones(shape=5000, dtype=int).astype(t))
    ...              for t in dtypes])
    >>> df = pd.DataFrame(data)
    >>> df.head()
       int64  float64            complex128  object  bool
    0      1      1.0              1.0+0.0j       1  True
    1      1      1.0              1.0+0.0j       1  True
    2      1      1.0              1.0+0.0j       1  True
    3      1      1.0              1.0+0.0j       1  True
    4      1      1.0              1.0+0.0j       1  True
    
    >>> df.memory_usage()
    Index           128
    int64         40000
    float64       40000
    complex128    80000
    object        40000
    bool           5000
    dtype: int64
    
    >>> df.memory_usage(index=False)
    int64         40000
    float64       40000
    complex128    80000
    object        40000
    bool           5000
    dtype: int64
    
    The memory footprint of `object` dtype columns is ignored by default:
    
    >>> df.memory_usage(deep=True)
    Index            128
    int64          40000
    float64        40000
    complex128     80000
    object        180000
    bool            5000
    dtype: int64
    
    Use a Categorical for efficient storage of an object-dtype column with
    many repeated values.
    
    >>> df['object'].astype('category').memory_usage(deep=True)
    5244

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& merge &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method merge in module pandas.core.frame:

merge(right: 'DataFrame | Series', how: 'MergeHow' = 'inner', on: 'IndexLabel | AnyArrayLike | None' = None, left_on: 'IndexLabel | AnyArrayLike | None' = None, right_on: 'IndexLabel | AnyArrayLike | None' = None, left_index: 'bool' = False, right_index: 'bool' = False, sort: 'bool' = False, suffixes: 'Suffixes' = ('_x', '_y'), copy: 'bool | None' = None, indicator: 'str | bool' = False, validate: 'MergeValidate | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Merge DataFrame or named Series objects with a database-style join.
    
    A named Series object is treated as a DataFrame with a single named column.
    
    The join is done on columns or indexes. If joining columns on
    columns, the DataFrame indexes *will be ignored*. Otherwise if joining indexes
    on indexes or indexes on a column or columns, the index will be passed on.
    When performing a cross merge, no column specifications to merge on are
    allowed.
    
    .. warning::
    
        If both key columns contain rows where the key is a null value, those
        rows will be matched against each other. This is different from usual SQL
        join behaviour and can lead to unexpected results.
    
    Parameters
    ----------
    right : DataFrame or named Series
        Object to merge with.
    how : {'left', 'right', 'outer', 'inner', 'cross'}, default 'inner'
        Type of merge to be performed.
    
        * left: use only keys from left frame, similar to a SQL left outer join;
          preserve key order.
        * right: use only keys from right frame, similar to a SQL right outer join;
          preserve key order.
        * outer: use union of keys from both frames, similar to a SQL full outer
          join; sort keys lexicographically.
        * inner: use intersection of keys from both frames, similar to a SQL inner
          join; preserve the order of the left keys.
        * cross: creates the cartesian product from both frames, preserves the order
          of the left keys.
    on : label or list
        Column or index level names to join on. These must be found in both
        DataFrames. If `on` is None and not merging on indexes then this defaults
        to the intersection of the columns in both DataFrames.
    left_on : label or list, or array-like
        Column or index level names to join on in the left DataFrame. Can also
        be an array or list of arrays of the length of the left DataFrame.
        These arrays are treated as if they are columns.
    right_on : label or list, or array-like
        Column or index level names to join on in the right DataFrame. Can also
        be an array or list of arrays of the length of the right DataFrame.
        These arrays are treated as if they are columns.
    left_index : bool, default False
        Use the index from the left DataFrame as the join key(s). If it is a
        MultiIndex, the number of keys in the other DataFrame (either the index
        or a number of columns) must match the number of levels.
    right_index : bool, default False
        Use the index from the right DataFrame as the join key. Same caveats as
        left_index.
    sort : bool, default False
        Sort the join keys lexicographically in the result DataFrame. If False,
        the order of the join keys depends on the join type (how keyword).
    suffixes : list-like, default is ("_x", "_y")
        A length-2 sequence where each element is optionally a string
        indicating the suffix to add to overlapping column names in
        `left` and `right` respectively. Pass a value of `None` instead
        of a string to indicate that the column name from `left` or
        `right` should be left as-is, with no suffix. At least one of the
        values must not be None.
    copy : bool, default True
        If False, avoid copy if possible.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    indicator : bool or str, default False
        If True, adds a column to the output DataFrame called "_merge" with
        information on the source of each row. The column can be given a different
        name by providing a string argument. The column will have a Categorical
        type with the value of "left_only" for observations whose merge key only
        appears in the left DataFrame, "right_only" for observations
        whose merge key only appears in the right DataFrame, and "both"
        if the observation's merge key is found in both DataFrames.
    
    validate : str, optional
        If specified, checks if merge is of specified type.
    
        * "one_to_one" or "1:1": check if merge keys are unique in both
          left and right datasets.
        * "one_to_many" or "1:m": check if merge keys are unique in left
          dataset.
        * "many_to_one" or "m:1": check if merge keys are unique in right
          dataset.
        * "many_to_many" or "m:m": allowed, but does not result in checks.
    
    Returns
    -------
    DataFrame
        A DataFrame of the two merged objects.
    
    See Also
    --------
    merge_ordered : Merge with optional filling/interpolation.
    merge_asof : Merge on nearest keys.
    DataFrame.join : Similar method using indices.
    
    Examples
    --------
    >>> df1 = pd.DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],
    ...                     'value': [1, 2, 3, 5]})
    >>> df2 = pd.DataFrame({'rkey': ['foo', 'bar', 'baz', 'foo'],
    ...                     'value': [5, 6, 7, 8]})
    >>> df1
        lkey value
    0   foo      1
    1   bar      2
    2   baz      3
    3   foo      5
    >>> df2
        rkey value
    0   foo      5
    1   bar      6
    2   baz      7
    3   foo      8
    
    Merge df1 and df2 on the lkey and rkey columns. The value columns have
    the default suffixes, _x and _y, appended.
    
    >>> df1.merge(df2, left_on='lkey', right_on='rkey')
      lkey  value_x rkey  value_y
    0  foo        1  foo        5
    1  foo        1  foo        8
    2  bar        2  bar        6
    3  baz        3  baz        7
    4  foo        5  foo        5
    5  foo        5  foo        8
    
    Merge DataFrames df1 and df2 with specified left and right suffixes
    appended to any overlapping columns.
    
    >>> df1.merge(df2, left_on='lkey', right_on='rkey',
    ...           suffixes=('_left', '_right'))
      lkey  value_left rkey  value_right
    0  foo           1  foo            5
    1  foo           1  foo            8
    2  bar           2  bar            6
    3  baz           3  baz            7
    4  foo           5  foo            5
    5  foo           5  foo            8
    
    Merge DataFrames df1 and df2, but raise an exception if the DataFrames have
    any overlapping columns.
    
    >>> df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=(False, False))
    Traceback (most recent call last):
    ...
    ValueError: columns overlap but no suffix specified:
        Index(['value'], dtype='object')
    
    >>> df1 = pd.DataFrame({'a': ['foo', 'bar'], 'b': [1, 2]})
    >>> df2 = pd.DataFrame({'a': ['foo', 'baz'], 'c': [3, 4]})
    >>> df1
          a  b
    0   foo  1
    1   bar  2
    >>> df2
          a  c
    0   foo  3
    1   baz  4
    
    >>> df1.merge(df2, how='inner', on='a')
          a  b  c
    0   foo  1  3
    
    >>> df1.merge(df2, how='left', on='a')
          a  b  c
    0   foo  1  3.0
    1   bar  2  NaN
    
    >>> df1 = pd.DataFrame({'left': ['foo', 'bar']})
    >>> df2 = pd.DataFrame({'right': [7, 8]})
    >>> df1
        left
    0   foo
    1   bar
    >>> df2
        right
    0   7
    1   8
    
    >>> df1.merge(df2, how='cross')
       left  right
    0   foo      7
    1   foo      8
    2   bar      7
    3   bar      8

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& min &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method min in module pandas.core.frame:

min(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the minimum of the values over the requested axis.
    
    If you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        For DataFrames, specifying ``axis=None`` will apply the aggregation
        across both axes.
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
    See Also
    --------
    Series.sum : Return the sum.
    Series.min : Return the minimum.
    Series.max : Return the maximum.
    Series.idxmin : Return the index of the minimum.
    Series.idxmax : Return the index of the maximum.
    DataFrame.sum : Return the sum over the requested axis.
    DataFrame.min : Return the minimum over the requested axis.
    DataFrame.max : Return the maximum over the requested axis.
    DataFrame.idxmin : Return the index of the minimum over the requested axis.
    DataFrame.idxmax : Return the index of the maximum over the requested axis.
    
    Examples
    --------
    >>> idx = pd.MultiIndex.from_arrays([
    ...     ['warm', 'warm', 'cold', 'cold'],
    ...     ['dog', 'falcon', 'fish', 'spider']],
    ...     names=['blooded', 'animal'])
    >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
    >>> s
    blooded  animal
    warm     dog       4
             falcon    2
    cold     fish      0
             spider    8
    Name: legs, dtype: int64
    
    >>> s.min()
    0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& mod &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mod in module pandas.core.frame:

mod(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Modulo of dataframe and other, element-wise (binary operator `mod`).
    
    Equivalent to ``dataframe % other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rmod`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& mode &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mode in module pandas.core.frame:

mode(axis: 'Axis' = 0, numeric_only: 'bool' = False, dropna: 'bool' = True) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get the mode(s) of each element along the selected axis.
    
    The mode of a set of values is the value that appears most often.
    It can be multiple values.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to iterate over while searching for the mode:
    
        * 0 or 'index' : get mode of each column
        * 1 or 'columns' : get mode of each row.
    
    numeric_only : bool, default False
        If True, only apply to numeric columns.
    dropna : bool, default True
        Don't consider counts of NaN/NaT.
    
    Returns
    -------
    DataFrame
        The modes of each column or row.
    
    See Also
    --------
    Series.mode : Return the highest frequency value in a Series.
    Series.value_counts : Return the counts of values in a Series.
    
    Examples
    --------
    >>> df = pd.DataFrame([('bird', 2, 2),
    ...                    ('mammal', 4, np.nan),
    ...                    ('arthropod', 8, 0),
    ...                    ('bird', 2, np.nan)],
    ...                   index=('falcon', 'horse', 'spider', 'ostrich'),
    ...                   columns=('species', 'legs', 'wings'))
    >>> df
               species  legs  wings
    falcon        bird     2    2.0
    horse       mammal     4    NaN
    spider   arthropod     8    0.0
    ostrich       bird     2    NaN
    
    By default, missing values are not considered, and the mode of wings
    are both 0 and 2. Because the resulting DataFrame has two rows,
    the second row of ``species`` and ``legs`` contains ``NaN``.
    
    >>> df.mode()
      species  legs  wings
    0    bird   2.0    0.0
    1     NaN   NaN    2.0
    
    Setting ``dropna=False`` ``NaN`` values are considered and they can be
    the mode (like for wings).
    
    >>> df.mode(dropna=False)
      species  legs  wings
    0    bird     2    NaN
    
    Setting ``numeric_only=True``, only the mode of numeric columns is
    computed, and columns of other types are ignored.
    
    >>> df.mode(numeric_only=True)
       legs  wings
    0   2.0    0.0
    1   NaN    2.0
    
    To compute the mode over columns and not rows, use the axis parameter:
    
    >>> df.mode(axis='columns', numeric_only=True)
               0    1
    falcon   2.0  NaN
    horse    4.0  NaN
    spider   0.0  8.0
    ostrich  2.0  NaN

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& mul &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mul in module pandas.core.frame:

mul(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Multiplication of dataframe and other, element-wise (binary operator `mul`).
    
    Equivalent to ``dataframe * other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rmul`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& multiply &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method mul in module pandas.core.frame:

mul(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Multiplication of dataframe and other, element-wise (binary operator `mul`).
    
    Equivalent to ``dataframe * other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rmul`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& ndim &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on int object:

class int(object)
 |  int([x]) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Built-in subclasses:
 |      bool
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original int
 |      and with a positive denominator.
 |      
 |      >>> (10).as_integer_ratio()
 |      (10, 1)
 |      >>> (-10).as_integer_ratio()
 |      (-10, 1)
 |      >>> (0).as_integer_ratio()
 |      (0, 1)
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Determines whether two's complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Indicates whether two's complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& ne &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method ne in module pandas.core.frame:

ne(other, axis: 'Axis' = 'columns', level=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Not equal to of dataframe and other, element-wise (binary operator `ne`).
    
    Among flexible wrappers (`eq`, `ne`, `le`, `lt`, `ge`, `gt`) to comparison
    operators.
    
    Equivalent to `==`, `!=`, `<=`, `<`, `>=`, `>` with support to choose axis
    (rows or columns) and level for comparison.
    
    Parameters
    ----------
    other : scalar, sequence, Series, or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}, default 'columns'
        Whether to compare by the index (0 or 'index') or columns
        (1 or 'columns').
    level : int or label
        Broadcast across a level, matching Index values on the passed
        MultiIndex level.
    
    Returns
    -------
    DataFrame of bool
        Result of the comparison.
    
    See Also
    --------
    DataFrame.eq : Compare DataFrames for equality elementwise.
    DataFrame.ne : Compare DataFrames for inequality elementwise.
    DataFrame.le : Compare DataFrames for less than inequality
        or equality elementwise.
    DataFrame.lt : Compare DataFrames for strictly less than
        inequality elementwise.
    DataFrame.ge : Compare DataFrames for greater than inequality
        or equality elementwise.
    DataFrame.gt : Compare DataFrames for strictly greater than
        inequality elementwise.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    `NaN` values are considered different (i.e. `NaN` != `NaN`).
    
    Examples
    --------
    >>> df = pd.DataFrame({'cost': [250, 150, 100],
    ...                    'revenue': [100, 250, 300]},
    ...                   index=['A', 'B', 'C'])
    >>> df
       cost  revenue
    A   250      100
    B   150      250
    C   100      300
    
    Comparison with a scalar, using either the operator or method:
    
    >>> df == 100
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    >>> df.eq(100)
        cost  revenue
    A  False     True
    B  False    False
    C   True    False
    
    When `other` is a :class:`Series`, the columns of a DataFrame are aligned
    with the index of `other` and broadcast:
    
    >>> df != pd.Series([100, 250], index=["cost", "revenue"])
        cost  revenue
    A   True     True
    B   True    False
    C  False     True
    
    Use the method to control the broadcast axis:
    
    >>> df.ne(pd.Series([100, 300], index=["A", "D"]), axis='index')
       cost  revenue
    A  True    False
    B  True     True
    C  True     True
    D  True     True
    
    When comparing to an arbitrary sequence, the number of columns must
    match the number elements in `other`:
    
    >>> df == [250, 100]
        cost  revenue
    A   True     True
    B  False    False
    C  False    False
    
    Use the method to control the axis:
    
    >>> df.eq([250, 250, 100], axis='index')
        cost  revenue
    A   True    False
    B  False     True
    C   True    False
    
    Compare to a DataFrame of different shape.
    
    >>> other = pd.DataFrame({'revenue': [300, 250, 100, 150]},
    ...                      index=['A', 'B', 'C', 'D'])
    >>> other
       revenue
    A      300
    B      250
    C      100
    D      150
    
    >>> df.gt(other)
        cost  revenue
    A  False    False
    B  False    False
    C  False     True
    D  False    False
    
    Compare to a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'cost': [250, 150, 100, 150, 300, 220],
    ...                              'revenue': [100, 250, 300, 200, 175, 225]},
    ...                             index=[['Q1', 'Q1', 'Q1', 'Q2', 'Q2', 'Q2'],
    ...                                    ['A', 'B', 'C', 'A', 'B', 'C']])
    >>> df_multindex
          cost  revenue
    Q1 A   250      100
       B   150      250
       C   100      300
    Q2 A   150      200
       B   300      175
       C   220      225
    
    >>> df.le(df_multindex, level=1)
           cost  revenue
    Q1 A   True     True
       B   True     True
       C   True     True
    Q2 A  False     True
       B   True    False
       C   True    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& nlargest &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method nlargest in module pandas.core.frame:

nlargest(n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Return the first `n` rows ordered by `columns` in descending order.
    
    Return the first `n` rows with the largest values in `columns`, in
    descending order. The columns that are not specified are returned as
    well, but not used for ordering.
    
    This method is equivalent to
    ``df.sort_values(columns, ascending=False).head(n)``, but more
    performant.
    
    Parameters
    ----------
    n : int
        Number of rows to return.
    columns : label or list of labels
        Column label(s) to order by.
    keep : {'first', 'last', 'all'}, default 'first'
        Where there are duplicate values:
    
        - ``first`` : prioritize the first occurrence(s)
        - ``last`` : prioritize the last occurrence(s)
        - ``all`` : keep all the ties of the smallest item even if it means
          selecting more than ``n`` items.
    
    Returns
    -------
    DataFrame
        The first `n` rows ordered by the given columns in descending
        order.
    
    See Also
    --------
    DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in
        ascending order.
    DataFrame.sort_values : Sort DataFrame by the values.
    DataFrame.head : Return the first `n` rows without re-ordering.
    
    Notes
    -----
    This function cannot be used with all column types. For example, when
    specifying columns with `object` or `category` dtypes, ``TypeError`` is
    raised.
    
    Examples
    --------
    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,
    ...                                   434000, 434000, 337000, 11300,
    ...                                   11300, 11300],
    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,
    ...                            17036, 182, 38, 311],
    ...                    'alpha-2': ["IT", "FR", "MT", "MV", "BN",
    ...                                "IS", "NR", "TV", "AI"]},
    ...                   index=["Italy", "France", "Malta",
    ...                          "Maldives", "Brunei", "Iceland",
    ...                          "Nauru", "Tuvalu", "Anguilla"])
    >>> df
              population      GDP alpha-2
    Italy       59000000  1937894      IT
    France      65000000  2583560      FR
    Malta         434000    12011      MT
    Maldives      434000     4520      MV
    Brunei        434000    12128      BN
    Iceland       337000    17036      IS
    Nauru          11300      182      NR
    Tuvalu         11300       38      TV
    Anguilla       11300      311      AI
    
    In the following example, we will use ``nlargest`` to select the three
    rows having the largest values in column "population".
    
    >>> df.nlargest(3, 'population')
            population      GDP alpha-2
    France    65000000  2583560      FR
    Italy     59000000  1937894      IT
    Malta       434000    12011      MT
    
    When using ``keep='last'``, ties are resolved in reverse order:
    
    >>> df.nlargest(3, 'population', keep='last')
            population      GDP alpha-2
    France    65000000  2583560      FR
    Italy     59000000  1937894      IT
    Brunei      434000    12128      BN
    
    When using ``keep='all'``, the number of element kept can go beyond ``n``
    if there are duplicate values for the smallest element, all the
    ties are kept:
    
    >>> df.nlargest(3, 'population', keep='all')
              population      GDP alpha-2
    France      65000000  2583560      FR
    Italy       59000000  1937894      IT
    Malta         434000    12011      MT
    Maldives      434000     4520      MV
    Brunei        434000    12128      BN
    
    However, ``nlargest`` does not keep ``n`` distinct largest elements:
    
    >>> df.nlargest(5, 'population', keep='all')
              population      GDP alpha-2
    France      65000000  2583560      FR
    Italy       59000000  1937894      IT
    Malta         434000    12011      MT
    Maldives      434000     4520      MV
    Brunei        434000    12128      BN
    
    To order by the largest values in column "population" and then "GDP",
    we can specify multiple columns like in the next example.
    
    >>> df.nlargest(3, ['population', 'GDP'])
            population      GDP alpha-2
    France    65000000  2583560      FR
    Italy     59000000  1937894      IT
    Brunei      434000    12128      BN

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& nombres &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Series in module pandas.core.series object:

class Series(pandas.core.base.IndexOpsMixin, pandas.core.generic.NDFrame)
 |  Series(data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'
 |  
 |  One-dimensional ndarray with axis labels (including time series).
 |  
 |  Labels need not be unique but must be a hashable type. The object
 |  supports both integer- and label-based indexing and provides a host of
 |  methods for performing operations involving the index. Statistical
 |  methods from ndarray have been overridden to automatically exclude
 |  missing data (currently represented as NaN).
 |  
 |  Operations between Series (+, -, /, \*, \*\*) align values based on their
 |  associated index values-- they need not be the same length. The result
 |  index will be the sorted union of the two indexes.
 |  
 |  Parameters
 |  ----------
 |  data : array-like, Iterable, dict, or scalar value
 |      Contains data stored in Series. If data is a dict, argument order is
 |      maintained.
 |  index : array-like or Index (1d)
 |      Values must be hashable and have the same length as `data`.
 |      Non-unique index values are allowed. Will default to
 |      RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like
 |      and index is None, then the keys in the data are used as the index. If the
 |      index is not None, the resulting Series is reindexed with the index values.
 |  dtype : str, numpy.dtype, or ExtensionDtype, optional
 |      Data type for the output Series. If not specified, this will be
 |      inferred from `data`.
 |      See the :ref:`user guide <basics.dtypes>` for more usages.
 |  name : Hashable, default None
 |      The name to give to the Series.
 |  copy : bool, default False
 |      Copy input data. Only affects Series or 1d ndarray input. See examples.
 |  
 |  Notes
 |  -----
 |  Please reference the :ref:`User Guide <basics.series>` for more information.
 |  
 |  Examples
 |  --------
 |  Constructing Series from a dictionary with an Index specified
 |  
 |  >>> d = {'a': 1, 'b': 2, 'c': 3}
 |  >>> ser = pd.Series(data=d, index=['a', 'b', 'c'])
 |  >>> ser
 |  a   1
 |  b   2
 |  c   3
 |  dtype: int64
 |  
 |  The keys of the dictionary match with the Index values, hence the Index
 |  values have no effect.
 |  
 |  >>> d = {'a': 1, 'b': 2, 'c': 3}
 |  >>> ser = pd.Series(data=d, index=['x', 'y', 'z'])
 |  >>> ser
 |  x   NaN
 |  y   NaN
 |  z   NaN
 |  dtype: float64
 |  
 |  Note that the Index is first build with the keys from the dictionary.
 |  After this the Series is reindexed with the given Index values, hence we
 |  get all NaN as a result.
 |  
 |  Constructing Series from a list with `copy=False`.
 |  
 |  >>> r = [1, 2]
 |  >>> ser = pd.Series(r, copy=False)
 |  >>> ser.iloc[0] = 999
 |  >>> r
 |  [1, 2]
 |  >>> ser
 |  0    999
 |  1      2
 |  dtype: int64
 |  
 |  Due to input data type the Series has a `copy` of
 |  the original data even though `copy=False`, so
 |  the data is unchanged.
 |  
 |  Constructing Series from a 1d ndarray with `copy=False`.
 |  
 |  >>> r = np.array([1, 2])
 |  >>> ser = pd.Series(r, copy=False)
 |  >>> ser.iloc[0] = 999
 |  >>> r
 |  array([999,   2])
 |  >>> ser
 |  0    999
 |  1      2
 |  dtype: int64
 |  
 |  Due to input data type the Series has a `view` on
 |  the original data, so
 |  the data is changed as well.
 |  
 |  Method resolution order:
 |      Series
 |      pandas.core.base.IndexOpsMixin
 |      pandas.core.arraylike.OpsMixin
 |      pandas.core.generic.NDFrame
 |      pandas.core.base.PandasObject
 |      pandas.core.accessor.DirNamesMixin
 |      pandas.core.indexing.IndexingMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __array__(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool | None' = None) -> 'np.ndarray'
 |      Return the values as a NumPy array.
 |      
 |      Users should not call this directly. Rather, it is invoked by
 |      :func:`numpy.array` and :func:`numpy.asarray`.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or numpy.dtype, optional
 |          The dtype to use for the resulting NumPy array. By default,
 |          the dtype is inferred from the data.
 |      
 |      copy : bool or None, optional
 |          See :func:`numpy.asarray`.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray
 |          The values in the series converted to a :class:`numpy.ndarray`
 |          with the specified `dtype`.
 |      
 |      See Also
 |      --------
 |      array : Create a new array from data.
 |      Series.array : Zero-copy view to the array backing the Series.
 |      Series.to_numpy : Series method for similar behavior.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> np.asarray(ser)
 |      array([1, 2, 3])
 |      
 |      For timezone-aware data, the timezones may be retained with
 |      ``dtype='object'``
 |      
 |      >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz="CET"))
 |      >>> np.asarray(tzser, dtype="object")
 |      array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),
 |             Timestamp('2000-01-02 00:00:00+0100', tz='CET')],
 |            dtype=object)
 |      
 |      Or the values may be localized to UTC and the tzinfo discarded with
 |      ``dtype='datetime64[ns]'``
 |      
 |      >>> np.asarray(tzser, dtype="datetime64[ns]")  # doctest: +ELLIPSIS
 |      array(['1999-12-31T23:00:00.000000000', ...],
 |            dtype='datetime64[ns]')
 |  
 |  __column_consortium_standard__(self, *, api_version: 'str | None' = None) -> 'Any'
 |      Provide entry point to the Consortium DataFrame Standard API.
 |      
 |      This is developed and maintained outside of pandas.
 |      Please report any issues to https://github.com/data-apis/dataframe-api-compat.
 |  
 |  __float__(self)
 |  
 |  __getitem__(self, key)
 |  
 |  __init__(self, data=None, index=None, dtype: 'Dtype | None' = None, name=None, copy: 'bool | None' = None, fastpath: 'bool | lib.NoDefault' = <no_default>) -> 'None'
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __int__(self)
 |  
 |  __len__(self) -> 'int'
 |      Return the length of the Series.
 |  
 |  __matmul__(self, other)
 |      Matrix multiplication using binary `@` operator.
 |  
 |  __repr__(self) -> 'str'
 |      Return a string representation for a particular Series.
 |  
 |  __rmatmul__(self, other)
 |      Matrix multiplication using binary `@` operator.
 |  
 |  __setitem__(self, key, value) -> 'None'
 |  
 |  add(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Addition of series and other, element-wise (binary operator `add`).
 |      
 |      Equivalent to ``series + other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.radd : Reverse of the Addition operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.add(b, fill_value=0)
 |      a    2.0
 |      b    1.0
 |      c    1.0
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  agg = aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)
 |  
 |  aggregate(self, func=None, axis: 'Axis' = 0, *args, **kwargs)
 |      Aggregate using one or more operations over the specified axis.
 |      
 |      Parameters
 |      ----------
 |      func : function, str, list or dict
 |          Function to use for aggregating the data. If a function, must either
 |          work when passed a Series or when passed to Series.apply.
 |      
 |          Accepted combinations are:
 |      
 |          - function
 |          - string function name
 |          - list of functions and/or function names, e.g. ``[np.sum, 'mean']``
 |          - dict of axis labels -> functions, function names or list of such.
 |      axis : {0 or 'index'}
 |              Unused. Parameter needed for compatibility with DataFrame.
 |      *args
 |          Positional arguments to pass to `func`.
 |      **kwargs
 |          Keyword arguments to pass to `func`.
 |      
 |      Returns
 |      -------
 |      scalar, Series or DataFrame
 |      
 |          The return can be:
 |      
 |          * scalar : when Series.agg is called with single function
 |          * Series : when DataFrame.agg is called with a single function
 |          * DataFrame : when DataFrame.agg is called with several functions
 |      
 |      See Also
 |      --------
 |      Series.apply : Invoke function on a Series.
 |      Series.transform : Transform function producing a Series with like indexes.
 |      
 |      Notes
 |      -----
 |      The aggregation operations are always performed over an axis, either the
 |      index (default) or the column axis. This behavior is different from
 |      `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,
 |      `var`), where the default is to compute the aggregation of the flattened
 |      array, e.g., ``numpy.mean(arr_2d)`` as opposed to
 |      ``numpy.mean(arr_2d, axis=0)``.
 |      
 |      `agg` is an alias for `aggregate`. Use the alias.
 |      
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      A passed user-defined-function will be passed a Series for evaluation.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |      
 |      >>> s.agg('min')
 |      1
 |      
 |      >>> s.agg(['min', 'max'])
 |      min   1
 |      max   4
 |      dtype: int64
 |  
 |  all(self, axis: 'Axis' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'bool'
 |      Return whether all elements are True, potentially over an axis.
 |      
 |      Returns True unless there at least one element within a series or
 |      along a Dataframe axis that is False or equivalent (e.g. zero or
 |      empty).
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Indicate which axis or axes should be reduced. For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          * 0 / 'index' : reduce the index, return a Series whose index is the
 |            original column labels.
 |          * 1 / 'columns' : reduce the columns, return a Series whose index is the
 |            original index.
 |          * None : reduce all axes, return a scalar.
 |      
 |      bool_only : bool, default False
 |          Include only boolean columns. Not implemented for Series.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire row/column is NA and skipna is
 |          True, then the result will be True, as for an empty row/column.
 |          If skipna is False, then NA are treated as True, because these are not
 |          equal to zero.
 |      **kwargs : any, default None
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          If level is specified, then, Series is returned; otherwise, scalar
 |          is returned.
 |      
 |      See Also
 |      --------
 |      Series.all : Return True if all elements are True.
 |      DataFrame.any : Return True if one (or more) elements are True.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> pd.Series([True, True]).all()
 |      True
 |      >>> pd.Series([True, False]).all()
 |      False
 |      >>> pd.Series([], dtype="float64").all()
 |      True
 |      >>> pd.Series([np.nan]).all()
 |      True
 |      >>> pd.Series([np.nan]).all(skipna=False)
 |      True
 |      
 |      **DataFrames**
 |      
 |      Create a dataframe from a dictionary.
 |      
 |      >>> df = pd.DataFrame({'col1': [True, True], 'col2': [True, False]})
 |      >>> df
 |         col1   col2
 |      0  True   True
 |      1  True  False
 |      
 |      Default behaviour checks if values in each column all return True.
 |      
 |      >>> df.all()
 |      col1     True
 |      col2    False
 |      dtype: bool
 |      
 |      Specify ``axis='columns'`` to check if values in each row all return True.
 |      
 |      >>> df.all(axis='columns')
 |      0     True
 |      1    False
 |      dtype: bool
 |      
 |      Or ``axis=None`` for whether every value is True.
 |      
 |      >>> df.all(axis=None)
 |      False
 |  
 |  any(self, *, axis: 'Axis' = 0, bool_only: 'bool' = False, skipna: 'bool' = True, **kwargs) -> 'bool'
 |      Return whether any element is True, potentially over an axis.
 |      
 |      Returns False unless there is at least one element within a series or
 |      along a Dataframe axis that is True or equivalent (e.g. non-zero or
 |      non-empty).
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Indicate which axis or axes should be reduced. For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          * 0 / 'index' : reduce the index, return a Series whose index is the
 |            original column labels.
 |          * 1 / 'columns' : reduce the columns, return a Series whose index is the
 |            original index.
 |          * None : reduce all axes, return a scalar.
 |      
 |      bool_only : bool, default False
 |          Include only boolean columns. Not implemented for Series.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire row/column is NA and skipna is
 |          True, then the result will be False, as for an empty row/column.
 |          If skipna is False, then NA are treated as True, because these are not
 |          equal to zero.
 |      **kwargs : any, default None
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          If level is specified, then, Series is returned; otherwise, scalar
 |          is returned.
 |      
 |      See Also
 |      --------
 |      numpy.any : Numpy version of this method.
 |      Series.any : Return whether any element is True.
 |      Series.all : Return whether all elements are True.
 |      DataFrame.any : Return whether any element is True over requested axis.
 |      DataFrame.all : Return whether all elements are True over requested axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      For Series input, the output is a scalar indicating whether any element
 |      is True.
 |      
 |      >>> pd.Series([False, False]).any()
 |      False
 |      >>> pd.Series([True, False]).any()
 |      True
 |      >>> pd.Series([], dtype="float64").any()
 |      False
 |      >>> pd.Series([np.nan]).any()
 |      False
 |      >>> pd.Series([np.nan]).any(skipna=False)
 |      True
 |      
 |      **DataFrame**
 |      
 |      Whether each column contains at least one True element (the default).
 |      
 |      >>> df = pd.DataFrame({"A": [1, 2], "B": [0, 2], "C": [0, 0]})
 |      >>> df
 |         A  B  C
 |      0  1  0  0
 |      1  2  2  0
 |      
 |      >>> df.any()
 |      A     True
 |      B     True
 |      C    False
 |      dtype: bool
 |      
 |      Aggregating over the columns.
 |      
 |      >>> df = pd.DataFrame({"A": [True, False], "B": [1, 2]})
 |      >>> df
 |             A  B
 |      0   True  1
 |      1  False  2
 |      
 |      >>> df.any(axis='columns')
 |      0    True
 |      1    True
 |      dtype: bool
 |      
 |      >>> df = pd.DataFrame({"A": [True, False], "B": [1, 0]})
 |      >>> df
 |             A  B
 |      0   True  1
 |      1  False  0
 |      
 |      >>> df.any(axis='columns')
 |      0    True
 |      1    False
 |      dtype: bool
 |      
 |      Aggregating over the entire DataFrame with ``axis=None``.
 |      
 |      >>> df.any(axis=None)
 |      True
 |      
 |      `any` for an empty DataFrame is an empty Series.
 |      
 |      >>> pd.DataFrame([]).any()
 |      Series([], dtype: bool)
 |  
 |  apply(self, func: 'AggFuncType', convert_dtype: 'bool | lib.NoDefault' = <no_default>, args: 'tuple[Any, ...]' = (), *, by_row: "Literal[False, 'compat']" = 'compat', **kwargs) -> 'DataFrame | Series'
 |      Invoke function on values of Series.
 |      
 |      Can be ufunc (a NumPy function that applies to the entire Series)
 |      or a Python function that only works on single values.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          Python function or NumPy ufunc to apply.
 |      convert_dtype : bool, default True
 |          Try to find better dtype for elementwise function results. If
 |          False, leave as dtype=object. Note that the dtype is always
 |          preserved for some extension array dtypes, such as Categorical.
 |      
 |          .. deprecated:: 2.1.0
 |              ``convert_dtype`` has been deprecated. Do ``ser.astype(object).apply()``
 |              instead if you want ``convert_dtype=False``.
 |      args : tuple
 |          Positional arguments passed to func after the series value.
 |      by_row : False or "compat", default "compat"
 |          If ``"compat"`` and func is a callable, func will be passed each element of
 |          the Series, like ``Series.map``. If func is a list or dict of
 |          callables, will first try to translate each func into pandas methods. If
 |          that doesn't work, will try call to apply again with ``by_row="compat"``
 |          and if that fails, will call apply again with ``by_row=False``
 |          (backward compatible).
 |          If False, the func will be passed the whole Series at once.
 |      
 |          ``by_row`` has no effect when ``func`` is a string.
 |      
 |          .. versionadded:: 2.1.0
 |      **kwargs
 |          Additional keyword arguments passed to func.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          If func returns a Series object the result will be a DataFrame.
 |      
 |      See Also
 |      --------
 |      Series.map: For element-wise operations.
 |      Series.agg: Only perform aggregating type operations.
 |      Series.transform: Only perform transforming type operations.
 |      
 |      Notes
 |      -----
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      Create a series with typical summer temperatures for each city.
 |      
 |      >>> s = pd.Series([20, 21, 12],
 |      ...               index=['London', 'New York', 'Helsinki'])
 |      >>> s
 |      London      20
 |      New York    21
 |      Helsinki    12
 |      dtype: int64
 |      
 |      Square the values by defining a function and passing it as an
 |      argument to ``apply()``.
 |      
 |      >>> def square(x):
 |      ...     return x ** 2
 |      >>> s.apply(square)
 |      London      400
 |      New York    441
 |      Helsinki    144
 |      dtype: int64
 |      
 |      Square the values by passing an anonymous function as an
 |      argument to ``apply()``.
 |      
 |      >>> s.apply(lambda x: x ** 2)
 |      London      400
 |      New York    441
 |      Helsinki    144
 |      dtype: int64
 |      
 |      Define a custom function that needs additional positional
 |      arguments and pass these additional arguments using the
 |      ``args`` keyword.
 |      
 |      >>> def subtract_custom_value(x, custom_value):
 |      ...     return x - custom_value
 |      
 |      >>> s.apply(subtract_custom_value, args=(5,))
 |      London      15
 |      New York    16
 |      Helsinki     7
 |      dtype: int64
 |      
 |      Define a custom function that takes keyword arguments
 |      and pass these arguments to ``apply``.
 |      
 |      >>> def add_custom_values(x, **kwargs):
 |      ...     for month in kwargs:
 |      ...         x += kwargs[month]
 |      ...     return x
 |      
 |      >>> s.apply(add_custom_values, june=30, july=20, august=25)
 |      London      95
 |      New York    96
 |      Helsinki    87
 |      dtype: int64
 |      
 |      Use a function from the Numpy library.
 |      
 |      >>> s.apply(np.log)
 |      London      2.995732
 |      New York    3.044522
 |      Helsinki    2.484907
 |      dtype: float64
 |  
 |  argsort(self, axis: 'Axis' = 0, kind: 'SortKind' = 'quicksort', order: 'None' = None, stable: 'None' = None) -> 'Series'
 |      Return the integer indices that would sort the Series values.
 |      
 |      Override ndarray.argsort. Argsorts the value, omitting NA/null values,
 |      and places the result in the same locations as the non-NA values.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      kind : {'mergesort', 'quicksort', 'heapsort', 'stable'}, default 'quicksort'
 |          Choice of sorting algorithm. See :func:`numpy.sort` for more
 |          information. 'mergesort' and 'stable' are the only stable algorithms.
 |      order : None
 |          Has no effect but is accepted for compatibility with numpy.
 |      stable : None
 |          Has no effect but is accepted for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      Series[np.intp]
 |          Positions of values within the sort order with -1 indicating
 |          nan values.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.argsort : Returns the indices that would sort this array.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([3, 2, 1])
 |      >>> s.argsort()
 |      0    2
 |      1    1
 |      2    0
 |      dtype: int64
 |  
 |  autocorr(self, lag: 'int' = 1) -> 'float'
 |      Compute the lag-N autocorrelation.
 |      
 |      This method computes the Pearson correlation between
 |      the Series and its shifted self.
 |      
 |      Parameters
 |      ----------
 |      lag : int, default 1
 |          Number of lags to apply before performing autocorrelation.
 |      
 |      Returns
 |      -------
 |      float
 |          The Pearson correlation between self and self.shift(lag).
 |      
 |      See Also
 |      --------
 |      Series.corr : Compute the correlation between two Series.
 |      Series.shift : Shift index by desired number of periods.
 |      DataFrame.corr : Compute pairwise correlation of columns.
 |      DataFrame.corrwith : Compute pairwise correlation between rows or
 |          columns of two DataFrame objects.
 |      
 |      Notes
 |      -----
 |      If the Pearson correlation is not well defined return 'NaN'.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([0.25, 0.5, 0.2, -0.05])
 |      >>> s.autocorr()  # doctest: +ELLIPSIS
 |      0.10355...
 |      >>> s.autocorr(lag=2)  # doctest: +ELLIPSIS
 |      -0.99999...
 |      
 |      If the Pearson correlation is not well defined, then 'NaN' is returned.
 |      
 |      >>> s = pd.Series([1, 0, 0, 0])
 |      >>> s.autocorr()
 |      nan
 |  
 |  between(self, left, right, inclusive: "Literal['both', 'neither', 'left', 'right']" = 'both') -> 'Series'
 |      Return boolean Series equivalent to left <= series <= right.
 |      
 |      This function returns a boolean vector containing `True` wherever the
 |      corresponding Series element is between the boundary values `left` and
 |      `right`. NA values are treated as `False`.
 |      
 |      Parameters
 |      ----------
 |      left : scalar or list-like
 |          Left boundary.
 |      right : scalar or list-like
 |          Right boundary.
 |      inclusive : {"both", "neither", "left", "right"}
 |          Include boundaries. Whether to set each bound as closed or open.
 |      
 |          .. versionchanged:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Series
 |          Series representing whether each element is between left and
 |          right (inclusive).
 |      
 |      See Also
 |      --------
 |      Series.gt : Greater than of series and other.
 |      Series.lt : Less than of series and other.
 |      
 |      Notes
 |      -----
 |      This function is equivalent to ``(left <= ser) & (ser <= right)``
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([2, 0, 4, 8, np.nan])
 |      
 |      Boundary values are included by default:
 |      
 |      >>> s.between(1, 4)
 |      0     True
 |      1    False
 |      2     True
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      With `inclusive` set to ``"neither"`` boundary values are excluded:
 |      
 |      >>> s.between(1, 4, inclusive="neither")
 |      0     True
 |      1    False
 |      2    False
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      `left` and `right` can be any scalar value:
 |      
 |      >>> s = pd.Series(['Alice', 'Bob', 'Carol', 'Eve'])
 |      >>> s.between('Anna', 'Daniel')
 |      0    False
 |      1     True
 |      2     True
 |      3    False
 |      dtype: bool
 |  
 |  case_when(self, caselist: 'list[tuple[ArrayLike | Callable[[Series], Series | np.ndarray | Sequence[bool]], ArrayLike | Scalar | Callable[[Series], Series | np.ndarray]],]') -> 'Series'
 |      Replace values where the conditions are True.
 |      
 |      Parameters
 |      ----------
 |      caselist : A list of tuples of conditions and expected replacements
 |          Takes the form:  ``(condition0, replacement0)``,
 |          ``(condition1, replacement1)``, ... .
 |          ``condition`` should be a 1-D boolean array-like object
 |          or a callable. If ``condition`` is a callable,
 |          it is computed on the Series
 |          and should return a boolean Series or array.
 |          The callable must not change the input Series
 |          (though pandas doesn`t check it). ``replacement`` should be a
 |          1-D array-like object, a scalar or a callable.
 |          If ``replacement`` is a callable, it is computed on the Series
 |          and should return a scalar or Series. The callable
 |          must not change the input Series
 |          (though pandas doesn`t check it).
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      See Also
 |      --------
 |      Series.mask : Replace values where the condition is True.
 |      
 |      Examples
 |      --------
 |      >>> c = pd.Series([6, 7, 8, 9], name='c')
 |      >>> a = pd.Series([0, 0, 1, 2])
 |      >>> b = pd.Series([0, 3, 4, 5])
 |      
 |      >>> c.case_when(caselist=[(a.gt(0), a),  # condition, replacement
 |      ...                       (b.gt(0), b)])
 |      0    6
 |      1    3
 |      2    1
 |      3    2
 |      Name: c, dtype: int64
 |  
 |  combine(self, other: 'Series | Hashable', func: 'Callable[[Hashable, Hashable], Hashable]', fill_value: 'Hashable | None' = None) -> 'Series'
 |      Combine the Series with a Series or scalar according to `func`.
 |      
 |      Combine the Series and `other` using `func` to perform elementwise
 |      selection for combined Series.
 |      `fill_value` is assumed when value is missing at some index
 |      from one of the two objects being combined.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar
 |          The value(s) to be combined with the `Series`.
 |      func : function
 |          Function that takes two scalars as inputs and returns an element.
 |      fill_value : scalar, optional
 |          The value to assume when an index is missing from
 |          one Series or the other. The default specifies to use the
 |          appropriate NaN value for the underlying dtype of the Series.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of combining the Series with the other object.
 |      
 |      See Also
 |      --------
 |      Series.combine_first : Combine Series values, choosing the calling
 |          Series' values first.
 |      
 |      Examples
 |      --------
 |      Consider 2 Datasets ``s1`` and ``s2`` containing
 |      highest clocked speeds of different birds.
 |      
 |      >>> s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})
 |      >>> s1
 |      falcon    330.0
 |      eagle     160.0
 |      dtype: float64
 |      >>> s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})
 |      >>> s2
 |      falcon    345.0
 |      eagle     200.0
 |      duck       30.0
 |      dtype: float64
 |      
 |      Now, to combine the two datasets and view the highest speeds
 |      of the birds across the two datasets
 |      
 |      >>> s1.combine(s2, max)
 |      duck        NaN
 |      eagle     200.0
 |      falcon    345.0
 |      dtype: float64
 |      
 |      In the previous example, the resulting value for duck is missing,
 |      because the maximum of a NaN and a float is a NaN.
 |      So, in the example, we set ``fill_value=0``,
 |      so the maximum value returned will be the value from some dataset.
 |      
 |      >>> s1.combine(s2, max, fill_value=0)
 |      duck       30.0
 |      eagle     200.0
 |      falcon    345.0
 |      dtype: float64
 |  
 |  combine_first(self, other) -> 'Series'
 |      Update null elements with value in the same location in 'other'.
 |      
 |      Combine two Series objects by filling null values in one Series with
 |      non-null values from the other Series. Result index will be the union
 |      of the two indexes.
 |      
 |      Parameters
 |      ----------
 |      other : Series
 |          The value(s) to be used for filling null values.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of combining the provided Series with the other object.
 |      
 |      See Also
 |      --------
 |      Series.combine : Perform element-wise operation on two Series
 |          using a given function.
 |      
 |      Examples
 |      --------
 |      >>> s1 = pd.Series([1, np.nan])
 |      >>> s2 = pd.Series([3, 4, 5])
 |      >>> s1.combine_first(s2)
 |      0    1.0
 |      1    4.0
 |      2    5.0
 |      dtype: float64
 |      
 |      Null values still persist if the location of that null value
 |      does not exist in `other`
 |      
 |      >>> s1 = pd.Series({'falcon': np.nan, 'eagle': 160.0})
 |      >>> s2 = pd.Series({'eagle': 200.0, 'duck': 30.0})
 |      >>> s1.combine_first(s2)
 |      duck       30.0
 |      eagle     160.0
 |      falcon      NaN
 |      dtype: float64
 |  
 |  compare(self, other: 'Series', align_axis: 'Axis' = 1, keep_shape: 'bool' = False, keep_equal: 'bool' = False, result_names: 'Suffixes' = ('self', 'other')) -> 'DataFrame | Series'
 |      Compare to another Series and show the differences.
 |      
 |      Parameters
 |      ----------
 |      other : Series
 |          Object to compare with.
 |      
 |      align_axis : {0 or 'index', 1 or 'columns'}, default 1
 |          Determine which axis to align the comparison on.
 |      
 |          * 0, or 'index' : Resulting differences are stacked vertically
 |              with rows drawn alternately from self and other.
 |          * 1, or 'columns' : Resulting differences are aligned horizontally
 |              with columns drawn alternately from self and other.
 |      
 |      keep_shape : bool, default False
 |          If true, all rows and columns are kept.
 |          Otherwise, only the ones with different values are kept.
 |      
 |      keep_equal : bool, default False
 |          If true, the result keeps values that are equal.
 |          Otherwise, equal values are shown as NaNs.
 |      
 |      result_names : tuple, default ('self', 'other')
 |          Set the dataframes names in the comparison.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          If axis is 0 or 'index' the result will be a Series.
 |          The resulting index will be a MultiIndex with 'self' and 'other'
 |          stacked alternately at the inner level.
 |      
 |          If axis is 1 or 'columns' the result will be a DataFrame.
 |          It will have two columns namely 'self' and 'other'.
 |      
 |      See Also
 |      --------
 |      DataFrame.compare : Compare with another DataFrame and show differences.
 |      
 |      Notes
 |      -----
 |      Matching NaNs will not appear as a difference.
 |      
 |      Examples
 |      --------
 |      >>> s1 = pd.Series(["a", "b", "c", "d", "e"])
 |      >>> s2 = pd.Series(["a", "a", "c", "b", "e"])
 |      
 |      Align the differences on columns
 |      
 |      >>> s1.compare(s2)
 |        self other
 |      1    b     a
 |      3    d     b
 |      
 |      Stack the differences on indices
 |      
 |      >>> s1.compare(s2, align_axis=0)
 |      1  self     b
 |         other    a
 |      3  self     d
 |         other    b
 |      dtype: object
 |      
 |      Keep all original rows
 |      
 |      >>> s1.compare(s2, keep_shape=True)
 |        self other
 |      0  NaN   NaN
 |      1    b     a
 |      2  NaN   NaN
 |      3    d     b
 |      4  NaN   NaN
 |      
 |      Keep all original rows and also all original values
 |      
 |      >>> s1.compare(s2, keep_shape=True, keep_equal=True)
 |        self other
 |      0    a     a
 |      1    b     a
 |      2    c     c
 |      3    d     b
 |      4    e     e
 |  
 |  corr(self, other: 'Series', method: 'CorrelationMethod' = 'pearson', min_periods: 'int | None' = None) -> 'float'
 |      Compute correlation with `other` Series, excluding missing values.
 |      
 |      The two `Series` objects are not required to be the same length and will be
 |      aligned internally before the correlation function is applied.
 |      
 |      Parameters
 |      ----------
 |      other : Series
 |          Series with which to compute the correlation.
 |      method : {'pearson', 'kendall', 'spearman'} or callable
 |          Method used to compute correlation:
 |      
 |          - pearson : Standard correlation coefficient
 |          - kendall : Kendall Tau correlation coefficient
 |          - spearman : Spearman rank correlation
 |          - callable: Callable with input two 1d ndarrays and returning a float.
 |      
 |          .. warning::
 |              Note that the returned matrix from corr will have 1 along the
 |              diagonals and will be symmetric regardless of the callable's
 |              behavior.
 |      min_periods : int, optional
 |          Minimum number of observations needed to have a valid result.
 |      
 |      Returns
 |      -------
 |      float
 |          Correlation with other.
 |      
 |      See Also
 |      --------
 |      DataFrame.corr : Compute pairwise correlation between columns.
 |      DataFrame.corrwith : Compute pairwise correlation with another
 |          DataFrame or Series.
 |      
 |      Notes
 |      -----
 |      Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.
 |      
 |      * `Pearson correlation coefficient <https://en.wikipedia.org/wiki/Pearson_correlation_coefficient>`_
 |      * `Kendall rank correlation coefficient <https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient>`_
 |      * `Spearman's rank correlation coefficient <https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient>`_
 |      
 |      Automatic data alignment: as with all pandas operations, automatic data alignment is performed for this method.
 |      ``corr()`` automatically considers values with matching indices.
 |      
 |      Examples
 |      --------
 |      >>> def histogram_intersection(a, b):
 |      ...     v = np.minimum(a, b).sum().round(decimals=1)
 |      ...     return v
 |      >>> s1 = pd.Series([.2, .0, .6, .2])
 |      >>> s2 = pd.Series([.3, .6, .0, .1])
 |      >>> s1.corr(s2, method=histogram_intersection)
 |      0.3
 |      
 |      Pandas auto-aligns the values with matching indices
 |      
 |      >>> s1 = pd.Series([1, 2, 3], index=[0, 1, 2])
 |      >>> s2 = pd.Series([1, 2, 3], index=[2, 1, 0])
 |      >>> s1.corr(s2)
 |      -1.0
 |  
 |  count(self) -> 'int'
 |      Return number of non-NA/null observations in the Series.
 |      
 |      Returns
 |      -------
 |      int
 |          Number of non-null values in the Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.count : Count non-NA cells for each column or row.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([0.0, 1.0, np.nan])
 |      >>> s.count()
 |      2
 |  
 |  cov(self, other: 'Series', min_periods: 'int | None' = None, ddof: 'int | None' = 1) -> 'float'
 |      Compute covariance with Series, excluding missing values.
 |      
 |      The two `Series` objects are not required to be the same length and
 |      will be aligned internally before the covariance is calculated.
 |      
 |      Parameters
 |      ----------
 |      other : Series
 |          Series with which to compute the covariance.
 |      min_periods : int, optional
 |          Minimum number of observations needed to have a valid result.
 |      ddof : int, default 1
 |          Delta degrees of freedom.  The divisor used in calculations
 |          is ``N - ddof``, where ``N`` represents the number of elements.
 |      
 |      Returns
 |      -------
 |      float
 |          Covariance between Series and other normalized by N-1
 |          (unbiased estimator).
 |      
 |      See Also
 |      --------
 |      DataFrame.cov : Compute pairwise covariance of columns.
 |      
 |      Examples
 |      --------
 |      >>> s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])
 |      >>> s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])
 |      >>> s1.cov(s2)
 |      -0.01685762652715874
 |  
 |  cummax(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative maximum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      maximum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          Return cumulative maximum of scalar or Series.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.max : Similar functionality
 |          but ignores ``NaN`` values.
 |      Series.max : Return the maximum over
 |          Series axis.
 |      Series.cummax : Return cumulative maximum over Series axis.
 |      Series.cummin : Return cumulative minimum over Series axis.
 |      Series.cumsum : Return cumulative sum over Series axis.
 |      Series.cumprod : Return cumulative product over Series axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cummax()
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3    5.0
 |      4    5.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cummax(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the maximum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cummax()
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  3.0  1.0
 |      
 |      To iterate over columns and find the maximum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cummax(axis=1)
 |           A    B
 |      0  2.0  2.0
 |      1  3.0  NaN
 |      2  1.0  1.0
 |  
 |  cummin(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative minimum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      minimum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          Return cumulative minimum of scalar or Series.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.min : Similar functionality
 |          but ignores ``NaN`` values.
 |      Series.min : Return the minimum over
 |          Series axis.
 |      Series.cummax : Return cumulative maximum over Series axis.
 |      Series.cummin : Return cumulative minimum over Series axis.
 |      Series.cumsum : Return cumulative sum over Series axis.
 |      Series.cumprod : Return cumulative product over Series axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cummin()
 |      0    2.0
 |      1    NaN
 |      2    2.0
 |      3   -1.0
 |      4   -1.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cummin(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the minimum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cummin()
 |           A    B
 |      0  2.0  1.0
 |      1  2.0  NaN
 |      2  1.0  0.0
 |      
 |      To iterate over columns and find the minimum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cummin(axis=1)
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |  
 |  cumprod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative product over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      product.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          Return cumulative product of scalar or Series.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.prod : Similar functionality
 |          but ignores ``NaN`` values.
 |      Series.prod : Return the product over
 |          Series axis.
 |      Series.cummax : Return cumulative maximum over Series axis.
 |      Series.cummin : Return cumulative minimum over Series axis.
 |      Series.cumsum : Return cumulative sum over Series axis.
 |      Series.cumprod : Return cumulative product over Series axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cumprod()
 |      0     2.0
 |      1     NaN
 |      2    10.0
 |      3   -10.0
 |      4    -0.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cumprod(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the product
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cumprod()
 |           A    B
 |      0  2.0  1.0
 |      1  6.0  NaN
 |      2  6.0  0.0
 |      
 |      To iterate over columns and find the product in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cumprod(axis=1)
 |           A    B
 |      0  2.0  2.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |  
 |  cumsum(self, axis: 'Axis | None' = None, skipna: 'bool' = True, *args, **kwargs)
 |      Return cumulative sum over a DataFrame or Series axis.
 |      
 |      Returns a DataFrame or Series of the same size containing the cumulative
 |      sum.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The index or the name of the axis. 0 is equivalent to None or 'index'.
 |          For `Series` this parameter is unused and defaults to 0.
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted for
 |          compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      scalar or Series
 |          Return cumulative sum of scalar or Series.
 |      
 |      See Also
 |      --------
 |      core.window.expanding.Expanding.sum : Similar functionality
 |          but ignores ``NaN`` values.
 |      Series.sum : Return the sum over
 |          Series axis.
 |      Series.cummax : Return cumulative maximum over Series axis.
 |      Series.cummin : Return cumulative minimum over Series axis.
 |      Series.cumsum : Return cumulative sum over Series axis.
 |      Series.cumprod : Return cumulative product over Series axis.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([2, np.nan, 5, -1, 0])
 |      >>> s
 |      0    2.0
 |      1    NaN
 |      2    5.0
 |      3   -1.0
 |      4    0.0
 |      dtype: float64
 |      
 |      By default, NA values are ignored.
 |      
 |      >>> s.cumsum()
 |      0    2.0
 |      1    NaN
 |      2    7.0
 |      3    6.0
 |      4    6.0
 |      dtype: float64
 |      
 |      To include NA values in the operation, use ``skipna=False``
 |      
 |      >>> s.cumsum(skipna=False)
 |      0    2.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame([[2.0, 1.0],
 |      ...                    [3.0, np.nan],
 |      ...                    [1.0, 0.0]],
 |      ...                   columns=list('AB'))
 |      >>> df
 |           A    B
 |      0  2.0  1.0
 |      1  3.0  NaN
 |      2  1.0  0.0
 |      
 |      By default, iterates over rows and finds the sum
 |      in each column. This is equivalent to ``axis=None`` or ``axis='index'``.
 |      
 |      >>> df.cumsum()
 |           A    B
 |      0  2.0  1.0
 |      1  5.0  NaN
 |      2  6.0  1.0
 |      
 |      To iterate over columns and find the sum in each row,
 |      use ``axis=1``
 |      
 |      >>> df.cumsum(axis=1)
 |           A    B
 |      0  2.0  3.0
 |      1  3.0  NaN
 |      2  1.0  1.0
 |  
 |  diff(self, periods: 'int' = 1) -> 'Series'
 |      First discrete difference of element.
 |      
 |      Calculates the difference of a Series element compared with another
 |      element in the Series (default is element in previous row).
 |      
 |      Parameters
 |      ----------
 |      periods : int, default 1
 |          Periods to shift for calculating difference, accepts negative
 |          values.
 |      
 |      Returns
 |      -------
 |      Series
 |          First differences of the Series.
 |      
 |      See Also
 |      --------
 |      Series.pct_change: Percent change over given number of periods.
 |      Series.shift: Shift index by desired number of periods with an
 |          optional time freq.
 |      DataFrame.diff: First discrete difference of object.
 |      
 |      Notes
 |      -----
 |      For boolean dtypes, this uses :meth:`operator.xor` rather than
 |      :meth:`operator.sub`.
 |      The result is calculated according to current dtype in Series,
 |      however dtype of the result is always float64.
 |      
 |      Examples
 |      --------
 |      
 |      Difference with previous row
 |      
 |      >>> s = pd.Series([1, 1, 2, 3, 5, 8])
 |      >>> s.diff()
 |      0    NaN
 |      1    0.0
 |      2    1.0
 |      3    1.0
 |      4    2.0
 |      5    3.0
 |      dtype: float64
 |      
 |      Difference with 3rd previous row
 |      
 |      >>> s.diff(periods=3)
 |      0    NaN
 |      1    NaN
 |      2    NaN
 |      3    2.0
 |      4    4.0
 |      5    6.0
 |      dtype: float64
 |      
 |      Difference with following row
 |      
 |      >>> s.diff(periods=-1)
 |      0    0.0
 |      1   -1.0
 |      2   -1.0
 |      3   -2.0
 |      4   -3.0
 |      5    NaN
 |      dtype: float64
 |      
 |      Overflow in input dtype
 |      
 |      >>> s = pd.Series([1, 0], dtype=np.uint8)
 |      >>> s.diff()
 |      0      NaN
 |      1    255.0
 |      dtype: float64
 |  
 |  div = truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  divide = truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  divmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Integer division and modulo of series and other, element-wise (binary operator `divmod`).
 |      
 |      Equivalent to ``divmod(series, other)``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      2-Tuple of Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rdivmod : Reverse of the Integer division and modulo operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.divmod(b, fill_value=0)
 |      (a    1.0
 |       b    inf
 |       c    inf
 |       d    0.0
 |       e    NaN
 |       dtype: float64,
 |       a    0.0
 |       b    NaN
 |       c    NaN
 |       d    0.0
 |       e    NaN
 |       dtype: float64)
 |  
 |  dot(self, other: 'AnyArrayLike') -> 'Series | np.ndarray'
 |      Compute the dot product between the Series and the columns of other.
 |      
 |      This method computes the dot product between the Series and another
 |      one, or the Series and each columns of a DataFrame, or the Series and
 |      each columns of an array.
 |      
 |      It can also be called using `self @ other`.
 |      
 |      Parameters
 |      ----------
 |      other : Series, DataFrame or array-like
 |          The other object to compute the dot product with its columns.
 |      
 |      Returns
 |      -------
 |      scalar, Series or numpy.ndarray
 |          Return the dot product of the Series and other if other is a
 |          Series, the Series of the dot product of Series and each rows of
 |          other if other is a DataFrame or a numpy.ndarray between the Series
 |          and each columns of the numpy array.
 |      
 |      See Also
 |      --------
 |      DataFrame.dot: Compute the matrix product with the DataFrame.
 |      Series.mul: Multiplication of series and other, element-wise.
 |      
 |      Notes
 |      -----
 |      The Series and other has to share the same index if other is a Series
 |      or a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([0, 1, 2, 3])
 |      >>> other = pd.Series([-1, 2, -3, 4])
 |      >>> s.dot(other)
 |      8
 |      >>> s @ other
 |      8
 |      >>> df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])
 |      >>> s.dot(df)
 |      0    24
 |      1    14
 |      dtype: int64
 |      >>> arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])
 |      >>> s.dot(arr)
 |      array([24, 14])
 |  
 |  drop(self, labels: 'IndexLabel | None' = None, *, axis: 'Axis' = 0, index: 'IndexLabel | None' = None, columns: 'IndexLabel | None' = None, level: 'Level | None' = None, inplace: 'bool' = False, errors: 'IgnoreRaise' = 'raise') -> 'Series | None'
 |      Return Series with specified index labels removed.
 |      
 |      Remove elements of a Series based on specifying the index labels.
 |      When using a multi-index, labels on different levels can be removed
 |      by specifying the level.
 |      
 |      Parameters
 |      ----------
 |      labels : single label or list-like
 |          Index labels to drop.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      index : single label or list-like
 |          Redundant for application on Series, but 'index' can be used instead
 |          of 'labels'.
 |      columns : single label or list-like
 |          No change is made to the Series; use 'index' or 'labels' instead.
 |      level : int or level name, optional
 |          For MultiIndex, level for which the labels will be removed.
 |      inplace : bool, default False
 |          If True, do operation inplace and return None.
 |      errors : {'ignore', 'raise'}, default 'raise'
 |          If 'ignore', suppress error and only existing labels are dropped.
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series with specified index labels removed or None if ``inplace=True``.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If none of the labels are found in the index.
 |      
 |      See Also
 |      --------
 |      Series.reindex : Return only specified index labels of Series.
 |      Series.dropna : Return series without null values.
 |      Series.drop_duplicates : Return Series with duplicate values removed.
 |      DataFrame.drop : Drop specified labels from rows or columns.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])
 |      >>> s
 |      A  0
 |      B  1
 |      C  2
 |      dtype: int64
 |      
 |      Drop labels B en C
 |      
 |      >>> s.drop(labels=['B', 'C'])
 |      A  0
 |      dtype: int64
 |      
 |      Drop 2nd level label in MultiIndex Series
 |      
 |      >>> midx = pd.MultiIndex(levels=[['llama', 'cow', 'falcon'],
 |      ...                              ['speed', 'weight', 'length']],
 |      ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],
 |      ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])
 |      >>> s = pd.Series([45, 200, 1.2, 30, 250, 1.5, 320, 1, 0.3],
 |      ...               index=midx)
 |      >>> s
 |      llama   speed      45.0
 |              weight    200.0
 |              length      1.2
 |      cow     speed      30.0
 |              weight    250.0
 |              length      1.5
 |      falcon  speed     320.0
 |              weight      1.0
 |              length      0.3
 |      dtype: float64
 |      
 |      >>> s.drop(labels='weight', level=1)
 |      llama   speed      45.0
 |              length      1.2
 |      cow     speed      30.0
 |              length      1.5
 |      falcon  speed     320.0
 |              length      0.3
 |      dtype: float64
 |  
 |  drop_duplicates(self, *, keep: 'DropKeep' = 'first', inplace: 'bool' = False, ignore_index: 'bool' = False) -> 'Series | None'
 |      Return Series with duplicate values removed.
 |      
 |      Parameters
 |      ----------
 |      keep : {'first', 'last', ``False``}, default 'first'
 |          Method to handle dropping duplicates:
 |      
 |          - 'first' : Drop duplicates except for the first occurrence.
 |          - 'last' : Drop duplicates except for the last occurrence.
 |          - ``False`` : Drop all duplicates.
 |      
 |      inplace : bool, default ``False``
 |          If ``True``, performs operation inplace and returns None.
 |      
 |      ignore_index : bool, default ``False``
 |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series with duplicates dropped or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Index.drop_duplicates : Equivalent method on Index.
 |      DataFrame.drop_duplicates : Equivalent method on DataFrame.
 |      Series.duplicated : Related method on Series, indicating duplicate
 |          Series values.
 |      Series.unique : Return unique values as an array.
 |      
 |      Examples
 |      --------
 |      Generate a Series with duplicated entries.
 |      
 |      >>> s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama', 'hippo'],
 |      ...               name='animal')
 |      >>> s
 |      0     llama
 |      1       cow
 |      2     llama
 |      3    beetle
 |      4     llama
 |      5     hippo
 |      Name: animal, dtype: object
 |      
 |      With the 'keep' parameter, the selection behaviour of duplicated values
 |      can be changed. The value 'first' keeps the first occurrence for each
 |      set of duplicated entries. The default value of keep is 'first'.
 |      
 |      >>> s.drop_duplicates()
 |      0     llama
 |      1       cow
 |      3    beetle
 |      5     hippo
 |      Name: animal, dtype: object
 |      
 |      The value 'last' for parameter 'keep' keeps the last occurrence for
 |      each set of duplicated entries.
 |      
 |      >>> s.drop_duplicates(keep='last')
 |      1       cow
 |      3    beetle
 |      4     llama
 |      5     hippo
 |      Name: animal, dtype: object
 |      
 |      The value ``False`` for parameter 'keep' discards all sets of
 |      duplicated entries.
 |      
 |      >>> s.drop_duplicates(keep=False)
 |      1       cow
 |      3    beetle
 |      5     hippo
 |      Name: animal, dtype: object
 |  
 |  dropna(self, *, axis: 'Axis' = 0, inplace: 'bool' = False, how: 'AnyAll | None' = None, ignore_index: 'bool' = False) -> 'Series | None'
 |      Return a new Series with missing values removed.
 |      
 |      See the :ref:`User Guide <missing_data>` for more on which values are
 |      considered missing, and how to work with missing data.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      inplace : bool, default False
 |          If True, do operation inplace and return None.
 |      how : str, optional
 |          Not in use. Kept for compatibility.
 |      ignore_index : bool, default ``False``
 |          If ``True``, the resulting axis will be labeled 0, 1, …, n - 1.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series with NA entries dropped from it or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.isna: Indicate missing values.
 |      Series.notna : Indicate existing (non-missing) values.
 |      Series.fillna : Replace missing values.
 |      DataFrame.dropna : Drop rows or columns which contain NA values.
 |      Index.dropna : Drop missing indices.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1., 2., np.nan])
 |      >>> ser
 |      0    1.0
 |      1    2.0
 |      2    NaN
 |      dtype: float64
 |      
 |      Drop NA values from a Series.
 |      
 |      >>> ser.dropna()
 |      0    1.0
 |      1    2.0
 |      dtype: float64
 |      
 |      Empty strings are not considered NA values. ``None`` is considered an
 |      NA value.
 |      
 |      >>> ser = pd.Series([np.nan, 2, pd.NaT, '', None, 'I stay'])
 |      >>> ser
 |      0       NaN
 |      1         2
 |      2       NaT
 |      3
 |      4      None
 |      5    I stay
 |      dtype: object
 |      >>> ser.dropna()
 |      1         2
 |      3
 |      5    I stay
 |      dtype: object
 |  
 |  duplicated(self, keep: 'DropKeep' = 'first') -> 'Series'
 |      Indicate duplicate Series values.
 |      
 |      Duplicated values are indicated as ``True`` values in the resulting
 |      Series. Either all duplicates, all except the first or all except the
 |      last occurrence of duplicates can be indicated.
 |      
 |      Parameters
 |      ----------
 |      keep : {'first', 'last', False}, default 'first'
 |          Method to handle dropping duplicates:
 |      
 |          - 'first' : Mark duplicates as ``True`` except for the first
 |            occurrence.
 |          - 'last' : Mark duplicates as ``True`` except for the last
 |            occurrence.
 |          - ``False`` : Mark all duplicates as ``True``.
 |      
 |      Returns
 |      -------
 |      Series[bool]
 |          Series indicating whether each value has occurred in the
 |          preceding values.
 |      
 |      See Also
 |      --------
 |      Index.duplicated : Equivalent method on pandas.Index.
 |      DataFrame.duplicated : Equivalent method on pandas.DataFrame.
 |      Series.drop_duplicates : Remove duplicate values from Series.
 |      
 |      Examples
 |      --------
 |      By default, for each set of duplicated values, the first occurrence is
 |      set on False and all others on True:
 |      
 |      >>> animals = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama'])
 |      >>> animals.duplicated()
 |      0    False
 |      1    False
 |      2     True
 |      3    False
 |      4     True
 |      dtype: bool
 |      
 |      which is equivalent to
 |      
 |      >>> animals.duplicated(keep='first')
 |      0    False
 |      1    False
 |      2     True
 |      3    False
 |      4     True
 |      dtype: bool
 |      
 |      By using 'last', the last occurrence of each set of duplicated values
 |      is set on False and all others on True:
 |      
 |      >>> animals.duplicated(keep='last')
 |      0     True
 |      1    False
 |      2     True
 |      3    False
 |      4    False
 |      dtype: bool
 |      
 |      By setting keep on ``False``, all duplicates are True:
 |      
 |      >>> animals.duplicated(keep=False)
 |      0     True
 |      1    False
 |      2     True
 |      3    False
 |      4     True
 |      dtype: bool
 |  
 |  eq(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'
 |      Return Equal to of series and other, element-wise (binary operator `eq`).
 |      
 |      Equivalent to ``series == other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.eq(b, fill_value=0)
 |      a     True
 |      b    False
 |      c    False
 |      d    False
 |      e    False
 |      dtype: bool
 |  
 |  explode(self, ignore_index: 'bool' = False) -> 'Series'
 |      Transform each element of a list-like to a row.
 |      
 |      Parameters
 |      ----------
 |      ignore_index : bool, default False
 |          If True, the resulting index will be labeled 0, 1, …, n - 1.
 |      
 |      Returns
 |      -------
 |      Series
 |          Exploded lists to rows; index will be duplicated for these rows.
 |      
 |      See Also
 |      --------
 |      Series.str.split : Split string values on specified separator.
 |      Series.unstack : Unstack, a.k.a. pivot, Series with MultiIndex
 |          to produce DataFrame.
 |      DataFrame.melt : Unpivot a DataFrame from wide format to long format.
 |      DataFrame.explode : Explode a DataFrame from list-like
 |          columns to long format.
 |      
 |      Notes
 |      -----
 |      This routine will explode list-likes including lists, tuples, sets,
 |      Series, and np.ndarray. The result dtype of the subset rows will
 |      be object. Scalars will be returned unchanged, and empty list-likes will
 |      result in a np.nan for that row. In addition, the ordering of elements in
 |      the output will be non-deterministic when exploding sets.
 |      
 |      Reference :ref:`the user guide <reshaping.explode>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])
 |      >>> s
 |      0    [1, 2, 3]
 |      1          foo
 |      2           []
 |      3       [3, 4]
 |      dtype: object
 |      
 |      >>> s.explode()
 |      0      1
 |      0      2
 |      0      3
 |      1    foo
 |      2    NaN
 |      3      3
 |      3      4
 |      dtype: object
 |  
 |  floordiv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Integer division of series and other, element-wise (binary operator `floordiv`).
 |      
 |      Equivalent to ``series // other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rfloordiv : Reverse of the Integer division operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.floordiv(b, fill_value=0)
 |      a    1.0
 |      b    inf
 |      c    inf
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  ge(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Greater than or equal to of series and other, element-wise (binary operator `ge`).
 |      
 |      Equivalent to ``series >= other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      e    1.0
 |      dtype: float64
 |      >>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])
 |      >>> b
 |      a    0.0
 |      b    1.0
 |      c    2.0
 |      d    NaN
 |      f    1.0
 |      dtype: float64
 |      >>> a.ge(b, fill_value=0)
 |      a     True
 |      b     True
 |      c    False
 |      d    False
 |      e     True
 |      f    False
 |      dtype: bool
 |  
 |  groupby(self, by=None, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, as_index: 'bool' = True, sort: 'bool' = True, group_keys: 'bool' = True, observed: 'bool | lib.NoDefault' = <no_default>, dropna: 'bool' = True) -> 'SeriesGroupBy'
 |      Group Series using a mapper or by a Series of columns.
 |      
 |      A groupby operation involves some combination of splitting the
 |      object, applying a function, and combining the results. This can be
 |      used to group large amounts of data and compute operations on these
 |      groups.
 |      
 |      Parameters
 |      ----------
 |      by : mapping, function, label, pd.Grouper or list of such
 |          Used to determine the groups for the groupby.
 |          If ``by`` is a function, it's called on each value of the object's
 |          index. If a dict or Series is passed, the Series or dict VALUES
 |          will be used to determine the groups (the Series' values are first
 |          aligned; see ``.align()`` method). If a list or ndarray of length
 |          equal to the selected axis is passed (see the `groupby user guide
 |          <https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups>`_),
 |          the values are used as-is to determine the groups. A label or list
 |          of labels may be passed to group by the columns in ``self``.
 |          Notice that a tuple is interpreted as a (single) key.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Split along rows (0) or columns (1). For `Series` this parameter
 |          is unused and defaults to 0.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              Will be removed and behave like axis=0 in a future version.
 |              For ``axis=1``, do ``frame.T.groupby(...)`` instead.
 |      
 |      level : int, level name, or sequence of such, default None
 |          If the axis is a MultiIndex (hierarchical), group by a particular
 |          level or levels. Do not specify both ``by`` and ``level``.
 |      as_index : bool, default True
 |          Return object with group labels as the
 |          index. Only relevant for DataFrame input. as_index=False is
 |          effectively "SQL-style" grouped output. This argument has no effect
 |          on filtrations (see the `filtrations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),
 |          such as ``head()``, ``tail()``, ``nth()`` and in transformations
 |          (see the `transformations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).
 |      sort : bool, default True
 |          Sort group keys. Get better performance by turning this off.
 |          Note this does not influence the order of observations within each
 |          group. Groupby preserves the order of rows within each group. If False,
 |          the groups will appear in the same order as they did in the original DataFrame.
 |          This argument has no effect on filtrations (see the `filtrations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#filtration>`_),
 |          such as ``head()``, ``tail()``, ``nth()`` and in transformations
 |          (see the `transformations in the user guide
 |          <https://pandas.pydata.org/docs/dev/user_guide/groupby.html#transformation>`_).
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Specifying ``sort=False`` with an ordered categorical grouper will no
 |              longer sort the values.
 |      
 |      group_keys : bool, default True
 |          When calling apply and the ``by`` argument produces a like-indexed
 |          (i.e. :ref:`a transform <groupby.transform>`) result, add group keys to
 |          index to identify pieces. By default group keys are not included
 |          when the result's index (and column) labels match the inputs, and
 |          are included otherwise.
 |      
 |          .. versionchanged:: 1.5.0
 |      
 |             Warns that ``group_keys`` will no longer be ignored when the
 |             result from ``apply`` is a like-indexed Series or DataFrame.
 |             Specify ``group_keys`` explicitly to include the group keys or
 |             not.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |             ``group_keys`` now defaults to ``True``.
 |      
 |      observed : bool, default False
 |          This only applies if any of the groupers are Categoricals.
 |          If True: only show observed values for categorical groupers.
 |          If False: show all values for categorical groupers.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              The default value will change to True in a future version of pandas.
 |      
 |      dropna : bool, default True
 |          If True, and if group keys contain NA values, NA values together
 |          with row/column will be dropped.
 |          If False, NA values will also be treated as the key in groups.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.SeriesGroupBy
 |          Returns a groupby object that contains information about the groups.
 |      
 |      See Also
 |      --------
 |      resample : Convenience method for frequency conversion and resampling
 |          of time series.
 |      
 |      Notes
 |      -----
 |      See the `user guide
 |      <https://pandas.pydata.org/pandas-docs/stable/groupby.html>`__ for more
 |      detailed usage and examples, including splitting an object into groups,
 |      iterating through groups, selecting a group, aggregation, and more.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([390., 350., 30., 20.],
 |      ...                 index=['Falcon', 'Falcon', 'Parrot', 'Parrot'],
 |      ...                 name="Max Speed")
 |      >>> ser
 |      Falcon    390.0
 |      Falcon    350.0
 |      Parrot     30.0
 |      Parrot     20.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(["a", "b", "a", "b"]).mean()
 |      a    210.0
 |      b    185.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(level=0).mean()
 |      Falcon    370.0
 |      Parrot     25.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(ser > 100).mean()
 |      Max Speed
 |      False     25.0
 |      True     370.0
 |      Name: Max Speed, dtype: float64
 |      
 |      **Grouping by Indexes**
 |      
 |      We can groupby different levels of a hierarchical index
 |      using the `level` parameter:
 |      
 |      >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],
 |      ...           ['Captive', 'Wild', 'Captive', 'Wild']]
 |      >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))
 |      >>> ser = pd.Series([390., 350., 30., 20.], index=index, name="Max Speed")
 |      >>> ser
 |      Animal  Type
 |      Falcon  Captive    390.0
 |              Wild       350.0
 |      Parrot  Captive     30.0
 |              Wild        20.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(level=0).mean()
 |      Animal
 |      Falcon    370.0
 |      Parrot     25.0
 |      Name: Max Speed, dtype: float64
 |      >>> ser.groupby(level="Type").mean()
 |      Type
 |      Captive    210.0
 |      Wild       185.0
 |      Name: Max Speed, dtype: float64
 |      
 |      We can also choose to include `NA` in group keys or not by defining
 |      `dropna` parameter, the default setting is `True`.
 |      
 |      >>> ser = pd.Series([1, 2, 3, 3], index=["a", 'a', 'b', np.nan])
 |      >>> ser.groupby(level=0).sum()
 |      a    3
 |      b    3
 |      dtype: int64
 |      
 |      >>> ser.groupby(level=0, dropna=False).sum()
 |      a    3
 |      b    3
 |      NaN  3
 |      dtype: int64
 |      
 |      >>> arrays = ['Falcon', 'Falcon', 'Parrot', 'Parrot']
 |      >>> ser = pd.Series([390., 350., 30., 20.], index=arrays, name="Max Speed")
 |      >>> ser.groupby(["a", "b", "a", np.nan]).mean()
 |      a    210.0
 |      b    350.0
 |      Name: Max Speed, dtype: float64
 |      
 |      >>> ser.groupby(["a", "b", "a", np.nan], dropna=False).mean()
 |      a    210.0
 |      b    350.0
 |      NaN   20.0
 |      Name: Max Speed, dtype: float64
 |  
 |  gt(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Greater than of series and other, element-wise (binary operator `gt`).
 |      
 |      Equivalent to ``series > other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      e    1.0
 |      dtype: float64
 |      >>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])
 |      >>> b
 |      a    0.0
 |      b    1.0
 |      c    2.0
 |      d    NaN
 |      f    1.0
 |      dtype: float64
 |      >>> a.gt(b, fill_value=0)
 |      a     True
 |      b    False
 |      c    False
 |      d    False
 |      e     True
 |      f    False
 |      dtype: bool
 |  
 |  hist = hist_series(self: 'Series', by=None, ax=None, grid: 'bool' = True, xlabelsize: 'int | None' = None, xrot: 'float | None' = None, ylabelsize: 'int | None' = None, yrot: 'float | None' = None, figsize: 'tuple[int, int] | None' = None, bins: 'int | Sequence[int]' = 10, backend: 'str | None' = None, legend: 'bool' = False, **kwargs)
 |      Draw histogram of the input series using matplotlib.
 |      
 |      Parameters
 |      ----------
 |      by : object, optional
 |          If passed, then used to form histograms for separate groups.
 |      ax : matplotlib axis object
 |          If not passed, uses gca().
 |      grid : bool, default True
 |          Whether to show axis grid lines.
 |      xlabelsize : int, default None
 |          If specified changes the x-axis label size.
 |      xrot : float, default None
 |          Rotation of x axis labels.
 |      ylabelsize : int, default None
 |          If specified changes the y-axis label size.
 |      yrot : float, default None
 |          Rotation of y axis labels.
 |      figsize : tuple, default None
 |          Figure size in inches by default.
 |      bins : int or sequence, default 10
 |          Number of histogram bins to be used. If an integer is given, bins + 1
 |          bin edges are calculated and returned. If bins is a sequence, gives
 |          bin edges, including left edge of first bin and right edge of last
 |          bin. In this case, bins is returned unmodified.
 |      backend : str, default None
 |          Backend to use instead of the backend specified in the option
 |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |          specify the ``plotting.backend`` for the whole session, set
 |          ``pd.options.plotting.backend``.
 |      legend : bool, default False
 |          Whether to show the legend.
 |      
 |      **kwargs
 |          To be passed to the actual plotting function.
 |      
 |      Returns
 |      -------
 |      matplotlib.AxesSubplot
 |          A histogram plot.
 |      
 |      See Also
 |      --------
 |      matplotlib.axes.Axes.hist : Plot a histogram using matplotlib.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> lst = ['a', 'a', 'a', 'b', 'b', 'b']
 |          >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |          >>> hist = ser.hist()
 |      
 |      For Groupby:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> lst = ['a', 'a', 'a', 'b', 'b', 'b']
 |          >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |          >>> hist = ser.groupby(level=0).hist()
 |  
 |  idxmax(self, axis: 'Axis' = 0, skipna: 'bool' = True, *args, **kwargs) -> 'Hashable'
 |      Return the row label of the maximum value.
 |      
 |      If multiple values equal the maximum, the first row label with that
 |      value is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire Series is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional arguments and keywords have no effect but might be
 |          accepted for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Index
 |          Label of the maximum value.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If the Series is empty.
 |      
 |      See Also
 |      --------
 |      numpy.argmax : Return indices of the maximum values
 |          along the given axis.
 |      DataFrame.idxmax : Return index of first occurrence of maximum
 |          over requested axis.
 |      Series.idxmin : Return index *label* of the first occurrence
 |          of minimum of values.
 |      
 |      Notes
 |      -----
 |      This method is the Series version of ``ndarray.argmax``. This method
 |      returns the label of the maximum, while ``ndarray.argmax`` returns
 |      the position. To get the position, use ``series.values.argmax()``.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(data=[1, None, 4, 3, 4],
 |      ...               index=['A', 'B', 'C', 'D', 'E'])
 |      >>> s
 |      A    1.0
 |      B    NaN
 |      C    4.0
 |      D    3.0
 |      E    4.0
 |      dtype: float64
 |      
 |      >>> s.idxmax()
 |      'C'
 |      
 |      If `skipna` is False and there is an NA value in the data,
 |      the function returns ``nan``.
 |      
 |      >>> s.idxmax(skipna=False)
 |      nan
 |  
 |  idxmin(self, axis: 'Axis' = 0, skipna: 'bool' = True, *args, **kwargs) -> 'Hashable'
 |      Return the row label of the minimum value.
 |      
 |      If multiple values equal the minimum, the first row label with that
 |      value is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values. If the entire Series is NA, the result
 |          will be NA.
 |      *args, **kwargs
 |          Additional arguments and keywords have no effect but might be
 |          accepted for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Index
 |          Label of the minimum value.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If the Series is empty.
 |      
 |      See Also
 |      --------
 |      numpy.argmin : Return indices of the minimum values
 |          along the given axis.
 |      DataFrame.idxmin : Return index of first occurrence of minimum
 |          over requested axis.
 |      Series.idxmax : Return index *label* of the first occurrence
 |          of maximum of values.
 |      
 |      Notes
 |      -----
 |      This method is the Series version of ``ndarray.argmin``. This method
 |      returns the label of the minimum, while ``ndarray.argmin`` returns
 |      the position. To get the position, use ``series.values.argmin()``.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(data=[1, None, 4, 1],
 |      ...               index=['A', 'B', 'C', 'D'])
 |      >>> s
 |      A    1.0
 |      B    NaN
 |      C    4.0
 |      D    1.0
 |      dtype: float64
 |      
 |      >>> s.idxmin()
 |      'A'
 |      
 |      If `skipna` is False and there is an NA value in the data,
 |      the function returns ``nan``.
 |      
 |      >>> s.idxmin(skipna=False)
 |      nan
 |  
 |  info(self, verbose: 'bool | None' = None, buf: 'IO[str] | None' = None, max_cols: 'int | None' = None, memory_usage: 'bool | str | None' = None, show_counts: 'bool' = True) -> 'None'
 |      Print a concise summary of a Series.
 |      
 |      This method prints information about a Series including
 |      the index dtype, non-null values and memory usage.
 |      
 |      .. versionadded:: 1.4.0
 |      
 |      Parameters
 |      ----------
 |      verbose : bool, optional
 |          Whether to print the full summary. By default, the setting in
 |          ``pandas.options.display.max_info_columns`` is followed.
 |      buf : writable buffer, defaults to sys.stdout
 |          Where to send the output. By default, the output is printed to
 |          sys.stdout. Pass a writable buffer if you need to further process
 |          the output.
 |      
 |      memory_usage : bool, str, optional
 |          Specifies whether total memory usage of the Series
 |          elements (including the index) should be displayed. By default,
 |          this follows the ``pandas.options.display.memory_usage`` setting.
 |      
 |          True always show memory usage. False never shows memory usage.
 |          A value of 'deep' is equivalent to "True with deep introspection".
 |          Memory usage is shown in human-readable units (base-2
 |          representation). Without deep introspection a memory estimation is
 |          made based in column dtype and number of rows assuming values
 |          consume the same memory amount for corresponding dtypes. With deep
 |          memory introspection, a real memory usage calculation is performed
 |          at the cost of computational resources. See the
 |          :ref:`Frequently Asked Questions <df-memory-usage>` for more
 |          details.
 |      show_counts : bool, optional
 |          Whether to show the non-null counts. By default, this is shown
 |          only if the DataFrame is smaller than
 |          ``pandas.options.display.max_info_rows`` and
 |          ``pandas.options.display.max_info_columns``. A value of True always
 |          shows the counts, and False never shows the counts.
 |      
 |      Returns
 |      -------
 |      None
 |          This method prints a summary of a Series and returns None.
 |      
 |      See Also
 |      --------
 |      Series.describe: Generate descriptive statistics of Series.
 |      Series.memory_usage: Memory usage of Series.
 |      
 |      Examples
 |      --------
 |      >>> int_values = [1, 2, 3, 4, 5]
 |      >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']
 |      >>> s = pd.Series(text_values, index=int_values)
 |      >>> s.info()
 |      <class 'pandas.core.series.Series'>
 |      Index: 5 entries, 1 to 5
 |      Series name: None
 |      Non-Null Count  Dtype
 |      --------------  -----
 |      5 non-null      object
 |      dtypes: object(1)
 |      memory usage: 80.0+ bytes
 |      
 |      Prints a summary excluding information about its values:
 |      
 |      >>> s.info(verbose=False)
 |      <class 'pandas.core.series.Series'>
 |      Index: 5 entries, 1 to 5
 |      dtypes: object(1)
 |      memory usage: 80.0+ bytes
 |      
 |      Pipe output of Series.info to buffer instead of sys.stdout, get
 |      buffer content and writes to a text file:
 |      
 |      >>> import io
 |      >>> buffer = io.StringIO()
 |      >>> s.info(buf=buffer)
 |      >>> s = buffer.getvalue()
 |      >>> with open("df_info.txt", "w",
 |      ...           encoding="utf-8") as f:  # doctest: +SKIP
 |      ...     f.write(s)
 |      260
 |      
 |      The `memory_usage` parameter allows deep introspection mode, specially
 |      useful for big Series and fine-tune memory optimization:
 |      
 |      >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)
 |      >>> s = pd.Series(np.random.choice(['a', 'b', 'c'], 10 ** 6))
 |      >>> s.info()
 |      <class 'pandas.core.series.Series'>
 |      RangeIndex: 1000000 entries, 0 to 999999
 |      Series name: None
 |      Non-Null Count    Dtype
 |      --------------    -----
 |      1000000 non-null  object
 |      dtypes: object(1)
 |      memory usage: 7.6+ MB
 |      
 |      >>> s.info(memory_usage='deep')
 |      <class 'pandas.core.series.Series'>
 |      RangeIndex: 1000000 entries, 0 to 999999
 |      Series name: None
 |      Non-Null Count    Dtype
 |      --------------    -----
 |      1000000 non-null  object
 |      dtypes: object(1)
 |      memory usage: 55.3 MB
 |  
 |  isin(self, values) -> 'Series'
 |      Whether elements in Series are contained in `values`.
 |      
 |      Return a boolean Series showing whether each element in the Series
 |      matches an element in the passed sequence of `values` exactly.
 |      
 |      Parameters
 |      ----------
 |      values : set or list-like
 |          The sequence of values to test. Passing in a single string will
 |          raise a ``TypeError``. Instead, turn a single string into a
 |          list of one element.
 |      
 |      Returns
 |      -------
 |      Series
 |          Series of booleans indicating if each element is in values.
 |      
 |      Raises
 |      ------
 |      TypeError
 |        * If `values` is a string
 |      
 |      See Also
 |      --------
 |      DataFrame.isin : Equivalent method on DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama',
 |      ...                'hippo'], name='animal')
 |      >>> s.isin(['cow', 'llama'])
 |      0     True
 |      1     True
 |      2     True
 |      3    False
 |      4     True
 |      5    False
 |      Name: animal, dtype: bool
 |      
 |      To invert the boolean values, use the ``~`` operator:
 |      
 |      >>> ~s.isin(['cow', 'llama'])
 |      0    False
 |      1    False
 |      2    False
 |      3     True
 |      4    False
 |      5     True
 |      Name: animal, dtype: bool
 |      
 |      Passing a single string as ``s.isin('llama')`` will raise an error. Use
 |      a list of one element instead:
 |      
 |      >>> s.isin(['llama'])
 |      0     True
 |      1    False
 |      2     True
 |      3    False
 |      4     True
 |      5    False
 |      Name: animal, dtype: bool
 |      
 |      Strings and integers are distinct and are therefore not comparable:
 |      
 |      >>> pd.Series([1]).isin(['1'])
 |      0    False
 |      dtype: bool
 |      >>> pd.Series([1.1]).isin(['1.1'])
 |      0    False
 |      dtype: bool
 |  
 |  isna(self) -> 'Series'
 |      Detect missing values.
 |      
 |      Return a boolean same-sized object indicating if the values are NA.
 |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
 |      values.
 |      Everything else gets mapped to False values. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      
 |      Returns
 |      -------
 |      Series
 |          Mask of bool values for each element in Series that
 |          indicates whether an element is an NA value.
 |      
 |      See Also
 |      --------
 |      Series.isnull : Alias of isna.
 |      Series.notna : Boolean inverse of isna.
 |      Series.dropna : Omit axes labels with missing values.
 |      isna : Top-level isna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.isna()
 |           age   born   name    toy
 |      0  False   True  False   True
 |      1  False  False  False  False
 |      2   True  False  False  False
 |      
 |      Show which entries in a Series are NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.isna()
 |      0    False
 |      1    False
 |      2     True
 |      dtype: bool
 |  
 |  isnull(self) -> 'Series'
 |      Series.isnull is an alias for Series.isna.
 |      
 |      Detect missing values.
 |      
 |      Return a boolean same-sized object indicating if the values are NA.
 |      NA values, such as None or :attr:`numpy.NaN`, gets mapped to True
 |      values.
 |      Everything else gets mapped to False values. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      
 |      Returns
 |      -------
 |      Series
 |          Mask of bool values for each element in Series that
 |          indicates whether an element is an NA value.
 |      
 |      See Also
 |      --------
 |      Series.isnull : Alias of isna.
 |      Series.notna : Boolean inverse of isna.
 |      Series.dropna : Omit axes labels with missing values.
 |      isna : Top-level isna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.isna()
 |           age   born   name    toy
 |      0  False   True  False   True
 |      1  False  False  False  False
 |      2   True  False  False  False
 |      
 |      Show which entries in a Series are NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.isna()
 |      0    False
 |      1    False
 |      2     True
 |      dtype: bool
 |  
 |  items(self) -> 'Iterable[tuple[Hashable, Any]]'
 |      Lazily iterate over (index, value) tuples.
 |      
 |      This method returns an iterable tuple (index, value). This is
 |      convenient if you want to create a lazy iterator.
 |      
 |      Returns
 |      -------
 |      iterable
 |          Iterable of tuples containing the (index, value) pairs from a
 |          Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.items : Iterate over (column name, Series) pairs.
 |      DataFrame.iterrows : Iterate over DataFrame rows as (index, Series) pairs.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['A', 'B', 'C'])
 |      >>> for index, value in s.items():
 |      ...     print(f"Index : {index}, Value : {value}")
 |      Index : 0, Value : A
 |      Index : 1, Value : B
 |      Index : 2, Value : C
 |  
 |  keys(self) -> 'Index'
 |      Return alias for index.
 |      
 |      Returns
 |      -------
 |      Index
 |          Index of the Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3], index=[0, 1, 2])
 |      >>> s.keys()
 |      Index([0, 1, 2], dtype='int64')
 |  
 |  kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased kurtosis over requested axis.
 |      
 |      Kurtosis obtained using Fisher's definition of
 |      kurtosis (kurtosis of normal == 0.0). Normalized by N-1.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])
 |                  >>> s
 |                  cat    1
 |                  dog    2
 |                  dog    2
 |                  mouse  3
 |                  dtype: int64
 |                  >>> s.kurt()
 |                  1.5
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 2, 3], 'b': [3, 4, 4, 4]},
 |                  ...                   index=['cat', 'dog', 'dog', 'mouse'])
 |                  >>> df
 |                         a   b
 |                    cat  1   3
 |                    dog  2   4
 |                    dog  2   4
 |                  mouse  3   4
 |                  >>> df.kurt()
 |                  a   1.5
 |                  b   4.0
 |                  dtype: float64
 |      
 |                  With axis=None
 |      
 |                  >>> df.kurt(axis=None).round(6)
 |                  -0.988693
 |      
 |                  Using axis=1
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [3, 4], 'c': [3, 4], 'd': [1, 2]},
 |                  ...                   index=['cat', 'dog'])
 |                  >>> df.kurt(axis=1)
 |                  cat   -6.0
 |                  dog   -6.0
 |                  dtype: float64
 |  
 |  kurtosis = kurt(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |  
 |  le(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Less than or equal to of series and other, element-wise (binary operator `le`).
 |      
 |      Equivalent to ``series <= other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      e    1.0
 |      dtype: float64
 |      >>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])
 |      >>> b
 |      a    0.0
 |      b    1.0
 |      c    2.0
 |      d    NaN
 |      f    1.0
 |      dtype: float64
 |      >>> a.le(b, fill_value=0)
 |      a    False
 |      b     True
 |      c     True
 |      d    False
 |      e    False
 |      f     True
 |      dtype: bool
 |  
 |  lt(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Less than of series and other, element-wise (binary operator `lt`).
 |      
 |      Equivalent to ``series < other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan, 1], index=['a', 'b', 'c', 'd', 'e'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      e    1.0
 |      dtype: float64
 |      >>> b = pd.Series([0, 1, 2, np.nan, 1], index=['a', 'b', 'c', 'd', 'f'])
 |      >>> b
 |      a    0.0
 |      b    1.0
 |      c    2.0
 |      d    NaN
 |      f    1.0
 |      dtype: float64
 |      >>> a.lt(b, fill_value=0)
 |      a    False
 |      b    False
 |      c     True
 |      d    False
 |      e    False
 |      f     True
 |      dtype: bool
 |  
 |  map(self, arg: 'Callable | Mapping | Series', na_action: "Literal['ignore'] | None" = None) -> 'Series'
 |      Map values of Series according to an input mapping or function.
 |      
 |      Used for substituting each value in a Series with another value,
 |      that may be derived from a function, a ``dict`` or
 |      a :class:`Series`.
 |      
 |      Parameters
 |      ----------
 |      arg : function, collections.abc.Mapping subclass or Series
 |          Mapping correspondence.
 |      na_action : {None, 'ignore'}, default None
 |          If 'ignore', propagate NaN values, without passing them to the
 |          mapping correspondence.
 |      
 |      Returns
 |      -------
 |      Series
 |          Same index as caller.
 |      
 |      See Also
 |      --------
 |      Series.apply : For applying more complex functions on a Series.
 |      Series.replace: Replace values given in `to_replace` with `value`.
 |      DataFrame.apply : Apply a function row-/column-wise.
 |      DataFrame.map : Apply a function elementwise on a whole DataFrame.
 |      
 |      Notes
 |      -----
 |      When ``arg`` is a dictionary, values in Series that are not in the
 |      dictionary (as keys) are converted to ``NaN``. However, if the
 |      dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.
 |      provides a method for default values), then this default is used
 |      rather than ``NaN``.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])
 |      >>> s
 |      0      cat
 |      1      dog
 |      2      NaN
 |      3   rabbit
 |      dtype: object
 |      
 |      ``map`` accepts a ``dict`` or a ``Series``. Values that are not found
 |      in the ``dict`` are converted to ``NaN``, unless the dict has a default
 |      value (e.g. ``defaultdict``):
 |      
 |      >>> s.map({'cat': 'kitten', 'dog': 'puppy'})
 |      0   kitten
 |      1    puppy
 |      2      NaN
 |      3      NaN
 |      dtype: object
 |      
 |      It also accepts a function:
 |      
 |      >>> s.map('I am a {}'.format)
 |      0       I am a cat
 |      1       I am a dog
 |      2       I am a nan
 |      3    I am a rabbit
 |      dtype: object
 |      
 |      To avoid applying the function to missing values (and keep them as
 |      ``NaN``) ``na_action='ignore'`` can be used:
 |      
 |      >>> s.map('I am a {}'.format, na_action='ignore')
 |      0     I am a cat
 |      1     I am a dog
 |      2            NaN
 |      3  I am a rabbit
 |      dtype: object
 |  
 |  max(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the maximum of the values over the requested axis.
 |      
 |      If you want the *index* of the maximum, use ``idxmax``. This is the equivalent of the ``numpy.ndarray`` method ``argmax``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.max()
 |      8
 |  
 |  mean(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the mean of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.mean()
 |                  2.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.mean()
 |                  a   1.5
 |                  b   2.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.mean(axis=1)
 |                  tiger   1.5
 |                  zebra   2.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True` to avoid
 |                  getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.mean(numeric_only=True)
 |                  a   1.5
 |                  dtype: float64
 |  
 |  median(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the median of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.median()
 |                  2.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.median()
 |                  a   1.5
 |                  b   2.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.median(axis=1)
 |                  tiger   1.5
 |                  zebra   2.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True`
 |                  to avoid getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.median(numeric_only=True)
 |                  a   1.5
 |                  dtype: float64
 |  
 |  memory_usage(self, index: 'bool' = True, deep: 'bool' = False) -> 'int'
 |      Return the memory usage of the Series.
 |      
 |      The memory usage can optionally include the contribution of
 |      the index and of elements of `object` dtype.
 |      
 |      Parameters
 |      ----------
 |      index : bool, default True
 |          Specifies whether to include the memory usage of the Series index.
 |      deep : bool, default False
 |          If True, introspect the data deeply by interrogating
 |          `object` dtypes for system-level memory consumption, and include
 |          it in the returned value.
 |      
 |      Returns
 |      -------
 |      int
 |          Bytes of memory consumed.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.nbytes : Total bytes consumed by the elements of the
 |          array.
 |      DataFrame.memory_usage : Bytes consumed by a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(range(3))
 |      >>> s.memory_usage()
 |      152
 |      
 |      Not including the index gives the size of the rest of the data, which
 |      is necessarily smaller:
 |      
 |      >>> s.memory_usage(index=False)
 |      24
 |      
 |      The memory footprint of `object` values is ignored by default:
 |      
 |      >>> s = pd.Series(["a", "b"])
 |      >>> s.values
 |      array(['a', 'b'], dtype=object)
 |      >>> s.memory_usage()
 |      144
 |      >>> s.memory_usage(deep=True)
 |      244
 |  
 |  min(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return the minimum of the values over the requested axis.
 |      
 |      If you want the *index* of the minimum, use ``idxmin``. This is the equivalent of the ``numpy.ndarray`` method ``argmin``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.min()
 |      0
 |  
 |  mod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Modulo of series and other, element-wise (binary operator `mod`).
 |      
 |      Equivalent to ``series % other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rmod : Reverse of the Modulo operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.mod(b, fill_value=0)
 |      a    0.0
 |      b    NaN
 |      c    NaN
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  mode(self, dropna: 'bool' = True) -> 'Series'
 |      Return the mode(s) of the Series.
 |      
 |      The mode is the value that appears most often. There can be multiple modes.
 |      
 |      Always returns Series even if only one value is returned.
 |      
 |      Parameters
 |      ----------
 |      dropna : bool, default True
 |          Don't consider counts of NaN/NaT.
 |      
 |      Returns
 |      -------
 |      Series
 |          Modes of the Series in sorted order.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([2, 4, 2, 2, 4, None])
 |      >>> s.mode()
 |      0    2.0
 |      dtype: float64
 |      
 |      More than one mode:
 |      
 |      >>> s = pd.Series([2, 4, 8, 2, 4, None])
 |      >>> s.mode()
 |      0    2.0
 |      1    4.0
 |      dtype: float64
 |      
 |      With and without considering null value:
 |      
 |      >>> s = pd.Series([2, 4, None, None, 4, None])
 |      >>> s.mode(dropna=False)
 |      0   NaN
 |      dtype: float64
 |      >>> s = pd.Series([2, 4, None, None, 4, None])
 |      >>> s.mode()
 |      0    4.0
 |      dtype: float64
 |  
 |  mul(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'
 |      Return Multiplication of series and other, element-wise (binary operator `mul`).
 |      
 |      Equivalent to ``series * other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rmul : Reverse of the Multiplication operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.multiply(b, fill_value=0)
 |      a    1.0
 |      b    0.0
 |      c    0.0
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  multiply = mul(self, other, level: 'Level | None' = None, fill_value: 'float | None' = None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  ne(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Not equal to of series and other, element-wise (binary operator `ne`).
 |      
 |      Equivalent to ``series != other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.ne(b, fill_value=0)
 |      a    False
 |      b     True
 |      c     True
 |      d     True
 |      e     True
 |      dtype: bool
 |  
 |  nlargest(self, n: 'int' = 5, keep: "Literal['first', 'last', 'all']" = 'first') -> 'Series'
 |      Return the largest `n` elements.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Return this many descending sorted values.
 |      keep : {'first', 'last', 'all'}, default 'first'
 |          When there are duplicate values that cannot all fit in a
 |          Series of `n` elements:
 |      
 |          - ``first`` : return the first `n` occurrences in order
 |            of appearance.
 |          - ``last`` : return the last `n` occurrences in reverse
 |            order of appearance.
 |          - ``all`` : keep all occurrences. This can result in a Series of
 |            size larger than `n`.
 |      
 |      Returns
 |      -------
 |      Series
 |          The `n` largest values in the Series, sorted in decreasing order.
 |      
 |      See Also
 |      --------
 |      Series.nsmallest: Get the `n` smallest elements.
 |      Series.sort_values: Sort Series by values.
 |      Series.head: Return the first `n` rows.
 |      
 |      Notes
 |      -----
 |      Faster than ``.sort_values(ascending=False).head(n)`` for small `n`
 |      relative to the size of the ``Series`` object.
 |      
 |      Examples
 |      --------
 |      >>> countries_population = {"Italy": 59000000, "France": 65000000,
 |      ...                         "Malta": 434000, "Maldives": 434000,
 |      ...                         "Brunei": 434000, "Iceland": 337000,
 |      ...                         "Nauru": 11300, "Tuvalu": 11300,
 |      ...                         "Anguilla": 11300, "Montserrat": 5200}
 |      >>> s = pd.Series(countries_population)
 |      >>> s
 |      Italy       59000000
 |      France      65000000
 |      Malta         434000
 |      Maldives      434000
 |      Brunei        434000
 |      Iceland       337000
 |      Nauru          11300
 |      Tuvalu         11300
 |      Anguilla       11300
 |      Montserrat      5200
 |      dtype: int64
 |      
 |      The `n` largest elements where ``n=5`` by default.
 |      
 |      >>> s.nlargest()
 |      France      65000000
 |      Italy       59000000
 |      Malta         434000
 |      Maldives      434000
 |      Brunei        434000
 |      dtype: int64
 |      
 |      The `n` largest elements where ``n=3``. Default `keep` value is 'first'
 |      so Malta will be kept.
 |      
 |      >>> s.nlargest(3)
 |      France    65000000
 |      Italy     59000000
 |      Malta       434000
 |      dtype: int64
 |      
 |      The `n` largest elements where ``n=3`` and keeping the last duplicates.
 |      Brunei will be kept since it is the last with value 434000 based on
 |      the index order.
 |      
 |      >>> s.nlargest(3, keep='last')
 |      France      65000000
 |      Italy       59000000
 |      Brunei        434000
 |      dtype: int64
 |      
 |      The `n` largest elements where ``n=3`` with all duplicates kept. Note
 |      that the returned Series has five elements due to the three duplicates.
 |      
 |      >>> s.nlargest(3, keep='all')
 |      France      65000000
 |      Italy       59000000
 |      Malta         434000
 |      Maldives      434000
 |      Brunei        434000
 |      dtype: int64
 |  
 |  notna(self) -> 'Series'
 |      Detect existing (non-missing) values.
 |      
 |      Return a boolean same-sized object indicating if the values are not NA.
 |      Non-missing values get mapped to True. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False
 |      values.
 |      
 |      Returns
 |      -------
 |      Series
 |          Mask of bool values for each element in Series that
 |          indicates whether an element is not an NA value.
 |      
 |      See Also
 |      --------
 |      Series.notnull : Alias of notna.
 |      Series.isna : Boolean inverse of notna.
 |      Series.dropna : Omit axes labels with missing values.
 |      notna : Top-level notna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are not NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.notna()
 |           age   born  name    toy
 |      0   True  False  True  False
 |      1   True   True  True   True
 |      2  False   True  True   True
 |      
 |      Show which entries in a Series are not NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.notna()
 |      0     True
 |      1     True
 |      2    False
 |      dtype: bool
 |  
 |  notnull(self) -> 'Series'
 |      Series.notnull is an alias for Series.notna.
 |      
 |      Detect existing (non-missing) values.
 |      
 |      Return a boolean same-sized object indicating if the values are not NA.
 |      Non-missing values get mapped to True. Characters such as empty
 |      strings ``''`` or :attr:`numpy.inf` are not considered NA values
 |      (unless you set ``pandas.options.mode.use_inf_as_na = True``).
 |      NA values, such as None or :attr:`numpy.NaN`, get mapped to False
 |      values.
 |      
 |      Returns
 |      -------
 |      Series
 |          Mask of bool values for each element in Series that
 |          indicates whether an element is not an NA value.
 |      
 |      See Also
 |      --------
 |      Series.notnull : Alias of notna.
 |      Series.isna : Boolean inverse of notna.
 |      Series.dropna : Omit axes labels with missing values.
 |      notna : Top-level notna.
 |      
 |      Examples
 |      --------
 |      Show which entries in a DataFrame are not NA.
 |      
 |      >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
 |      ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
 |      ...                              pd.Timestamp('1940-04-25')],
 |      ...                        name=['Alfred', 'Batman', ''],
 |      ...                        toy=[None, 'Batmobile', 'Joker']))
 |      >>> df
 |         age       born    name        toy
 |      0  5.0        NaT  Alfred       None
 |      1  6.0 1939-05-27  Batman  Batmobile
 |      2  NaN 1940-04-25              Joker
 |      
 |      >>> df.notna()
 |           age   born  name    toy
 |      0   True  False  True  False
 |      1   True   True  True   True
 |      2  False   True  True   True
 |      
 |      Show which entries in a Series are not NA.
 |      
 |      >>> ser = pd.Series([5, 6, np.nan])
 |      >>> ser
 |      0    5.0
 |      1    6.0
 |      2    NaN
 |      dtype: float64
 |      
 |      >>> ser.notna()
 |      0     True
 |      1     True
 |      2    False
 |      dtype: bool
 |  
 |  nsmallest(self, n: 'int' = 5, keep: "Literal['first', 'last', 'all']" = 'first') -> 'Series'
 |      Return the smallest `n` elements.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Return this many ascending sorted values.
 |      keep : {'first', 'last', 'all'}, default 'first'
 |          When there are duplicate values that cannot all fit in a
 |          Series of `n` elements:
 |      
 |          - ``first`` : return the first `n` occurrences in order
 |            of appearance.
 |          - ``last`` : return the last `n` occurrences in reverse
 |            order of appearance.
 |          - ``all`` : keep all occurrences. This can result in a Series of
 |            size larger than `n`.
 |      
 |      Returns
 |      -------
 |      Series
 |          The `n` smallest values in the Series, sorted in increasing order.
 |      
 |      See Also
 |      --------
 |      Series.nlargest: Get the `n` largest elements.
 |      Series.sort_values: Sort Series by values.
 |      Series.head: Return the first `n` rows.
 |      
 |      Notes
 |      -----
 |      Faster than ``.sort_values().head(n)`` for small `n` relative to
 |      the size of the ``Series`` object.
 |      
 |      Examples
 |      --------
 |      >>> countries_population = {"Italy": 59000000, "France": 65000000,
 |      ...                         "Brunei": 434000, "Malta": 434000,
 |      ...                         "Maldives": 434000, "Iceland": 337000,
 |      ...                         "Nauru": 11300, "Tuvalu": 11300,
 |      ...                         "Anguilla": 11300, "Montserrat": 5200}
 |      >>> s = pd.Series(countries_population)
 |      >>> s
 |      Italy       59000000
 |      France      65000000
 |      Brunei        434000
 |      Malta         434000
 |      Maldives      434000
 |      Iceland       337000
 |      Nauru          11300
 |      Tuvalu         11300
 |      Anguilla       11300
 |      Montserrat      5200
 |      dtype: int64
 |      
 |      The `n` smallest elements where ``n=5`` by default.
 |      
 |      >>> s.nsmallest()
 |      Montserrat    5200
 |      Nauru        11300
 |      Tuvalu       11300
 |      Anguilla     11300
 |      Iceland     337000
 |      dtype: int64
 |      
 |      The `n` smallest elements where ``n=3``. Default `keep` value is
 |      'first' so Nauru and Tuvalu will be kept.
 |      
 |      >>> s.nsmallest(3)
 |      Montserrat   5200
 |      Nauru       11300
 |      Tuvalu      11300
 |      dtype: int64
 |      
 |      The `n` smallest elements where ``n=3`` and keeping the last
 |      duplicates. Anguilla and Tuvalu will be kept since they are the last
 |      with value 11300 based on the index order.
 |      
 |      >>> s.nsmallest(3, keep='last')
 |      Montserrat   5200
 |      Anguilla    11300
 |      Tuvalu      11300
 |      dtype: int64
 |      
 |      The `n` smallest elements where ``n=3`` with all duplicates kept. Note
 |      that the returned Series has four elements due to the three duplicates.
 |      
 |      >>> s.nsmallest(3, keep='all')
 |      Montserrat   5200
 |      Nauru       11300
 |      Tuvalu      11300
 |      Anguilla    11300
 |      dtype: int64
 |  
 |  pop(self, item: 'Hashable') -> 'Any'
 |      Return item and drops from series. Raise KeyError if not found.
 |      
 |      Parameters
 |      ----------
 |      item : label
 |          Index of the element that needs to be removed.
 |      
 |      Returns
 |      -------
 |      Value that is popped from series.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3])
 |      
 |      >>> ser.pop(0)
 |      1
 |      
 |      >>> ser
 |      1    2
 |      2    3
 |      dtype: int64
 |  
 |  pow(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Exponential power of series and other, element-wise (binary operator `pow`).
 |      
 |      Equivalent to ``series ** other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rpow : Reverse of the Exponential power operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.pow(b, fill_value=0)
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  prod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |      Return the product of the values over the requested axis.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.prod with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      min_count : int, default 0
 |          The required number of valid values to perform the operation. If fewer than
 |          ``min_count`` non-NA values are present the result will be NA.
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      By default, the product of an empty or all-NA Series is ``1``
 |      
 |      >>> pd.Series([], dtype="float64").prod()
 |      1.0
 |      
 |      This can be controlled with the ``min_count`` parameter
 |      
 |      >>> pd.Series([], dtype="float64").prod(min_count=1)
 |      nan
 |      
 |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
 |      empty series identically.
 |      
 |      >>> pd.Series([np.nan]).prod()
 |      1.0
 |      
 |      >>> pd.Series([np.nan]).prod(min_count=1)
 |      nan
 |  
 |  product = prod(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |  
 |  quantile(self, q: 'float | Sequence[float] | AnyArrayLike' = 0.5, interpolation: 'QuantileInterpolation' = 'linear') -> 'float | Series'
 |      Return value at the given quantile.
 |      
 |      Parameters
 |      ----------
 |      q : float or array-like, default 0.5 (50% quantile)
 |          The quantile(s) to compute, which can lie in range: 0 <= q <= 1.
 |      interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
 |          This optional parameter specifies the interpolation method to use,
 |          when the desired quantile lies between two data points `i` and `j`:
 |      
 |              * linear: `i + (j - i) * (x-i)/(j-i)`, where `(x-i)/(j-i)` is
 |                the fractional part of the index surrounded by `i > j`.
 |              * lower: `i`.
 |              * higher: `j`.
 |              * nearest: `i` or `j` whichever is nearest.
 |              * midpoint: (`i` + `j`) / 2.
 |      
 |      Returns
 |      -------
 |      float or Series
 |          If ``q`` is an array, a Series will be returned where the
 |          index is ``q`` and the values are the quantiles, otherwise
 |          a float will be returned.
 |      
 |      See Also
 |      --------
 |      core.window.Rolling.quantile : Calculate the rolling quantile.
 |      numpy.percentile : Returns the q-th percentile(s) of the array elements.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s.quantile(.5)
 |      2.5
 |      >>> s.quantile([.25, .5, .75])
 |      0.25    1.75
 |      0.50    2.50
 |      0.75    3.25
 |      dtype: float64
 |  
 |  radd(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Addition of series and other, element-wise (binary operator `radd`).
 |      
 |      Equivalent to ``other + series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.add : Element-wise Addition, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.add(b, fill_value=0)
 |      a    2.0
 |      b    1.0
 |      c    1.0
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  ravel(self, order: 'str' = 'C') -> 'ArrayLike'
 |      Return the flattened underlying data as an ndarray or ExtensionArray.
 |      
 |      .. deprecated:: 2.2.0
 |          Series.ravel is deprecated. The underlying array is already 1D, so
 |          ravel is not necessary.  Use :meth:`to_numpy` for conversion to a numpy
 |          array instead.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray or ExtensionArray
 |          Flattened data of the Series.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.ravel : Return a flattened array.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.ravel()  # doctest: +SKIP
 |      array([1, 2, 3])
 |  
 |  rdiv = rtruediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  rdivmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Integer division and modulo of series and other, element-wise (binary operator `rdivmod`).
 |      
 |      Equivalent to ``other divmod series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      2-Tuple of Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.divmod : Element-wise Integer division and modulo, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.divmod(b, fill_value=0)
 |      (a    1.0
 |       b    inf
 |       c    inf
 |       d    0.0
 |       e    NaN
 |       dtype: float64,
 |       a    0.0
 |       b    NaN
 |       c    NaN
 |       d    0.0
 |       e    NaN
 |       dtype: float64)
 |  
 |  reindex(self, index=None, *, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Series'
 |      Conform Series to new index with optional filling logic.
 |      
 |      Places NA/NaN in locations having no value in the previous index. A new object
 |      is produced unless the new index is equivalent to the current one and
 |      ``copy=False``.
 |      
 |      Parameters
 |      ----------
 |      
 |      index : array-like, optional
 |          New labels for the index. Preferably an Index object to avoid
 |          duplicating data.
 |      axis : int or str, optional
 |          Unused.
 |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}
 |          Method to use for filling holes in reindexed DataFrame.
 |          Please note: this is only applicable to DataFrames/Series with a
 |          monotonically increasing/decreasing index.
 |      
 |          * None (default): don't fill gaps
 |          * pad / ffill: Propagate last valid observation forward to next
 |            valid.
 |          * backfill / bfill: Use next valid observation to fill gap.
 |          * nearest: Use nearest valid observations to fill gap.
 |      
 |      copy : bool, default True
 |          Return a new object, even if the passed indexes are the same.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : scalar, default np.nan
 |          Value to use for missing values. Defaults to NaN, but can be any
 |          "compatible" value.
 |      limit : int, default None
 |          Maximum number of consecutive elements to forward or backward fill.
 |      tolerance : optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations most
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      Series with changed index.
 |      
 |      See Also
 |      --------
 |      DataFrame.set_index : Set row labels.
 |      DataFrame.reset_index : Remove row labels or move them to new columns.
 |      DataFrame.reindex_like : Change to same indices as other DataFrame.
 |      
 |      Examples
 |      --------
 |      ``DataFrame.reindex`` supports two calling conventions
 |      
 |      * ``(index=index_labels, columns=column_labels, ...)``
 |      * ``(labels, axis={'index', 'columns'}, ...)``
 |      
 |      We *highly* recommend using keyword arguments to clarify your
 |      intent.
 |      
 |      Create a dataframe with some fictional data.
 |      
 |      >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']
 |      >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],
 |      ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},
 |      ...                   index=index)
 |      >>> df
 |                 http_status  response_time
 |      Firefox            200           0.04
 |      Chrome             200           0.02
 |      Safari             404           0.07
 |      IE10               404           0.08
 |      Konqueror          301           1.00
 |      
 |      Create a new index and reindex the dataframe. By default
 |      values in the new index that do not have corresponding
 |      records in the dataframe are assigned ``NaN``.
 |      
 |      >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',
 |      ...              'Chrome']
 |      >>> df.reindex(new_index)
 |                     http_status  response_time
 |      Safari               404.0           0.07
 |      Iceweasel              NaN            NaN
 |      Comodo Dragon          NaN            NaN
 |      IE10                 404.0           0.08
 |      Chrome               200.0           0.02
 |      
 |      We can fill in the missing values by passing a value to
 |      the keyword ``fill_value``. Because the index is not monotonically
 |      increasing or decreasing, we cannot use arguments to the keyword
 |      ``method`` to fill the ``NaN`` values.
 |      
 |      >>> df.reindex(new_index, fill_value=0)
 |                     http_status  response_time
 |      Safari                 404           0.07
 |      Iceweasel                0           0.00
 |      Comodo Dragon            0           0.00
 |      IE10                   404           0.08
 |      Chrome                 200           0.02
 |      
 |      >>> df.reindex(new_index, fill_value='missing')
 |                    http_status response_time
 |      Safari                404          0.07
 |      Iceweasel         missing       missing
 |      Comodo Dragon     missing       missing
 |      IE10                  404          0.08
 |      Chrome                200          0.02
 |      
 |      We can also reindex the columns.
 |      
 |      >>> df.reindex(columns=['http_status', 'user_agent'])
 |                 http_status  user_agent
 |      Firefox            200         NaN
 |      Chrome             200         NaN
 |      Safari             404         NaN
 |      IE10               404         NaN
 |      Konqueror          301         NaN
 |      
 |      Or we can use "axis-style" keyword arguments
 |      
 |      >>> df.reindex(['http_status', 'user_agent'], axis="columns")
 |                 http_status  user_agent
 |      Firefox            200         NaN
 |      Chrome             200         NaN
 |      Safari             404         NaN
 |      IE10               404         NaN
 |      Konqueror          301         NaN
 |      
 |      To further illustrate the filling functionality in
 |      ``reindex``, we will create a dataframe with a
 |      monotonically increasing index (for example, a sequence
 |      of dates).
 |      
 |      >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')
 |      >>> df2 = pd.DataFrame({"prices": [100, 101, np.nan, 100, 89, 88]},
 |      ...                    index=date_index)
 |      >>> df2
 |                  prices
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      
 |      Suppose we decide to expand the dataframe to cover a wider
 |      date range.
 |      
 |      >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')
 |      >>> df2.reindex(date_index2)
 |                  prices
 |      2009-12-29     NaN
 |      2009-12-30     NaN
 |      2009-12-31     NaN
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      2010-01-07     NaN
 |      
 |      The index entries that did not have a value in the original data frame
 |      (for example, '2009-12-29') are by default filled with ``NaN``.
 |      If desired, we can fill in the missing values using one of several
 |      options.
 |      
 |      For example, to back-propagate the last valid value to fill the ``NaN``
 |      values, pass ``bfill`` as an argument to the ``method`` keyword.
 |      
 |      >>> df2.reindex(date_index2, method='bfill')
 |                  prices
 |      2009-12-29   100.0
 |      2009-12-30   100.0
 |      2009-12-31   100.0
 |      2010-01-01   100.0
 |      2010-01-02   101.0
 |      2010-01-03     NaN
 |      2010-01-04   100.0
 |      2010-01-05    89.0
 |      2010-01-06    88.0
 |      2010-01-07     NaN
 |      
 |      Please note that the ``NaN`` value present in the original dataframe
 |      (at index value 2010-01-03) will not be filled by any of the
 |      value propagation schemes. This is because filling while reindexing
 |      does not look at dataframe values, but only compares the original and
 |      desired indexes. If you do want to fill in the ``NaN`` values present
 |      in the original dataframe, use the ``fillna()`` method.
 |      
 |      See the :ref:`user guide <basics.reindexing>` for more.
 |  
 |  rename(self, index: 'Renamer | Hashable | None' = None, *, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -> 'Series | None'
 |      Alter Series index labels or name.
 |      
 |      Function / dict values must be unique (1-to-1). Labels not contained in
 |      a dict / Series will be left as-is. Extra labels listed don't throw an
 |      error.
 |      
 |      Alternatively, change ``Series.name`` with a scalar value.
 |      
 |      See the :ref:`user guide <basics.rename>` for more.
 |      
 |      Parameters
 |      ----------
 |      index : scalar, hashable sequence, dict-like or function optional
 |          Functions or dict-like are transformations to apply to
 |          the index.
 |          Scalar or hashable sequence-like will alter the ``Series.name``
 |          attribute.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      copy : bool, default True
 |          Also copy underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      inplace : bool, default False
 |          Whether to return a new Series. If True the value of copy is ignored.
 |      level : int or level name, default None
 |          In case of MultiIndex, only rename labels in the specified level.
 |      errors : {'ignore', 'raise'}, default 'ignore'
 |          If 'raise', raise `KeyError` when a `dict-like mapper` or
 |          `index` contains labels that are not present in the index being transformed.
 |          If 'ignore', existing keys will be renamed and extra keys will be ignored.
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series with index labels or name altered or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.rename : Corresponding DataFrame method.
 |      Series.rename_axis : Set the name of the axis.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      dtype: int64
 |      >>> s.rename("my_name")  # scalar, changes Series.name
 |      0    1
 |      1    2
 |      2    3
 |      Name: my_name, dtype: int64
 |      >>> s.rename(lambda x: x ** 2)  # function, changes labels
 |      0    1
 |      1    2
 |      4    3
 |      dtype: int64
 |      >>> s.rename({1: 3, 2: 5})  # mapping, changes labels
 |      0    1
 |      3    2
 |      5    3
 |      dtype: int64
 |  
 |  rename_axis(self, mapper: 'IndexLabel | lib.NoDefault' = <no_default>, *, index=<no_default>, axis: 'Axis' = 0, copy: 'bool' = True, inplace: 'bool' = False) -> 'Self | None'
 |      Set the name of the axis for the index or columns.
 |      
 |      Parameters
 |      ----------
 |      mapper : scalar, list-like, optional
 |          Value to set the axis name attribute.
 |      index, columns : scalar, list-like, dict-like or function, optional
 |          A scalar, list-like, dict-like or functions transformations to
 |          apply to that axis' values.
 |          Note that the ``columns`` parameter is not allowed if the
 |          object is a Series. This parameter only apply for DataFrame
 |          type objects.
 |      
 |          Use either ``mapper`` and ``axis`` to
 |          specify the axis to target with ``mapper``, or ``index``
 |          and/or ``columns``.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to rename. For `Series` this parameter is unused and defaults to 0.
 |      copy : bool, default None
 |          Also copy underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      inplace : bool, default False
 |          Modifies the object directly, instead of creating a new Series
 |          or DataFrame.
 |      
 |      Returns
 |      -------
 |      Series, DataFrame, or None
 |          The same type as the caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.rename : Alter Series index labels or name.
 |      DataFrame.rename : Alter DataFrame index labels or name.
 |      Index.rename : Set new names on index.
 |      
 |      Notes
 |      -----
 |      ``DataFrame.rename_axis`` supports two calling conventions
 |      
 |      * ``(index=index_mapper, columns=columns_mapper, ...)``
 |      * ``(mapper, axis={'index', 'columns'}, ...)``
 |      
 |      The first calling convention will only modify the names of
 |      the index and/or the names of the Index object that is the columns.
 |      In this case, the parameter ``copy`` is ignored.
 |      
 |      The second calling convention will modify the names of the
 |      corresponding index if mapper is a list or a scalar.
 |      However, if mapper is dict-like or a function, it will use the
 |      deprecated behavior of modifying the axis *labels*.
 |      
 |      We *highly* recommend using keyword arguments to clarify your
 |      intent.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series(["dog", "cat", "monkey"])
 |      >>> s
 |      0       dog
 |      1       cat
 |      2    monkey
 |      dtype: object
 |      >>> s.rename_axis("animal")
 |      animal
 |      0    dog
 |      1    cat
 |      2    monkey
 |      dtype: object
 |      
 |      **DataFrame**
 |      
 |      >>> df = pd.DataFrame({"num_legs": [4, 4, 2],
 |      ...                    "num_arms": [0, 0, 2]},
 |      ...                   ["dog", "cat", "monkey"])
 |      >>> df
 |              num_legs  num_arms
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      >>> df = df.rename_axis("animal")
 |      >>> df
 |              num_legs  num_arms
 |      animal
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      >>> df = df.rename_axis("limbs", axis="columns")
 |      >>> df
 |      limbs   num_legs  num_arms
 |      animal
 |      dog            4         0
 |      cat            4         0
 |      monkey         2         2
 |      
 |      **MultiIndex**
 |      
 |      >>> df.index = pd.MultiIndex.from_product([['mammal'],
 |      ...                                        ['dog', 'cat', 'monkey']],
 |      ...                                       names=['type', 'name'])
 |      >>> df
 |      limbs          num_legs  num_arms
 |      type   name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |      
 |      >>> df.rename_axis(index={'type': 'class'})
 |      limbs          num_legs  num_arms
 |      class  name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |      
 |      >>> df.rename_axis(columns=str.upper)
 |      LIMBS          num_legs  num_arms
 |      type   name
 |      mammal dog            4         0
 |             cat            4         0
 |             monkey         2         2
 |  
 |  reorder_levels(self, order: 'Sequence[Level]') -> 'Series'
 |      Rearrange index levels using input order.
 |      
 |      May not drop or duplicate levels.
 |      
 |      Parameters
 |      ----------
 |      order : list of int representing new level order
 |          Reference level by number or key.
 |      
 |      Returns
 |      -------
 |      type of caller (new object)
 |      
 |      Examples
 |      --------
 |      >>> arrays = [np.array(["dog", "dog", "cat", "cat", "bird", "bird"]),
 |      ...           np.array(["white", "black", "white", "black", "white", "black"])]
 |      >>> s = pd.Series([1, 2, 3, 3, 5, 2], index=arrays)
 |      >>> s
 |      dog   white    1
 |            black    2
 |      cat   white    3
 |            black    3
 |      bird  white    5
 |            black    2
 |      dtype: int64
 |      >>> s.reorder_levels([1, 0])
 |      white  dog     1
 |      black  dog     2
 |      white  cat     3
 |      black  cat     3
 |      white  bird    5
 |      black  bird    2
 |      dtype: int64
 |  
 |  repeat(self, repeats: 'int | Sequence[int]', axis: 'None' = None) -> 'Series'
 |      Repeat elements of a Series.
 |      
 |      Returns a new Series where each element of the current Series
 |      is repeated consecutively a given number of times.
 |      
 |      Parameters
 |      ----------
 |      repeats : int or array of ints
 |          The number of repetitions for each element. This should be a
 |          non-negative integer. Repeating 0 times will return an empty
 |          Series.
 |      axis : None
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          Newly created Series with repeated elements.
 |      
 |      See Also
 |      --------
 |      Index.repeat : Equivalent function for Index.
 |      numpy.repeat : Similar method for :class:`numpy.ndarray`.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['a', 'b', 'c'])
 |      >>> s
 |      0    a
 |      1    b
 |      2    c
 |      dtype: object
 |      >>> s.repeat(2)
 |      0    a
 |      0    a
 |      1    b
 |      1    b
 |      2    c
 |      2    c
 |      dtype: object
 |      >>> s.repeat([1, 2, 3])
 |      0    a
 |      1    b
 |      1    b
 |      2    c
 |      2    c
 |      2    c
 |      dtype: object
 |  
 |  reset_index(self, level: 'IndexLabel | None' = None, *, drop: 'bool' = False, name: 'Level' = <no_default>, inplace: 'bool' = False, allow_duplicates: 'bool' = False) -> 'DataFrame | Series | None'
 |      Generate a new DataFrame or Series with the index reset.
 |      
 |      This is useful when the index needs to be treated as a column, or
 |      when the index is meaningless and needs to be reset to the default
 |      before another operation.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, tuple, or list, default optional
 |          For a Series with a MultiIndex, only remove the specified levels
 |          from the index. Removes all levels by default.
 |      drop : bool, default False
 |          Just reset the index, without inserting it as a column in
 |          the new DataFrame.
 |      name : object, optional
 |          The name to use for the column containing the original Series
 |          values. Uses ``self.name`` by default. This argument is ignored
 |          when `drop` is True.
 |      inplace : bool, default False
 |          Modify the Series in place (do not create a new object).
 |      allow_duplicates : bool, default False
 |          Allow duplicate column labels to be created.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame or None
 |          When `drop` is False (the default), a DataFrame is returned.
 |          The newly created columns will come first in the DataFrame,
 |          followed by the original Series values.
 |          When `drop` is True, a `Series` is returned.
 |          In either case, if ``inplace=True``, no value is returned.
 |      
 |      See Also
 |      --------
 |      DataFrame.reset_index: Analogous function for DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4], name='foo',
 |      ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))
 |      
 |      Generate a DataFrame with default index.
 |      
 |      >>> s.reset_index()
 |        idx  foo
 |      0   a    1
 |      1   b    2
 |      2   c    3
 |      3   d    4
 |      
 |      To specify the name of the new column use `name`.
 |      
 |      >>> s.reset_index(name='values')
 |        idx  values
 |      0   a       1
 |      1   b       2
 |      2   c       3
 |      3   d       4
 |      
 |      To generate a new Series with the default set `drop` to True.
 |      
 |      >>> s.reset_index(drop=True)
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      Name: foo, dtype: int64
 |      
 |      The `level` parameter is interesting for Series with a multi-level
 |      index.
 |      
 |      >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),
 |      ...           np.array(['one', 'two', 'one', 'two'])]
 |      >>> s2 = pd.Series(
 |      ...     range(4), name='foo',
 |      ...     index=pd.MultiIndex.from_arrays(arrays,
 |      ...                                     names=['a', 'b']))
 |      
 |      To remove a specific level from the Index, use `level`.
 |      
 |      >>> s2.reset_index(level='a')
 |             a  foo
 |      b
 |      one  bar    0
 |      two  bar    1
 |      one  baz    2
 |      two  baz    3
 |      
 |      If `level` is not set, all levels are removed from the Index.
 |      
 |      >>> s2.reset_index()
 |           a    b  foo
 |      0  bar  one    0
 |      1  bar  two    1
 |      2  baz  one    2
 |      3  baz  two    3
 |  
 |  rfloordiv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Integer division of series and other, element-wise (binary operator `rfloordiv`).
 |      
 |      Equivalent to ``other // series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.floordiv : Element-wise Integer division, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.floordiv(b, fill_value=0)
 |      a    1.0
 |      b    inf
 |      c    inf
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  rmod(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Modulo of series and other, element-wise (binary operator `rmod`).
 |      
 |      Equivalent to ``other % series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.mod : Element-wise Modulo, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.mod(b, fill_value=0)
 |      a    0.0
 |      b    NaN
 |      c    NaN
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  rmul(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Multiplication of series and other, element-wise (binary operator `rmul`).
 |      
 |      Equivalent to ``other * series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.mul : Element-wise Multiplication, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.multiply(b, fill_value=0)
 |      a    1.0
 |      b    0.0
 |      c    0.0
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  round(self, decimals: 'int' = 0, *args, **kwargs) -> 'Series'
 |      Round each value in a Series to the given number of decimals.
 |      
 |      Parameters
 |      ----------
 |      decimals : int, default 0
 |          Number of decimal places to round to. If decimals is negative,
 |          it specifies the number of positions to the left of the decimal point.
 |      *args, **kwargs
 |          Additional arguments and keywords have no effect but might be
 |          accepted for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      Series
 |          Rounded values of the Series.
 |      
 |      See Also
 |      --------
 |      numpy.around : Round values of an np.array.
 |      DataFrame.round : Round values of a DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([0.1, 1.3, 2.7])
 |      >>> s.round()
 |      0    0.0
 |      1    1.0
 |      2    3.0
 |      dtype: float64
 |  
 |  rpow(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Exponential power of series and other, element-wise (binary operator `rpow`).
 |      
 |      Equivalent to ``other ** series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.pow : Element-wise Exponential power, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.pow(b, fill_value=0)
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  rsub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Subtraction of series and other, element-wise (binary operator `rsub`).
 |      
 |      Equivalent to ``other - series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.sub : Element-wise Subtraction, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.subtract(b, fill_value=0)
 |      a    0.0
 |      b    1.0
 |      c    1.0
 |      d   -1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  rtruediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Floating division of series and other, element-wise (binary operator `rtruediv`).
 |      
 |      Equivalent to ``other / series``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.truediv : Element-wise Floating division, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.divide(b, fill_value=0)
 |      a    1.0
 |      b    inf
 |      c    inf
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  searchsorted(self, value: 'NumpyValueArrayLike | ExtensionArray', side: "Literal['left', 'right']" = 'left', sorter: 'NumpySorter | None' = None) -> 'npt.NDArray[np.intp] | np.intp'
 |      Find indices where elements should be inserted to maintain order.
 |      
 |      Find the indices into a sorted Series `self` such that, if the
 |      corresponding elements in `value` were inserted before the indices,
 |      the order of `self` would be preserved.
 |      
 |      .. note::
 |      
 |          The Series *must* be monotonically sorted, otherwise
 |          wrong locations will likely be returned. Pandas does *not*
 |          check this for you.
 |      
 |      Parameters
 |      ----------
 |      value : array-like or scalar
 |          Values to insert into `self`.
 |      side : {'left', 'right'}, optional
 |          If 'left', the index of the first suitable location found is given.
 |          If 'right', return the last such index.  If there is no suitable
 |          index, return either 0 or N (where N is the length of `self`).
 |      sorter : 1-D array-like, optional
 |          Optional array of integer indices that sort `self` into ascending
 |          order. They are typically the result of ``np.argsort``.
 |      
 |      Returns
 |      -------
 |      int or array of int
 |          A scalar or array of insertion points with the
 |          same shape as `value`.
 |      
 |      See Also
 |      --------
 |      sort_values : Sort by the values along either axis.
 |      numpy.searchsorted : Similar method from NumPy.
 |      
 |      Notes
 |      -----
 |      Binary search is used to find the required insertion points.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> ser
 |      0    1
 |      1    2
 |      2    3
 |      dtype: int64
 |      
 |      >>> ser.searchsorted(4)
 |      3
 |      
 |      >>> ser.searchsorted([0, 4])
 |      array([0, 3])
 |      
 |      >>> ser.searchsorted([1, 3], side='left')
 |      array([0, 2])
 |      
 |      >>> ser.searchsorted([1, 3], side='right')
 |      array([1, 3])
 |      
 |      >>> ser = pd.Series(pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000']))
 |      >>> ser
 |      0   2000-03-11
 |      1   2000-03-12
 |      2   2000-03-13
 |      dtype: datetime64[ns]
 |      
 |      >>> ser.searchsorted('3/14/2000')
 |      3
 |      
 |      >>> ser = pd.Categorical(
 |      ...     ['apple', 'bread', 'bread', 'cheese', 'milk'], ordered=True
 |      ... )
 |      >>> ser
 |      ['apple', 'bread', 'bread', 'cheese', 'milk']
 |      Categories (4, object): ['apple' < 'bread' < 'cheese' < 'milk']
 |      
 |      >>> ser.searchsorted('bread')
 |      1
 |      
 |      >>> ser.searchsorted(['bread'], side='right')
 |      array([3])
 |      
 |      If the values are not monotonically sorted, wrong locations
 |      may be returned:
 |      
 |      >>> ser = pd.Series([2, 1, 3])
 |      >>> ser
 |      0    2
 |      1    1
 |      2    3
 |      dtype: int64
 |      
 |      >>> ser.searchsorted(1)  # doctest: +SKIP
 |      0  # wrong result, correct would be 1
 |  
 |  sem(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased standard error of the mean over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.sem with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      scalar or Series (if level specified) 
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.sem().round(6)
 |                  0.57735
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
 |                  >>> df
 |                         a   b
 |                  tiger  1   2
 |                  zebra  2   3
 |                  >>> df.sem()
 |                  a   0.5
 |                  b   0.5
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.sem(axis=1)
 |                  tiger   0.5
 |                  zebra   0.5
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True`
 |                  to avoid getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
 |                  ...                   index=['tiger', 'zebra'])
 |                  >>> df.sem(numeric_only=True)
 |                  a   0.5
 |                  dtype: float64
 |  
 |  set_axis(self, labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'Series'
 |      Assign desired index to given axis.
 |      
 |      Indexes for row labels can be changed by assigning
 |      a list-like or Index.
 |      
 |      Parameters
 |      ----------
 |      labels : list-like, Index
 |          The values for the new index.
 |      
 |      axis : {0 or 'index'}, default 0
 |          The axis to update. The value 0 identifies the rows. For `Series`
 |          this parameter is unused and defaults to 0.
 |      
 |      copy : bool, default True
 |          Whether to make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series
 |          An object of type Series.
 |      
 |      See Also
 |      --------
 |      Series.rename_axis : Alter the name of the index.
 |      
 |              Examples
 |              --------
 |              >>> s = pd.Series([1, 2, 3])
 |              >>> s
 |              0    1
 |              1    2
 |              2    3
 |              dtype: int64
 |      
 |              >>> s.set_axis(['a', 'b', 'c'], axis=0)
 |              a    1
 |              b    2
 |              c    3
 |              dtype: int64
 |  
 |  skew(self, axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased skew over requested axis.
 |      
 |      Normalized by N-1.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          For DataFrames, specifying ``axis=None`` will apply the aggregation
 |          across both axes.
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |                  Examples
 |                  --------
 |                  >>> s = pd.Series([1, 2, 3])
 |                  >>> s.skew()
 |                  0.0
 |      
 |                  With a DataFrame
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},
 |                  ...                   index=['tiger', 'zebra', 'cow'])
 |                  >>> df
 |                          a   b   c
 |                  tiger   1   2   1
 |                  zebra   2   3   3
 |                  cow     3   4   5
 |                  >>> df.skew()
 |                  a   0.0
 |                  b   0.0
 |                  c   0.0
 |                  dtype: float64
 |      
 |                  Using axis=1
 |      
 |                  >>> df.skew(axis=1)
 |                  tiger   1.732051
 |                  zebra  -1.732051
 |                  cow     0.000000
 |                  dtype: float64
 |      
 |                  In this case, `numeric_only` should be set to `True` to avoid
 |                  getting an error.
 |      
 |                  >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},
 |                  ...                   index=['tiger', 'zebra', 'cow'])
 |                  >>> df.skew(numeric_only=True)
 |                  a   0.0
 |                  dtype: float64
 |  
 |  sort_index(self, *, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -> 'Series | None'
 |      Sort Series by index labels.
 |      
 |      Returns a new Series sorted by label if `inplace` argument is
 |      ``False``, otherwise updates the original series and returns None.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      level : int, optional
 |          If not None, sort on values in specified index level(s).
 |      ascending : bool or list-like of bools, default True
 |          Sort ascending vs. descending. When the index is a MultiIndex the
 |          sort direction can be controlled for each level individually.
 |      inplace : bool, default False
 |          If True, perform operation in-place.
 |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'
 |          Choice of sorting algorithm. See also :func:`numpy.sort` for more
 |          information. 'mergesort' and 'stable' are the only stable algorithms. For
 |          DataFrames, this option is only applied when sorting on a single
 |          column or label.
 |      na_position : {'first', 'last'}, default 'last'
 |          If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.
 |          Not implemented for MultiIndex.
 |      sort_remaining : bool, default True
 |          If True and sorting by level and index is multilevel, sort by other
 |          levels too (in order) after sorting by specified level.
 |      ignore_index : bool, default False
 |          If True, the resulting axis will be labeled 0, 1, …, n - 1.
 |      key : callable, optional
 |          If not None, apply the key function to the index values
 |          before sorting. This is similar to the `key` argument in the
 |          builtin :meth:`sorted` function, with the notable difference that
 |          this `key` function should be *vectorized*. It should expect an
 |          ``Index`` and return an ``Index`` of the same shape.
 |      
 |      Returns
 |      -------
 |      Series or None
 |          The original Series sorted by the labels or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      DataFrame.sort_index: Sort DataFrame by the index.
 |      DataFrame.sort_values: Sort DataFrame by the value.
 |      Series.sort_values : Sort Series by the value.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])
 |      >>> s.sort_index()
 |      1    c
 |      2    b
 |      3    a
 |      4    d
 |      dtype: object
 |      
 |      Sort Descending
 |      
 |      >>> s.sort_index(ascending=False)
 |      4    d
 |      3    a
 |      2    b
 |      1    c
 |      dtype: object
 |      
 |      By default NaNs are put at the end, but use `na_position` to place
 |      them at the beginning
 |      
 |      >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])
 |      >>> s.sort_index(na_position='first')
 |      NaN     d
 |       1.0    c
 |       2.0    b
 |       3.0    a
 |      dtype: object
 |      
 |      Specify index level to sort
 |      
 |      >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',
 |      ...                     'baz', 'baz', 'bar', 'bar']),
 |      ...           np.array(['two', 'one', 'two', 'one',
 |      ...                     'two', 'one', 'two', 'one'])]
 |      >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)
 |      >>> s.sort_index(level=1)
 |      bar  one    8
 |      baz  one    6
 |      foo  one    4
 |      qux  one    2
 |      bar  two    7
 |      baz  two    5
 |      foo  two    3
 |      qux  two    1
 |      dtype: int64
 |      
 |      Does not sort by remaining levels when sorting by levels
 |      
 |      >>> s.sort_index(level=1, sort_remaining=False)
 |      qux  one    2
 |      foo  one    4
 |      baz  one    6
 |      bar  one    8
 |      qux  two    1
 |      foo  two    3
 |      baz  two    5
 |      bar  two    7
 |      dtype: int64
 |      
 |      Apply a key function before sorting
 |      
 |      >>> s = pd.Series([1, 2, 3, 4], index=['A', 'b', 'C', 'd'])
 |      >>> s.sort_index(key=lambda x : x.str.lower())
 |      A    1
 |      b    2
 |      C    3
 |      d    4
 |      dtype: int64
 |  
 |  sort_values(self, *, axis: 'Axis' = 0, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -> 'Series | None'
 |      Sort by the values.
 |      
 |      Sort a Series in ascending or descending order by some
 |      criterion.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      ascending : bool or list of bools, default True
 |          If True, sort values in ascending order, otherwise descending.
 |      inplace : bool, default False
 |          If True, perform operation in-place.
 |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'
 |          Choice of sorting algorithm. See also :func:`numpy.sort` for more
 |          information. 'mergesort' and 'stable' are the only stable  algorithms.
 |      na_position : {'first' or 'last'}, default 'last'
 |          Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at
 |          the end.
 |      ignore_index : bool, default False
 |          If True, the resulting axis will be labeled 0, 1, …, n - 1.
 |      key : callable, optional
 |          If not None, apply the key function to the series values
 |          before sorting. This is similar to the `key` argument in the
 |          builtin :meth:`sorted` function, with the notable difference that
 |          this `key` function should be *vectorized*. It should expect a
 |          ``Series`` and return an array-like.
 |      
 |      Returns
 |      -------
 |      Series or None
 |          Series ordered by values or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.sort_index : Sort by the Series indices.
 |      DataFrame.sort_values : Sort DataFrame by the values along either axis.
 |      DataFrame.sort_index : Sort DataFrame by indices.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([np.nan, 1, 3, 10, 5])
 |      >>> s
 |      0     NaN
 |      1     1.0
 |      2     3.0
 |      3     10.0
 |      4     5.0
 |      dtype: float64
 |      
 |      Sort values ascending order (default behaviour)
 |      
 |      >>> s.sort_values(ascending=True)
 |      1     1.0
 |      2     3.0
 |      4     5.0
 |      3    10.0
 |      0     NaN
 |      dtype: float64
 |      
 |      Sort values descending order
 |      
 |      >>> s.sort_values(ascending=False)
 |      3    10.0
 |      4     5.0
 |      2     3.0
 |      1     1.0
 |      0     NaN
 |      dtype: float64
 |      
 |      Sort values putting NAs first
 |      
 |      >>> s.sort_values(na_position='first')
 |      0     NaN
 |      1     1.0
 |      2     3.0
 |      4     5.0
 |      3    10.0
 |      dtype: float64
 |      
 |      Sort a series of strings
 |      
 |      >>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])
 |      >>> s
 |      0    z
 |      1    b
 |      2    d
 |      3    a
 |      4    c
 |      dtype: object
 |      
 |      >>> s.sort_values()
 |      3    a
 |      1    b
 |      4    c
 |      2    d
 |      0    z
 |      dtype: object
 |      
 |      Sort using a key function. Your `key` function will be
 |      given the ``Series`` of values and should return an array-like.
 |      
 |      >>> s = pd.Series(['a', 'B', 'c', 'D', 'e'])
 |      >>> s.sort_values()
 |      1    B
 |      3    D
 |      0    a
 |      2    c
 |      4    e
 |      dtype: object
 |      >>> s.sort_values(key=lambda x: x.str.lower())
 |      0    a
 |      1    B
 |      2    c
 |      3    D
 |      4    e
 |      dtype: object
 |      
 |      NumPy ufuncs work well here. For example, we can
 |      sort by the ``sin`` of the value
 |      
 |      >>> s = pd.Series([-4, -2, 0, 2, 4])
 |      >>> s.sort_values(key=np.sin)
 |      1   -2
 |      4    4
 |      2    0
 |      0   -4
 |      3    2
 |      dtype: int64
 |      
 |      More complicated user-defined functions can be used,
 |      as long as they expect a Series and return an array-like
 |      
 |      >>> s.sort_values(key=lambda x: (np.tan(x.cumsum())))
 |      0   -4
 |      3    2
 |      4    4
 |      1   -2
 |      2    0
 |      dtype: int64
 |  
 |  std(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return sample standard deviation over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.std with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      scalar or Series (if level specified) 
 |      
 |      Notes
 |      -----
 |      To have the same behaviour as `numpy.std`, use `ddof=0` (instead of the
 |      default `ddof=1`)
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],
 |      ...                    'age': [21, 25, 62, 43],
 |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}
 |      ...                   ).set_index('person_id')
 |      >>> df
 |                 age  height
 |      person_id
 |      0           21    1.61
 |      1           25    1.87
 |      2           62    1.49
 |      3           43    2.01
 |      
 |      The standard deviation of the columns can be found as follows:
 |      
 |      >>> df.std()
 |      age       18.786076
 |      height     0.237417
 |      dtype: float64
 |      
 |      Alternatively, `ddof=0` can be set to normalize by N instead of N-1:
 |      
 |      >>> df.std(ddof=0)
 |      age       16.269219
 |      height     0.205609
 |      dtype: float64
 |  
 |  sub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Subtraction of series and other, element-wise (binary operator `sub`).
 |      
 |      Equivalent to ``series - other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rsub : Reverse of the Subtraction operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.subtract(b, fill_value=0)
 |      a    0.0
 |      b    1.0
 |      c    1.0
 |      d   -1.0
 |      e    NaN
 |      dtype: float64
 |  
 |  subtract = sub(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |  
 |  sum(self, axis: 'Axis | None' = None, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs)
 |      Return the sum of the values over the requested axis.
 |      
 |      This is equivalent to the method ``numpy.sum``.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          Axis for the function to be applied on.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.sum with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values when computing the result.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      min_count : int, default 0
 |          The required number of valid values to perform the operation. If fewer than
 |          ``min_count`` non-NA values are present the result will be NA.
 |      **kwargs
 |          Additional keyword arguments to be passed to the function.
 |      
 |      Returns
 |      -------
 |      scalar or scalar
 |      
 |      See Also
 |      --------
 |      Series.sum : Return the sum.
 |      Series.min : Return the minimum.
 |      Series.max : Return the maximum.
 |      Series.idxmin : Return the index of the minimum.
 |      Series.idxmax : Return the index of the maximum.
 |      DataFrame.sum : Return the sum over the requested axis.
 |      DataFrame.min : Return the minimum over the requested axis.
 |      DataFrame.max : Return the maximum over the requested axis.
 |      DataFrame.idxmin : Return the index of the minimum over the requested axis.
 |      DataFrame.idxmax : Return the index of the maximum over the requested axis.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.MultiIndex.from_arrays([
 |      ...     ['warm', 'warm', 'cold', 'cold'],
 |      ...     ['dog', 'falcon', 'fish', 'spider']],
 |      ...     names=['blooded', 'animal'])
 |      >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
 |      >>> s
 |      blooded  animal
 |      warm     dog       4
 |               falcon    2
 |      cold     fish      0
 |               spider    8
 |      Name: legs, dtype: int64
 |      
 |      >>> s.sum()
 |      14
 |      
 |      By default, the sum of an empty or all-NA Series is ``0``.
 |      
 |      >>> pd.Series([], dtype="float64").sum()  # min_count=0 is the default
 |      0.0
 |      
 |      This can be controlled with the ``min_count`` parameter. For example, if
 |      you'd like the sum of an empty series to be NaN, pass ``min_count=1``.
 |      
 |      >>> pd.Series([], dtype="float64").sum(min_count=1)
 |      nan
 |      
 |      Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
 |      empty series identically.
 |      
 |      >>> pd.Series([np.nan]).sum()
 |      0.0
 |      
 |      >>> pd.Series([np.nan]).sum(min_count=1)
 |      nan
 |  
 |  swaplevel(self, i: 'Level' = -2, j: 'Level' = -1, copy: 'bool | None' = None) -> 'Series'
 |      Swap levels i and j in a :class:`MultiIndex`.
 |      
 |      Default is to swap the two innermost levels of the index.
 |      
 |      Parameters
 |      ----------
 |      i, j : int or str
 |          Levels of the indices to be swapped. Can pass level name as string.
 |      copy : bool, default True
 |                  Whether to copy underlying data.
 |      
 |                  .. note::
 |                      The `copy` keyword will change behavior in pandas 3.0.
 |                      `Copy-on-Write
 |                      <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |                      will be enabled by default, which means that all methods with a
 |                      `copy` keyword will use a lazy copy mechanism to defer the copy and
 |                      ignore the `copy` keyword. The `copy` keyword will be removed in a
 |                      future version of pandas.
 |      
 |                      You can already get the future behavior and improvements through
 |                      enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series
 |          Series with levels swapped in MultiIndex.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(
 |      ...     ["A", "B", "A", "C"],
 |      ...     index=[
 |      ...         ["Final exam", "Final exam", "Coursework", "Coursework"],
 |      ...         ["History", "Geography", "History", "Geography"],
 |      ...         ["January", "February", "March", "April"],
 |      ...     ],
 |      ... )
 |      >>> s
 |      Final exam  History     January      A
 |                  Geography   February     B
 |      Coursework  History     March        A
 |                  Geography   April        C
 |      dtype: object
 |      
 |      In the following example, we will swap the levels of the indices.
 |      Here, we will swap the levels column-wise, but levels can be swapped row-wise
 |      in a similar manner. Note that column-wise is the default behaviour.
 |      By not supplying any arguments for i and j, we swap the last and second to
 |      last indices.
 |      
 |      >>> s.swaplevel()
 |      Final exam  January     History         A
 |                  February    Geography       B
 |      Coursework  March       History         A
 |                  April       Geography       C
 |      dtype: object
 |      
 |      By supplying one argument, we can choose which index to swap the last
 |      index with. We can for example swap the first index with the last one as
 |      follows.
 |      
 |      >>> s.swaplevel(0)
 |      January     History     Final exam      A
 |      February    Geography   Final exam      B
 |      March       History     Coursework      A
 |      April       Geography   Coursework      C
 |      dtype: object
 |      
 |      We can also define explicitly which indices we want to swap by supplying values
 |      for both i and j. Here, we for example swap the first and second indices.
 |      
 |      >>> s.swaplevel(0, 1)
 |      History     Final exam  January         A
 |      Geography   Final exam  February        B
 |      History     Coursework  March           A
 |      Geography   Coursework  April           C
 |      dtype: object
 |  
 |  to_dict(self, *, into: 'type[MutableMappingT] | MutableMappingT' = <class 'dict'>) -> 'MutableMappingT'
 |      Convert Series to {label -> value} dict or dict-like object.
 |      
 |      Parameters
 |      ----------
 |      into : class, default dict
 |          The collections.abc.MutableMapping subclass to use as the return
 |          object. Can be the actual class or an empty instance of the mapping
 |          type you want.  If you want a collections.defaultdict, you must
 |          pass it initialized.
 |      
 |      Returns
 |      -------
 |      collections.abc.MutableMapping
 |          Key-value representation of Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s.to_dict()
 |      {0: 1, 1: 2, 2: 3, 3: 4}
 |      >>> from collections import OrderedDict, defaultdict
 |      >>> s.to_dict(into=OrderedDict)
 |      OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])
 |      >>> dd = defaultdict(list)
 |      >>> s.to_dict(into=dd)
 |      defaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})
 |  
 |  to_frame(self, name: 'Hashable' = <no_default>) -> 'DataFrame'
 |      Convert Series to DataFrame.
 |      
 |      Parameters
 |      ----------
 |      name : object, optional
 |          The passed name should substitute for the series name (if it has
 |          one).
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          DataFrame representation of Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(["a", "b", "c"],
 |      ...               name="vals")
 |      >>> s.to_frame()
 |        vals
 |      0    a
 |      1    b
 |      2    c
 |  
 |  to_markdown(self, buf: 'IO[str] | None' = None, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'str | None'
 |      Print Series in Markdown-friendly format.
 |      
 |      Parameters
 |      ----------
 |      buf : str, Path or StringIO-like, optional, default None
 |          Buffer to write to. If None, the output is returned as a string.
 |      mode : str, optional
 |          Mode in which file is opened, "wt" by default.
 |      index : bool, optional, default True
 |          Add index (row) labels.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      **kwargs
 |          These parameters will be passed to `tabulate                 <https://pypi.org/project/tabulate>`_.
 |      
 |      Returns
 |      -------
 |      str
 |          Series in Markdown-friendly format.
 |      
 |      Notes
 |      -----
 |      Requires the `tabulate <https://pypi.org/project/tabulate>`_ package.
 |      
 |      Examples
 |                  --------
 |                  >>> s = pd.Series(["elk", "pig", "dog", "quetzal"], name="animal")
 |                  >>> print(s.to_markdown())
 |                  |    | animal   |
 |                  |---:|:---------|
 |                  |  0 | elk      |
 |                  |  1 | pig      |
 |                  |  2 | dog      |
 |                  |  3 | quetzal  |
 |      
 |                  Output markdown with a tabulate option.
 |      
 |                  >>> print(s.to_markdown(tablefmt="grid"))
 |                  +----+----------+
 |                  |    | animal   |
 |                  +====+==========+
 |                  |  0 | elk      |
 |                  +----+----------+
 |                  |  1 | pig      |
 |                  +----+----------+
 |                  |  2 | dog      |
 |                  +----+----------+
 |                  |  3 | quetzal  |
 |                  +----+----------+
 |  
 |  to_period(self, freq: 'str | None' = None, copy: 'bool | None' = None) -> 'Series'
 |      Convert Series from DatetimeIndex to PeriodIndex.
 |      
 |      Parameters
 |      ----------
 |      freq : str, default None
 |          Frequency associated with the PeriodIndex.
 |      copy : bool, default True
 |          Whether or not to return a copy.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series
 |          Series with index converted to PeriodIndex.
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.DatetimeIndex(['2023', '2024', '2025'])
 |      >>> s = pd.Series([1, 2, 3], index=idx)
 |      >>> s = s.to_period()
 |      >>> s
 |      2023    1
 |      2024    2
 |      2025    3
 |      Freq: Y-DEC, dtype: int64
 |      
 |      Viewing the index
 |      
 |      >>> s.index
 |      PeriodIndex(['2023', '2024', '2025'], dtype='period[Y-DEC]')
 |  
 |  to_string(self, buf: 'FilePath | WriteBuffer[str] | None' = None, na_rep: 'str' = 'NaN', float_format: 'str | None' = None, header: 'bool' = True, index: 'bool' = True, length: 'bool' = False, dtype: 'bool' = False, name: 'bool' = False, max_rows: 'int | None' = None, min_rows: 'int | None' = None) -> 'str | None'
 |      Render a string representation of the Series.
 |      
 |      Parameters
 |      ----------
 |      buf : StringIO-like, optional
 |          Buffer to write to.
 |      na_rep : str, optional
 |          String representation of NaN to use, default 'NaN'.
 |      float_format : one-parameter function, optional
 |          Formatter function to apply to columns' elements if they are
 |          floats, default None.
 |      header : bool, default True
 |          Add the Series header (index name).
 |      index : bool, optional
 |          Add index (row) labels, default True.
 |      length : bool, default False
 |          Add the Series length.
 |      dtype : bool, default False
 |          Add the Series dtype.
 |      name : bool, default False
 |          Add the Series name if not None.
 |      max_rows : int, optional
 |          Maximum number of rows to show before truncating. If None, show
 |          all.
 |      min_rows : int, optional
 |          The number of rows to display in a truncated repr (when number
 |          of rows is above `max_rows`).
 |      
 |      Returns
 |      -------
 |      str or None
 |          String representation of Series if ``buf=None``, otherwise None.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([1, 2, 3]).to_string()
 |      >>> ser
 |      '0    1\n1    2\n2    3'
 |  
 |  to_timestamp(self, freq: 'Frequency | None' = None, how: "Literal['s', 'e', 'start', 'end']" = 'start', copy: 'bool | None' = None) -> 'Series'
 |      Cast to DatetimeIndex of Timestamps, at *beginning* of period.
 |      
 |      Parameters
 |      ----------
 |      freq : str, default frequency of PeriodIndex
 |          Desired frequency.
 |      how : {'s', 'e', 'start', 'end'}
 |          Convention for converting period to timestamp; start of period
 |          vs. end.
 |      copy : bool, default True
 |          Whether or not to return a copy.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series with DatetimeIndex
 |      
 |      Examples
 |      --------
 |      >>> idx = pd.PeriodIndex(['2023', '2024', '2025'], freq='Y')
 |      >>> s1 = pd.Series([1, 2, 3], index=idx)
 |      >>> s1
 |      2023    1
 |      2024    2
 |      2025    3
 |      Freq: Y-DEC, dtype: int64
 |      
 |      The resulting frequency of the Timestamps is `YearBegin`
 |      
 |      >>> s1 = s1.to_timestamp()
 |      >>> s1
 |      2023-01-01    1
 |      2024-01-01    2
 |      2025-01-01    3
 |      Freq: YS-JAN, dtype: int64
 |      
 |      Using `freq` which is the offset that the Timestamps will have
 |      
 |      >>> s2 = pd.Series([1, 2, 3], index=idx)
 |      >>> s2 = s2.to_timestamp(freq='M')
 |      >>> s2
 |      2023-01-31    1
 |      2024-01-31    2
 |      2025-01-31    3
 |      Freq: YE-JAN, dtype: int64
 |  
 |  transform(self, func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'DataFrame | Series'
 |      Call ``func`` on self producing a Series with the same axis shape as self.
 |      
 |      Parameters
 |      ----------
 |      func : function, str, list-like or dict-like
 |          Function to use for transforming the data. If a function, must either
 |          work when passed a Series or when passed to Series.apply. If func
 |          is both list-like and dict-like, dict-like behavior takes precedence.
 |      
 |          Accepted combinations are:
 |      
 |          - function
 |          - string function name
 |          - list-like of functions and/or function names, e.g. ``[np.exp, 'sqrt']``
 |          - dict-like of axis labels -> functions, function names or list-like of such.
 |      axis : {0 or 'index'}
 |              Unused. Parameter needed for compatibility with DataFrame.
 |      *args
 |          Positional arguments to pass to `func`.
 |      **kwargs
 |          Keyword arguments to pass to `func`.
 |      
 |      Returns
 |      -------
 |      Series
 |          A Series that must have the same length as self.
 |      
 |      Raises
 |      ------
 |      ValueError : If the returned Series has a different length than self.
 |      
 |      See Also
 |      --------
 |      Series.agg : Only perform aggregating type operations.
 |      Series.apply : Invoke function on a Series.
 |      
 |      Notes
 |      -----
 |      Functions that mutate the passed object can produce unexpected
 |      behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  1  2
 |      2  2  3
 |      >>> df.transform(lambda x: x + 1)
 |         A  B
 |      0  1  2
 |      1  2  3
 |      2  3  4
 |      
 |      Even though the resulting Series must have the same length as the
 |      input Series, it is possible to provide several input functions:
 |      
 |      >>> s = pd.Series(range(3))
 |      >>> s
 |      0    0
 |      1    1
 |      2    2
 |      dtype: int64
 |      >>> s.transform([np.sqrt, np.exp])
 |             sqrt        exp
 |      0  0.000000   1.000000
 |      1  1.000000   2.718282
 |      2  1.414214   7.389056
 |      
 |      You can call transform on a GroupBy object:
 |      
 |      >>> df = pd.DataFrame({
 |      ...     "Date": [
 |      ...         "2015-05-08", "2015-05-07", "2015-05-06", "2015-05-05",
 |      ...         "2015-05-08", "2015-05-07", "2015-05-06", "2015-05-05"],
 |      ...     "Data": [5, 8, 6, 1, 50, 100, 60, 120],
 |      ... })
 |      >>> df
 |               Date  Data
 |      0  2015-05-08     5
 |      1  2015-05-07     8
 |      2  2015-05-06     6
 |      3  2015-05-05     1
 |      4  2015-05-08    50
 |      5  2015-05-07   100
 |      6  2015-05-06    60
 |      7  2015-05-05   120
 |      >>> df.groupby('Date')['Data'].transform('sum')
 |      0     55
 |      1    108
 |      2     66
 |      3    121
 |      4     55
 |      5    108
 |      6     66
 |      7    121
 |      Name: Data, dtype: int64
 |      
 |      >>> df = pd.DataFrame({
 |      ...     "c": [1, 1, 1, 2, 2, 2, 2],
 |      ...     "type": ["m", "n", "o", "m", "m", "n", "n"]
 |      ... })
 |      >>> df
 |         c type
 |      0  1    m
 |      1  1    n
 |      2  1    o
 |      3  2    m
 |      4  2    m
 |      5  2    n
 |      6  2    n
 |      >>> df['size'] = df.groupby('c')['type'].transform(len)
 |      >>> df
 |         c type size
 |      0  1    m    3
 |      1  1    n    3
 |      2  1    o    3
 |      3  2    m    4
 |      4  2    m    4
 |      5  2    n    4
 |      6  2    n    4
 |  
 |  truediv(self, other, level=None, fill_value=None, axis: 'Axis' = 0) -> 'Series'
 |      Return Floating division of series and other, element-wise (binary operator `truediv`).
 |      
 |      Equivalent to ``series / other``, but with support to substitute a fill_value for
 |      missing data in either one of the inputs.
 |      
 |      Parameters
 |      ----------
 |      other : Series or scalar value
 |      level : int or name
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      fill_value : None or float value, default None (NaN)
 |          Fill existing missing (NaN) values, and any new element needed for
 |          successful Series alignment, with this value before computation.
 |          If data in both corresponding Series locations is missing
 |          the result of filling (at that location) will be missing.
 |      axis : {0 or 'index'}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      
 |      Returns
 |      -------
 |      Series
 |          The result of the operation.
 |      
 |      See Also
 |      --------
 |      Series.rtruediv : Reverse of the Floating division operator, see
 |          `Python documentation
 |          <https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types>`_
 |          for more details.
 |      
 |      Examples
 |      --------
 |      >>> a = pd.Series([1, 1, 1, np.nan], index=['a', 'b', 'c', 'd'])
 |      >>> a
 |      a    1.0
 |      b    1.0
 |      c    1.0
 |      d    NaN
 |      dtype: float64
 |      >>> b = pd.Series([1, np.nan, 1, np.nan], index=['a', 'b', 'd', 'e'])
 |      >>> b
 |      a    1.0
 |      b    NaN
 |      d    1.0
 |      e    NaN
 |      dtype: float64
 |      >>> a.divide(b, fill_value=0)
 |      a    1.0
 |      b    inf
 |      c    inf
 |      d    0.0
 |      e    NaN
 |      dtype: float64
 |  
 |  unique(self) -> 'ArrayLike'
 |      Return unique values of Series object.
 |      
 |      Uniques are returned in order of appearance. Hash table-based unique,
 |      therefore does NOT sort.
 |      
 |      Returns
 |      -------
 |      ndarray or ExtensionArray
 |          The unique values returned as a NumPy array. See Notes.
 |      
 |      See Also
 |      --------
 |      Series.drop_duplicates : Return Series with duplicate values removed.
 |      unique : Top-level unique method for any 1-d array-like object.
 |      Index.unique : Return Index with unique values from an Index object.
 |      
 |      Notes
 |      -----
 |      Returns the unique values as a NumPy array. In case of an
 |      extension-array backed Series, a new
 |      :class:`~api.extensions.ExtensionArray` of that type with just
 |      the unique values is returned. This includes
 |      
 |          * Categorical
 |          * Period
 |          * Datetime with Timezone
 |          * Datetime without Timezone
 |          * Timedelta
 |          * Interval
 |          * Sparse
 |          * IntegerNA
 |      
 |      See Examples section.
 |      
 |      Examples
 |      --------
 |      >>> pd.Series([2, 1, 3, 3], name='A').unique()
 |      array([2, 1, 3])
 |      
 |      >>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()
 |      <DatetimeArray>
 |      ['2016-01-01 00:00:00']
 |      Length: 1, dtype: datetime64[ns]
 |      
 |      >>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')
 |      ...            for _ in range(3)]).unique()
 |      <DatetimeArray>
 |      ['2016-01-01 00:00:00-05:00']
 |      Length: 1, dtype: datetime64[ns, US/Eastern]
 |      
 |      An Categorical will return categories in the order of
 |      appearance and with the same dtype.
 |      
 |      >>> pd.Series(pd.Categorical(list('baabc'))).unique()
 |      ['b', 'a', 'c']
 |      Categories (3, object): ['a', 'b', 'c']
 |      >>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),
 |      ...                          ordered=True)).unique()
 |      ['b', 'a', 'c']
 |      Categories (3, object): ['a' < 'b' < 'c']
 |  
 |  unstack(self, level: 'IndexLabel' = -1, fill_value: 'Hashable | None' = None, sort: 'bool' = True) -> 'DataFrame'
 |      Unstack, also known as pivot, Series with MultiIndex to produce DataFrame.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, or list of these, default last level
 |          Level(s) to unstack, can pass level name.
 |      fill_value : scalar value, default None
 |          Value to use when replacing NaN values.
 |      sort : bool, default True
 |          Sort the level(s) in the resulting MultiIndex columns.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          Unstacked Series.
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.stacking>` for more examples.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4],
 |      ...               index=pd.MultiIndex.from_product([['one', 'two'],
 |      ...                                                 ['a', 'b']]))
 |      >>> s
 |      one  a    1
 |           b    2
 |      two  a    3
 |           b    4
 |      dtype: int64
 |      
 |      >>> s.unstack(level=-1)
 |           a  b
 |      one  1  2
 |      two  3  4
 |      
 |      >>> s.unstack(level=0)
 |         one  two
 |      a    1    3
 |      b    2    4
 |  
 |  update(self, other: 'Series | Sequence | Mapping') -> 'None'
 |      Modify Series in place using values from passed Series.
 |      
 |      Uses non-NA values from passed Series to make updates. Aligns
 |      on index.
 |      
 |      Parameters
 |      ----------
 |      other : Series, or object coercible into Series
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update(pd.Series([4, 5, 6]))
 |      >>> s
 |      0    4
 |      1    5
 |      2    6
 |      dtype: int64
 |      
 |      >>> s = pd.Series(['a', 'b', 'c'])
 |      >>> s.update(pd.Series(['d', 'e'], index=[0, 2]))
 |      >>> s
 |      0    d
 |      1    b
 |      2    e
 |      dtype: object
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update(pd.Series([4, 5, 6, 7, 8]))
 |      >>> s
 |      0    4
 |      1    5
 |      2    6
 |      dtype: int64
 |      
 |      If ``other`` contains NaNs the corresponding values are not updated
 |      in the original Series.
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update(pd.Series([4, np.nan, 6]))
 |      >>> s
 |      0    4
 |      1    2
 |      2    6
 |      dtype: int64
 |      
 |      ``other`` can also be a non-Series object type
 |      that is coercible into a Series
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update([4, np.nan, 6])
 |      >>> s
 |      0    4
 |      1    2
 |      2    6
 |      dtype: int64
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.update({1: 9})
 |      >>> s
 |      0    1
 |      1    9
 |      2    3
 |      dtype: int64
 |  
 |  var(self, axis: 'Axis | None' = None, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs)
 |      Return unbiased variance over requested axis.
 |      
 |      Normalized by N-1 by default. This can be changed using the ddof argument.
 |      
 |      Parameters
 |      ----------
 |      axis : {index (0)}
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. warning::
 |      
 |              The behavior of DataFrame.var with ``axis=None`` is deprecated,
 |              in a future version this will reduce over both axes and return a scalar
 |              To retain the old behavior, pass axis=0 (or do not pass axis).
 |      
 |      skipna : bool, default True
 |          Exclude NA/null values. If an entire row/column is NA, the result
 |          will be NA.
 |      ddof : int, default 1
 |          Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
 |          where N represents the number of elements.
 |      numeric_only : bool, default False
 |          Include only float, int, boolean columns. Not implemented for Series.
 |      
 |      Returns
 |      -------
 |      scalar or Series (if level specified) 
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],
 |      ...                    'age': [21, 25, 62, 43],
 |      ...                    'height': [1.61, 1.87, 1.49, 2.01]}
 |      ...                   ).set_index('person_id')
 |      >>> df
 |                 age  height
 |      person_id
 |      0           21    1.61
 |      1           25    1.87
 |      2           62    1.49
 |      3           43    2.01
 |      
 |      >>> df.var()
 |      age       352.916667
 |      height      0.056367
 |      dtype: float64
 |      
 |      Alternatively, ``ddof=0`` can be set to normalize by N instead of N-1:
 |      
 |      >>> df.var(ddof=0)
 |      age       264.687500
 |      height      0.042275
 |      dtype: float64
 |  
 |  view(self, dtype: 'Dtype | None' = None) -> 'Series'
 |      Create a new view of the Series.
 |      
 |      .. deprecated:: 2.2.0
 |          ``Series.view`` is deprecated and will be removed in a future version.
 |          Use :meth:`Series.astype` as an alternative to change the dtype.
 |      
 |      This function will return a new Series with a view of the same
 |      underlying values in memory, optionally reinterpreted with a new data
 |      type. The new data type must preserve the same size in bytes as to not
 |      cause index misalignment.
 |      
 |      Parameters
 |      ----------
 |      dtype : data type
 |          Data type object or one of their string representations.
 |      
 |      Returns
 |      -------
 |      Series
 |          A new Series object as a view of the same data in memory.
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.view : Equivalent numpy function to create a new view of
 |          the same data in memory.
 |      
 |      Notes
 |      -----
 |      Series are instantiated with ``dtype=float64`` by default. While
 |      ``numpy.ndarray.view()`` will return a view with the same data type as
 |      the original array, ``Series.view()`` (without specified dtype)
 |      will try using ``float64`` and may fail if the original data type size
 |      in bytes is not the same.
 |      
 |      Examples
 |      --------
 |      Use ``astype`` to change the dtype instead.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |  
 |  array
 |      The ExtensionArray of the data backing this Series or Index.
 |      
 |      Returns
 |      -------
 |      ExtensionArray
 |          An ExtensionArray of the values stored within. For extension
 |          types, this is the actual array. For NumPy native types, this
 |          is a thin (no copy) wrapper around :class:`numpy.ndarray`.
 |      
 |          ``.array`` differs from ``.values``, which may require converting
 |          the data to a different form.
 |      
 |      See Also
 |      --------
 |      Index.to_numpy : Similar method that always returns a NumPy array.
 |      Series.to_numpy : Similar method that always returns a NumPy array.
 |      
 |      Notes
 |      -----
 |      This table lays out the different array types for each extension
 |      dtype within pandas.
 |      
 |      ================== =============================
 |      dtype              array type
 |      ================== =============================
 |      category           Categorical
 |      period             PeriodArray
 |      interval           IntervalArray
 |      IntegerNA          IntegerArray
 |      string             StringArray
 |      boolean            BooleanArray
 |      datetime64[ns, tz] DatetimeArray
 |      ================== =============================
 |      
 |      For any 3rd-party extension types, the array type will be an
 |      ExtensionArray.
 |      
 |      For all remaining dtypes ``.array`` will be a
 |      :class:`arrays.NumpyExtensionArray` wrapping the actual ndarray
 |      stored within. If you absolutely need a NumPy array (possibly with
 |      copying / coercing data), then use :meth:`Series.to_numpy` instead.
 |      
 |      Examples
 |      --------
 |      For regular NumPy types like int, and float, a NumpyExtensionArray
 |      is returned.
 |      
 |      >>> pd.Series([1, 2, 3]).array
 |      <NumpyExtensionArray>
 |      [1, 2, 3]
 |      Length: 3, dtype: int64
 |      
 |      For extension types, like Categorical, the actual ExtensionArray
 |      is returned
 |      
 |      >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))
 |      >>> ser.array
 |      ['a', 'b', 'a']
 |      Categories (2, object): ['a', 'b']
 |  
 |  axes
 |      Return a list of the row axis labels.
 |  
 |  dtype
 |      Return the dtype object of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.dtype
 |      dtype('int64')
 |  
 |  dtypes
 |      Return the dtype object of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.dtypes
 |      dtype('int64')
 |  
 |  hasnans
 |      Return True if there are any NaNs.
 |      
 |      Enables various performance speedups.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, None])
 |      >>> s
 |      0    1.0
 |      1    2.0
 |      2    3.0
 |      3    NaN
 |      dtype: float64
 |      >>> s.hasnans
 |      True
 |  
 |  values
 |      Return Series as ndarray or ndarray-like depending on the dtype.
 |      
 |      .. warning::
 |      
 |         We recommend using :attr:`Series.array` or
 |         :meth:`Series.to_numpy`, depending on whether you need
 |         a reference to the underlying data or a NumPy array.
 |      
 |      Returns
 |      -------
 |      numpy.ndarray or ndarray-like
 |      
 |      See Also
 |      --------
 |      Series.array : Reference to the underlying data.
 |      Series.to_numpy : A NumPy array representing the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> pd.Series([1, 2, 3]).values
 |      array([1, 2, 3])
 |      
 |      >>> pd.Series(list('aabc')).values
 |      array(['a', 'a', 'b', 'c'], dtype=object)
 |      
 |      >>> pd.Series(list('aabc')).astype('category').values
 |      ['a', 'a', 'b', 'c']
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      Timezone aware datetime data is converted to UTC:
 |      
 |      >>> pd.Series(pd.date_range('20130101', periods=3,
 |      ...                         tz='US/Eastern')).values
 |      array(['2013-01-01T05:00:00.000000000',
 |             '2013-01-02T05:00:00.000000000',
 |             '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  index
 |      The index (axis labels) of the Series.
 |      
 |      The index of a Series is used to label and identify each element of the
 |      underlying data. The index can be thought of as an immutable ordered set
 |      (technically a multi-set, as it may contain duplicate labels), and is
 |      used to index and align data in pandas.
 |      
 |      Returns
 |      -------
 |      Index
 |          The index labels of the Series.
 |      
 |      See Also
 |      --------
 |      Series.reindex : Conform Series to new index.
 |      Index : The base pandas index type.
 |      
 |      Notes
 |      -----
 |      For more information on pandas indexing, see the `indexing user guide
 |      <https://pandas.pydata.org/docs/user_guide/indexing.html>`__.
 |      
 |      Examples
 |      --------
 |      To create a Series with a custom index and view the index labels:
 |      
 |      >>> cities = ['Kolkata', 'Chicago', 'Toronto', 'Lisbon']
 |      >>> populations = [14.85, 2.71, 2.93, 0.51]
 |      >>> city_series = pd.Series(populations, index=cities)
 |      >>> city_series.index
 |      Index(['Kolkata', 'Chicago', 'Toronto', 'Lisbon'], dtype='object')
 |      
 |      To change the index labels of an existing Series:
 |      
 |      >>> city_series.index = ['KOL', 'CHI', 'TOR', 'LIS']
 |      >>> city_series.index
 |      Index(['KOL', 'CHI', 'TOR', 'LIS'], dtype='object')
 |  
 |  name
 |      Return the name of the Series.
 |      
 |      The name of a Series becomes its index or column name if it is used
 |      to form a DataFrame. It is also used whenever displaying the Series
 |      using the interpreter.
 |      
 |      Returns
 |      -------
 |      label (hashable object)
 |          The name of the Series, also the column name if part of a DataFrame.
 |      
 |      See Also
 |      --------
 |      Series.rename : Sets the Series name when given a scalar input.
 |      Index.name : Corresponding Index property.
 |      
 |      Examples
 |      --------
 |      The Series name can be set initially when calling the constructor.
 |      
 |      >>> s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      Name: Numbers, dtype: int64
 |      >>> s.name = "Integers"
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      Name: Integers, dtype: int64
 |      
 |      The name of a Series within a DataFrame is its column name.
 |      
 |      >>> df = pd.DataFrame([[1, 2], [3, 4], [5, 6]],
 |      ...                   columns=["Odd Numbers", "Even Numbers"])
 |      >>> df
 |         Odd Numbers  Even Numbers
 |      0            1             2
 |      1            3             4
 |      2            5             6
 |      >>> df["Even Numbers"].name
 |      'Even Numbers'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __annotations__ = {'_AXIS_ORDERS': "list[Literal['index', 'columns']]"...
 |  
 |  __pandas_priority__ = 3000
 |  
 |  cat = <class 'pandas.core.arrays.categorical.CategoricalAccessor'>
 |      Accessor object for categorical properties of the Series values.
 |      
 |      Parameters
 |      ----------
 |      data : Series or CategoricalIndex
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(list("abbccc")).astype("category")
 |      >>> s
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      >>> s.cat.categories
 |      Index(['a', 'b', 'c'], dtype='object')
 |      
 |      >>> s.cat.rename_categories(list("cba"))
 |      0    c
 |      1    b
 |      2    b
 |      3    a
 |      4    a
 |      5    a
 |      dtype: category
 |      Categories (3, object): ['c', 'b', 'a']
 |      
 |      >>> s.cat.reorder_categories(list("cba"))
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['c', 'b', 'a']
 |      
 |      >>> s.cat.add_categories(["d", "e"])
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (5, object): ['a', 'b', 'c', 'd', 'e']
 |      
 |      >>> s.cat.remove_categories(["a", "c"])
 |      0    NaN
 |      1      b
 |      2      b
 |      3    NaN
 |      4    NaN
 |      5    NaN
 |      dtype: category
 |      Categories (1, object): ['b']
 |      
 |      >>> s1 = s.cat.add_categories(["d", "e"])
 |      >>> s1.cat.remove_unused_categories()
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      >>> s.cat.set_categories(list("abcde"))
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (5, object): ['a', 'b', 'c', 'd', 'e']
 |      
 |      >>> s.cat.as_ordered()
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['a' < 'b' < 'c']
 |      
 |      >>> s.cat.as_unordered()
 |      0    a
 |      1    b
 |      2    b
 |      3    c
 |      4    c
 |      5    c
 |      dtype: category
 |      Categories (3, object): ['a', 'b', 'c']
 |  
 |  
 |  dt = <class 'pandas.core.indexes.accessors.CombinedDatetimelikePropert...
 |  
 |  list = <class 'pandas.core.arrays.arrow.accessors.ListAccessor'>
 |      Accessor object for list data properties of the Series values.
 |      
 |      Parameters
 |      ----------
 |      data : Series
 |          Series containing Arrow list data.
 |  
 |  
 |  plot = <class 'pandas.plotting._core.PlotAccessor'>
 |      Make plots of Series or DataFrame.
 |      
 |      Uses the backend specified by the
 |      option ``plotting.backend``. By default, matplotlib is used.
 |      
 |      Parameters
 |      ----------
 |      data : Series or DataFrame
 |          The object for which the method is called.
 |      x : label or position, default None
 |          Only used if data is a DataFrame.
 |      y : label, position or list of label, positions, default None
 |          Allows plotting of one column versus another. Only used if data is a
 |          DataFrame.
 |      kind : str
 |          The kind of plot to produce:
 |      
 |          - 'line' : line plot (default)
 |          - 'bar' : vertical bar plot
 |          - 'barh' : horizontal bar plot
 |          - 'hist' : histogram
 |          - 'box' : boxplot
 |          - 'kde' : Kernel Density Estimation plot
 |          - 'density' : same as 'kde'
 |          - 'area' : area plot
 |          - 'pie' : pie plot
 |          - 'scatter' : scatter plot (DataFrame only)
 |          - 'hexbin' : hexbin plot (DataFrame only)
 |      ax : matplotlib axes object, default None
 |          An axes of the current figure.
 |      subplots : bool or sequence of iterables, default False
 |          Whether to group columns into subplots:
 |      
 |          - ``False`` : No subplots will be used
 |          - ``True`` : Make separate subplots for each column.
 |          - sequence of iterables of column labels: Create a subplot for each
 |            group of columns. For example `[('a', 'c'), ('b', 'd')]` will
 |            create 2 subplots: one with columns 'a' and 'c', and one
 |            with columns 'b' and 'd'. Remaining columns that aren't specified
 |            will be plotted in additional subplots (one per column).
 |      
 |            .. versionadded:: 1.5.0
 |      
 |      sharex : bool, default True if ax is None else False
 |          In case ``subplots=True``, share x axis and set some x axis labels
 |          to invisible; defaults to True if ax is None otherwise False if
 |          an ax is passed in; Be aware, that passing in both an ax and
 |          ``sharex=True`` will alter all x axis labels for all axis in a figure.
 |      sharey : bool, default False
 |          In case ``subplots=True``, share y axis and set some y axis labels to invisible.
 |      layout : tuple, optional
 |          (rows, columns) for the layout of subplots.
 |      figsize : a tuple (width, height) in inches
 |          Size of a figure object.
 |      use_index : bool, default True
 |          Use index as ticks for x axis.
 |      title : str or list
 |          Title to use for the plot. If a string is passed, print the string
 |          at the top of the figure. If a list is passed and `subplots` is
 |          True, print each item in the list above the corresponding subplot.
 |      grid : bool, default None (matlab style default)
 |          Axis grid lines.
 |      legend : bool or {'reverse'}
 |          Place legend on axis subplots.
 |      style : list or dict
 |          The matplotlib line style per column.
 |      logx : bool or 'sym', default False
 |          Use log scaling or symlog scaling on x axis.
 |      
 |      logy : bool or 'sym' default False
 |          Use log scaling or symlog scaling on y axis.
 |      
 |      loglog : bool or 'sym', default False
 |          Use log scaling or symlog scaling on both x and y axes.
 |      
 |      xticks : sequence
 |          Values to use for the xticks.
 |      yticks : sequence
 |          Values to use for the yticks.
 |      xlim : 2-tuple/list
 |          Set the x limits of the current axes.
 |      ylim : 2-tuple/list
 |          Set the y limits of the current axes.
 |      xlabel : label, optional
 |          Name to use for the xlabel on x-axis. Default uses index name as xlabel, or the
 |          x-column name for planar plots.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Now applicable to histograms.
 |      
 |      ylabel : label, optional
 |          Name to use for the ylabel on y-axis. Default will show no ylabel, or the
 |          y-column name for planar plots.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Now applicable to histograms.
 |      
 |      rot : float, default None
 |          Rotation for ticks (xticks for vertical, yticks for horizontal
 |          plots).
 |      fontsize : float, default None
 |          Font size for xticks and yticks.
 |      colormap : str or matplotlib colormap object, default None
 |          Colormap to select colors from. If string, load colormap with that
 |          name from matplotlib.
 |      colorbar : bool, optional
 |          If True, plot colorbar (only relevant for 'scatter' and 'hexbin'
 |          plots).
 |      position : float
 |          Specify relative alignments for bar plot layout.
 |          From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |          (center).
 |      table : bool, Series or DataFrame, default False
 |          If True, draw a table using the data in the DataFrame and the data
 |          will be transposed to meet matplotlib's default layout.
 |          If a Series or DataFrame is passed, use passed data to draw a
 |          table.
 |      yerr : DataFrame, Series, array-like, dict and str
 |          See :ref:`Plotting with Error Bars <visualization.errorbars>` for
 |          detail.
 |      xerr : DataFrame, Series, array-like, dict and str
 |          Equivalent to yerr.
 |      stacked : bool, default False in line and bar plots, and True in area plot
 |          If True, create stacked plot.
 |      secondary_y : bool or sequence, default False
 |          Whether to plot on the secondary y-axis if a list/tuple, which
 |          columns to plot on secondary y-axis.
 |      mark_right : bool, default True
 |          When using a secondary_y axis, automatically mark the column
 |          labels with "(right)" in the legend.
 |      include_bool : bool, default is False
 |          If True, boolean values can be plotted.
 |      backend : str, default None
 |          Backend to use instead of the backend specified in the option
 |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |          specify the ``plotting.backend`` for the whole session, set
 |          ``pd.options.plotting.backend``.
 |      **kwargs
 |          Options to pass to matplotlib plotting method.
 |      
 |      Returns
 |      -------
 |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them
 |          If the backend is not the default matplotlib one, the return value
 |          will be the object returned by the backend.
 |      
 |      Notes
 |      -----
 |      - See matplotlib documentation online for more on this subject
 |      - If `kind` = 'bar' or 'barh', you can specify relative alignments
 |        for bar plot layout by `position` keyword.
 |        From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |        (center)
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ser = pd.Series([1, 2, 3, 3])
 |          >>> plot = ser.plot(kind='hist', title="My plot")
 |      
 |      For DataFrame:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({'length': [1.5, 0.5, 1.2, 0.9, 3],
 |          ...                   'width': [0.7, 0.2, 0.15, 0.2, 1.1]},
 |          ...                   index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])
 |          >>> plot = df.plot(title="DataFrame Plot")
 |      
 |      For SeriesGroupBy:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> lst = [-1, -2, -3, 1, 2, 3]
 |          >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |          >>> plot = ser.groupby(lambda x: x > 0).plot(title="SeriesGroupBy Plot")
 |      
 |      For DataFrameGroupBy:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({"col1" : [1, 2, 3, 4],
 |          ...                   "col2" : ["A", "B", "A", "B"]})
 |          >>> plot = df.groupby("col2").plot(kind="bar", title="DataFrameGroupBy Plot")
 |  
 |  
 |  sparse = <class 'pandas.core.arrays.sparse.accessor.SparseAccessor'>
 |      Accessor for SparseSparse from other sparse matrix data types.
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series([0, 0, 2, 2, 2], dtype="Sparse[int]")
 |      >>> ser.sparse.density
 |      0.6
 |      >>> ser.sparse.sp_values
 |      array([2, 2, 2])
 |  
 |  
 |  str = <class 'pandas.core.strings.accessor.StringMethods'>
 |      Vectorized string functions for Series and Index.
 |      
 |      NAs stay NA unless handled otherwise by a particular method.
 |      Patterned after Python's string methods, with some inspiration from
 |      R's stringr package.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(["A_Str_Series"])
 |      >>> s
 |      0    A_Str_Series
 |      dtype: object
 |      
 |      >>> s.str.split("_")
 |      0    [A, Str, Series]
 |      dtype: object
 |      
 |      >>> s.str.replace("_", "")
 |      0    AStrSeries
 |      dtype: object
 |  
 |  
 |  struct = <class 'pandas.core.arrays.arrow.accessors.StructAccessor'>
 |      Accessor object for structured data properties of the Series values.
 |      
 |      Parameters
 |      ----------
 |      data : Series
 |          Series containing Arrow struct data.
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  __iter__(self) -> 'Iterator'
 |      Return an iterator of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      iterator
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> for x in s:
 |      ...     print(x)
 |      1
 |      2
 |      3
 |  
 |  argmax(self, axis: 'AxisInt | None' = None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      Return int position of the largest value in the Series.
 |      
 |      If the maximum is achieved in multiple locations,
 |      the first row position is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      int
 |          Row position of the maximum value.
 |      
 |      See Also
 |      --------
 |      Series.argmax : Return position of the maximum value.
 |      Series.argmin : Return position of the minimum value.
 |      numpy.ndarray.argmax : Equivalent method for numpy arrays.
 |      Series.idxmax : Return index label of the maximum values.
 |      Series.idxmin : Return index label of the minimum values.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing cereal calories
 |      
 |      >>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,
 |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})
 |      >>> s
 |      Corn Flakes              100.0
 |      Almond Delight           110.0
 |      Cinnamon Toast Crunch    120.0
 |      Cocoa Puff               110.0
 |      dtype: float64
 |      
 |      >>> s.argmax()
 |      2
 |      >>> s.argmin()
 |      0
 |      
 |      The maximum cereal calories is the third element and
 |      the minimum cereal calories is the first element,
 |      since series is zero-indexed.
 |  
 |  argmin(self, axis: 'AxisInt | None' = None, skipna: 'bool' = True, *args, **kwargs) -> 'int'
 |      Return int position of the smallest value in the Series.
 |      
 |      If the minimum is achieved in multiple locations,
 |      the first row position is returned.
 |      
 |      Parameters
 |      ----------
 |      axis : {None}
 |          Unused. Parameter needed for compatibility with DataFrame.
 |      skipna : bool, default True
 |          Exclude NA/null values when showing the result.
 |      *args, **kwargs
 |          Additional arguments and keywords for compatibility with NumPy.
 |      
 |      Returns
 |      -------
 |      int
 |          Row position of the minimum value.
 |      
 |      See Also
 |      --------
 |      Series.argmin : Return position of the minimum value.
 |      Series.argmax : Return position of the maximum value.
 |      numpy.ndarray.argmin : Equivalent method for numpy arrays.
 |      Series.idxmax : Return index label of the maximum values.
 |      Series.idxmin : Return index label of the minimum values.
 |      
 |      Examples
 |      --------
 |      Consider dataset containing cereal calories
 |      
 |      >>> s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0,
 |      ...                'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})
 |      >>> s
 |      Corn Flakes              100.0
 |      Almond Delight           110.0
 |      Cinnamon Toast Crunch    120.0
 |      Cocoa Puff               110.0
 |      dtype: float64
 |      
 |      >>> s.argmax()
 |      2
 |      >>> s.argmin()
 |      0
 |      
 |      The maximum cereal calories is the third element and
 |      the minimum cereal calories is the first element,
 |      since series is zero-indexed.
 |  
 |  factorize(self, sort: 'bool' = False, use_na_sentinel: 'bool' = True) -> 'tuple[npt.NDArray[np.intp], Index]'
 |      Encode the object as an enumerated type or categorical variable.
 |      
 |      This method is useful for obtaining a numeric representation of an
 |      array when all that matters is identifying distinct values. `factorize`
 |      is available as both a top-level function :func:`pandas.factorize`,
 |      and as a method :meth:`Series.factorize` and :meth:`Index.factorize`.
 |      
 |      Parameters
 |      ----------
 |      sort : bool, default False
 |          Sort `uniques` and shuffle `codes` to maintain the
 |          relationship.
 |      
 |      use_na_sentinel : bool, default True
 |          If True, the sentinel -1 will be used for NaN values. If False,
 |          NaN values will be encoded as non-negative integers and will not drop the
 |          NaN from the uniques of the values.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      Returns
 |      -------
 |      codes : ndarray
 |          An integer ndarray that's an indexer into `uniques`.
 |          ``uniques.take(codes)`` will have the same values as `values`.
 |      uniques : ndarray, Index, or Categorical
 |          The unique valid values. When `values` is Categorical, `uniques`
 |          is a Categorical. When `values` is some other pandas object, an
 |          `Index` is returned. Otherwise, a 1-D ndarray is returned.
 |      
 |          .. note::
 |      
 |             Even if there's a missing value in `values`, `uniques` will
 |             *not* contain an entry for it.
 |      
 |      See Also
 |      --------
 |      cut : Discretize continuous-valued array.
 |      unique : Find the unique value in an array.
 |      
 |      Notes
 |      -----
 |      Reference :ref:`the user guide <reshaping.factorize>` for more examples.
 |      
 |      Examples
 |      --------
 |      These examples all show factorize as a top-level method like
 |      ``pd.factorize(values)``. The results are identical for methods like
 |      :meth:`Series.factorize`.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype="O"))
 |      >>> codes
 |      array([0, 0, 1, 2, 0])
 |      >>> uniques
 |      array(['b', 'a', 'c'], dtype=object)
 |      
 |      With ``sort=True``, the `uniques` will be sorted, and `codes` will be
 |      shuffled so that the relationship is the maintained.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype="O"),
 |      ...                               sort=True)
 |      >>> codes
 |      array([1, 1, 0, 2, 1])
 |      >>> uniques
 |      array(['a', 'b', 'c'], dtype=object)
 |      
 |      When ``use_na_sentinel=True`` (the default), missing values are indicated in
 |      the `codes` with the sentinel value ``-1`` and missing values are not
 |      included in `uniques`.
 |      
 |      >>> codes, uniques = pd.factorize(np.array(['b', None, 'a', 'c', 'b'], dtype="O"))
 |      >>> codes
 |      array([ 0, -1,  1,  2,  0])
 |      >>> uniques
 |      array(['b', 'a', 'c'], dtype=object)
 |      
 |      Thus far, we've only factorized lists (which are internally coerced to
 |      NumPy arrays). When factorizing pandas objects, the type of `uniques`
 |      will differ. For Categoricals, a `Categorical` is returned.
 |      
 |      >>> cat = pd.Categorical(['a', 'a', 'c'], categories=['a', 'b', 'c'])
 |      >>> codes, uniques = pd.factorize(cat)
 |      >>> codes
 |      array([0, 0, 1])
 |      >>> uniques
 |      ['a', 'c']
 |      Categories (3, object): ['a', 'b', 'c']
 |      
 |      Notice that ``'b'`` is in ``uniques.categories``, despite not being
 |      present in ``cat.values``.
 |      
 |      For all other pandas objects, an Index of the appropriate type is
 |      returned.
 |      
 |      >>> cat = pd.Series(['a', 'a', 'c'])
 |      >>> codes, uniques = pd.factorize(cat)
 |      >>> codes
 |      array([0, 0, 1])
 |      >>> uniques
 |      Index(['a', 'c'], dtype='object')
 |      
 |      If NaN is in the values, and we want to include NaN in the uniques of the
 |      values, it can be achieved by setting ``use_na_sentinel=False``.
 |      
 |      >>> values = np.array([1, 2, 1, np.nan])
 |      >>> codes, uniques = pd.factorize(values)  # default: use_na_sentinel=True
 |      >>> codes
 |      array([ 0,  1,  0, -1])
 |      >>> uniques
 |      array([1., 2.])
 |      
 |      >>> codes, uniques = pd.factorize(values, use_na_sentinel=False)
 |      >>> codes
 |      array([0, 1, 0, 2])
 |      >>> uniques
 |      array([ 1.,  2., nan])
 |  
 |  item(self)
 |      Return the first element of the underlying data as a Python scalar.
 |      
 |      Returns
 |      -------
 |      scalar
 |          The first element of Series or Index.
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If the data is not length = 1.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1])
 |      >>> s.item()
 |      1
 |      
 |      For an index:
 |      
 |      >>> s = pd.Series([1], index=['a'])
 |      >>> s.index.item()
 |      'a'
 |  
 |  nunique(self, dropna: 'bool' = True) -> 'int'
 |      Return number of unique elements in the object.
 |      
 |      Excludes NA values by default.
 |      
 |      Parameters
 |      ----------
 |      dropna : bool, default True
 |          Don't include NaN in the count.
 |      
 |      Returns
 |      -------
 |      int
 |      
 |      See Also
 |      --------
 |      DataFrame.nunique: Method nunique for DataFrame.
 |      Series.count: Count non-NA/null observations in the Series.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 3, 5, 7, 7])
 |      >>> s
 |      0    1
 |      1    3
 |      2    5
 |      3    7
 |      4    7
 |      dtype: int64
 |      
 |      >>> s.nunique()
 |      4
 |  
 |  to_list = tolist(self)
 |  
 |  to_numpy(self, dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>, **kwargs) -> 'np.ndarray'
 |      A NumPy ndarray representing the values in this Series or Index.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or numpy.dtype, optional
 |          The dtype to pass to :meth:`numpy.asarray`.
 |      copy : bool, default False
 |          Whether to ensure that the returned value is not a view on
 |          another array. Note that ``copy=False`` does not *ensure* that
 |          ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that
 |          a copy is made, even if not strictly necessary.
 |      na_value : Any, optional
 |          The value to use for missing values. The default value depends
 |          on `dtype` and the type of the array.
 |      **kwargs
 |          Additional keywords passed through to the ``to_numpy`` method
 |          of the underlying array (for extension arrays).
 |      
 |      Returns
 |      -------
 |      numpy.ndarray
 |      
 |      See Also
 |      --------
 |      Series.array : Get the actual data stored within.
 |      Index.array : Get the actual data stored within.
 |      DataFrame.to_numpy : Similar method for DataFrame.
 |      
 |      Notes
 |      -----
 |      The returned array will be the same up to equality (values equal
 |      in `self` will be equal in the returned array; likewise for values
 |      that are not equal). When `self` contains an ExtensionArray, the
 |      dtype may be different. For example, for a category-dtype Series,
 |      ``to_numpy()`` will return a NumPy array and the categorical dtype
 |      will be lost.
 |      
 |      For NumPy dtypes, this will be a reference to the actual data stored
 |      in this Series or Index (assuming ``copy=False``). Modifying the result
 |      in place will modify the data stored in the Series or Index (not that
 |      we recommend doing that).
 |      
 |      For extension types, ``to_numpy()`` *may* require copying data and
 |      coercing the result to a NumPy type (possibly object), which may be
 |      expensive. When you need a no-copy reference to the underlying data,
 |      :attr:`Series.array` should be used instead.
 |      
 |      This table lays out the different dtypes and default return types of
 |      ``to_numpy()`` for various dtypes within pandas.
 |      
 |      ================== ================================
 |      dtype              array type
 |      ================== ================================
 |      category[T]        ndarray[T] (same dtype as input)
 |      period             ndarray[object] (Periods)
 |      interval           ndarray[object] (Intervals)
 |      IntegerNA          ndarray[object]
 |      datetime64[ns]     datetime64[ns]
 |      datetime64[ns, tz] ndarray[object] (Timestamps)
 |      ================== ================================
 |      
 |      Examples
 |      --------
 |      >>> ser = pd.Series(pd.Categorical(['a', 'b', 'a']))
 |      >>> ser.to_numpy()
 |      array(['a', 'b', 'a'], dtype=object)
 |      
 |      Specify the `dtype` to control how datetime-aware data is represented.
 |      Use ``dtype=object`` to return an ndarray of pandas :class:`Timestamp`
 |      objects, each with the correct ``tz``.
 |      
 |      >>> ser = pd.Series(pd.date_range('2000', periods=2, tz="CET"))
 |      >>> ser.to_numpy(dtype=object)
 |      array([Timestamp('2000-01-01 00:00:00+0100', tz='CET'),
 |             Timestamp('2000-01-02 00:00:00+0100', tz='CET')],
 |            dtype=object)
 |      
 |      Or ``dtype='datetime64[ns]'`` to return an ndarray of native
 |      datetime64 values. The values are converted to UTC and the timezone
 |      info is dropped.
 |      
 |      >>> ser.to_numpy(dtype="datetime64[ns]")
 |      ... # doctest: +ELLIPSIS
 |      array(['1999-12-31T23:00:00.000000000', '2000-01-01T23:00:00...'],
 |            dtype='datetime64[ns]')
 |  
 |  tolist(self)
 |      Return a list of the values.
 |      
 |      These are each a scalar type, which is a Python scalar
 |      (for str, int, float) or a pandas scalar
 |      (for Timestamp/Timedelta/Interval/Period)
 |      
 |      Returns
 |      -------
 |      list
 |      
 |      See Also
 |      --------
 |      numpy.ndarray.tolist : Return the array as an a.ndim-levels deep
 |          nested list of Python scalars.
 |      
 |      Examples
 |      --------
 |      For Series
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.to_list()
 |      [1, 2, 3]
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      
 |      >>> idx.to_list()
 |      [1, 2, 3]
 |  
 |  transpose(self, *args, **kwargs) -> 'Self'
 |      Return the transpose, which is by definition self.
 |      
 |      Returns
 |      -------
 |      %(klass)s
 |  
 |  value_counts(self, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, bins=None, dropna: 'bool' = True) -> 'Series'
 |      Return a Series containing counts of unique values.
 |      
 |      The resulting object will be in descending order so that the
 |      first element is the most frequently-occurring element.
 |      Excludes NA values by default.
 |      
 |      Parameters
 |      ----------
 |      normalize : bool, default False
 |          If True then the object returned will contain the relative
 |          frequencies of the unique values.
 |      sort : bool, default True
 |          Sort by frequencies when True. Preserve the order of the data when False.
 |      ascending : bool, default False
 |          Sort in ascending order.
 |      bins : int, optional
 |          Rather than count values, group them into half-open bins,
 |          a convenience for ``pd.cut``, only works with numeric data.
 |      dropna : bool, default True
 |          Don't include counts of NaN.
 |      
 |      Returns
 |      -------
 |      Series
 |      
 |      See Also
 |      --------
 |      Series.count: Number of non-NA elements in a Series.
 |      DataFrame.count: Number of non-NA elements in a DataFrame.
 |      DataFrame.value_counts: Equivalent method on DataFrames.
 |      
 |      Examples
 |      --------
 |      >>> index = pd.Index([3, 1, 2, 3, 4, np.nan])
 |      >>> index.value_counts()
 |      3.0    2
 |      1.0    1
 |      2.0    1
 |      4.0    1
 |      Name: count, dtype: int64
 |      
 |      With `normalize` set to `True`, returns the relative frequency by
 |      dividing all values by the sum of values.
 |      
 |      >>> s = pd.Series([3, 1, 2, 3, 4, np.nan])
 |      >>> s.value_counts(normalize=True)
 |      3.0    0.4
 |      1.0    0.2
 |      2.0    0.2
 |      4.0    0.2
 |      Name: proportion, dtype: float64
 |      
 |      **bins**
 |      
 |      Bins can be useful for going from a continuous variable to a
 |      categorical variable; instead of counting unique
 |      apparitions of values, divide the index in the specified
 |      number of half-open bins.
 |      
 |      >>> s.value_counts(bins=3)
 |      (0.996, 2.0]    2
 |      (2.0, 3.0]      2
 |      (3.0, 4.0]      1
 |      Name: count, dtype: int64
 |      
 |      **dropna**
 |      
 |      With `dropna` set to `False` we can also see NaN index values.
 |      
 |      >>> s.value_counts(dropna=False)
 |      3.0    2
 |      1.0    1
 |      2.0    1
 |      4.0    1
 |      NaN    1
 |      Name: count, dtype: int64
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  T
 |      Return the transpose, which is by definition self.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.T
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx.T
 |      Index([1, 2, 3], dtype='int64')
 |  
 |  empty
 |  
 |  is_monotonic_decreasing
 |      Return boolean if values in the object are monotonically decreasing.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([3, 2, 2, 1])
 |      >>> s.is_monotonic_decreasing
 |      True
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.is_monotonic_decreasing
 |      False
 |  
 |  is_monotonic_increasing
 |      Return boolean if values in the object are monotonically increasing.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 2])
 |      >>> s.is_monotonic_increasing
 |      True
 |      
 |      >>> s = pd.Series([3, 2, 1])
 |      >>> s.is_monotonic_increasing
 |      False
 |  
 |  is_unique
 |      Return boolean if values in the object are unique.
 |      
 |      Returns
 |      -------
 |      bool
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.is_unique
 |      True
 |      
 |      >>> s = pd.Series([1, 2, 3, 1])
 |      >>> s.is_unique
 |      False
 |  
 |  nbytes
 |      Return the number of bytes in the underlying data.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.nbytes
 |      24
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.nbytes
 |      24
 |  
 |  ndim
 |      Number of dimensions of the underlying data, by definition 1.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.ndim
 |      1
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.ndim
 |      1
 |  
 |  shape
 |      Return a tuple of the shape of the underlying data.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.shape
 |      (3,)
 |  
 |  size
 |      Return the number of elements in the underlying data.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series(['Ant', 'Bear', 'Cow'])
 |      >>> s
 |      0     Ant
 |      1    Bear
 |      2     Cow
 |      dtype: object
 |      >>> s.size
 |      3
 |      
 |      For Index:
 |      
 |      >>> idx = pd.Index([1, 2, 3])
 |      >>> idx
 |      Index([1, 2, 3], dtype='int64')
 |      >>> idx.size
 |      3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.base.IndexOpsMixin:
 |  
 |  __array_priority__ = 1000
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __add__(self, other)
 |      Get Addition of DataFrame and other, column-wise.
 |      
 |      Equivalent to ``DataFrame.add(other)``.
 |      
 |      Parameters
 |      ----------
 |      other : scalar, sequence, Series, dict or DataFrame
 |          Object to be added to the DataFrame.
 |      
 |      Returns
 |      -------
 |      DataFrame
 |          The result of adding ``other`` to DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.add : Add a DataFrame and another object, with option for index-
 |          or column-oriented addition.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'height': [1.5, 2.6], 'weight': [500, 800]},
 |      ...                   index=['elk', 'moose'])
 |      >>> df
 |             height  weight
 |      elk       1.5     500
 |      moose     2.6     800
 |      
 |      Adding a scalar affects all rows and columns.
 |      
 |      >>> df[['height', 'weight']] + 1.5
 |             height  weight
 |      elk       3.0   501.5
 |      moose     4.1   801.5
 |      
 |      Each element of a list is added to a column of the DataFrame, in order.
 |      
 |      >>> df[['height', 'weight']] + [0.5, 1.5]
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      Keys of a dictionary are aligned to the DataFrame, based on column names;
 |      each value in the dictionary is added to the corresponding column.
 |      
 |      >>> df[['height', 'weight']] + {'height': 0.5, 'weight': 1.5}
 |             height  weight
 |      elk       2.0   501.5
 |      moose     3.1   801.5
 |      
 |      When `other` is a :class:`Series`, the index of `other` is aligned with the
 |      columns of the DataFrame.
 |      
 |      >>> s1 = pd.Series([0.5, 1.5], index=['weight', 'height'])
 |      >>> df[['height', 'weight']] + s1
 |             height  weight
 |      elk       3.0   500.5
 |      moose     4.1   800.5
 |      
 |      Even when the index of `other` is the same as the index of the DataFrame,
 |      the :class:`Series` will not be reoriented. If index-wise alignment is desired,
 |      :meth:`DataFrame.add` should be used with `axis='index'`.
 |      
 |      >>> s2 = pd.Series([0.5, 1.5], index=['elk', 'moose'])
 |      >>> df[['height', 'weight']] + s2
 |             elk  height  moose  weight
 |      elk    NaN     NaN    NaN     NaN
 |      moose  NaN     NaN    NaN     NaN
 |      
 |      >>> df[['height', 'weight']].add(s2, axis='index')
 |             height  weight
 |      elk       2.0   500.5
 |      moose     4.1   801.5
 |      
 |      When `other` is a :class:`DataFrame`, both columns names and the
 |      index are aligned.
 |      
 |      >>> other = pd.DataFrame({'height': [0.2, 0.4, 0.6]},
 |      ...                      index=['elk', 'moose', 'deer'])
 |      >>> df[['height', 'weight']] + other
 |             height  weight
 |      deer      NaN     NaN
 |      elk       1.7     NaN
 |      moose     3.0     NaN
 |  
 |  __and__(self, other)
 |  
 |  __divmod__(self, other)
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __floordiv__(self, other)
 |  
 |  __ge__(self, other)
 |      Return self>=value.
 |  
 |  __gt__(self, other)
 |      Return self>value.
 |  
 |  __le__(self, other)
 |      Return self<=value.
 |  
 |  __lt__(self, other)
 |      Return self<value.
 |  
 |  __mod__(self, other)
 |  
 |  __mul__(self, other)
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __or__(self, other)
 |  
 |  __pow__(self, other)
 |  
 |  __radd__(self, other)
 |  
 |  __rand__(self, other)
 |  
 |  __rdivmod__(self, other)
 |  
 |  __rfloordiv__(self, other)
 |  
 |  __rmod__(self, other)
 |  
 |  __rmul__(self, other)
 |  
 |  __ror__(self, other)
 |  
 |  __rpow__(self, other)
 |  
 |  __rsub__(self, other)
 |  
 |  __rtruediv__(self, other)
 |  
 |  __rxor__(self, other)
 |  
 |  __sub__(self, other)
 |  
 |  __truediv__(self, other)
 |  
 |  __xor__(self, other)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.arraylike.OpsMixin:
 |  
 |  __hash__ = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.generic.NDFrame:
 |  
 |  __abs__(self) -> 'Self'
 |  
 |  __array_ufunc__(self, ufunc: 'np.ufunc', method: 'str', *inputs: 'Any', **kwargs: 'Any')
 |  
 |  __bool__ = __nonzero__(self) -> 'NoReturn'
 |  
 |  __contains__(self, key) -> 'bool_t'
 |      True if the key is in the info axis
 |  
 |  __copy__(self, deep: 'bool_t' = True) -> 'Self'
 |  
 |  __deepcopy__(self, memo=None) -> 'Self'
 |      Parameters
 |      ----------
 |      memo, default None
 |          Standard signature. Unused
 |  
 |  __delitem__(self, key) -> 'None'
 |      Delete item
 |  
 |  __finalize__(self, other, method: 'str | None' = None, **kwargs) -> 'Self'
 |      Propagate metadata from other to self.
 |      
 |      Parameters
 |      ----------
 |      other : the object from which to get the attributes that we are going
 |          to propagate
 |      method : str, optional
 |          A passed method name providing context on where ``__finalize__``
 |          was called.
 |      
 |          .. warning::
 |      
 |             The value passed as `method` are not currently considered
 |             stable across pandas releases.
 |  
 |  __getattr__(self, name: 'str')
 |      After regular attribute access, try looking up the name
 |      This allows simpler access to columns for interactive use.
 |  
 |  __getstate__(self) -> 'dict[str, Any]'
 |  
 |  __iadd__(self, other) -> 'Self'
 |  
 |  __iand__(self, other) -> 'Self'
 |  
 |  __ifloordiv__(self, other) -> 'Self'
 |  
 |  __imod__(self, other) -> 'Self'
 |  
 |  __imul__(self, other) -> 'Self'
 |  
 |  __invert__(self) -> 'Self'
 |  
 |  __ior__(self, other) -> 'Self'
 |  
 |  __ipow__(self, other) -> 'Self'
 |  
 |  __isub__(self, other) -> 'Self'
 |  
 |  __itruediv__(self, other) -> 'Self'
 |  
 |  __ixor__(self, other) -> 'Self'
 |  
 |  __neg__(self) -> 'Self'
 |  
 |  __nonzero__(self) -> 'NoReturn'
 |  
 |  __pos__(self) -> 'Self'
 |  
 |  __round__(self, decimals: 'int' = 0) -> 'Self'
 |  
 |  __setattr__(self, name: 'str', value) -> 'None'
 |      After regular attribute access, try setting the name
 |      This allows simpler access to columns for interactive use.
 |  
 |  __setstate__(self, state) -> 'None'
 |  
 |  abs(self) -> 'Self'
 |      Return a Series/DataFrame with absolute numeric value of each element.
 |      
 |      This function only applies to elements that are all numeric.
 |      
 |      Returns
 |      -------
 |      abs
 |          Series/DataFrame containing the absolute value of each element.
 |      
 |      See Also
 |      --------
 |      numpy.absolute : Calculate the absolute value element-wise.
 |      
 |      Notes
 |      -----
 |      For ``complex`` inputs, ``1.2 + 1j``, the absolute value is
 |      :math:`\sqrt{ a^2 + b^2 }`.
 |      
 |      Examples
 |      --------
 |      Absolute numeric values in a Series.
 |      
 |      >>> s = pd.Series([-1.10, 2, -3.33, 4])
 |      >>> s.abs()
 |      0    1.10
 |      1    2.00
 |      2    3.33
 |      3    4.00
 |      dtype: float64
 |      
 |      Absolute numeric values in a Series with complex numbers.
 |      
 |      >>> s = pd.Series([1.2 + 1j])
 |      >>> s.abs()
 |      0    1.56205
 |      dtype: float64
 |      
 |      Absolute numeric values in a Series with a Timedelta element.
 |      
 |      >>> s = pd.Series([pd.Timedelta('1 days')])
 |      >>> s.abs()
 |      0   1 days
 |      dtype: timedelta64[ns]
 |      
 |      Select rows with data closest to certain value using argsort (from
 |      `StackOverflow <https://stackoverflow.com/a/17758115>`__).
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'a': [4, 5, 6, 7],
 |      ...     'b': [10, 20, 30, 40],
 |      ...     'c': [100, 50, -30, -50]
 |      ... })
 |      >>> df
 |           a    b    c
 |      0    4   10  100
 |      1    5   20   50
 |      2    6   30  -30
 |      3    7   40  -50
 |      >>> df.loc[(df.c - 43).abs().argsort()]
 |           a    b    c
 |      1    5   20   50
 |      0    4   10  100
 |      2    6   30  -30
 |      3    7   40  -50
 |  
 |  add_prefix(self, prefix: 'str', axis: 'Axis | None' = None) -> 'Self'
 |      Prefix labels with string `prefix`.
 |      
 |      For Series, the row labels are prefixed.
 |      For DataFrame, the column labels are prefixed.
 |      
 |      Parameters
 |      ----------
 |      prefix : str
 |          The string to add before each label.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to add prefix on
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          New Series or DataFrame with updated labels.
 |      
 |      See Also
 |      --------
 |      Series.add_suffix: Suffix row labels with string `suffix`.
 |      DataFrame.add_suffix: Suffix column labels with string `suffix`.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |      
 |      >>> s.add_prefix('item_')
 |      item_0    1
 |      item_1    2
 |      item_2    3
 |      item_3    4
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
 |      >>> df
 |         A  B
 |      0  1  3
 |      1  2  4
 |      2  3  5
 |      3  4  6
 |      
 |      >>> df.add_prefix('col_')
 |           col_A  col_B
 |      0       1       3
 |      1       2       4
 |      2       3       5
 |      3       4       6
 |  
 |  add_suffix(self, suffix: 'str', axis: 'Axis | None' = None) -> 'Self'
 |      Suffix labels with string `suffix`.
 |      
 |      For Series, the row labels are suffixed.
 |      For DataFrame, the column labels are suffixed.
 |      
 |      Parameters
 |      ----------
 |      suffix : str
 |          The string to add after each label.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to add suffix on
 |      
 |          .. versionadded:: 2.0.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          New Series or DataFrame with updated labels.
 |      
 |      See Also
 |      --------
 |      Series.add_prefix: Prefix row labels with string `prefix`.
 |      DataFrame.add_prefix: Prefix column labels with string `prefix`.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2, 3, 4])
 |      >>> s
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |      
 |      >>> s.add_suffix('_item')
 |      0_item    1
 |      1_item    2
 |      2_item    3
 |      3_item    4
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
 |      >>> df
 |         A  B
 |      0  1  3
 |      1  2  4
 |      2  3  5
 |      3  4  6
 |      
 |      >>> df.add_suffix('_col')
 |           A_col  B_col
 |      0       1       3
 |      1       2       4
 |      2       3       5
 |      3       4       6
 |  
 |  align(self, other: 'NDFrameT', join: 'AlignJoin' = 'outer', axis: 'Axis | None' = None, level: 'Level | None' = None, copy: 'bool_t | None' = None, fill_value: 'Hashable | None' = None, method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, fill_axis: 'Axis | lib.NoDefault' = <no_default>, broadcast_axis: 'Axis | None | lib.NoDefault' = <no_default>) -> 'tuple[Self, NDFrameT]'
 |      Align two objects on their axes with the specified join method.
 |      
 |      Join method is specified for each axis Index.
 |      
 |      Parameters
 |      ----------
 |      other : DataFrame or Series
 |      join : {'outer', 'inner', 'left', 'right'}, default 'outer'
 |          Type of alignment to be performed.
 |      
 |          * left: use only keys from left frame, preserve key order.
 |          * right: use only keys from right frame, preserve key order.
 |          * outer: use union of keys from both frames, sort keys lexicographically.
 |          * inner: use intersection of keys from both frames,
 |            preserve the order of the left keys.
 |      
 |      axis : allowed axis of the other object, default None
 |          Align on index (0), columns (1), or both (None).
 |      level : int or level name, default None
 |          Broadcast across a level, matching Index values on the
 |          passed MultiIndex level.
 |      copy : bool, default True
 |          Always returns new objects. If copy=False and no reindexing is
 |          required then original objects are returned.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      fill_value : scalar, default np.nan
 |          Value to use for missing values. Defaults to NaN, but can be any
 |          "compatible" value.
 |      method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None
 |          Method to use for filling holes in reindexed Series:
 |      
 |          - pad / ffill: propagate last valid observation forward to next valid.
 |          - backfill / bfill: use NEXT valid observation to fill gap.
 |      
 |          .. deprecated:: 2.1
 |      
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      
 |          .. deprecated:: 2.1
 |      
 |      fill_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default 0
 |          Filling axis, method and limit.
 |      
 |          .. deprecated:: 2.1
 |      
 |      broadcast_axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame, default None
 |          Broadcast values along this axis, if aligning two objects of
 |          different dimensions.
 |      
 |          .. deprecated:: 2.1
 |      
 |      Returns
 |      -------
 |      tuple of (Series/DataFrame, type of other)
 |          Aligned objects.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     [[1, 2, 3, 4], [6, 7, 8, 9]], columns=["D", "B", "E", "A"], index=[1, 2]
 |      ... )
 |      >>> other = pd.DataFrame(
 |      ...     [[10, 20, 30, 40], [60, 70, 80, 90], [600, 700, 800, 900]],
 |      ...     columns=["A", "B", "C", "D"],
 |      ...     index=[2, 3, 4],
 |      ... )
 |      >>> df
 |         D  B  E  A
 |      1  1  2  3  4
 |      2  6  7  8  9
 |      >>> other
 |          A    B    C    D
 |      2   10   20   30   40
 |      3   60   70   80   90
 |      4  600  700  800  900
 |      
 |      Align on columns:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=1)
 |      >>> left
 |         A  B   C  D  E
 |      1  4  2 NaN  1  3
 |      2  9  7 NaN  6  8
 |      >>> right
 |          A    B    C    D   E
 |      2   10   20   30   40 NaN
 |      3   60   70   80   90 NaN
 |      4  600  700  800  900 NaN
 |      
 |      We can also align on the index:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=0)
 |      >>> left
 |          D    B    E    A
 |      1  1.0  2.0  3.0  4.0
 |      2  6.0  7.0  8.0  9.0
 |      3  NaN  NaN  NaN  NaN
 |      4  NaN  NaN  NaN  NaN
 |      >>> right
 |          A      B      C      D
 |      1    NaN    NaN    NaN    NaN
 |      2   10.0   20.0   30.0   40.0
 |      3   60.0   70.0   80.0   90.0
 |      4  600.0  700.0  800.0  900.0
 |      
 |      Finally, the default `axis=None` will align on both index and columns:
 |      
 |      >>> left, right = df.align(other, join="outer", axis=None)
 |      >>> left
 |           A    B   C    D    E
 |      1  4.0  2.0 NaN  1.0  3.0
 |      2  9.0  7.0 NaN  6.0  8.0
 |      3  NaN  NaN NaN  NaN  NaN
 |      4  NaN  NaN NaN  NaN  NaN
 |      >>> right
 |             A      B      C      D   E
 |      1    NaN    NaN    NaN    NaN NaN
 |      2   10.0   20.0   30.0   40.0 NaN
 |      3   60.0   70.0   80.0   90.0 NaN
 |      4  600.0  700.0  800.0  900.0 NaN
 |  
 |  asfreq(self, freq: 'Frequency', method: 'FillnaOptions | None' = None, how: "Literal['start', 'end'] | None" = None, normalize: 'bool_t' = False, fill_value: 'Hashable | None' = None) -> 'Self'
 |      Convert time series to specified frequency.
 |      
 |      Returns the original data conformed to a new index with the specified
 |      frequency.
 |      
 |      If the index of this Series/DataFrame is a :class:`~pandas.PeriodIndex`, the new index
 |      is the result of transforming the original index with
 |      :meth:`PeriodIndex.asfreq <pandas.PeriodIndex.asfreq>` (so the original index
 |      will map one-to-one to the new index).
 |      
 |      Otherwise, the new index will be equivalent to ``pd.date_range(start, end,
 |      freq=freq)`` where ``start`` and ``end`` are, respectively, the first and
 |      last entries in the original index (see :func:`pandas.date_range`). The
 |      values corresponding to any timesteps in the new index which were not present
 |      in the original index will be null (``NaN``), unless a method for filling
 |      such unknowns is provided (see the ``method`` parameter below).
 |      
 |      The :meth:`resample` method is more appropriate if an operation on each group of
 |      timesteps (such as an aggregate) is necessary to represent the data at the new
 |      frequency.
 |      
 |      Parameters
 |      ----------
 |      freq : DateOffset or str
 |          Frequency DateOffset or string.
 |      method : {'backfill'/'bfill', 'pad'/'ffill'}, default None
 |          Method to use for filling holes in reindexed Series (note this
 |          does not fill NaNs that already were present):
 |      
 |          * 'pad' / 'ffill': propagate last valid observation forward to next
 |            valid
 |          * 'backfill' / 'bfill': use NEXT valid observation to fill.
 |      how : {'start', 'end'}, default end
 |          For PeriodIndex only (see PeriodIndex.asfreq).
 |      normalize : bool, default False
 |          Whether to reset output index to midnight.
 |      fill_value : scalar, optional
 |          Value to use for missing values, applied during upsampling (note
 |          this does not fill NaNs that already were present).
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Series/DataFrame object reindexed to the specified frequency.
 |      
 |      See Also
 |      --------
 |      reindex : Conform DataFrame to new index with optional filling logic.
 |      
 |      Notes
 |      -----
 |      To learn more about the frequency strings, please see `this link
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
 |      
 |      Examples
 |      --------
 |      Start by creating a series with 4 one minute timestamps.
 |      
 |      >>> index = pd.date_range('1/1/2000', periods=4, freq='min')
 |      >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)
 |      >>> df = pd.DataFrame({'s': series})
 |      >>> df
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample the series into 30 second bins.
 |      
 |      >>> df.asfreq(freq='30s')
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    NaN
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    NaN
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    NaN
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample again, providing a ``fill value``.
 |      
 |      >>> df.asfreq(freq='30s', fill_value=9.0)
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    9.0
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    9.0
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    9.0
 |      2000-01-01 00:03:00    3.0
 |      
 |      Upsample again, providing a ``method``.
 |      
 |      >>> df.asfreq(freq='30s', method='bfill')
 |                             s
 |      2000-01-01 00:00:00    0.0
 |      2000-01-01 00:00:30    NaN
 |      2000-01-01 00:01:00    NaN
 |      2000-01-01 00:01:30    2.0
 |      2000-01-01 00:02:00    2.0
 |      2000-01-01 00:02:30    3.0
 |      2000-01-01 00:03:00    3.0
 |  
 |  asof(self, where, subset=None)
 |      Return the last row(s) without any NaNs before `where`.
 |      
 |      The last row (for each element in `where`, if list) without any
 |      NaN is taken.
 |      In case of a :class:`~pandas.DataFrame`, the last row without NaN
 |      considering only the subset of columns (if not `None`)
 |      
 |      If there is no good value, NaN is returned for a Series or
 |      a Series of NaN values for a DataFrame
 |      
 |      Parameters
 |      ----------
 |      where : date or array-like of dates
 |          Date(s) before which the last row(s) are returned.
 |      subset : str or array-like of str, default `None`
 |          For DataFrame, if not `None`, only use these columns to
 |          check for NaNs.
 |      
 |      Returns
 |      -------
 |      scalar, Series, or DataFrame
 |      
 |          The return can be:
 |      
 |          * scalar : when `self` is a Series and `where` is a scalar
 |          * Series: when `self` is a Series and `where` is an array-like,
 |            or when `self` is a DataFrame and `where` is a scalar
 |          * DataFrame : when `self` is a DataFrame and `where` is an
 |            array-like
 |      
 |      See Also
 |      --------
 |      merge_asof : Perform an asof merge. Similar to left join.
 |      
 |      Notes
 |      -----
 |      Dates are assumed to be sorted. Raises if this is not the case.
 |      
 |      Examples
 |      --------
 |      A Series and a scalar `where`.
 |      
 |      >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])
 |      >>> s
 |      10    1.0
 |      20    2.0
 |      30    NaN
 |      40    4.0
 |      dtype: float64
 |      
 |      >>> s.asof(20)
 |      2.0
 |      
 |      For a sequence `where`, a Series is returned. The first value is
 |      NaN, because the first element of `where` is before the first
 |      index value.
 |      
 |      >>> s.asof([5, 20])
 |      5     NaN
 |      20    2.0
 |      dtype: float64
 |      
 |      Missing values are not considered. The following is ``2.0``, not
 |      NaN, even though NaN is at the index location for ``30``.
 |      
 |      >>> s.asof(30)
 |      2.0
 |      
 |      Take all columns into consideration
 |      
 |      >>> df = pd.DataFrame({'a': [10., 20., 30., 40., 50.],
 |      ...                    'b': [None, None, None, None, 500]},
 |      ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',
 |      ...                                           '2018-02-27 09:02:00',
 |      ...                                           '2018-02-27 09:03:00',
 |      ...                                           '2018-02-27 09:04:00',
 |      ...                                           '2018-02-27 09:05:00']))
 |      >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',
 |      ...                           '2018-02-27 09:04:30']))
 |                            a   b
 |      2018-02-27 09:03:30 NaN NaN
 |      2018-02-27 09:04:30 NaN NaN
 |      
 |      Take a single column into consideration
 |      
 |      >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',
 |      ...                           '2018-02-27 09:04:30']),
 |      ...         subset=['a'])
 |                              a   b
 |      2018-02-27 09:03:30  30.0 NaN
 |      2018-02-27 09:04:30  40.0 NaN
 |  
 |  astype(self, dtype, copy: 'bool_t | None' = None, errors: 'IgnoreRaise' = 'raise') -> 'Self'
 |      Cast a pandas object to a specified dtype ``dtype``.
 |      
 |      Parameters
 |      ----------
 |      dtype : str, data type, Series or Mapping of column name -> data type
 |          Use a str, numpy.dtype, pandas.ExtensionDtype or Python type to
 |          cast entire pandas object to the same type. Alternatively, use a
 |          mapping, e.g. {col: dtype, ...}, where col is a column label and dtype is
 |          a numpy.dtype or Python type to cast one or more of the DataFrame's
 |          columns to column-specific types.
 |      copy : bool, default True
 |          Return a copy when ``copy=True`` (be very careful setting
 |          ``copy=False`` as changes to values then may propagate to other
 |          pandas objects).
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      errors : {'raise', 'ignore'}, default 'raise'
 |          Control raising of exceptions on invalid data for provided dtype.
 |      
 |          - ``raise`` : allow exceptions to be raised
 |          - ``ignore`` : suppress exceptions. On error return original object.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |      
 |      See Also
 |      --------
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to a numeric type.
 |      numpy.ndarray.astype : Cast a numpy array to a specified type.
 |      
 |      Notes
 |      -----
 |      .. versionchanged:: 2.0.0
 |      
 |          Using ``astype`` to convert from timezone-naive dtype to
 |          timezone-aware dtype will raise an exception.
 |          Use :meth:`Series.dt.tz_localize` instead.
 |      
 |      Examples
 |      --------
 |      Create a DataFrame:
 |      
 |      >>> d = {'col1': [1, 2], 'col2': [3, 4]}
 |      >>> df = pd.DataFrame(data=d)
 |      >>> df.dtypes
 |      col1    int64
 |      col2    int64
 |      dtype: object
 |      
 |      Cast all columns to int32:
 |      
 |      >>> df.astype('int32').dtypes
 |      col1    int32
 |      col2    int32
 |      dtype: object
 |      
 |      Cast col1 to int32 using a dictionary:
 |      
 |      >>> df.astype({'col1': 'int32'}).dtypes
 |      col1    int32
 |      col2    int64
 |      dtype: object
 |      
 |      Create a series:
 |      
 |      >>> ser = pd.Series([1, 2], dtype='int32')
 |      >>> ser
 |      0    1
 |      1    2
 |      dtype: int32
 |      >>> ser.astype('int64')
 |      0    1
 |      1    2
 |      dtype: int64
 |      
 |      Convert to categorical type:
 |      
 |      >>> ser.astype('category')
 |      0    1
 |      1    2
 |      dtype: category
 |      Categories (2, int32): [1, 2]
 |      
 |      Convert to ordered categorical type with custom ordering:
 |      
 |      >>> from pandas.api.types import CategoricalDtype
 |      >>> cat_dtype = CategoricalDtype(
 |      ...     categories=[2, 1], ordered=True)
 |      >>> ser.astype(cat_dtype)
 |      0    1
 |      1    2
 |      dtype: category
 |      Categories (2, int64): [2 < 1]
 |      
 |      Create a series of dates:
 |      
 |      >>> ser_date = pd.Series(pd.date_range('20200101', periods=3))
 |      >>> ser_date
 |      0   2020-01-01
 |      1   2020-01-02
 |      2   2020-01-03
 |      dtype: datetime64[ns]
 |  
 |  at_time(self, time, asof: 'bool_t' = False, axis: 'Axis | None' = None) -> 'Self'
 |      Select values at particular time of day (e.g., 9:30AM).
 |      
 |      Parameters
 |      ----------
 |      time : datetime.time or str
 |          The values to select.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      between_time : Select values between particular times of the day.
 |      first : Select initial periods of time series based on a date offset.
 |      last : Select final periods of time series based on a date offset.
 |      DatetimeIndex.indexer_at_time : Get just the index locations for
 |          values at particular time of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='12h')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-09 12:00:00  2
 |      2018-04-10 00:00:00  3
 |      2018-04-10 12:00:00  4
 |      
 |      >>> ts.at_time('12:00')
 |                           A
 |      2018-04-09 12:00:00  2
 |      2018-04-10 12:00:00  4
 |  
 |  backfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by using the next valid observation to fill the gap.
 |      
 |      .. deprecated:: 2.0
 |      
 |          Series/DataFrame.backfill is deprecated. Use Series/DataFrame.bfill instead.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.bfill` or :meth:`Series.bfill`.
 |  
 |  between_time(self, start_time, end_time, inclusive: 'IntervalClosedType' = 'both', axis: 'Axis | None' = None) -> 'Self'
 |      Select values between particular times of the day (e.g., 9:00-9:30 AM).
 |      
 |      By setting ``start_time`` to be later than ``end_time``,
 |      you can get the times that are *not* between the two times.
 |      
 |      Parameters
 |      ----------
 |      start_time : datetime.time or str
 |          Initial time as a time filter limit.
 |      end_time : datetime.time or str
 |          End time as a time filter limit.
 |      inclusive : {"both", "neither", "left", "right"}, default "both"
 |          Include boundaries; whether to set each bound as closed or open.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Determine range time on index or columns value.
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Data from the original object filtered to the specified dates range.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      at_time : Select values at a particular time of the day.
 |      first : Select initial periods of time series based on a date offset.
 |      last : Select final periods of time series based on a date offset.
 |      DatetimeIndex.indexer_between_time : Get just the index locations for
 |          values between particular times of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-10 00:20:00  2
 |      2018-04-11 00:40:00  3
 |      2018-04-12 01:00:00  4
 |      
 |      >>> ts.between_time('0:15', '0:45')
 |                           A
 |      2018-04-10 00:20:00  2
 |      2018-04-11 00:40:00  3
 |      
 |      You get the times that are *not* between two times by setting
 |      ``start_time`` later than ``end_time``:
 |      
 |      >>> ts.between_time('0:45', '0:15')
 |                           A
 |      2018-04-09 00:00:00  1
 |      2018-04-12 01:00:00  4
 |  
 |  bfill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by using the next valid observation to fill the gap.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      limit_area : {`None`, 'inside', 'outside'}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([1, None, None, 2])
 |      >>> s.bfill()
 |      0    1.0
 |      1    2.0
 |      2    2.0
 |      3    2.0
 |      dtype: float64
 |      >>> s.bfill(limit=1)
 |      0    1.0
 |      1    NaN
 |      2    2.0
 |      3    2.0
 |      dtype: float64
 |      
 |      With DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})
 |      >>> df
 |            A     B
 |      0   1.0   NaN
 |      1   NaN   5.0
 |      2   NaN   NaN
 |      3   4.0   7.0
 |      >>> df.bfill()
 |            A     B
 |      0   1.0   5.0
 |      1   4.0   5.0
 |      2   4.0   7.0
 |      3   4.0   7.0
 |      >>> df.bfill(limit=1)
 |            A     B
 |      0   1.0   5.0
 |      1   NaN   5.0
 |      2   4.0   7.0
 |      3   4.0   7.0
 |  
 |  bool(self) -> 'bool_t'
 |      Return the bool of a single element Series or DataFrame.
 |      
 |      .. deprecated:: 2.1.0
 |      
 |         bool is deprecated and will be removed in future version of pandas.
 |         For ``Series`` use ``pandas.Series.item``.
 |      
 |      This must be a boolean scalar value, either True or False. It will raise a
 |      ValueError if the Series or DataFrame does not have exactly 1 element, or that
 |      element is not boolean (integer values 0 and 1 will also raise an exception).
 |      
 |      Returns
 |      -------
 |      bool
 |          The value in the Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      Series.astype : Change the data type of a Series, including to boolean.
 |      DataFrame.astype : Change the data type of a DataFrame, including to boolean.
 |      numpy.bool_ : NumPy boolean data type, used by pandas for boolean values.
 |      
 |      Examples
 |      --------
 |      The method will only work for single element objects with a boolean value:
 |      
 |      >>> pd.Series([True]).bool()  # doctest: +SKIP
 |      True
 |      >>> pd.Series([False]).bool()  # doctest: +SKIP
 |      False
 |      
 |      >>> pd.DataFrame({'col': [True]}).bool()  # doctest: +SKIP
 |      True
 |      >>> pd.DataFrame({'col': [False]}).bool()  # doctest: +SKIP
 |      False
 |      
 |      This is an alternative method and will only work
 |      for single element objects with a boolean value:
 |      
 |      >>> pd.Series([True]).item()  # doctest: +SKIP
 |      True
 |      >>> pd.Series([False]).item()  # doctest: +SKIP
 |      False
 |  
 |  clip(self, lower=None, upper=None, *, axis: 'Axis | None' = None, inplace: 'bool_t' = False, **kwargs) -> 'Self | None'
 |      Trim values at input threshold(s).
 |      
 |      Assigns values outside boundary to boundary values. Thresholds
 |      can be singular values or array like, and in the latter case
 |      the clipping is performed element-wise in the specified axis.
 |      
 |      Parameters
 |      ----------
 |      lower : float or array-like, default None
 |          Minimum threshold value. All values below this
 |          threshold will be set to it. A missing
 |          threshold (e.g `NA`) will not clip the value.
 |      upper : float or array-like, default None
 |          Maximum threshold value. All values above this
 |          threshold will be set to it. A missing
 |          threshold (e.g `NA`) will not clip the value.
 |      axis : {{0 or 'index', 1 or 'columns', None}}, default None
 |          Align object with lower and upper along the given axis.
 |          For `Series` this parameter is unused and defaults to `None`.
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      *args, **kwargs
 |          Additional keywords have no effect but might be accepted
 |          for compatibility with numpy.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame or None
 |          Same type as calling object with the values outside the
 |          clip boundaries replaced or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      Series.clip : Trim values at input threshold in series.
 |      DataFrame.clip : Trim values at input threshold in dataframe.
 |      numpy.clip : Clip (limit) the values in an array.
 |      
 |      Examples
 |      --------
 |      >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}
 |      >>> df = pd.DataFrame(data)
 |      >>> df
 |         col_0  col_1
 |      0      9     -2
 |      1     -3     -7
 |      2      0      6
 |      3     -1      8
 |      4      5     -5
 |      
 |      Clips per column using lower and upper thresholds:
 |      
 |      >>> df.clip(-4, 6)
 |         col_0  col_1
 |      0      6     -2
 |      1     -3     -4
 |      2      0      6
 |      3     -1      6
 |      4      5     -4
 |      
 |      Clips using specific lower and upper thresholds per column:
 |      
 |      >>> df.clip([-2, -1], [4, 5])
 |          col_0  col_1
 |      0      4     -1
 |      1     -2     -1
 |      2      0      5
 |      3     -1      5
 |      4      4     -1
 |      
 |      Clips using specific lower and upper thresholds per column element:
 |      
 |      >>> t = pd.Series([2, -4, -1, 6, 3])
 |      >>> t
 |      0    2
 |      1   -4
 |      2   -1
 |      3    6
 |      4    3
 |      dtype: int64
 |      
 |      >>> df.clip(t, t + 4, axis=0)
 |         col_0  col_1
 |      0      6      2
 |      1     -3     -4
 |      2      0      3
 |      3      6      8
 |      4      5      3
 |      
 |      Clips using specific lower threshold per column element, with missing values:
 |      
 |      >>> t = pd.Series([2, -4, np.nan, 6, 3])
 |      >>> t
 |      0    2.0
 |      1   -4.0
 |      2    NaN
 |      3    6.0
 |      4    3.0
 |      dtype: float64
 |      
 |      >>> df.clip(t, axis=0)
 |      col_0  col_1
 |      0      9      2
 |      1     -3     -4
 |      2      0      6
 |      3      6      8
 |      4      5      3
 |  
 |  convert_dtypes(self, infer_objects: 'bool_t' = True, convert_string: 'bool_t' = True, convert_integer: 'bool_t' = True, convert_boolean: 'bool_t' = True, convert_floating: 'bool_t' = True, dtype_backend: 'DtypeBackend' = 'numpy_nullable') -> 'Self'
 |      Convert columns to the best possible dtypes using dtypes supporting ``pd.NA``.
 |      
 |      Parameters
 |      ----------
 |      infer_objects : bool, default True
 |          Whether object dtypes should be converted to the best possible types.
 |      convert_string : bool, default True
 |          Whether object dtypes should be converted to ``StringDtype()``.
 |      convert_integer : bool, default True
 |          Whether, if possible, conversion can be done to integer extension types.
 |      convert_boolean : bool, defaults True
 |          Whether object dtypes should be converted to ``BooleanDtypes()``.
 |      convert_floating : bool, defaults True
 |          Whether, if possible, conversion can be done to floating extension types.
 |          If `convert_integer` is also True, preference will be give to integer
 |          dtypes if the floats can be faithfully casted to integers.
 |      dtype_backend : {'numpy_nullable', 'pyarrow'}, default 'numpy_nullable'
 |          Back-end data type applied to the resultant :class:`DataFrame`
 |          (still experimental). Behaviour is as follows:
 |      
 |          * ``"numpy_nullable"``: returns nullable-dtype-backed :class:`DataFrame`
 |            (default).
 |          * ``"pyarrow"``: returns pyarrow-backed nullable :class:`ArrowDtype`
 |            DataFrame.
 |      
 |          .. versionadded:: 2.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Copy of input object with new dtype.
 |      
 |      See Also
 |      --------
 |      infer_objects : Infer dtypes of objects.
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to a numeric type.
 |      
 |      Notes
 |      -----
 |      By default, ``convert_dtypes`` will attempt to convert a Series (or each
 |      Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options
 |      ``convert_string``, ``convert_integer``, ``convert_boolean`` and
 |      ``convert_floating``, it is possible to turn off individual conversions
 |      to ``StringDtype``, the integer extension types, ``BooleanDtype``
 |      or floating extension types, respectively.
 |      
 |      For object-dtyped columns, if ``infer_objects`` is ``True``, use the inference
 |      rules as during normal Series/DataFrame construction.  Then, if possible,
 |      convert to ``StringDtype``, ``BooleanDtype`` or an appropriate integer
 |      or floating extension type, otherwise leave as ``object``.
 |      
 |      If the dtype is integer, convert to an appropriate integer extension type.
 |      
 |      If the dtype is numeric, and consists of all integers, convert to an
 |      appropriate integer extension type. Otherwise, convert to an
 |      appropriate floating extension type.
 |      
 |      In the future, as new dtypes are added that support ``pd.NA``, the results
 |      of this method will change to support those new dtypes.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     {
 |      ...         "a": pd.Series([1, 2, 3], dtype=np.dtype("int32")),
 |      ...         "b": pd.Series(["x", "y", "z"], dtype=np.dtype("O")),
 |      ...         "c": pd.Series([True, False, np.nan], dtype=np.dtype("O")),
 |      ...         "d": pd.Series(["h", "i", np.nan], dtype=np.dtype("O")),
 |      ...         "e": pd.Series([10, np.nan, 20], dtype=np.dtype("float")),
 |      ...         "f": pd.Series([np.nan, 100.5, 200], dtype=np.dtype("float")),
 |      ...     }
 |      ... )
 |      
 |      Start with a DataFrame with default dtypes.
 |      
 |      >>> df
 |         a  b      c    d     e      f
 |      0  1  x   True    h  10.0    NaN
 |      1  2  y  False    i   NaN  100.5
 |      2  3  z    NaN  NaN  20.0  200.0
 |      
 |      >>> df.dtypes
 |      a      int32
 |      b     object
 |      c     object
 |      d     object
 |      e    float64
 |      f    float64
 |      dtype: object
 |      
 |      Convert the DataFrame to use best possible dtypes.
 |      
 |      >>> dfn = df.convert_dtypes()
 |      >>> dfn
 |         a  b      c     d     e      f
 |      0  1  x   True     h    10   <NA>
 |      1  2  y  False     i  <NA>  100.5
 |      2  3  z   <NA>  <NA>    20  200.0
 |      
 |      >>> dfn.dtypes
 |      a             Int32
 |      b    string[python]
 |      c           boolean
 |      d    string[python]
 |      e             Int64
 |      f           Float64
 |      dtype: object
 |      
 |      Start with a Series of strings and missing data represented by ``np.nan``.
 |      
 |      >>> s = pd.Series(["a", "b", np.nan])
 |      >>> s
 |      0      a
 |      1      b
 |      2    NaN
 |      dtype: object
 |      
 |      Obtain a Series with dtype ``StringDtype``.
 |      
 |      >>> s.convert_dtypes()
 |      0       a
 |      1       b
 |      2    <NA>
 |      dtype: string
 |  
 |  copy(self, deep: 'bool_t | None' = True) -> 'Self'
 |      Make a copy of this object's indices and data.
 |      
 |      When ``deep=True`` (default), a new object will be created with a
 |      copy of the calling object's data and indices. Modifications to
 |      the data or indices of the copy will not be reflected in the
 |      original object (see notes below).
 |      
 |      When ``deep=False``, a new object will be created without copying
 |      the calling object's data or index (only references to the data
 |      and index are copied). Any changes to the data of the original
 |      will be reflected in the shallow copy (and vice versa).
 |      
 |      .. note::
 |          The ``deep=False`` behaviour as described above will change
 |          in pandas 3.0. `Copy-on-Write
 |          <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |          will be enabled by default, which means that the "shallow" copy
 |          is that is returned with ``deep=False`` will still avoid making
 |          an eager copy, but changes to the data of the original will *no*
 |          longer be reflected in the shallow copy (or vice versa). Instead,
 |          it makes use of a lazy (deferred) copy mechanism that will copy
 |          the data only when any changes to the original or shallow copy is
 |          made.
 |      
 |          You can already get the future behavior and improvements through
 |          enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Parameters
 |      ----------
 |      deep : bool, default True
 |          Make a deep copy, including a copy of the data and the indices.
 |          With ``deep=False`` neither the indices nor the data are copied.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Object type matches caller.
 |      
 |      Notes
 |      -----
 |      When ``deep=True``, data is copied but actual Python objects
 |      will not be copied recursively, only the reference to the object.
 |      This is in contrast to `copy.deepcopy` in the Standard Library,
 |      which recursively copies object data (see examples below).
 |      
 |      While ``Index`` objects are copied when ``deep=True``, the underlying
 |      numpy array is not copied for performance reasons. Since ``Index`` is
 |      immutable, the underlying data can be safely shared and a copy
 |      is not needed.
 |      
 |      Since pandas is not thread safe, see the
 |      :ref:`gotchas <gotchas.thread-safety>` when copying in a threading
 |      environment.
 |      
 |      When ``copy_on_write`` in pandas config is set to ``True``, the
 |      ``copy_on_write`` config takes effect even when ``deep=False``.
 |      This means that any changes to the copied data would make a new copy
 |      of the data upon write (and vice versa). Changes made to either the
 |      original or copied variable would not be reflected in the counterpart.
 |      See :ref:`Copy_on_Write <copy_on_write>` for more information.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series([1, 2], index=["a", "b"])
 |      >>> s
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      >>> s_copy = s.copy()
 |      >>> s_copy
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      **Shallow copy versus default (deep) copy:**
 |      
 |      >>> s = pd.Series([1, 2], index=["a", "b"])
 |      >>> deep = s.copy()
 |      >>> shallow = s.copy(deep=False)
 |      
 |      Shallow copy shares data and index with original.
 |      
 |      >>> s is shallow
 |      False
 |      >>> s.values is shallow.values and s.index is shallow.index
 |      True
 |      
 |      Deep copy has own copy of data and index.
 |      
 |      >>> s is deep
 |      False
 |      >>> s.values is deep.values or s.index is deep.index
 |      False
 |      
 |      Updates to the data shared by shallow copy and original is reflected
 |      in both (NOTE: this will no longer be true for pandas >= 3.0);
 |      deep copy remains unchanged.
 |      
 |      >>> s.iloc[0] = 3
 |      >>> shallow.iloc[1] = 4
 |      >>> s
 |      a    3
 |      b    4
 |      dtype: int64
 |      >>> shallow
 |      a    3
 |      b    4
 |      dtype: int64
 |      >>> deep
 |      a    1
 |      b    2
 |      dtype: int64
 |      
 |      Note that when copying an object containing Python objects, a deep copy
 |      will copy the data, but will not do so recursively. Updating a nested
 |      data object will be reflected in the deep copy.
 |      
 |      >>> s = pd.Series([[1, 2], [3, 4]])
 |      >>> deep = s.copy()
 |      >>> s[0][0] = 10
 |      >>> s
 |      0    [10, 2]
 |      1     [3, 4]
 |      dtype: object
 |      >>> deep
 |      0    [10, 2]
 |      1     [3, 4]
 |      dtype: object
 |      
 |      **Copy-on-Write is set to true**, the shallow copy is not modified
 |      when the original data is changed:
 |      
 |      >>> with pd.option_context("mode.copy_on_write", True):
 |      ...     s = pd.Series([1, 2], index=["a", "b"])
 |      ...     copy = s.copy(deep=False)
 |      ...     s.iloc[0] = 100
 |      ...     s
 |      a    100
 |      b      2
 |      dtype: int64
 |      >>> copy
 |      a    1
 |      b    2
 |      dtype: int64
 |  
 |  describe(self, percentiles=None, include=None, exclude=None) -> 'Self'
 |      Generate descriptive statistics.
 |      
 |      Descriptive statistics include those that summarize the central
 |      tendency, dispersion and shape of a
 |      dataset's distribution, excluding ``NaN`` values.
 |      
 |      Analyzes both numeric and object series, as well
 |      as ``DataFrame`` column sets of mixed data types. The output
 |      will vary depending on what is provided. Refer to the notes
 |      below for more detail.
 |      
 |      Parameters
 |      ----------
 |      percentiles : list-like of numbers, optional
 |          The percentiles to include in the output. All should
 |          fall between 0 and 1. The default is
 |          ``[.25, .5, .75]``, which returns the 25th, 50th, and
 |          75th percentiles.
 |      include : 'all', list-like of dtypes or None (default), optional
 |          A white list of data types to include in the result. Ignored
 |          for ``Series``. Here are the options:
 |      
 |          - 'all' : All columns of the input will be included in the output.
 |          - A list-like of dtypes : Limits the results to the
 |            provided data types.
 |            To limit the result to numeric types submit
 |            ``numpy.number``. To limit it instead to object columns submit
 |            the ``numpy.object`` data type. Strings
 |            can also be used in the style of
 |            ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To
 |            select pandas categorical columns, use ``'category'``
 |          - None (default) : The result will include all numeric columns.
 |      exclude : list-like of dtypes or None (default), optional,
 |          A black list of data types to omit from the result. Ignored
 |          for ``Series``. Here are the options:
 |      
 |          - A list-like of dtypes : Excludes the provided data types
 |            from the result. To exclude numeric types submit
 |            ``numpy.number``. To exclude object columns submit the data
 |            type ``numpy.object``. Strings can also be used in the style of
 |            ``select_dtypes`` (e.g. ``df.describe(exclude=['O'])``). To
 |            exclude pandas categorical columns, use ``'category'``
 |          - None (default) : The result will exclude nothing.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Summary statistics of the Series or Dataframe provided.
 |      
 |      See Also
 |      --------
 |      DataFrame.count: Count number of non-NA/null observations.
 |      DataFrame.max: Maximum of the values in the object.
 |      DataFrame.min: Minimum of the values in the object.
 |      DataFrame.mean: Mean of the values.
 |      DataFrame.std: Standard deviation of the observations.
 |      DataFrame.select_dtypes: Subset of a DataFrame including/excluding
 |          columns based on their dtype.
 |      
 |      Notes
 |      -----
 |      For numeric data, the result's index will include ``count``,
 |      ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and
 |      upper percentiles. By default the lower percentile is ``25`` and the
 |      upper percentile is ``75``. The ``50`` percentile is the
 |      same as the median.
 |      
 |      For object data (e.g. strings or timestamps), the result's index
 |      will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``
 |      is the most common value. The ``freq`` is the most common value's
 |      frequency. Timestamps also include the ``first`` and ``last`` items.
 |      
 |      If multiple object values have the highest count, then the
 |      ``count`` and ``top`` results will be arbitrarily chosen from
 |      among those with the highest count.
 |      
 |      For mixed data types provided via a ``DataFrame``, the default is to
 |      return only an analysis of numeric columns. If the dataframe consists
 |      only of object and categorical data without any numeric columns, the
 |      default is to return an analysis of both the object and categorical
 |      columns. If ``include='all'`` is provided as an option, the result
 |      will include a union of attributes of each type.
 |      
 |      The `include` and `exclude` parameters can be used to limit
 |      which columns in a ``DataFrame`` are analyzed for the output.
 |      The parameters are ignored when analyzing a ``Series``.
 |      
 |      Examples
 |      --------
 |      Describing a numeric ``Series``.
 |      
 |      >>> s = pd.Series([1, 2, 3])
 |      >>> s.describe()
 |      count    3.0
 |      mean     2.0
 |      std      1.0
 |      min      1.0
 |      25%      1.5
 |      50%      2.0
 |      75%      2.5
 |      max      3.0
 |      dtype: float64
 |      
 |      Describing a categorical ``Series``.
 |      
 |      >>> s = pd.Series(['a', 'a', 'b', 'c'])
 |      >>> s.describe()
 |      count     4
 |      unique    3
 |      top       a
 |      freq      2
 |      dtype: object
 |      
 |      Describing a timestamp ``Series``.
 |      
 |      >>> s = pd.Series([
 |      ...     np.datetime64("2000-01-01"),
 |      ...     np.datetime64("2010-01-01"),
 |      ...     np.datetime64("2010-01-01")
 |      ... ])
 |      >>> s.describe()
 |      count                      3
 |      mean     2006-09-01 08:00:00
 |      min      2000-01-01 00:00:00
 |      25%      2004-12-31 12:00:00
 |      50%      2010-01-01 00:00:00
 |      75%      2010-01-01 00:00:00
 |      max      2010-01-01 00:00:00
 |      dtype: object
 |      
 |      Describing a ``DataFrame``. By default only numeric fields
 |      are returned.
 |      
 |      >>> df = pd.DataFrame({'categorical': pd.Categorical(['d', 'e', 'f']),
 |      ...                    'numeric': [1, 2, 3],
 |      ...                    'object': ['a', 'b', 'c']
 |      ...                    })
 |      >>> df.describe()
 |             numeric
 |      count      3.0
 |      mean       2.0
 |      std        1.0
 |      min        1.0
 |      25%        1.5
 |      50%        2.0
 |      75%        2.5
 |      max        3.0
 |      
 |      Describing all columns of a ``DataFrame`` regardless of data type.
 |      
 |      >>> df.describe(include='all')  # doctest: +SKIP
 |             categorical  numeric object
 |      count            3      3.0      3
 |      unique           3      NaN      3
 |      top              f      NaN      a
 |      freq             1      NaN      1
 |      mean           NaN      2.0    NaN
 |      std            NaN      1.0    NaN
 |      min            NaN      1.0    NaN
 |      25%            NaN      1.5    NaN
 |      50%            NaN      2.0    NaN
 |      75%            NaN      2.5    NaN
 |      max            NaN      3.0    NaN
 |      
 |      Describing a column from a ``DataFrame`` by accessing it as
 |      an attribute.
 |      
 |      >>> df.numeric.describe()
 |      count    3.0
 |      mean     2.0
 |      std      1.0
 |      min      1.0
 |      25%      1.5
 |      50%      2.0
 |      75%      2.5
 |      max      3.0
 |      Name: numeric, dtype: float64
 |      
 |      Including only numeric columns in a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=[np.number])
 |             numeric
 |      count      3.0
 |      mean       2.0
 |      std        1.0
 |      min        1.0
 |      25%        1.5
 |      50%        2.0
 |      75%        2.5
 |      max        3.0
 |      
 |      Including only string columns in a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=[object])  # doctest: +SKIP
 |             object
 |      count       3
 |      unique      3
 |      top         a
 |      freq        1
 |      
 |      Including only categorical columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(include=['category'])
 |             categorical
 |      count            3
 |      unique           3
 |      top              d
 |      freq             1
 |      
 |      Excluding numeric columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(exclude=[np.number])  # doctest: +SKIP
 |             categorical object
 |      count            3      3
 |      unique           3      3
 |      top              f      a
 |      freq             1      1
 |      
 |      Excluding object columns from a ``DataFrame`` description.
 |      
 |      >>> df.describe(exclude=[object])  # doctest: +SKIP
 |             categorical  numeric
 |      count            3      3.0
 |      unique           3      NaN
 |      top              f      NaN
 |      freq             1      NaN
 |      mean           NaN      2.0
 |      std            NaN      1.0
 |      min            NaN      1.0
 |      25%            NaN      1.5
 |      50%            NaN      2.0
 |      75%            NaN      2.5
 |      max            NaN      3.0
 |  
 |  droplevel(self, level: 'IndexLabel', axis: 'Axis' = 0) -> 'Self'
 |      Return Series/DataFrame with requested index / column level(s) removed.
 |      
 |      Parameters
 |      ----------
 |      level : int, str, or list-like
 |          If a string is given, must be the name of a level
 |          If list-like, elements must be names or positional indexes
 |          of levels.
 |      
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Axis along which the level(s) is removed:
 |      
 |          * 0 or 'index': remove level(s) in column.
 |          * 1 or 'columns': remove level(s) in row.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Series/DataFrame with requested index / column level(s) removed.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([
 |      ...     [1, 2, 3, 4],
 |      ...     [5, 6, 7, 8],
 |      ...     [9, 10, 11, 12]
 |      ... ]).set_index([0, 1]).rename_axis(['a', 'b'])
 |      
 |      >>> df.columns = pd.MultiIndex.from_tuples([
 |      ...     ('c', 'e'), ('d', 'f')
 |      ... ], names=['level_1', 'level_2'])
 |      
 |      >>> df
 |      level_1   c   d
 |      level_2   e   f
 |      a b
 |      1 2      3   4
 |      5 6      7   8
 |      9 10    11  12
 |      
 |      >>> df.droplevel('a')
 |      level_1   c   d
 |      level_2   e   f
 |      b
 |      2        3   4
 |      6        7   8
 |      10      11  12
 |      
 |      >>> df.droplevel('level_2', axis=1)
 |      level_1   c   d
 |      a b
 |      1 2      3   4
 |      5 6      7   8
 |      9 10    11  12
 |  
 |  equals(self, other: 'object') -> 'bool_t'
 |      Test whether two objects contain the same elements.
 |      
 |      This function allows two Series or DataFrames to be compared against
 |      each other to see if they have the same shape and elements. NaNs in
 |      the same location are considered equal.
 |      
 |      The row/column index do not need to have the same type, as long
 |      as the values are considered equal. Corresponding columns and
 |      index must be of the same dtype.
 |      
 |      Parameters
 |      ----------
 |      other : Series or DataFrame
 |          The other Series or DataFrame to be compared with the first.
 |      
 |      Returns
 |      -------
 |      bool
 |          True if all elements are the same in both objects, False
 |          otherwise.
 |      
 |      See Also
 |      --------
 |      Series.eq : Compare two Series objects of the same length
 |          and return a Series where each element is True if the element
 |          in each Series is equal, False otherwise.
 |      DataFrame.eq : Compare two DataFrame objects of the same shape and
 |          return a DataFrame where each element is True if the respective
 |          element in each DataFrame is equal, False otherwise.
 |      testing.assert_series_equal : Raises an AssertionError if left and
 |          right are not equal. Provides an easy interface to ignore
 |          inequality in dtypes, indexes and precision among others.
 |      testing.assert_frame_equal : Like assert_series_equal, but targets
 |          DataFrames.
 |      numpy.array_equal : Return True if two arrays have the same shape
 |          and elements, False otherwise.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({1: [10], 2: [20]})
 |      >>> df
 |          1   2
 |      0  10  20
 |      
 |      DataFrames df and exactly_equal have the same types and values for
 |      their elements and column labels, which will return True.
 |      
 |      >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})
 |      >>> exactly_equal
 |          1   2
 |      0  10  20
 |      >>> df.equals(exactly_equal)
 |      True
 |      
 |      DataFrames df and different_column_type have the same element
 |      types and values, but have different types for the column labels,
 |      which will still return True.
 |      
 |      >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})
 |      >>> different_column_type
 |         1.0  2.0
 |      0   10   20
 |      >>> df.equals(different_column_type)
 |      True
 |      
 |      DataFrames df and different_data_type have different types for the
 |      same values for their elements, and will return False even though
 |      their column labels are the same values and types.
 |      
 |      >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})
 |      >>> different_data_type
 |            1     2
 |      0  10.0  20.0
 |      >>> df.equals(different_data_type)
 |      False
 |  
 |  ewm(self, com: 'float | None' = None, span: 'float | None' = None, halflife: 'float | TimedeltaConvertibleTypes | None' = None, alpha: 'float | None' = None, min_periods: 'int | None' = 0, adjust: 'bool_t' = True, ignore_na: 'bool_t' = False, axis: 'Axis | lib.NoDefault' = <no_default>, times: 'np.ndarray | DataFrame | Series | None' = None, method: "Literal['single', 'table']" = 'single') -> 'ExponentialMovingWindow'
 |      Provide exponentially weighted (EW) calculations.
 |      
 |      Exactly one of ``com``, ``span``, ``halflife``, or ``alpha`` must be
 |      provided if ``times`` is not provided. If ``times`` is provided,
 |      ``halflife`` and one of ``com``, ``span`` or ``alpha`` may be provided.
 |      
 |      Parameters
 |      ----------
 |      com : float, optional
 |          Specify decay in terms of center of mass
 |      
 |          :math:`\alpha = 1 / (1 + com)`, for :math:`com \geq 0`.
 |      
 |      span : float, optional
 |          Specify decay in terms of span
 |      
 |          :math:`\alpha = 2 / (span + 1)`, for :math:`span \geq 1`.
 |      
 |      halflife : float, str, timedelta, optional
 |          Specify decay in terms of half-life
 |      
 |          :math:`\alpha = 1 - \exp\left(-\ln(2) / halflife\right)`, for
 |          :math:`halflife > 0`.
 |      
 |          If ``times`` is specified, a timedelta convertible unit over which an
 |          observation decays to half its value. Only applicable to ``mean()``,
 |          and halflife value will not apply to the other functions.
 |      
 |      alpha : float, optional
 |          Specify smoothing factor :math:`\alpha` directly
 |      
 |          :math:`0 < \alpha \leq 1`.
 |      
 |      min_periods : int, default 0
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |      adjust : bool, default True
 |          Divide by decaying adjustment factor in beginning periods to account
 |          for imbalance in relative weightings (viewing EWMA as a moving average).
 |      
 |          - When ``adjust=True`` (default), the EW function is calculated using weights
 |            :math:`w_i = (1 - \alpha)^i`. For example, the EW moving average of the series
 |            [:math:`x_0, x_1, ..., x_t`] would be:
 |      
 |          .. math::
 |              y_t = \frac{x_t + (1 - \alpha)x_{t-1} + (1 - \alpha)^2 x_{t-2} + ... + (1 -
 |              \alpha)^t x_0}{1 + (1 - \alpha) + (1 - \alpha)^2 + ... + (1 - \alpha)^t}
 |      
 |          - When ``adjust=False``, the exponentially weighted function is calculated
 |            recursively:
 |      
 |          .. math::
 |              \begin{split}
 |                  y_0 &= x_0\\
 |                  y_t &= (1 - \alpha) y_{t-1} + \alpha x_t,
 |              \end{split}
 |      ignore_na : bool, default False
 |          Ignore missing values when calculating weights.
 |      
 |          - When ``ignore_na=False`` (default), weights are based on absolute positions.
 |            For example, the weights of :math:`x_0` and :math:`x_2` used in calculating
 |            the final weighted average of [:math:`x_0`, None, :math:`x_2`] are
 |            :math:`(1-\alpha)^2` and :math:`1` if ``adjust=True``, and
 |            :math:`(1-\alpha)^2` and :math:`\alpha` if ``adjust=False``.
 |      
 |          - When ``ignore_na=True``, weights are based
 |            on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`
 |            used in calculating the final weighted average of
 |            [:math:`x_0`, None, :math:`x_2`] are :math:`1-\alpha` and :math:`1` if
 |            ``adjust=True``, and :math:`1-\alpha` and :math:`\alpha` if ``adjust=False``.
 |      
 |      axis : {0, 1}, default 0
 |          If ``0`` or ``'index'``, calculate across the rows.
 |      
 |          If ``1`` or ``'columns'``, calculate across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      times : np.ndarray, Series, default None
 |      
 |          Only applicable to ``mean()``.
 |      
 |          Times corresponding to the observations. Must be monotonically increasing and
 |          ``datetime64[ns]`` dtype.
 |      
 |          If 1-D array like, a sequence with the same shape as the observations.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |          .. versionadded:: 1.4.0
 |      
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |          Only applicable to ``mean()``
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.ExponentialMovingWindow
 |      
 |      See Also
 |      --------
 |      rolling : Provides rolling window calculations.
 |      expanding : Provides expanding transformations.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.exponentially_weighted>`
 |      for further usage details and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      >>> df.ewm(com=0.5).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      >>> df.ewm(alpha=2 / 3).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      
 |      **adjust**
 |      
 |      >>> df.ewm(com=0.5, adjust=True).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      >>> df.ewm(com=0.5, adjust=False).mean()
 |                B
 |      0  0.000000
 |      1  0.666667
 |      2  1.555556
 |      3  1.555556
 |      4  3.650794
 |      
 |      **ignore_na**
 |      
 |      >>> df.ewm(com=0.5, ignore_na=True).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.225000
 |      >>> df.ewm(com=0.5, ignore_na=False).mean()
 |                B
 |      0  0.000000
 |      1  0.750000
 |      2  1.615385
 |      3  1.615385
 |      4  3.670213
 |      
 |      **times**
 |      
 |      Exponentially weighted mean with weights calculated with a timedelta ``halflife``
 |      relative to ``times``.
 |      
 |      >>> times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']
 |      >>> df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()
 |                B
 |      0  0.000000
 |      1  0.585786
 |      2  1.523889
 |      3  1.523889
 |      4  3.233686
 |  
 |  expanding(self, min_periods: 'int' = 1, axis: 'Axis | lib.NoDefault' = <no_default>, method: "Literal['single', 'table']" = 'single') -> 'Expanding'
 |      Provide expanding window calculations.
 |      
 |      Parameters
 |      ----------
 |      min_periods : int, default 1
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |      axis : int or str, default 0
 |          If ``0`` or ``'index'``, roll across the rows.
 |      
 |          If ``1`` or ``'columns'``, roll across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Expanding
 |      
 |      See Also
 |      --------
 |      rolling : Provides rolling window calculations.
 |      ewm : Provides exponential weighted functions.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.expanding>` for further usage details
 |      and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"B": [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      **min_periods**
 |      
 |      Expanding sum with 1 vs 3 observations needed to calculate a value.
 |      
 |      >>> df.expanding(1).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  3.0
 |      4  7.0
 |      >>> df.expanding(3).sum()
 |           B
 |      0  NaN
 |      1  NaN
 |      2  3.0
 |      3  3.0
 |      4  7.0
 |  
 |  ffill(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by propagating the last valid observation to next valid.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      limit_area : {`None`, 'inside', 'outside'}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |          .. versionadded:: 2.2.0
 |      
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],
 |      ...                    [3, 4, np.nan, 1],
 |      ...                    [np.nan, np.nan, np.nan, np.nan],
 |      ...                    [np.nan, 3, np.nan, 4]],
 |      ...                   columns=list("ABCD"))
 |      >>> df
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  NaN  NaN NaN  NaN
 |      3  NaN  3.0 NaN  4.0
 |      
 |      >>> df.ffill()
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  3.0  4.0 NaN  1.0
 |      3  3.0  3.0 NaN  4.0
 |      
 |      >>> ser = pd.Series([1, np.nan, 2, 3])
 |      >>> ser.ffill()
 |      0   1.0
 |      1   1.0
 |      2   2.0
 |      3   3.0
 |      dtype: float64
 |  
 |  fillna(self, value: 'Hashable | Mapping | Series | DataFrame | None' = None, *, method: 'FillnaOptions | None' = None, axis: 'Axis | None' = None, inplace: 'bool_t' = False, limit: 'int | None' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values using the specified method.
 |      
 |      Parameters
 |      ----------
 |      value : scalar, dict, Series, or DataFrame
 |          Value to use to fill holes (e.g. 0), alternately a
 |          dict/Series/DataFrame of values specifying which value to use for
 |          each index (for a Series) or column (for a DataFrame).  Values not
 |          in the dict/Series/DataFrame will not be filled. This value cannot
 |          be a list.
 |      method : {'backfill', 'bfill', 'ffill', None}, default None
 |          Method to use for filling holes in reindexed Series:
 |      
 |          * ffill: propagate last valid observation forward to next valid.
 |          * backfill / bfill: use next valid observation to fill gap.
 |      
 |          .. deprecated:: 2.1.0
 |              Use ffill or bfill instead.
 |      
 |      axis : {0 or 'index'} for Series, {0 or 'index', 1 or 'columns'} for DataFrame
 |          Axis along which to fill missing values. For `Series`
 |          this parameter is unused and defaults to 0.
 |      inplace : bool, default False
 |          If True, fill in-place. Note: this will modify any
 |          other views on this object (e.g., a no-copy slice for a column in a
 |          DataFrame).
 |      limit : int, default None
 |          If method is specified, this is the maximum number of consecutive
 |          NaN values to forward/backward fill. In other words, if there is
 |          a gap with more than this number of consecutive NaNs, it will only
 |          be partially filled. If method is not specified, this is the
 |          maximum number of entries along the entire axis where NaNs will be
 |          filled. Must be greater than 0 if not None.
 |      downcast : dict, default is None
 |          A dict of item->dtype of what to downcast if possible,
 |          or the string 'infer' which will try to downcast to an appropriate
 |          equal type (e.g. float64 to int64 if possible).
 |      
 |          .. deprecated:: 2.2.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      ffill : Fill values by propagating the last valid observation to next valid.
 |      bfill : Fill values by using the next valid observation to fill the gap.
 |      interpolate : Fill NaN values using interpolation.
 |      reindex : Conform object to new index.
 |      asfreq : Convert TimeSeries to specified frequency.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],
 |      ...                    [3, 4, np.nan, 1],
 |      ...                    [np.nan, np.nan, np.nan, np.nan],
 |      ...                    [np.nan, 3, np.nan, 4]],
 |      ...                   columns=list("ABCD"))
 |      >>> df
 |           A    B   C    D
 |      0  NaN  2.0 NaN  0.0
 |      1  3.0  4.0 NaN  1.0
 |      2  NaN  NaN NaN  NaN
 |      3  NaN  3.0 NaN  4.0
 |      
 |      Replace all NaN elements with 0s.
 |      
 |      >>> df.fillna(0)
 |           A    B    C    D
 |      0  0.0  2.0  0.0  0.0
 |      1  3.0  4.0  0.0  1.0
 |      2  0.0  0.0  0.0  0.0
 |      3  0.0  3.0  0.0  4.0
 |      
 |      Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,
 |      2, and 3 respectively.
 |      
 |      >>> values = {"A": 0, "B": 1, "C": 2, "D": 3}
 |      >>> df.fillna(value=values)
 |           A    B    C    D
 |      0  0.0  2.0  2.0  0.0
 |      1  3.0  4.0  2.0  1.0
 |      2  0.0  1.0  2.0  3.0
 |      3  0.0  3.0  2.0  4.0
 |      
 |      Only replace the first NaN element.
 |      
 |      >>> df.fillna(value=values, limit=1)
 |           A    B    C    D
 |      0  0.0  2.0  2.0  0.0
 |      1  3.0  4.0  NaN  1.0
 |      2  NaN  1.0  NaN  3.0
 |      3  NaN  3.0  NaN  4.0
 |      
 |      When filling using a DataFrame, replacement happens along
 |      the same column names and same indices
 |      
 |      >>> df2 = pd.DataFrame(np.zeros((4, 4)), columns=list("ABCE"))
 |      >>> df.fillna(df2)
 |           A    B    C    D
 |      0  0.0  2.0  0.0  0.0
 |      1  3.0  4.0  0.0  1.0
 |      2  0.0  0.0  0.0  NaN
 |      3  0.0  3.0  0.0  4.0
 |      
 |      Note that column D is not affected since it is not present in df2.
 |  
 |  filter(self, items=None, like: 'str | None' = None, regex: 'str | None' = None, axis: 'Axis | None' = None) -> 'Self'
 |      Subset the dataframe rows or columns according to the specified index labels.
 |      
 |      Note that this routine does not filter a dataframe on its
 |      contents. The filter is applied to the labels of the index.
 |      
 |      Parameters
 |      ----------
 |      items : list-like
 |          Keep labels from axis which are in items.
 |      like : str
 |          Keep labels from axis for which "like in label == True".
 |      regex : str (regular expression)
 |          Keep labels from axis for which re.search(regex, label) == True.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          The axis to filter on, expressed either as an index (int)
 |          or axis name (str). By default this is the info axis, 'columns' for
 |          DataFrame. For `Series` this parameter is unused and defaults to `None`.
 |      
 |      Returns
 |      -------
 |      same type as input object
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Access a group of rows and columns
 |          by label(s) or a boolean array.
 |      
 |      Notes
 |      -----
 |      The ``items``, ``like``, and ``regex`` parameters are
 |      enforced to be mutually exclusive.
 |      
 |      ``axis`` defaults to the info axis that is used when indexing
 |      with ``[]``.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),
 |      ...                   index=['mouse', 'rabbit'],
 |      ...                   columns=['one', 'two', 'three'])
 |      >>> df
 |              one  two  three
 |      mouse     1    2      3
 |      rabbit    4    5      6
 |      
 |      >>> # select columns by name
 |      >>> df.filter(items=['one', 'three'])
 |               one  three
 |      mouse     1      3
 |      rabbit    4      6
 |      
 |      >>> # select columns by regular expression
 |      >>> df.filter(regex='e$', axis=1)
 |               one  three
 |      mouse     1      3
 |      rabbit    4      6
 |      
 |      >>> # select rows containing 'bbi'
 |      >>> df.filter(like='bbi', axis=0)
 |               one  two  three
 |      rabbit    4    5      6
 |  
 |  first(self, offset) -> 'Self'
 |      Select initial periods of time series data based on a date offset.
 |      
 |      .. deprecated:: 2.1
 |          :meth:`.first` is deprecated and will be removed in a future version.
 |          Please create a mask and filter using `.loc` instead.
 |      
 |      For a DataFrame with a sorted DatetimeIndex, this function can
 |      select the first few rows based on a date offset.
 |      
 |      Parameters
 |      ----------
 |      offset : str, DateOffset or dateutil.relativedelta
 |          The offset length of the data that will be selected. For instance,
 |          '1ME' will display all the rows having their index within the first month.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A subset of the caller.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      last : Select final periods of time series based on a date offset.
 |      at_time : Select values at a particular time of the day.
 |      between_time : Select values between particular times of the day.
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Get the rows for the first 3 days:
 |      
 |      >>> ts.first('3D')
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      
 |      Notice the data for 3 first calendar days were returned, not the first
 |      3 days observed in the dataset, and therefore data for 2018-04-13 was
 |      not returned.
 |  
 |  first_valid_index(self) -> 'Hashable | None'
 |      Return index for first non-NA value or None, if no non-NA value is found.
 |      
 |      Returns
 |      -------
 |      type of index
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([None, 3, 4])
 |      >>> s.first_valid_index()
 |      1
 |      >>> s.last_valid_index()
 |      2
 |      
 |      >>> s = pd.Series([None, None])
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If all elements in Series are NA/null, returns None.
 |      
 |      >>> s = pd.Series()
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If Series is empty, returns None.
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})
 |      >>> df
 |           A      B
 |      0  NaN    NaN
 |      1  NaN    3.0
 |      2  2.0    4.0
 |      >>> df.first_valid_index()
 |      1
 |      >>> df.last_valid_index()
 |      2
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})
 |      >>> df
 |           A      B
 |      0  None   None
 |      1  None   None
 |      2  None   None
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If all elements in DataFrame are NA/null, returns None.
 |      
 |      >>> df = pd.DataFrame()
 |      >>> df
 |      Empty DataFrame
 |      Columns: []
 |      Index: []
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If DataFrame is empty, returns None.
 |  
 |  get(self, key, default=None)
 |      Get item from object for given key (ex: DataFrame column).
 |      
 |      Returns default value if not found.
 |      
 |      Parameters
 |      ----------
 |      key : object
 |      
 |      Returns
 |      -------
 |      same type as items contained in object
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(
 |      ...     [
 |      ...         [24.3, 75.7, "high"],
 |      ...         [31, 87.8, "high"],
 |      ...         [22, 71.6, "medium"],
 |      ...         [35, 95, "medium"],
 |      ...     ],
 |      ...     columns=["temp_celsius", "temp_fahrenheit", "windspeed"],
 |      ...     index=pd.date_range(start="2014-02-12", end="2014-02-15", freq="D"),
 |      ... )
 |      
 |      >>> df
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          24.3             75.7      high
 |      2014-02-13          31.0             87.8      high
 |      2014-02-14          22.0             71.6    medium
 |      2014-02-15          35.0             95.0    medium
 |      
 |      >>> df.get(["temp_celsius", "windspeed"])
 |                  temp_celsius windspeed
 |      2014-02-12          24.3      high
 |      2014-02-13          31.0      high
 |      2014-02-14          22.0    medium
 |      2014-02-15          35.0    medium
 |      
 |      >>> ser = df['windspeed']
 |      >>> ser.get('2014-02-13')
 |      'high'
 |      
 |      If the key isn't found, the default value will be used.
 |      
 |      >>> df.get(["temp_celsius", "temp_kelvin"], default="default_value")
 |      'default_value'
 |      
 |      >>> ser.get('2014-02-10', '[unknown]')
 |      '[unknown]'
 |  
 |  head(self, n: 'int' = 5) -> 'Self'
 |      Return the first `n` rows.
 |      
 |      This function returns the first `n` rows for the object based
 |      on position. It is useful for quickly testing if your object
 |      has the right type of data in it.
 |      
 |      For negative values of `n`, this function returns all rows except
 |      the last `|n|` rows, equivalent to ``df[:n]``.
 |      
 |      If n is larger than the number of rows, this function returns all rows.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Number of rows to select.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          The first `n` rows of the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrame.tail: Returns the last `n` rows.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',
 |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})
 |      >>> df
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |      6      shark
 |      7      whale
 |      8      zebra
 |      
 |      Viewing the first 5 lines
 |      
 |      >>> df.head()
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      
 |      Viewing the first `n` lines (three in this case)
 |      
 |      >>> df.head(3)
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      
 |      For negative values of `n`
 |      
 |      >>> df.head(-3)
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |  
 |  infer_objects(self, copy: 'bool_t | None' = None) -> 'Self'
 |      Attempt to infer better dtypes for object columns.
 |      
 |      Attempts soft conversion of object-dtyped
 |      columns, leaving non-object and unconvertible
 |      columns unchanged. The inference rules are the
 |      same as during normal Series/DataFrame construction.
 |      
 |      Parameters
 |      ----------
 |      copy : bool, default True
 |          Whether to make a copy for non-object or non-inferable columns
 |          or Series.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      same type as input object
 |      
 |      See Also
 |      --------
 |      to_datetime : Convert argument to datetime.
 |      to_timedelta : Convert argument to timedelta.
 |      to_numeric : Convert argument to numeric type.
 |      convert_dtypes : Convert argument to best possible dtype.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": ["a", 1, 2, 3]})
 |      >>> df = df.iloc[1:]
 |      >>> df
 |         A
 |      1  1
 |      2  2
 |      3  3
 |      
 |      >>> df.dtypes
 |      A    object
 |      dtype: object
 |      
 |      >>> df.infer_objects().dtypes
 |      A    int64
 |      dtype: object
 |  
 |  interpolate(self, method: 'InterpolateOptions' = 'linear', *, axis: 'Axis' = 0, limit: 'int | None' = None, inplace: 'bool_t' = False, limit_direction: "Literal['forward', 'backward', 'both'] | None" = None, limit_area: "Literal['inside', 'outside'] | None" = None, downcast: "Literal['infer'] | None | lib.NoDefault" = <no_default>, **kwargs) -> 'Self | None'
 |      Fill NaN values using an interpolation method.
 |      
 |      Please note that only ``method='linear'`` is supported for
 |      DataFrame/Series with a MultiIndex.
 |      
 |      Parameters
 |      ----------
 |      method : str, default 'linear'
 |          Interpolation technique to use. One of:
 |      
 |          * 'linear': Ignore the index and treat the values as equally
 |            spaced. This is the only method supported on MultiIndexes.
 |          * 'time': Works on daily and higher resolution data to interpolate
 |            given length of interval.
 |          * 'index', 'values': use the actual numerical values of the index.
 |          * 'pad': Fill in NaNs using existing values.
 |          * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',
 |            'barycentric', 'polynomial': Passed to
 |            `scipy.interpolate.interp1d`, whereas 'spline' is passed to
 |            `scipy.interpolate.UnivariateSpline`. These methods use the numerical
 |            values of the index.  Both 'polynomial' and 'spline' require that
 |            you also specify an `order` (int), e.g.
 |            ``df.interpolate(method='polynomial', order=5)``. Note that,
 |            `slinear` method in Pandas refers to the Scipy first order `spline`
 |            instead of Pandas first order `spline`.
 |          * 'krogh', 'piecewise_polynomial', 'spline', 'pchip', 'akima',
 |            'cubicspline': Wrappers around the SciPy interpolation methods of
 |            similar names. See `Notes`.
 |          * 'from_derivatives': Refers to
 |            `scipy.interpolate.BPoly.from_derivatives`.
 |      
 |      axis : {{0 or 'index', 1 or 'columns', None}}, default None
 |          Axis to interpolate along. For `Series` this parameter is unused
 |          and defaults to 0.
 |      limit : int, optional
 |          Maximum number of consecutive NaNs to fill. Must be greater than
 |          0.
 |      inplace : bool, default False
 |          Update the data in place if possible.
 |      limit_direction : {{'forward', 'backward', 'both'}}, Optional
 |          Consecutive NaNs will be filled in this direction.
 |      
 |          If limit is specified:
 |              * If 'method' is 'pad' or 'ffill', 'limit_direction' must be 'forward'.
 |              * If 'method' is 'backfill' or 'bfill', 'limit_direction' must be
 |                'backwards'.
 |      
 |          If 'limit' is not specified:
 |              * If 'method' is 'backfill' or 'bfill', the default is 'backward'
 |              * else the default is 'forward'
 |      
 |          raises ValueError if `limit_direction` is 'forward' or 'both' and
 |              method is 'backfill' or 'bfill'.
 |          raises ValueError if `limit_direction` is 'backward' or 'both' and
 |              method is 'pad' or 'ffill'.
 |      
 |      limit_area : {{`None`, 'inside', 'outside'}}, default None
 |          If limit is specified, consecutive NaNs will be filled with this
 |          restriction.
 |      
 |          * ``None``: No fill restriction.
 |          * 'inside': Only fill NaNs surrounded by valid values
 |            (interpolate).
 |          * 'outside': Only fill NaNs outside valid values (extrapolate).
 |      
 |      downcast : optional, 'infer' or None, defaults to None
 |          Downcast dtypes if possible.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |      ``**kwargs`` : optional
 |          Keyword arguments to pass on to the interpolating function.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame or None
 |          Returns the same object type as the caller, interpolated at
 |          some or all ``NaN`` values or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      fillna : Fill missing values using different methods.
 |      scipy.interpolate.Akima1DInterpolator : Piecewise cubic polynomials
 |          (Akima interpolator).
 |      scipy.interpolate.BPoly.from_derivatives : Piecewise polynomial in the
 |          Bernstein basis.
 |      scipy.interpolate.interp1d : Interpolate a 1-D function.
 |      scipy.interpolate.KroghInterpolator : Interpolate polynomial (Krogh
 |          interpolator).
 |      scipy.interpolate.PchipInterpolator : PCHIP 1-d monotonic cubic
 |          interpolation.
 |      scipy.interpolate.CubicSpline : Cubic spline data interpolator.
 |      
 |      Notes
 |      -----
 |      The 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'
 |      methods are wrappers around the respective SciPy implementations of
 |      similar names. These use the actual numerical values of the index.
 |      For more information on their behavior, see the
 |      `SciPy documentation
 |      <https://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__.
 |      
 |      Examples
 |      --------
 |      Filling in ``NaN`` in a :class:`~pandas.Series` via linear
 |      interpolation.
 |      
 |      >>> s = pd.Series([0, 1, np.nan, 3])
 |      >>> s
 |      0    0.0
 |      1    1.0
 |      2    NaN
 |      3    3.0
 |      dtype: float64
 |      >>> s.interpolate()
 |      0    0.0
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      dtype: float64
 |      
 |      Filling in ``NaN`` in a Series via polynomial interpolation or splines:
 |      Both 'polynomial' and 'spline' methods require that you also specify
 |      an ``order`` (int).
 |      
 |      >>> s = pd.Series([0, 2, np.nan, 8])
 |      >>> s.interpolate(method='polynomial', order=2)
 |      0    0.000000
 |      1    2.000000
 |      2    4.666667
 |      3    8.000000
 |      dtype: float64
 |      
 |      Fill the DataFrame forward (that is, going down) along each column
 |      using linear interpolation.
 |      
 |      Note how the last entry in column 'a' is interpolated differently,
 |      because there is no entry after it to use for interpolation.
 |      Note how the first entry in column 'b' remains ``NaN``, because there
 |      is no entry before it to use for interpolation.
 |      
 |      >>> df = pd.DataFrame([(0.0, np.nan, -1.0, 1.0),
 |      ...                    (np.nan, 2.0, np.nan, np.nan),
 |      ...                    (2.0, 3.0, np.nan, 9.0),
 |      ...                    (np.nan, 4.0, -4.0, 16.0)],
 |      ...                   columns=list('abcd'))
 |      >>> df
 |           a    b    c     d
 |      0  0.0  NaN -1.0   1.0
 |      1  NaN  2.0  NaN   NaN
 |      2  2.0  3.0  NaN   9.0
 |      3  NaN  4.0 -4.0  16.0
 |      >>> df.interpolate(method='linear', limit_direction='forward', axis=0)
 |           a    b    c     d
 |      0  0.0  NaN -1.0   1.0
 |      1  1.0  2.0 -2.0   5.0
 |      2  2.0  3.0 -3.0   9.0
 |      3  2.0  4.0 -4.0  16.0
 |      
 |      Using polynomial interpolation.
 |      
 |      >>> df['d'].interpolate(method='polynomial', order=2)
 |      0     1.0
 |      1     4.0
 |      2     9.0
 |      3    16.0
 |      Name: d, dtype: float64
 |  
 |  last(self, offset) -> 'Self'
 |      Select final periods of time series data based on a date offset.
 |      
 |      .. deprecated:: 2.1
 |          :meth:`.last` is deprecated and will be removed in a future version.
 |          Please create a mask and filter using `.loc` instead.
 |      
 |      For a DataFrame with a sorted DatetimeIndex, this function
 |      selects the last few rows based on a date offset.
 |      
 |      Parameters
 |      ----------
 |      offset : str, DateOffset, dateutil.relativedelta
 |          The offset length of the data that will be selected. For instance,
 |          '3D' will display all the rows having their index within the last 3 days.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A subset of the caller.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the index is not  a :class:`DatetimeIndex`
 |      
 |      See Also
 |      --------
 |      first : Select initial periods of time series based on a date offset.
 |      at_time : Select values at a particular time of the day.
 |      between_time : Select values between particular times of the day.
 |      
 |      Notes
 |      -----
 |      .. deprecated:: 2.1.0
 |          Please create a mask and filter using `.loc` instead
 |      
 |      Examples
 |      --------
 |      >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')
 |      >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
 |      >>> ts
 |                  A
 |      2018-04-09  1
 |      2018-04-11  2
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Get the rows for the last 3 days:
 |      
 |      >>> ts.last('3D')  # doctest: +SKIP
 |                  A
 |      2018-04-13  3
 |      2018-04-15  4
 |      
 |      Notice the data for 3 last calendar days were returned, not the last
 |      3 observed days in the dataset, and therefore data for 2018-04-11 was
 |      not returned.
 |  
 |  last_valid_index(self) -> 'Hashable | None'
 |      Return index for last non-NA value or None, if no non-NA value is found.
 |      
 |      Returns
 |      -------
 |      type of index
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> s = pd.Series([None, 3, 4])
 |      >>> s.first_valid_index()
 |      1
 |      >>> s.last_valid_index()
 |      2
 |      
 |      >>> s = pd.Series([None, None])
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If all elements in Series are NA/null, returns None.
 |      
 |      >>> s = pd.Series()
 |      >>> print(s.first_valid_index())
 |      None
 |      >>> print(s.last_valid_index())
 |      None
 |      
 |      If Series is empty, returns None.
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, 2], 'B': [None, 3, 4]})
 |      >>> df
 |           A      B
 |      0  NaN    NaN
 |      1  NaN    3.0
 |      2  2.0    4.0
 |      >>> df.first_valid_index()
 |      1
 |      >>> df.last_valid_index()
 |      2
 |      
 |      >>> df = pd.DataFrame({'A': [None, None, None], 'B': [None, None, None]})
 |      >>> df
 |           A      B
 |      0  None   None
 |      1  None   None
 |      2  None   None
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If all elements in DataFrame are NA/null, returns None.
 |      
 |      >>> df = pd.DataFrame()
 |      >>> df
 |      Empty DataFrame
 |      Columns: []
 |      Index: []
 |      >>> print(df.first_valid_index())
 |      None
 |      >>> print(df.last_valid_index())
 |      None
 |      
 |      If DataFrame is empty, returns None.
 |  
 |  mask(self, cond, other=<no_default>, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'
 |      Replace values where the condition is True.
 |      
 |      Parameters
 |      ----------
 |      cond : bool Series/DataFrame, array-like, or callable
 |          Where `cond` is False, keep the original value. Where
 |          True, replace with corresponding value from `other`.
 |          If `cond` is callable, it is computed on the Series/DataFrame and
 |          should return boolean Series/DataFrame or array. The callable must
 |          not change input Series/DataFrame (though pandas doesn't check it).
 |      other : scalar, Series/DataFrame, or callable
 |          Entries where `cond` is True are replaced with
 |          corresponding value from `other`.
 |          If other is callable, it is computed on the Series/DataFrame and
 |          should return scalar or Series/DataFrame. The callable must not
 |          change input Series/DataFrame (though pandas doesn't check it).
 |          If not specified, entries will be filled with the corresponding
 |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension
 |          dtypes).
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      axis : int, default None
 |          Alignment axis if needed. For `Series` this parameter is
 |          unused and defaults to 0.
 |      level : int, default None
 |          Alignment level if needed.
 |      
 |      Returns
 |      -------
 |      Same type as caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      :func:`DataFrame.where` : Return an object of same shape as
 |          self.
 |      
 |      Notes
 |      -----
 |      The mask method is an application of the if-then idiom. For each
 |      element in the calling DataFrame, if ``cond`` is ``False`` the
 |      element is used; otherwise the corresponding element from the DataFrame
 |      ``other`` is used. If the axis of ``other`` does not align with axis of
 |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with
 |      True.
 |      
 |      The signature for :func:`DataFrame.where` differs from
 |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to
 |      ``np.where(m, df1, df2)``.
 |      
 |      For further details and examples see the ``mask`` documentation in
 |      :ref:`indexing <indexing.where_mask>`.
 |      
 |      The dtype of the object takes precedence. The fill value is casted to
 |      the object's dtype, if this can be done losslessly.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(range(5))
 |      >>> s.where(s > 0)
 |      0    NaN
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      4    4.0
 |      dtype: float64
 |      >>> s.mask(s > 0)
 |      0    0.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      >>> s = pd.Series(range(5))
 |      >>> t = pd.Series([True, False])
 |      >>> s.where(t, 99)
 |      0     0
 |      1    99
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      >>> s.mask(t, 99)
 |      0    99
 |      1     1
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      
 |      >>> s.where(s > 1, 10)
 |      0    10
 |      1    10
 |      2    2
 |      3    3
 |      4    4
 |      dtype: int64
 |      >>> s.mask(s > 1, 10)
 |      0     0
 |      1     1
 |      2    10
 |      3    10
 |      4    10
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  2  3
 |      2  4  5
 |      3  6  7
 |      4  8  9
 |      >>> m = df % 3 == 0
 |      >>> df.where(m, -df)
 |         A  B
 |      0  0 -1
 |      1 -2  3
 |      2 -4 -5
 |      3  6 -7
 |      4 -8  9
 |      >>> df.where(m, -df) == np.where(m, df, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |      >>> df.where(m, -df) == df.mask(~m, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |  
 |  pad(self, *, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None'
 |      Fill NA/NaN values by propagating the last valid observation to next valid.
 |      
 |      .. deprecated:: 2.0
 |      
 |          Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame or None
 |          Object with missing values filled or None if ``inplace=True``.
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.ffill` or :meth:`Series.ffill`.
 |  
 |  pct_change(self, periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, freq=None, **kwargs) -> 'Self'
 |      Fractional change between the current and a prior element.
 |      
 |      Computes the fractional change from the immediately previous row by
 |      default. This is useful in comparing the fraction of change in a time
 |      series of elements.
 |      
 |      .. note::
 |      
 |          Despite the name of this method, it calculates fractional change
 |          (also known as per unit change or relative change) and not
 |          percentage change. If you need the percentage change, multiply
 |          these values by 100.
 |      
 |      Parameters
 |      ----------
 |      periods : int, default 1
 |          Periods to shift for forming percent change.
 |      fill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default 'pad'
 |          How to handle NAs **before** computing percent changes.
 |      
 |          .. deprecated:: 2.1
 |              All options of `fill_method` are deprecated except `fill_method=None`.
 |      
 |      limit : int, default None
 |          The number of consecutive NAs to fill before stopping.
 |      
 |          .. deprecated:: 2.1
 |      
 |      freq : DateOffset, timedelta, or str, optional
 |          Increment to use from time series API (e.g. 'ME' or BDay()).
 |      **kwargs
 |          Additional keyword arguments are passed into
 |          `DataFrame.shift` or `Series.shift`.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          The same type as the calling object.
 |      
 |      See Also
 |      --------
 |      Series.diff : Compute the difference of two elements in a Series.
 |      DataFrame.diff : Compute the difference of two elements in a DataFrame.
 |      Series.shift : Shift the index by some number of periods.
 |      DataFrame.shift : Shift the index by some number of periods.
 |      
 |      Examples
 |      --------
 |      **Series**
 |      
 |      >>> s = pd.Series([90, 91, 85])
 |      >>> s
 |      0    90
 |      1    91
 |      2    85
 |      dtype: int64
 |      
 |      >>> s.pct_change()
 |      0         NaN
 |      1    0.011111
 |      2   -0.065934
 |      dtype: float64
 |      
 |      >>> s.pct_change(periods=2)
 |      0         NaN
 |      1         NaN
 |      2   -0.055556
 |      dtype: float64
 |      
 |      See the percentage change in a Series where filling NAs with last
 |      valid observation forward to next valid.
 |      
 |      >>> s = pd.Series([90, 91, None, 85])
 |      >>> s
 |      0    90.0
 |      1    91.0
 |      2     NaN
 |      3    85.0
 |      dtype: float64
 |      
 |      >>> s.ffill().pct_change()
 |      0         NaN
 |      1    0.011111
 |      2    0.000000
 |      3   -0.065934
 |      dtype: float64
 |      
 |      **DataFrame**
 |      
 |      Percentage change in French franc, Deutsche Mark, and Italian lira from
 |      1980-01-01 to 1980-03-01.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'FR': [4.0405, 4.0963, 4.3149],
 |      ...     'GR': [1.7246, 1.7482, 1.8519],
 |      ...     'IT': [804.74, 810.01, 860.13]},
 |      ...     index=['1980-01-01', '1980-02-01', '1980-03-01'])
 |      >>> df
 |                      FR      GR      IT
 |      1980-01-01  4.0405  1.7246  804.74
 |      1980-02-01  4.0963  1.7482  810.01
 |      1980-03-01  4.3149  1.8519  860.13
 |      
 |      >>> df.pct_change()
 |                        FR        GR        IT
 |      1980-01-01       NaN       NaN       NaN
 |      1980-02-01  0.013810  0.013684  0.006549
 |      1980-03-01  0.053365  0.059318  0.061876
 |      
 |      Percentage of change in GOOG and APPL stock volume. Shows computing
 |      the percentage change between columns.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     '2016': [1769950, 30586265],
 |      ...     '2015': [1500923, 40912316],
 |      ...     '2014': [1371819, 41403351]},
 |      ...     index=['GOOG', 'APPL'])
 |      >>> df
 |                2016      2015      2014
 |      GOOG   1769950   1500923   1371819
 |      APPL  30586265  40912316  41403351
 |      
 |      >>> df.pct_change(axis='columns', periods=-1)
 |                2016      2015  2014
 |      GOOG  0.179241  0.094112   NaN
 |      APPL -0.252395 -0.011860   NaN
 |  
 |  pipe(self, func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -> 'T'
 |      Apply chainable functions that expect Series or DataFrames.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          Function to apply to the Series/DataFrame.
 |          ``args``, and ``kwargs`` are passed into ``func``.
 |          Alternatively a ``(callable, data_keyword)`` tuple where
 |          ``data_keyword`` is a string indicating the keyword of
 |          ``callable`` that expects the Series/DataFrame.
 |      *args : iterable, optional
 |          Positional arguments passed into ``func``.
 |      **kwargs : mapping, optional
 |          A dictionary of keyword arguments passed into ``func``.
 |      
 |      Returns
 |      -------
 |      the return type of ``func``.
 |      
 |      See Also
 |      --------
 |      DataFrame.apply : Apply a function along input axis of DataFrame.
 |      DataFrame.map : Apply a function elementwise on a whole DataFrame.
 |      Series.map : Apply a mapping correspondence on a
 |          :class:`~pandas.Series`.
 |      
 |      Notes
 |      -----
 |      Use ``.pipe`` when chaining together functions that expect
 |      Series, DataFrames or GroupBy objects.
 |      
 |      Examples
 |      --------
 |      Constructing a income DataFrame from a dictionary.
 |      
 |      >>> data = [[8000, 1000], [9500, np.nan], [5000, 2000]]
 |      >>> df = pd.DataFrame(data, columns=['Salary', 'Others'])
 |      >>> df
 |         Salary  Others
 |      0    8000  1000.0
 |      1    9500     NaN
 |      2    5000  2000.0
 |      
 |      Functions that perform tax reductions on an income DataFrame.
 |      
 |      >>> def subtract_federal_tax(df):
 |      ...     return df * 0.9
 |      >>> def subtract_state_tax(df, rate):
 |      ...     return df * (1 - rate)
 |      >>> def subtract_national_insurance(df, rate, rate_increase):
 |      ...     new_rate = rate + rate_increase
 |      ...     return df * (1 - new_rate)
 |      
 |      Instead of writing
 |      
 |      >>> subtract_national_insurance(
 |      ...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),
 |      ...     rate=0.05,
 |      ...     rate_increase=0.02)  # doctest: +SKIP
 |      
 |      You can write
 |      
 |      >>> (
 |      ...     df.pipe(subtract_federal_tax)
 |      ...     .pipe(subtract_state_tax, rate=0.12)
 |      ...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)
 |      ... )
 |          Salary   Others
 |      0  5892.48   736.56
 |      1  6997.32      NaN
 |      2  3682.80  1473.12
 |      
 |      If you have a function that takes the data as (say) the second
 |      argument, pass a tuple indicating which keyword expects the
 |      data. For example, suppose ``national_insurance`` takes its data as ``df``
 |      in the second argument:
 |      
 |      >>> def subtract_national_insurance(rate, df, rate_increase):
 |      ...     new_rate = rate + rate_increase
 |      ...     return df * (1 - new_rate)
 |      >>> (
 |      ...     df.pipe(subtract_federal_tax)
 |      ...     .pipe(subtract_state_tax, rate=0.12)
 |      ...     .pipe(
 |      ...         (subtract_national_insurance, 'df'),
 |      ...         rate=0.05,
 |      ...         rate_increase=0.02
 |      ...     )
 |      ... )
 |          Salary   Others
 |      0  5892.48   736.56
 |      1  6997.32      NaN
 |      2  3682.80  1473.12
 |  
 |  rank(self, axis: 'Axis' = 0, method: "Literal['average', 'min', 'max', 'first', 'dense']" = 'average', numeric_only: 'bool_t' = False, na_option: "Literal['keep', 'top', 'bottom']" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -> 'Self'
 |      Compute numerical data ranks (1 through n) along axis.
 |      
 |      By default, equal values are assigned a rank that is the average of the
 |      ranks of those values.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Index to direct ranking.
 |          For `Series` this parameter is unused and defaults to 0.
 |      method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'
 |          How to rank the group of records that have the same value (i.e. ties):
 |      
 |          * average: average rank of the group
 |          * min: lowest rank in the group
 |          * max: highest rank in the group
 |          * first: ranks assigned in order they appear in the array
 |          * dense: like 'min', but rank always increases by 1 between groups.
 |      
 |      numeric_only : bool, default False
 |          For DataFrame objects, rank only numeric columns if set to True.
 |      
 |          .. versionchanged:: 2.0.0
 |              The default value of ``numeric_only`` is now ``False``.
 |      
 |      na_option : {'keep', 'top', 'bottom'}, default 'keep'
 |          How to rank NaN values:
 |      
 |          * keep: assign NaN rank to NaN values
 |          * top: assign lowest rank to NaN values
 |          * bottom: assign highest rank to NaN values
 |      
 |      ascending : bool, default True
 |          Whether or not the elements should be ranked in ascending order.
 |      pct : bool, default False
 |          Whether or not to display the returned rankings in percentile
 |          form.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          Return a Series or DataFrame with data ranks as values.
 |      
 |      See Also
 |      --------
 |      core.groupby.DataFrameGroupBy.rank : Rank of values within each group.
 |      core.groupby.SeriesGroupBy.rank : Rank of values within each group.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',
 |      ...                                    'spider', 'snake'],
 |      ...                         'Number_legs': [4, 2, 4, 8, np.nan]})
 |      >>> df
 |          Animal  Number_legs
 |      0      cat          4.0
 |      1  penguin          2.0
 |      2      dog          4.0
 |      3   spider          8.0
 |      4    snake          NaN
 |      
 |      Ties are assigned the mean of the ranks (by default) for the group.
 |      
 |      >>> s = pd.Series(range(5), index=list("abcde"))
 |      >>> s["d"] = s["b"]
 |      >>> s.rank()
 |      a    1.0
 |      b    2.5
 |      c    4.0
 |      d    2.5
 |      e    5.0
 |      dtype: float64
 |      
 |      The following example shows how the method behaves with the above
 |      parameters:
 |      
 |      * default_rank: this is the default behaviour obtained without using
 |        any parameter.
 |      * max_rank: setting ``method = 'max'`` the records that have the
 |        same values are ranked using the highest rank (e.g.: since 'cat'
 |        and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)
 |      * NA_bottom: choosing ``na_option = 'bottom'``, if there are records
 |        with NaN values they are placed at the bottom of the ranking.
 |      * pct_rank: when setting ``pct = True``, the ranking is expressed as
 |        percentile rank.
 |      
 |      >>> df['default_rank'] = df['Number_legs'].rank()
 |      >>> df['max_rank'] = df['Number_legs'].rank(method='max')
 |      >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')
 |      >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)
 |      >>> df
 |          Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank
 |      0      cat          4.0           2.5       3.0        2.5     0.625
 |      1  penguin          2.0           1.0       1.0        1.0     0.250
 |      2      dog          4.0           2.5       3.0        2.5     0.625
 |      3   spider          8.0           4.0       4.0        4.0     1.000
 |      4    snake          NaN           NaN       NaN        5.0       NaN
 |  
 |  reindex_like(self, other, method: "Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Self'
 |      Return an object with matching indices as other object.
 |      
 |      Conform the object to the same index on all axes. Optional
 |      filling logic, placing NaN in locations having no value
 |      in the previous index. A new object is produced unless the
 |      new index is equivalent to the current one and copy=False.
 |      
 |      Parameters
 |      ----------
 |      other : Object of the same data type
 |          Its row and column indices are used to define the new indices
 |          of this object.
 |      method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}
 |          Method to use for filling holes in reindexed DataFrame.
 |          Please note: this is only applicable to DataFrames/Series with a
 |          monotonically increasing/decreasing index.
 |      
 |          * None (default): don't fill gaps
 |          * pad / ffill: propagate last valid observation forward to next
 |            valid
 |          * backfill / bfill: use next valid observation to fill gap
 |          * nearest: use nearest valid observations to fill gap.
 |      
 |      copy : bool, default True
 |          Return a new object, even if the passed indexes are the same.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      limit : int, default None
 |          Maximum number of consecutive labels to fill for inexact matches.
 |      tolerance : optional
 |          Maximum distance between original and new labels for inexact
 |          matches. The values of the index at the matching locations must
 |          satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
 |      
 |          Tolerance may be a scalar value, which applies the same tolerance
 |          to all values, or list-like, which applies variable tolerance per
 |          element. List-like includes list, tuple, array, Series, and must be
 |          the same size as the index and its dtype must exactly match the
 |          index's type.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Same type as caller, but with changed indices on each axis.
 |      
 |      See Also
 |      --------
 |      DataFrame.set_index : Set row labels.
 |      DataFrame.reset_index : Remove row labels or move them to new columns.
 |      DataFrame.reindex : Change to new indices or expand indices.
 |      
 |      Notes
 |      -----
 |      Same as calling
 |      ``.reindex(index=other.index, columns=other.columns,...)``.
 |      
 |      Examples
 |      --------
 |      >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],
 |      ...                     [31, 87.8, 'high'],
 |      ...                     [22, 71.6, 'medium'],
 |      ...                     [35, 95, 'medium']],
 |      ...                    columns=['temp_celsius', 'temp_fahrenheit',
 |      ...                             'windspeed'],
 |      ...                    index=pd.date_range(start='2014-02-12',
 |      ...                                        end='2014-02-15', freq='D'))
 |      
 |      >>> df1
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          24.3             75.7      high
 |      2014-02-13          31.0             87.8      high
 |      2014-02-14          22.0             71.6    medium
 |      2014-02-15          35.0             95.0    medium
 |      
 |      >>> df2 = pd.DataFrame([[28, 'low'],
 |      ...                     [30, 'low'],
 |      ...                     [35.1, 'medium']],
 |      ...                    columns=['temp_celsius', 'windspeed'],
 |      ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',
 |      ...                                            '2014-02-15']))
 |      
 |      >>> df2
 |                  temp_celsius windspeed
 |      2014-02-12          28.0       low
 |      2014-02-13          30.0       low
 |      2014-02-15          35.1    medium
 |      
 |      >>> df2.reindex_like(df1)
 |                  temp_celsius  temp_fahrenheit windspeed
 |      2014-02-12          28.0              NaN       low
 |      2014-02-13          30.0              NaN       low
 |      2014-02-14           NaN              NaN       NaN
 |      2014-02-15          35.1              NaN    medium
 |  
 |  replace(self, to_replace=None, value=<no_default>, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: "Literal['pad', 'ffill', 'bfill'] | lib.NoDefault" = <no_default>) -> 'Self | None'
 |      Replace values given in `to_replace` with `value`.
 |      
 |      Values of the Series/DataFrame are replaced with other values dynamically.
 |      This differs from updating with ``.loc`` or ``.iloc``, which require
 |      you to specify a location to update with some value.
 |      
 |      Parameters
 |      ----------
 |      to_replace : str, regex, list, dict, Series, int, float, or None
 |          How to find the values that will be replaced.
 |      
 |          * numeric, str or regex:
 |      
 |              - numeric: numeric values equal to `to_replace` will be
 |                replaced with `value`
 |              - str: string exactly matching `to_replace` will be replaced
 |                with `value`
 |              - regex: regexs matching `to_replace` will be replaced with
 |                `value`
 |      
 |          * list of str, regex, or numeric:
 |      
 |              - First, if `to_replace` and `value` are both lists, they
 |                **must** be the same length.
 |              - Second, if ``regex=True`` then all of the strings in **both**
 |                lists will be interpreted as regexs otherwise they will match
 |                directly. This doesn't matter much for `value` since there
 |                are only a few possible substitution regexes you can use.
 |              - str, regex and numeric rules apply as above.
 |      
 |          * dict:
 |      
 |              - Dicts can be used to specify different replacement values
 |                for different existing values. For example,
 |                ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and
 |                'y' with 'z'. To use a dict in this way, the optional `value`
 |                parameter should not be given.
 |              - For a DataFrame a dict can specify that different values
 |                should be replaced in different columns. For example,
 |                ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'
 |                and the value 'z' in column 'b' and replaces these values
 |                with whatever is specified in `value`. The `value` parameter
 |                should not be ``None`` in this case. You can treat this as a
 |                special case of passing two lists except that you are
 |                specifying the column to search in.
 |              - For a DataFrame nested dictionaries, e.g.,
 |                ``{'a': {'b': np.nan}}``, are read as follows: look in column
 |                'a' for the value 'b' and replace it with NaN. The optional `value`
 |                parameter should not be specified to use a nested dict in this
 |                way. You can nest regular expressions as well. Note that
 |                column names (the top-level dictionary keys in a nested
 |                dictionary) **cannot** be regular expressions.
 |      
 |          * None:
 |      
 |              - This means that the `regex` argument must be a string,
 |                compiled regular expression, or list, dict, ndarray or
 |                Series of such elements. If `value` is also ``None`` then
 |                this **must** be a nested dictionary or Series.
 |      
 |          See the examples section for examples of each of these.
 |      value : scalar, dict, list, str, regex, default None
 |          Value to replace any values matching `to_replace` with.
 |          For a DataFrame a dict of values can be used to specify which
 |          value to use for each column (columns not in the dict will not be
 |          filled). Regular expressions, strings and lists or dicts of such
 |          objects are also allowed.
 |      
 |      inplace : bool, default False
 |          If True, performs operation inplace and returns None.
 |      limit : int, default None
 |          Maximum size gap to forward or backward fill.
 |      
 |          .. deprecated:: 2.1.0
 |      regex : bool or same types as `to_replace`, default False
 |          Whether to interpret `to_replace` and/or `value` as regular
 |          expressions. Alternatively, this could be a regular expression or a
 |          list, dict, or array of regular expressions in which case
 |          `to_replace` must be ``None``.
 |      method : {'pad', 'ffill', 'bfill'}
 |          The method to use when for replacement, when `to_replace` is a
 |          scalar, list or tuple and `value` is ``None``.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Object after replacement.
 |      
 |      Raises
 |      ------
 |      AssertionError
 |          * If `regex` is not a ``bool`` and `to_replace` is not
 |            ``None``.
 |      
 |      TypeError
 |          * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``
 |          * If `to_replace` is a ``dict`` and `value` is not a ``list``,
 |            ``dict``, ``ndarray``, or ``Series``
 |          * If `to_replace` is ``None`` and `regex` is not compilable
 |            into a regular expression or is a list, dict, ndarray, or
 |            Series.
 |          * When replacing multiple ``bool`` or ``datetime64`` objects and
 |            the arguments to `to_replace` does not match the type of the
 |            value being replaced
 |      
 |      ValueError
 |          * If a ``list`` or an ``ndarray`` is passed to `to_replace` and
 |            `value` but they are not the same length.
 |      
 |      See Also
 |      --------
 |      Series.fillna : Fill NA values.
 |      DataFrame.fillna : Fill NA values.
 |      Series.where : Replace values based on boolean condition.
 |      DataFrame.where : Replace values based on boolean condition.
 |      DataFrame.map: Apply a function to a Dataframe elementwise.
 |      Series.map: Map values of Series according to an input mapping or function.
 |      Series.str.replace : Simple string replacement.
 |      
 |      Notes
 |      -----
 |      * Regex substitution is performed under the hood with ``re.sub``. The
 |        rules for substitution for ``re.sub`` are the same.
 |      * Regular expressions will only substitute on strings, meaning you
 |        cannot provide, for example, a regular expression matching floating
 |        point numbers and expect the columns in your frame that have a
 |        numeric dtype to be matched. However, if those floating point
 |        numbers *are* strings, then you can do this.
 |      * This method has *a lot* of options. You are encouraged to experiment
 |        and play with this method to gain intuition about how it works.
 |      * When dict is used as the `to_replace` value, it is like
 |        key(s) in the dict are the to_replace part and
 |        value(s) in the dict are the value parameter.
 |      
 |      Examples
 |      --------
 |      
 |      **Scalar `to_replace` and `value`**
 |      
 |      >>> s = pd.Series([1, 2, 3, 4, 5])
 |      >>> s.replace(1, 5)
 |      0    5
 |      1    2
 |      2    3
 |      3    4
 |      4    5
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
 |      ...                    'B': [5, 6, 7, 8, 9],
 |      ...                    'C': ['a', 'b', 'c', 'd', 'e']})
 |      >>> df.replace(0, 5)
 |          A  B  C
 |      0  5  5  a
 |      1  1  6  b
 |      2  2  7  c
 |      3  3  8  d
 |      4  4  9  e
 |      
 |      **List-like `to_replace`**
 |      
 |      >>> df.replace([0, 1, 2, 3], 4)
 |          A  B  C
 |      0  4  5  a
 |      1  4  6  b
 |      2  4  7  c
 |      3  4  8  d
 |      4  4  9  e
 |      
 |      >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])
 |          A  B  C
 |      0  4  5  a
 |      1  3  6  b
 |      2  2  7  c
 |      3  1  8  d
 |      4  4  9  e
 |      
 |      >>> s.replace([1, 2], method='bfill')
 |      0    3
 |      1    3
 |      2    3
 |      3    4
 |      4    5
 |      dtype: int64
 |      
 |      **dict-like `to_replace`**
 |      
 |      >>> df.replace({0: 10, 1: 100})
 |              A  B  C
 |      0   10  5  a
 |      1  100  6  b
 |      2    2  7  c
 |      3    3  8  d
 |      4    4  9  e
 |      
 |      >>> df.replace({'A': 0, 'B': 5}, 100)
 |              A    B  C
 |      0  100  100  a
 |      1    1    6  b
 |      2    2    7  c
 |      3    3    8  d
 |      4    4    9  e
 |      
 |      >>> df.replace({'A': {0: 100, 4: 400}})
 |              A  B  C
 |      0  100  5  a
 |      1    1  6  b
 |      2    2  7  c
 |      3    3  8  d
 |      4  400  9  e
 |      
 |      **Regular expression `to_replace`**
 |      
 |      >>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],
 |      ...                    'B': ['abc', 'bar', 'xyz']})
 |      >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)
 |              A    B
 |      0   new  abc
 |      1   foo  new
 |      2  bait  xyz
 |      
 |      >>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)
 |              A    B
 |      0   new  abc
 |      1   foo  bar
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex=r'^ba.$', value='new')
 |              A    B
 |      0   new  abc
 |      1   foo  new
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})
 |              A    B
 |      0   new  abc
 |      1   xyz  new
 |      2  bait  xyz
 |      
 |      >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')
 |              A    B
 |      0   new  abc
 |      1   new  new
 |      2  bait  xyz
 |      
 |      Compare the behavior of ``s.replace({'a': None})`` and
 |      ``s.replace('a', None)`` to understand the peculiarities
 |      of the `to_replace` parameter:
 |      
 |      >>> s = pd.Series([10, 'a', 'a', 'b', 'a'])
 |      
 |      When one uses a dict as the `to_replace` value, it is like the
 |      value(s) in the dict are equal to the `value` parameter.
 |      ``s.replace({'a': None})`` is equivalent to
 |      ``s.replace(to_replace={'a': None}, value=None, method=None)``:
 |      
 |      >>> s.replace({'a': None})
 |      0      10
 |      1    None
 |      2    None
 |      3       b
 |      4    None
 |      dtype: object
 |      
 |      When ``value`` is not explicitly passed and `to_replace` is a scalar, list
 |      or tuple, `replace` uses the method parameter (default 'pad') to do the
 |      replacement. So this is why the 'a' values are being replaced by 10
 |      in rows 1 and 2 and 'b' in row 4 in this case.
 |      
 |      >>> s.replace('a')
 |      0    10
 |      1    10
 |      2    10
 |      3     b
 |      4     b
 |      dtype: object
 |      
 |          .. deprecated:: 2.1.0
 |              The 'method' parameter and padding behavior are deprecated.
 |      
 |      On the other hand, if ``None`` is explicitly passed for ``value``, it will
 |      be respected:
 |      
 |      >>> s.replace('a', None)
 |      0      10
 |      1    None
 |      2    None
 |      3       b
 |      4    None
 |      dtype: object
 |      
 |          .. versionchanged:: 1.4.0
 |              Previously the explicit ``None`` was silently ignored.
 |      
 |      When ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,
 |      the replacement will be applied in all columns of the DataFrame.
 |      
 |      >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
 |      ...                    'B': ['a', 'b', 'c', 'd', 'e'],
 |      ...                    'C': ['f', 'g', 'h', 'i', 'j']})
 |      
 |      >>> df.replace(to_replace='^[a-g]', value='e', regex=True)
 |          A  B  C
 |      0  0  e  e
 |      1  1  e  e
 |      2  2  e  h
 |      3  3  e  i
 |      4  4  e  j
 |      
 |      If ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary
 |      keys will be the DataFrame columns that the replacement will be applied.
 |      
 |      >>> df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)
 |          A  B  C
 |      0  0  e  f
 |      1  1  e  g
 |      2  2  e  e
 |      3  3  d  e
 |      4  4  e  e
 |  
 |  resample(self, rule, axis: 'Axis | lib.NoDefault' = <no_default>, closed: "Literal['right', 'left'] | None" = None, label: "Literal['right', 'left'] | None" = None, convention: "Literal['start', 'end', 's', 'e']" = 'start', kind: "Literal['timestamp', 'period'] | None | lib.NoDefault" = <no_default>, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -> 'Resampler'
 |      Resample time-series data.
 |      
 |      Convenience method for frequency conversion and resampling of time series.
 |      The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,
 |      or `TimedeltaIndex`), or the caller must pass the label of a datetime-like
 |      series/index to the ``on``/``level`` keyword parameter.
 |      
 |      Parameters
 |      ----------
 |      rule : DateOffset, Timedelta or str
 |          The offset string or object representing target conversion.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Which axis to use for up- or down-sampling. For `Series` this parameter
 |          is unused and defaults to 0. Must be
 |          `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.
 |      
 |          .. deprecated:: 2.0.0
 |              Use frame.T.resample(...) instead.
 |      closed : {'right', 'left'}, default None
 |          Which side of bin interval is closed. The default is 'left'
 |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',
 |          'BA', 'BQE', and 'W' which all have a default of 'right'.
 |      label : {'right', 'left'}, default None
 |          Which bin edge label to label bucket with. The default is 'left'
 |          for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',
 |          'BA', 'BQE', and 'W' which all have a default of 'right'.
 |      convention : {'start', 'end', 's', 'e'}, default 'start'
 |          For `PeriodIndex` only, controls whether to use the start or
 |          end of `rule`.
 |      
 |      kind : {'timestamp', 'period'}, optional, default None
 |          Pass 'timestamp' to convert the resulting index to a
 |          `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.
 |          By default the input representation is retained.
 |      
 |          .. deprecated:: 2.2.0
 |              Convert index to desired type explicitly instead.
 |      
 |      on : str, optional
 |          For a DataFrame, column to use instead of index for resampling.
 |          Column must be datetime-like.
 |      level : str or int, optional
 |          For a MultiIndex, level (name or number) to use for
 |          resampling. `level` must be datetime-like.
 |      origin : Timestamp or str, default 'start_day'
 |          The timestamp on which to adjust the grouping. The timezone of origin
 |          must match the timezone of the index.
 |          If string, must be one of the following:
 |      
 |          - 'epoch': `origin` is 1970-01-01
 |          - 'start': `origin` is the first value of the timeseries
 |          - 'start_day': `origin` is the first day at midnight of the timeseries
 |      
 |          - 'end': `origin` is the last value of the timeseries
 |          - 'end_day': `origin` is the ceiling midnight of the last day
 |      
 |          .. versionadded:: 1.3.0
 |      
 |          .. note::
 |      
 |              Only takes effect for Tick-frequencies (i.e. fixed frequencies like
 |              days, hours, and minutes, rather than months or quarters).
 |      offset : Timedelta or str, default is None
 |          An offset timedelta added to the origin.
 |      
 |      group_keys : bool, default False
 |          Whether to include the group keys in the result index when using
 |          ``.apply()`` on the resampled object.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |              Not specifying ``group_keys`` will retain values-dependent behavior
 |              from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes
 |              <whatsnew_150.enhancements.resample_group_keys>` for examples).
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              ``group_keys`` now defaults to ``False``.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Resampler
 |          :class:`~pandas.core.Resampler` object.
 |      
 |      See Also
 |      --------
 |      Series.resample : Resample a Series.
 |      DataFrame.resample : Resample a DataFrame.
 |      groupby : Group Series/DataFrame by mapping, function, label, or list of labels.
 |      asfreq : Reindex a Series/DataFrame with the given frequency without grouping.
 |      
 |      Notes
 |      -----
 |      See the `user guide
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__
 |      for more.
 |      
 |      To learn more about the offset strings, please see `this link
 |      <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.
 |      
 |      Examples
 |      --------
 |      Start by creating a series with 9 one minute timestamps.
 |      
 |      >>> index = pd.date_range('1/1/2000', periods=9, freq='min')
 |      >>> series = pd.Series(range(9), index=index)
 |      >>> series
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:02:00    2
 |      2000-01-01 00:03:00    3
 |      2000-01-01 00:04:00    4
 |      2000-01-01 00:05:00    5
 |      2000-01-01 00:06:00    6
 |      2000-01-01 00:07:00    7
 |      2000-01-01 00:08:00    8
 |      Freq: min, dtype: int64
 |      
 |      Downsample the series into 3 minute bins and sum the values
 |      of the timestamps falling into a bin.
 |      
 |      >>> series.resample('3min').sum()
 |      2000-01-01 00:00:00     3
 |      2000-01-01 00:03:00    12
 |      2000-01-01 00:06:00    21
 |      Freq: 3min, dtype: int64
 |      
 |      Downsample the series into 3 minute bins as above, but label each
 |      bin using the right edge instead of the left. Please note that the
 |      value in the bucket used as the label is not included in the bucket,
 |      which it labels. For example, in the original series the
 |      bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed
 |      value in the resampled bucket with the label ``2000-01-01 00:03:00``
 |      does not include 3 (if it did, the summed value would be 6, not 3).
 |      
 |      >>> series.resample('3min', label='right').sum()
 |      2000-01-01 00:03:00     3
 |      2000-01-01 00:06:00    12
 |      2000-01-01 00:09:00    21
 |      Freq: 3min, dtype: int64
 |      
 |      To include this value close the right side of the bin interval,
 |      as shown below.
 |      
 |      >>> series.resample('3min', label='right', closed='right').sum()
 |      2000-01-01 00:00:00     0
 |      2000-01-01 00:03:00     6
 |      2000-01-01 00:06:00    15
 |      2000-01-01 00:09:00    15
 |      Freq: 3min, dtype: int64
 |      
 |      Upsample the series into 30 second bins.
 |      
 |      >>> series.resample('30s').asfreq()[0:5]   # Select first 5 rows
 |      2000-01-01 00:00:00   0.0
 |      2000-01-01 00:00:30   NaN
 |      2000-01-01 00:01:00   1.0
 |      2000-01-01 00:01:30   NaN
 |      2000-01-01 00:02:00   2.0
 |      Freq: 30s, dtype: float64
 |      
 |      Upsample the series into 30 second bins and fill the ``NaN``
 |      values using the ``ffill`` method.
 |      
 |      >>> series.resample('30s').ffill()[0:5]
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:00:30    0
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:01:30    1
 |      2000-01-01 00:02:00    2
 |      Freq: 30s, dtype: int64
 |      
 |      Upsample the series into 30 second bins and fill the
 |      ``NaN`` values using the ``bfill`` method.
 |      
 |      >>> series.resample('30s').bfill()[0:5]
 |      2000-01-01 00:00:00    0
 |      2000-01-01 00:00:30    1
 |      2000-01-01 00:01:00    1
 |      2000-01-01 00:01:30    2
 |      2000-01-01 00:02:00    2
 |      Freq: 30s, dtype: int64
 |      
 |      Pass a custom function via ``apply``
 |      
 |      >>> def custom_resampler(arraylike):
 |      ...     return np.sum(arraylike) + 5
 |      ...
 |      >>> series.resample('3min').apply(custom_resampler)
 |      2000-01-01 00:00:00     8
 |      2000-01-01 00:03:00    17
 |      2000-01-01 00:06:00    26
 |      Freq: 3min, dtype: int64
 |      
 |      For a Series with a PeriodIndex, the keyword `convention` can be
 |      used to control whether to use the start or end of `rule`.
 |      
 |      Resample a year by quarter using 'start' `convention`. Values are
 |      assigned to the first quarter of the period.
 |      
 |      >>> s = pd.Series(
 |      ...     [1, 2], index=pd.period_range("2012-01-01", freq="Y", periods=2)
 |      ... )
 |      >>> s
 |      2012    1
 |      2013    2
 |      Freq: Y-DEC, dtype: int64
 |      >>> s.resample("Q", convention="start").asfreq()
 |      2012Q1    1.0
 |      2012Q2    NaN
 |      2012Q3    NaN
 |      2012Q4    NaN
 |      2013Q1    2.0
 |      2013Q2    NaN
 |      2013Q3    NaN
 |      2013Q4    NaN
 |      Freq: Q-DEC, dtype: float64
 |      
 |      Resample quarters by month using 'end' `convention`. Values are
 |      assigned to the last month of the period.
 |      
 |      >>> q = pd.Series(
 |      ...     [1, 2, 3, 4], index=pd.period_range("2018-01-01", freq="Q", periods=4)
 |      ... )
 |      >>> q
 |      2018Q1    1
 |      2018Q2    2
 |      2018Q3    3
 |      2018Q4    4
 |      Freq: Q-DEC, dtype: int64
 |      >>> q.resample("M", convention="end").asfreq()
 |      2018-03    1.0
 |      2018-04    NaN
 |      2018-05    NaN
 |      2018-06    2.0
 |      2018-07    NaN
 |      2018-08    NaN
 |      2018-09    3.0
 |      2018-10    NaN
 |      2018-11    NaN
 |      2018-12    4.0
 |      Freq: M, dtype: float64
 |      
 |      For DataFrame objects, the keyword `on` can be used to specify the
 |      column instead of the index for resampling.
 |      
 |      >>> d = {'price': [10, 11, 9, 13, 14, 18, 17, 19],
 |      ...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}
 |      >>> df = pd.DataFrame(d)
 |      >>> df['week_starting'] = pd.date_range('01/01/2018',
 |      ...                                     periods=8,
 |      ...                                     freq='W')
 |      >>> df
 |         price  volume week_starting
 |      0     10      50    2018-01-07
 |      1     11      60    2018-01-14
 |      2      9      40    2018-01-21
 |      3     13     100    2018-01-28
 |      4     14      50    2018-02-04
 |      5     18     100    2018-02-11
 |      6     17      40    2018-02-18
 |      7     19      50    2018-02-25
 |      >>> df.resample('ME', on='week_starting').mean()
 |                     price  volume
 |      week_starting
 |      2018-01-31     10.75    62.5
 |      2018-02-28     17.00    60.0
 |      
 |      For a DataFrame with MultiIndex, the keyword `level` can be used to
 |      specify on which level the resampling needs to take place.
 |      
 |      >>> days = pd.date_range('1/1/2000', periods=4, freq='D')
 |      >>> d2 = {'price': [10, 11, 9, 13, 14, 18, 17, 19],
 |      ...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}
 |      >>> df2 = pd.DataFrame(
 |      ...     d2,
 |      ...     index=pd.MultiIndex.from_product(
 |      ...         [days, ['morning', 'afternoon']]
 |      ...     )
 |      ... )
 |      >>> df2
 |                            price  volume
 |      2000-01-01 morning       10      50
 |                 afternoon     11      60
 |      2000-01-02 morning        9      40
 |                 afternoon     13     100
 |      2000-01-03 morning       14      50
 |                 afternoon     18     100
 |      2000-01-04 morning       17      40
 |                 afternoon     19      50
 |      >>> df2.resample('D', level=0).sum()
 |                  price  volume
 |      2000-01-01     21     110
 |      2000-01-02     22     140
 |      2000-01-03     32     150
 |      2000-01-04     36      90
 |      
 |      If you want to adjust the start of the bins based on a fixed timestamp:
 |      
 |      >>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'
 |      >>> rng = pd.date_range(start, end, freq='7min')
 |      >>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)
 |      >>> ts
 |      2000-10-01 23:30:00     0
 |      2000-10-01 23:37:00     3
 |      2000-10-01 23:44:00     6
 |      2000-10-01 23:51:00     9
 |      2000-10-01 23:58:00    12
 |      2000-10-02 00:05:00    15
 |      2000-10-02 00:12:00    18
 |      2000-10-02 00:19:00    21
 |      2000-10-02 00:26:00    24
 |      Freq: 7min, dtype: int64
 |      
 |      >>> ts.resample('17min').sum()
 |      2000-10-01 23:14:00     0
 |      2000-10-01 23:31:00     9
 |      2000-10-01 23:48:00    21
 |      2000-10-02 00:05:00    54
 |      2000-10-02 00:22:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', origin='epoch').sum()
 |      2000-10-01 23:18:00     0
 |      2000-10-01 23:35:00    18
 |      2000-10-01 23:52:00    27
 |      2000-10-02 00:09:00    39
 |      2000-10-02 00:26:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', origin='2000-01-01').sum()
 |      2000-10-01 23:24:00     3
 |      2000-10-01 23:41:00    15
 |      2000-10-01 23:58:00    45
 |      2000-10-02 00:15:00    45
 |      Freq: 17min, dtype: int64
 |      
 |      If you want to adjust the start of the bins with an `offset` Timedelta, the two
 |      following lines are equivalent:
 |      
 |      >>> ts.resample('17min', origin='start').sum()
 |      2000-10-01 23:30:00     9
 |      2000-10-01 23:47:00    21
 |      2000-10-02 00:04:00    54
 |      2000-10-02 00:21:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      >>> ts.resample('17min', offset='23h30min').sum()
 |      2000-10-01 23:30:00     9
 |      2000-10-01 23:47:00    21
 |      2000-10-02 00:04:00    54
 |      2000-10-02 00:21:00    24
 |      Freq: 17min, dtype: int64
 |      
 |      If you want to take the largest Timestamp as the end of the bins:
 |      
 |      >>> ts.resample('17min', origin='end').sum()
 |      2000-10-01 23:35:00     0
 |      2000-10-01 23:52:00    18
 |      2000-10-02 00:09:00    27
 |      2000-10-02 00:26:00    63
 |      Freq: 17min, dtype: int64
 |      
 |      In contrast with the `start_day`, you can use `end_day` to take the ceiling
 |      midnight of the largest Timestamp as the end of the bins and drop the bins
 |      not containing data:
 |      
 |      >>> ts.resample('17min', origin='end_day').sum()
 |      2000-10-01 23:38:00     3
 |      2000-10-01 23:55:00    15
 |      2000-10-02 00:12:00    45
 |      2000-10-02 00:29:00    45
 |      Freq: 17min, dtype: int64
 |  
 |  rolling(self, window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = <no_default>, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -> 'Window | Rolling'
 |      Provide rolling window calculations.
 |      
 |      Parameters
 |      ----------
 |      window : int, timedelta, str, offset, or BaseIndexer subclass
 |          Size of the moving window.
 |      
 |          If an integer, the fixed number of observations used for
 |          each window.
 |      
 |          If a timedelta, str, or offset, the time period of each window. Each
 |          window will be a variable sized based on the observations included in
 |          the time-period. This is only valid for datetimelike indexes.
 |          To learn more about the offsets & frequency strings, please see `this link
 |          <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
 |      
 |          If a BaseIndexer subclass, the window boundaries
 |          based on the defined ``get_window_bounds`` method. Additional rolling
 |          keyword arguments, namely ``min_periods``, ``center``, ``closed`` and
 |          ``step`` will be passed to ``get_window_bounds``.
 |      
 |      min_periods : int, default None
 |          Minimum number of observations in window required to have a value;
 |          otherwise, result is ``np.nan``.
 |      
 |          For a window that is specified by an offset, ``min_periods`` will default to 1.
 |      
 |          For a window that is specified by an integer, ``min_periods`` will default
 |          to the size of the window.
 |      
 |      center : bool, default False
 |          If False, set the window labels as the right edge of the window index.
 |      
 |          If True, set the window labels as the center of the window index.
 |      
 |      win_type : str, default None
 |          If ``None``, all points are evenly weighted.
 |      
 |          If a string, it must be a valid `scipy.signal window function
 |          <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`__.
 |      
 |          Certain Scipy window types require additional parameters to be passed
 |          in the aggregation function. The additional parameters must match
 |          the keywords specified in the Scipy window type method signature.
 |      
 |      on : str, optional
 |          For a DataFrame, a column label or Index level on which
 |          to calculate the rolling window, rather than the DataFrame's index.
 |      
 |          Provided integer column is ignored and excluded from result since
 |          an integer index is not used to calculate the rolling window.
 |      
 |      axis : int or str, default 0
 |          If ``0`` or ``'index'``, roll across the rows.
 |      
 |          If ``1`` or ``'columns'``, roll across the columns.
 |      
 |          For `Series` this parameter is unused and defaults to 0.
 |      
 |          .. deprecated:: 2.1.0
 |      
 |              The axis keyword is deprecated. For ``axis=1``,
 |              transpose the DataFrame first instead.
 |      
 |      closed : str, default None
 |          If ``'right'``, the first point in the window is excluded from calculations.
 |      
 |          If ``'left'``, the last point in the window is excluded from calculations.
 |      
 |          If ``'both'``, the no points in the window are excluded from calculations.
 |      
 |          If ``'neither'``, the first and last points in the window are excluded
 |          from calculations.
 |      
 |          Default ``None`` (``'right'``).
 |      
 |      step : int, default None
 |      
 |          .. versionadded:: 1.5.0
 |      
 |          Evaluate the window at every ``step`` result, equivalent to slicing as
 |          ``[::step]``. ``window`` must be an integer. Using a step argument other
 |          than None or 1 will produce a result with a different shape than the input.
 |      
 |      method : str {'single', 'table'}, default 'single'
 |      
 |          .. versionadded:: 1.3.0
 |      
 |          Execute the rolling operation per single column or row (``'single'``)
 |          or over the entire object (``'table'``).
 |      
 |          This argument is only implemented when specifying ``engine='numba'``
 |          in the method call.
 |      
 |      Returns
 |      -------
 |      pandas.api.typing.Window or pandas.api.typing.Rolling
 |          An instance of Window is returned if ``win_type`` is passed. Otherwise,
 |          an instance of Rolling is returned.
 |      
 |      See Also
 |      --------
 |      expanding : Provides expanding transformations.
 |      ewm : Provides exponential weighted functions.
 |      
 |      Notes
 |      -----
 |      See :ref:`Windowing Operations <window.generic>` for further usage details
 |      and examples.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
 |      >>> df
 |           B
 |      0  0.0
 |      1  1.0
 |      2  2.0
 |      3  NaN
 |      4  4.0
 |      
 |      **window**
 |      
 |      Rolling sum with a window length of 2 observations.
 |      
 |      >>> df.rolling(2).sum()
 |           B
 |      0  NaN
 |      1  1.0
 |      2  3.0
 |      3  NaN
 |      4  NaN
 |      
 |      Rolling sum with a window span of 2 seconds.
 |      
 |      >>> df_time = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},
 |      ...                        index=[pd.Timestamp('20130101 09:00:00'),
 |      ...                               pd.Timestamp('20130101 09:00:02'),
 |      ...                               pd.Timestamp('20130101 09:00:03'),
 |      ...                               pd.Timestamp('20130101 09:00:05'),
 |      ...                               pd.Timestamp('20130101 09:00:06')])
 |      
 |      >>> df_time
 |                             B
 |      2013-01-01 09:00:00  0.0
 |      2013-01-01 09:00:02  1.0
 |      2013-01-01 09:00:03  2.0
 |      2013-01-01 09:00:05  NaN
 |      2013-01-01 09:00:06  4.0
 |      
 |      >>> df_time.rolling('2s').sum()
 |                             B
 |      2013-01-01 09:00:00  0.0
 |      2013-01-01 09:00:02  1.0
 |      2013-01-01 09:00:03  3.0
 |      2013-01-01 09:00:05  NaN
 |      2013-01-01 09:00:06  4.0
 |      
 |      Rolling sum with forward looking windows with 2 observations.
 |      
 |      >>> indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)
 |      >>> df.rolling(window=indexer, min_periods=1).sum()
 |           B
 |      0  1.0
 |      1  3.0
 |      2  2.0
 |      3  4.0
 |      4  4.0
 |      
 |      **min_periods**
 |      
 |      Rolling sum with a window length of 2 observations, but only needs a minimum of 1
 |      observation to calculate a value.
 |      
 |      >>> df.rolling(2, min_periods=1).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  2.0
 |      4  4.0
 |      
 |      **center**
 |      
 |      Rolling sum with the result assigned to the center of the window index.
 |      
 |      >>> df.rolling(3, min_periods=1, center=True).sum()
 |           B
 |      0  1.0
 |      1  3.0
 |      2  3.0
 |      3  6.0
 |      4  4.0
 |      
 |      >>> df.rolling(3, min_periods=1, center=False).sum()
 |           B
 |      0  0.0
 |      1  1.0
 |      2  3.0
 |      3  3.0
 |      4  6.0
 |      
 |      **step**
 |      
 |      Rolling sum with a window length of 2 observations, minimum of 1 observation to
 |      calculate a value, and a step of 2.
 |      
 |      >>> df.rolling(2, min_periods=1, step=2).sum()
 |           B
 |      0  0.0
 |      2  3.0
 |      4  4.0
 |      
 |      **win_type**
 |      
 |      Rolling sum with a window length of 2, using the Scipy ``'gaussian'``
 |      window type. ``std`` is required in the aggregation function.
 |      
 |      >>> df.rolling(2, win_type='gaussian').sum(std=3)
 |                B
 |      0       NaN
 |      1  0.986207
 |      2  2.958621
 |      3       NaN
 |      4       NaN
 |      
 |      **on**
 |      
 |      Rolling sum with a window length of 2 days.
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'A': [pd.to_datetime('2020-01-01'),
 |      ...           pd.to_datetime('2020-01-01'),
 |      ...           pd.to_datetime('2020-01-02'),],
 |      ...     'B': [1, 2, 3], },
 |      ...     index=pd.date_range('2020', periods=3))
 |      
 |      >>> df
 |                          A  B
 |      2020-01-01 2020-01-01  1
 |      2020-01-02 2020-01-01  2
 |      2020-01-03 2020-01-02  3
 |      
 |      >>> df.rolling('2D', on='A').sum()
 |                          A    B
 |      2020-01-01 2020-01-01  1.0
 |      2020-01-02 2020-01-01  3.0
 |      2020-01-03 2020-01-02  6.0
 |  
 |  sample(self, n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'Self'
 |      Return a random sample of items from an axis of object.
 |      
 |      You can use `random_state` for reproducibility.
 |      
 |      Parameters
 |      ----------
 |      n : int, optional
 |          Number of items from axis to return. Cannot be used with `frac`.
 |          Default = 1 if `frac` = None.
 |      frac : float, optional
 |          Fraction of axis items to return. Cannot be used with `n`.
 |      replace : bool, default False
 |          Allow or disallow sampling of the same row more than once.
 |      weights : str or ndarray-like, optional
 |          Default 'None' results in equal probability weighting.
 |          If passed a Series, will align with target object on index. Index
 |          values in weights not found in sampled object will be ignored and
 |          index values in sampled object not in weights will be assigned
 |          weights of zero.
 |          If called on a DataFrame, will accept the name of a column
 |          when axis = 0.
 |          Unless weights are a Series, weights must be same length as axis
 |          being sampled.
 |          If weights do not sum to 1, they will be normalized to sum to 1.
 |          Missing values in the weights column will be treated as zero.
 |          Infinite values not allowed.
 |      random_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional
 |          If int, array-like, or BitGenerator, seed for random number generator.
 |          If np.random.RandomState or np.random.Generator, use as given.
 |      
 |          .. versionchanged:: 1.4.0
 |      
 |              np.random.Generator objects now accepted
 |      
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Axis to sample. Accepts axis number or name. Default is stat axis
 |          for given data type. For `Series` this parameter is unused and defaults to `None`.
 |      ignore_index : bool, default False
 |          If True, the resulting index will be labeled 0, 1, …, n - 1.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          A new object of same type as caller containing `n` items randomly
 |          sampled from the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrameGroupBy.sample: Generates random samples from each group of a
 |          DataFrame object.
 |      SeriesGroupBy.sample: Generates random samples from each group of a
 |          Series object.
 |      numpy.random.choice: Generates a random sample from a given 1-D numpy
 |          array.
 |      
 |      Notes
 |      -----
 |      If `frac` > 1, `replacement` should be set to `True`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],
 |      ...                    'num_wings': [2, 0, 0, 0],
 |      ...                    'num_specimen_seen': [10, 2, 1, 8]},
 |      ...                   index=['falcon', 'dog', 'spider', 'fish'])
 |      >>> df
 |              num_legs  num_wings  num_specimen_seen
 |      falcon         2          2                 10
 |      dog            4          0                  2
 |      spider         8          0                  1
 |      fish           0          0                  8
 |      
 |      Extract 3 random elements from the ``Series`` ``df['num_legs']``:
 |      Note that we use `random_state` to ensure the reproducibility of
 |      the examples.
 |      
 |      >>> df['num_legs'].sample(n=3, random_state=1)
 |      fish      0
 |      spider    8
 |      falcon    2
 |      Name: num_legs, dtype: int64
 |      
 |      A random 50% sample of the ``DataFrame`` with replacement:
 |      
 |      >>> df.sample(frac=0.5, replace=True, random_state=1)
 |            num_legs  num_wings  num_specimen_seen
 |      dog          4          0                  2
 |      fish         0          0                  8
 |      
 |      An upsample sample of the ``DataFrame`` with replacement:
 |      Note that `replace` parameter has to be `True` for `frac` parameter > 1.
 |      
 |      >>> df.sample(frac=2, replace=True, random_state=1)
 |              num_legs  num_wings  num_specimen_seen
 |      dog            4          0                  2
 |      fish           0          0                  8
 |      falcon         2          2                 10
 |      falcon         2          2                 10
 |      fish           0          0                  8
 |      dog            4          0                  2
 |      fish           0          0                  8
 |      dog            4          0                  2
 |      
 |      Using a DataFrame column as weights. Rows with larger value in the
 |      `num_specimen_seen` column are more likely to be sampled.
 |      
 |      >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)
 |              num_legs  num_wings  num_specimen_seen
 |      falcon         2          2                 10
 |      fish           0          0                  8
 |  
 |  set_flags(self, *, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -> 'Self'
 |      Return a new object with updated flags.
 |      
 |      Parameters
 |      ----------
 |      copy : bool, default False
 |          Specify if a copy of the object should be made.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      allows_duplicate_labels : bool, optional
 |          Whether the returned object allows duplicate labels.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          The same type as the caller.
 |      
 |      See Also
 |      --------
 |      DataFrame.attrs : Global metadata applying to this dataset.
 |      DataFrame.flags : Global flags applying to this object.
 |      
 |      Notes
 |      -----
 |      This method returns a new object that's a view on the same data
 |      as the input. Mutating the input or the output values will be reflected
 |      in the other.
 |      
 |      This method is intended to be used in method chains.
 |      
 |      "Flags" differ from "metadata". Flags reflect properties of the
 |      pandas object (the Series or DataFrame). Metadata refer to properties
 |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": [1, 2]})
 |      >>> df.flags.allows_duplicate_labels
 |      True
 |      >>> df2 = df.set_flags(allows_duplicate_labels=False)
 |      >>> df2.flags.allows_duplicate_labels
 |      False
 |  
 |  shift(self, periods: 'int | Sequence[int]' = 1, freq=None, axis: 'Axis' = 0, fill_value: 'Hashable' = <no_default>, suffix: 'str | None' = None) -> 'Self | DataFrame'
 |      Shift index by desired number of periods with an optional time `freq`.
 |      
 |      When `freq` is not passed, shift the index without realigning the data.
 |      If `freq` is passed (in this case, the index must be date or datetime,
 |      or it will raise a `NotImplementedError`), the index will be
 |      increased using the periods and the `freq`. `freq` can be inferred
 |      when specified as "infer" as long as either freq or inferred_freq
 |      attribute is set in the index.
 |      
 |      Parameters
 |      ----------
 |      periods : int or Sequence
 |          Number of periods to shift. Can be positive or negative.
 |          If an iterable of ints, the data will be shifted once by each int.
 |          This is equivalent to shifting by one value at a time and
 |          concatenating all resulting frames. The resulting columns will have
 |          the shift suffixed to their column names. For multiple periods,
 |          axis must not be 1.
 |      freq : DateOffset, tseries.offsets, timedelta, or str, optional
 |          Offset to use from the tseries module or time rule (e.g. 'EOM').
 |          If `freq` is specified then the index values are shifted but the
 |          data is not realigned. That is, use `freq` if you would like to
 |          extend the index when shifting and preserve the original data.
 |          If `freq` is specified as "infer" then it will be inferred from
 |          the freq or inferred_freq attributes of the index. If neither of
 |          those attributes exist, a ValueError is thrown.
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          Shift direction. For `Series` this parameter is unused and defaults to 0.
 |      fill_value : object, optional
 |          The scalar value to use for newly introduced missing values.
 |          the default depends on the dtype of `self`.
 |          For numeric data, ``np.nan`` is used.
 |          For datetime, timedelta, or period data, etc. :attr:`NaT` is used.
 |          For extension dtypes, ``self.dtype.na_value`` is used.
 |      suffix : str, optional
 |          If str and periods is an iterable, this is added after the column
 |          name and before the shift value for each shifted column name.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Copy of input object, shifted.
 |      
 |      See Also
 |      --------
 |      Index.shift : Shift values of Index.
 |      DatetimeIndex.shift : Shift values of DatetimeIndex.
 |      PeriodIndex.shift : Shift values of PeriodIndex.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"Col1": [10, 20, 15, 30, 45],
 |      ...                    "Col2": [13, 23, 18, 33, 48],
 |      ...                    "Col3": [17, 27, 22, 37, 52]},
 |      ...                   index=pd.date_range("2020-01-01", "2020-01-05"))
 |      >>> df
 |                  Col1  Col2  Col3
 |      2020-01-01    10    13    17
 |      2020-01-02    20    23    27
 |      2020-01-03    15    18    22
 |      2020-01-04    30    33    37
 |      2020-01-05    45    48    52
 |      
 |      >>> df.shift(periods=3)
 |                  Col1  Col2  Col3
 |      2020-01-01   NaN   NaN   NaN
 |      2020-01-02   NaN   NaN   NaN
 |      2020-01-03   NaN   NaN   NaN
 |      2020-01-04  10.0  13.0  17.0
 |      2020-01-05  20.0  23.0  27.0
 |      
 |      >>> df.shift(periods=1, axis="columns")
 |                  Col1  Col2  Col3
 |      2020-01-01   NaN    10    13
 |      2020-01-02   NaN    20    23
 |      2020-01-03   NaN    15    18
 |      2020-01-04   NaN    30    33
 |      2020-01-05   NaN    45    48
 |      
 |      >>> df.shift(periods=3, fill_value=0)
 |                  Col1  Col2  Col3
 |      2020-01-01     0     0     0
 |      2020-01-02     0     0     0
 |      2020-01-03     0     0     0
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      
 |      >>> df.shift(periods=3, freq="D")
 |                  Col1  Col2  Col3
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      2020-01-06    15    18    22
 |      2020-01-07    30    33    37
 |      2020-01-08    45    48    52
 |      
 |      >>> df.shift(periods=3, freq="infer")
 |                  Col1  Col2  Col3
 |      2020-01-04    10    13    17
 |      2020-01-05    20    23    27
 |      2020-01-06    15    18    22
 |      2020-01-07    30    33    37
 |      2020-01-08    45    48    52
 |      
 |      >>> df['Col1'].shift(periods=[0, 1, 2])
 |                  Col1_0  Col1_1  Col1_2
 |      2020-01-01      10     NaN     NaN
 |      2020-01-02      20    10.0     NaN
 |      2020-01-03      15    20.0    10.0
 |      2020-01-04      30    15.0    20.0
 |      2020-01-05      45    30.0    15.0
 |  
 |  squeeze(self, axis: 'Axis | None' = None)
 |      Squeeze 1 dimensional axis objects into scalars.
 |      
 |      Series or DataFrames with a single element are squeezed to a scalar.
 |      DataFrames with a single column or a single row are squeezed to a
 |      Series. Otherwise the object is unchanged.
 |      
 |      This method is most useful when you don't know if your
 |      object is a Series or DataFrame, but you do know it has just a single
 |      column. In that case you can safely call `squeeze` to ensure you have a
 |      Series.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns', None}, default None
 |          A specific axis to squeeze. By default, all length-1 axes are
 |          squeezed. For `Series` this parameter is unused and defaults to `None`.
 |      
 |      Returns
 |      -------
 |      DataFrame, Series, or scalar
 |          The projection after squeezing `axis` or all the axes.
 |      
 |      See Also
 |      --------
 |      Series.iloc : Integer-location based indexing for selecting scalars.
 |      DataFrame.iloc : Integer-location based indexing for selecting Series.
 |      Series.to_frame : Inverse of DataFrame.squeeze for a
 |          single-column DataFrame.
 |      
 |      Examples
 |      --------
 |      >>> primes = pd.Series([2, 3, 5, 7])
 |      
 |      Slicing might produce a Series with a single value:
 |      
 |      >>> even_primes = primes[primes % 2 == 0]
 |      >>> even_primes
 |      0    2
 |      dtype: int64
 |      
 |      >>> even_primes.squeeze()
 |      2
 |      
 |      Squeezing objects with more than one value in every axis does nothing:
 |      
 |      >>> odd_primes = primes[primes % 2 == 1]
 |      >>> odd_primes
 |      1    3
 |      2    5
 |      3    7
 |      dtype: int64
 |      
 |      >>> odd_primes.squeeze()
 |      1    3
 |      2    5
 |      3    7
 |      dtype: int64
 |      
 |      Squeezing is even more effective when used with DataFrames.
 |      
 |      >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])
 |      >>> df
 |         a  b
 |      0  1  2
 |      1  3  4
 |      
 |      Slicing a single column will produce a DataFrame with the columns
 |      having only one value:
 |      
 |      >>> df_a = df[['a']]
 |      >>> df_a
 |         a
 |      0  1
 |      1  3
 |      
 |      So the columns can be squeezed down, resulting in a Series:
 |      
 |      >>> df_a.squeeze('columns')
 |      0    1
 |      1    3
 |      Name: a, dtype: int64
 |      
 |      Slicing a single row from a single column will produce a single
 |      scalar DataFrame:
 |      
 |      >>> df_0a = df.loc[df.index < 1, ['a']]
 |      >>> df_0a
 |         a
 |      0  1
 |      
 |      Squeezing the rows produces a single scalar Series:
 |      
 |      >>> df_0a.squeeze('rows')
 |      a    1
 |      Name: 0, dtype: int64
 |      
 |      Squeezing all axes will project directly into a scalar:
 |      
 |      >>> df_0a.squeeze()
 |      1
 |  
 |  swapaxes(self, axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -> 'Self'
 |      Interchange axes and swap values axes appropriately.
 |      
 |      .. deprecated:: 2.1.0
 |          ``swapaxes`` is deprecated and will be removed.
 |          Please use ``transpose`` instead.
 |      
 |      Returns
 |      -------
 |      same as input
 |      
 |      Examples
 |      --------
 |      Please see examples for :meth:`DataFrame.transpose`.
 |  
 |  tail(self, n: 'int' = 5) -> 'Self'
 |      Return the last `n` rows.
 |      
 |      This function returns last `n` rows from the object based on
 |      position. It is useful for quickly verifying data, for example,
 |      after sorting or appending rows.
 |      
 |      For negative values of `n`, this function returns all rows except
 |      the first `|n|` rows, equivalent to ``df[|n|:]``.
 |      
 |      If n is larger than the number of rows, this function returns all rows.
 |      
 |      Parameters
 |      ----------
 |      n : int, default 5
 |          Number of rows to select.
 |      
 |      Returns
 |      -------
 |      type of caller
 |          The last `n` rows of the caller object.
 |      
 |      See Also
 |      --------
 |      DataFrame.head : The first `n` rows of the caller object.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',
 |      ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})
 |      >>> df
 |            animal
 |      0  alligator
 |      1        bee
 |      2     falcon
 |      3       lion
 |      4     monkey
 |      5     parrot
 |      6      shark
 |      7      whale
 |      8      zebra
 |      
 |      Viewing the last 5 lines
 |      
 |      >>> df.tail()
 |         animal
 |      4  monkey
 |      5  parrot
 |      6   shark
 |      7   whale
 |      8   zebra
 |      
 |      Viewing the last `n` lines (three in this case)
 |      
 |      >>> df.tail(3)
 |        animal
 |      6  shark
 |      7  whale
 |      8  zebra
 |      
 |      For negative values of `n`
 |      
 |      >>> df.tail(-3)
 |         animal
 |      3    lion
 |      4  monkey
 |      5  parrot
 |      6   shark
 |      7   whale
 |      8   zebra
 |  
 |  take(self, indices, axis: 'Axis' = 0, **kwargs) -> 'Self'
 |      Return the elements in the given *positional* indices along an axis.
 |      
 |      This means that we are not indexing according to actual values in
 |      the index attribute of the object. We are indexing according to the
 |      actual position of the element in the object.
 |      
 |      Parameters
 |      ----------
 |      indices : array-like
 |          An array of ints indicating which positions to take.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          The axis on which to select elements. ``0`` means that we are
 |          selecting rows, ``1`` means that we are selecting columns.
 |          For `Series` this parameter is unused and defaults to 0.
 |      **kwargs
 |          For compatibility with :meth:`numpy.take`. Has no effect on the
 |          output.
 |      
 |      Returns
 |      -------
 |      same type as caller
 |          An array-like containing the elements taken from the object.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Select a subset of a DataFrame by labels.
 |      DataFrame.iloc : Select a subset of a DataFrame by positions.
 |      numpy.take : Take elements from an array along an axis.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('falcon', 'bird', 389.0),
 |      ...                    ('parrot', 'bird', 24.0),
 |      ...                    ('lion', 'mammal', 80.5),
 |      ...                    ('monkey', 'mammal', np.nan)],
 |      ...                   columns=['name', 'class', 'max_speed'],
 |      ...                   index=[0, 2, 3, 1])
 |      >>> df
 |           name   class  max_speed
 |      0  falcon    bird      389.0
 |      2  parrot    bird       24.0
 |      3    lion  mammal       80.5
 |      1  monkey  mammal        NaN
 |      
 |      Take elements at positions 0 and 3 along the axis 0 (default).
 |      
 |      Note how the actual indices selected (0 and 1) do not correspond to
 |      our selected indices 0 and 3. That's because we are selecting the 0th
 |      and 3rd rows, not rows whose indices equal 0 and 3.
 |      
 |      >>> df.take([0, 3])
 |           name   class  max_speed
 |      0  falcon    bird      389.0
 |      1  monkey  mammal        NaN
 |      
 |      Take elements at indices 1 and 2 along the axis 1 (column selection).
 |      
 |      >>> df.take([1, 2], axis=1)
 |          class  max_speed
 |      0    bird      389.0
 |      2    bird       24.0
 |      3  mammal       80.5
 |      1  mammal        NaN
 |      
 |      We may take elements using negative integers for positive indices,
 |      starting from the end of the object, just like with Python lists.
 |      
 |      >>> df.take([-1, -2])
 |           name   class  max_speed
 |      1  monkey  mammal        NaN
 |      3    lion  mammal       80.5
 |  
 |  to_clipboard(self, *, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -> 'None'
 |      Copy object to the system clipboard.
 |      
 |      Write a text representation of object to the system clipboard.
 |      This can be pasted into Excel, for example.
 |      
 |      Parameters
 |      ----------
 |      excel : bool, default True
 |          Produce output in a csv format for easy pasting into excel.
 |      
 |          - True, use the provided separator for csv pasting.
 |          - False, write a string representation of the object to the clipboard.
 |      
 |      sep : str, default ``'\t'``
 |          Field delimiter.
 |      **kwargs
 |          These parameters will be passed to DataFrame.to_csv.
 |      
 |      See Also
 |      --------
 |      DataFrame.to_csv : Write a DataFrame to a comma-separated values
 |          (csv) file.
 |      read_clipboard : Read text from clipboard and pass to read_csv.
 |      
 |      Notes
 |      -----
 |      Requirements for your platform.
 |      
 |        - Linux : `xclip`, or `xsel` (with `PyQt4` modules)
 |        - Windows : none
 |        - macOS : none
 |      
 |      This method uses the processes developed for the package `pyperclip`. A
 |      solution to render any output string format is given in the examples.
 |      
 |      Examples
 |      --------
 |      Copy the contents of a DataFrame to the clipboard.
 |      
 |      >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])
 |      
 |      >>> df.to_clipboard(sep=',')  # doctest: +SKIP
 |      ... # Wrote the following to the system clipboard:
 |      ... # ,A,B,C
 |      ... # 0,1,2,3
 |      ... # 1,4,5,6
 |      
 |      We can omit the index by passing the keyword `index` and setting
 |      it to false.
 |      
 |      >>> df.to_clipboard(sep=',', index=False)  # doctest: +SKIP
 |      ... # Wrote the following to the system clipboard:
 |      ... # A,B,C
 |      ... # 1,2,3
 |      ... # 4,5,6
 |      
 |      Using the original `pyperclip` package for any string output format.
 |      
 |      .. code-block:: python
 |      
 |         import pyperclip
 |         html = df.style.to_html()
 |         pyperclip.copy(html)
 |  
 |  to_csv(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -> 'str | None'
 |      Write object to a comma-separated values (csv) file.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str, path object, file-like object, or None, default None
 |          String, path object (implementing os.PathLike[str]), or file-like
 |          object implementing a write() function. If None, the result is
 |          returned as a string. If a non-binary file object is passed, it should
 |          be opened with `newline=''`, disabling universal newlines. If a binary
 |          file object is passed, `mode` might need to contain a `'b'`.
 |      sep : str, default ','
 |          String of length 1. Field delimiter for the output file.
 |      na_rep : str, default ''
 |          Missing data representation.
 |      float_format : str, Callable, default None
 |          Format string for floating point numbers. If a Callable is given, it takes
 |          precedence over other numeric formatting parameters, like decimal.
 |      columns : sequence, optional
 |          Columns to write.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of strings is given it is
 |          assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      index_label : str or sequence, or False, default None
 |          Column label for index column(s) if desired. If None is given, and
 |          `header` and `index` are True, then the index names are used. A
 |          sequence should be given if the object uses MultiIndex. If
 |          False do not print fields for index names. Use index_label=False
 |          for easier importing in R.
 |      mode : {'w', 'x', 'a'}, default 'w'
 |          Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control
 |          the file opening. Typical values include:
 |      
 |          - 'w', truncate the file first.
 |          - 'x', exclusive creation, failing if the file already exists.
 |          - 'a', append to the end of file if it exists.
 |      
 |      encoding : str, optional
 |          A string representing the encoding to use in the output file,
 |          defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`
 |          is a non-binary file object.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      
 |             May be a dict with key 'method' as compression mode
 |             and other entries as additional compression options if
 |             compression mode is 'zip'.
 |      
 |             Passing compression options as keys in dict is
 |             supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.
 |      quoting : optional constant from csv module
 |          Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`
 |          then floats are converted to strings and thus csv.QUOTE_NONNUMERIC
 |          will treat them as non-numeric.
 |      quotechar : str, default '\"'
 |          String of length 1. Character used to quote fields.
 |      lineterminator : str, optional
 |          The newline character or character sequence to use in the output
 |          file. Defaults to `os.linesep`, which depends on the OS in which
 |          this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).
 |      
 |          .. versionchanged:: 1.5.0
 |      
 |              Previously was line_terminator, changed for consistency with
 |              read_csv and the standard library 'csv' module.
 |      
 |      chunksize : int or None
 |          Rows to write at a time.
 |      date_format : str, default None
 |          Format string for datetime objects.
 |      doublequote : bool, default True
 |          Control quoting of `quotechar` inside a field.
 |      escapechar : str, default None
 |          String of length 1. Character used to escape `sep` and `quotechar`
 |          when appropriate.
 |      decimal : str, default '.'
 |          Character recognized as decimal separator. E.g. use ',' for
 |          European data.
 |      errors : str, default 'strict'
 |          Specifies how encoding and decoding errors are to be handled.
 |          See the errors argument for :func:`open` for a full list
 |          of options.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      Returns
 |      -------
 |      None or str
 |          If path_or_buf is None, returns the resulting csv format as a
 |          string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      read_csv : Load a CSV file into a DataFrame.
 |      to_excel : Write DataFrame to an Excel file.
 |      
 |      Examples
 |      --------
 |      Create 'out.csv' containing 'df' without indices
 |      
 |      >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],
 |      ...                    'mask': ['red', 'purple'],
 |      ...                    'weapon': ['sai', 'bo staff']})
 |      >>> df.to_csv('out.csv', index=False)  # doctest: +SKIP
 |      
 |      Create 'out.zip' containing 'out.csv'
 |      
 |      >>> df.to_csv(index=False)
 |      'name,mask,weapon\nRaphael,red,sai\nDonatello,purple,bo staff\n'
 |      >>> compression_opts = dict(method='zip',
 |      ...                         archive_name='out.csv')  # doctest: +SKIP
 |      >>> df.to_csv('out.zip', index=False,
 |      ...           compression=compression_opts)  # doctest: +SKIP
 |      
 |      To write a csv file to a new folder or nested folder you will first
 |      need to create it using either Pathlib or os:
 |      
 |      >>> from pathlib import Path  # doctest: +SKIP
 |      >>> filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP
 |      >>> filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP
 |      >>> df.to_csv(filepath)  # doctest: +SKIP
 |      
 |      >>> import os  # doctest: +SKIP
 |      >>> os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP
 |      >>> df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP
 |  
 |  to_excel(self, excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: "Literal['openpyxl', 'xlsxwriter'] | None" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'None'
 |      Write object to an Excel sheet.
 |      
 |      To write a single object to an Excel .xlsx file it is only necessary to
 |      specify a target file name. To write to multiple sheets it is necessary to
 |      create an `ExcelWriter` object with a target file name, and specify a sheet
 |      in the file to write to.
 |      
 |      Multiple sheets may be written to by specifying unique `sheet_name`.
 |      With all data written to the file it is necessary to save the changes.
 |      Note that creating an `ExcelWriter` object with a file name that already
 |      exists will result in the contents of the existing file being erased.
 |      
 |      Parameters
 |      ----------
 |      excel_writer : path-like, file-like, or ExcelWriter object
 |          File path or existing ExcelWriter.
 |      sheet_name : str, default 'Sheet1'
 |          Name of sheet which will contain DataFrame.
 |      na_rep : str, default ''
 |          Missing data representation.
 |      float_format : str, optional
 |          Format string for floating point numbers. For example
 |          ``float_format="%.2f"`` will format 0.1234 to 0.12.
 |      columns : sequence or list of str, optional
 |          Columns to write.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of string is given it is
 |          assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      index_label : str or sequence, optional
 |          Column label for index column(s) if desired. If not specified, and
 |          `header` and `index` are True, then the index names are used. A
 |          sequence should be given if the DataFrame uses MultiIndex.
 |      startrow : int, default 0
 |          Upper left cell row to dump data frame.
 |      startcol : int, default 0
 |          Upper left cell column to dump data frame.
 |      engine : str, optional
 |          Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this
 |          via the options ``io.excel.xlsx.writer`` or
 |          ``io.excel.xlsm.writer``.
 |      
 |      merge_cells : bool, default True
 |          Write MultiIndex and Hierarchical Rows as merged cells.
 |      inf_rep : str, default 'inf'
 |          Representation for infinity (there is no native representation for
 |          infinity in Excel).
 |      freeze_panes : tuple of int (length 2), optional
 |          Specifies the one-based bottommost row and rightmost column that
 |          is to be frozen.
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |          .. versionadded:: 1.2.0
 |      engine_kwargs : dict, optional
 |          Arbitrary keyword arguments passed to excel engine.
 |      
 |      See Also
 |      --------
 |      to_csv : Write DataFrame to a comma-separated values (csv) file.
 |      ExcelWriter : Class for writing DataFrame objects into excel sheets.
 |      read_excel : Read an Excel file into a pandas DataFrame.
 |      read_csv : Read a comma-separated values (csv) file into DataFrame.
 |      io.formats.style.Styler.to_excel : Add styles to Excel sheet.
 |      
 |      Notes
 |      -----
 |      For compatibility with :meth:`~DataFrame.to_csv`,
 |      to_excel serializes lists and dicts to strings before writing.
 |      
 |      Once a workbook has been saved it is not possible to write further
 |      data without rewriting the whole workbook.
 |      
 |      Examples
 |      --------
 |      
 |      Create, write to and save a workbook:
 |      
 |      >>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],
 |      ...                    index=['row 1', 'row 2'],
 |      ...                    columns=['col 1', 'col 2'])
 |      >>> df1.to_excel("output.xlsx")  # doctest: +SKIP
 |      
 |      To specify the sheet name:
 |      
 |      >>> df1.to_excel("output.xlsx",
 |      ...              sheet_name='Sheet_name_1')  # doctest: +SKIP
 |      
 |      If you wish to write to more than one sheet in the workbook, it is
 |      necessary to specify an ExcelWriter object:
 |      
 |      >>> df2 = df1.copy()
 |      >>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP
 |      ...     df1.to_excel(writer, sheet_name='Sheet_name_1')
 |      ...     df2.to_excel(writer, sheet_name='Sheet_name_2')
 |      
 |      ExcelWriter can also be used to append to an existing Excel file:
 |      
 |      >>> with pd.ExcelWriter('output.xlsx',
 |      ...                     mode='a') as writer:  # doctest: +SKIP
 |      ...     df1.to_excel(writer, sheet_name='Sheet_name_3')
 |      
 |      To set the library that is used to write the Excel file,
 |      you can pass the `engine` keyword (the default engine is
 |      automatically chosen depending on the file extension):
 |      
 |      >>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP
 |  
 |  to_hdf(self, path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: "Literal['a', 'w', 'r+']" = 'a', complevel: 'int | None' = None, complib: "Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None" = None, append: 'bool_t' = False, format: "Literal['fixed', 'table'] | None" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -> 'None'
 |      Write the contained data to an HDF5 file using HDFStore.
 |      
 |      Hierarchical Data Format (HDF) is self-describing, allowing an
 |      application to interpret the structure and contents of a file with
 |      no outside information. One HDF file can hold a mix of related objects
 |      which can be accessed as a group or as individual objects.
 |      
 |      In order to add another DataFrame or Series to an existing HDF file
 |      please use append mode and a different a key.
 |      
 |      .. warning::
 |      
 |         One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,
 |         but the type of the subclass is lost upon storing.
 |      
 |      For more information see the :ref:`user guide <io.hdf5>`.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str or pandas.HDFStore
 |          File path or HDFStore object.
 |      key : str
 |          Identifier for the group in the store.
 |      mode : {'a', 'w', 'r+'}, default 'a'
 |          Mode to open file:
 |      
 |          - 'w': write, a new file is created (an existing file with
 |            the same name would be deleted).
 |          - 'a': append, an existing file is opened for reading and
 |            writing, and if the file does not exist it is created.
 |          - 'r+': similar to 'a', but the file must already exist.
 |      complevel : {0-9}, default None
 |          Specifies a compression level for data.
 |          A value of 0 or None disables compression.
 |      complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'
 |          Specifies the compression library to be used.
 |          These additional compressors for Blosc are supported
 |          (default if no compressor specified: 'blosc:blosclz'):
 |          {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',
 |          'blosc:zlib', 'blosc:zstd'}.
 |          Specifying a compression library which is not available issues
 |          a ValueError.
 |      append : bool, default False
 |          For Table formats, append the input data to the existing.
 |      format : {'fixed', 'table', None}, default 'fixed'
 |          Possible values:
 |      
 |          - 'fixed': Fixed format. Fast writing/reading. Not-appendable,
 |            nor searchable.
 |          - 'table': Table format. Write as a PyTables Table structure
 |            which may perform worse but allow more flexible operations
 |            like searching / selecting subsets of the data.
 |          - If None, pd.get_option('io.hdf.default_format') is checked,
 |            followed by fallback to "fixed".
 |      index : bool, default True
 |          Write DataFrame index as a column.
 |      min_itemsize : dict or int, optional
 |          Map column names to minimum string sizes for columns.
 |      nan_rep : Any, optional
 |          How to represent null values as str.
 |          Not allowed with append=True.
 |      dropna : bool, default False, optional
 |          Remove missing values.
 |      data_columns : list of columns or True, optional
 |          List of columns to create as indexed data columns for on-disk
 |          queries, or True to use all columns. By default only the axes
 |          of the object are indexed. See
 |          :ref:`Query via data columns<io.hdf5-query-data-columns>`. for
 |          more information.
 |          Applicable only to format='table'.
 |      errors : str, default 'strict'
 |          Specifies how encoding and decoding errors are to be handled.
 |          See the errors argument for :func:`open` for a full list
 |          of options.
 |      encoding : str, default "UTF-8"
 |      
 |      See Also
 |      --------
 |      read_hdf : Read from HDF file.
 |      DataFrame.to_orc : Write a DataFrame to the binary orc format.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      DataFrame.to_sql : Write to a SQL table.
 |      DataFrame.to_feather : Write out feather-format for DataFrames.
 |      DataFrame.to_csv : Write out to a csv file.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},
 |      ...                   index=['a', 'b', 'c'])  # doctest: +SKIP
 |      >>> df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP
 |      
 |      We can add another object to the same file:
 |      
 |      >>> s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP
 |      >>> s.to_hdf('data.h5', key='s')  # doctest: +SKIP
 |      
 |      Reading from HDF file:
 |      
 |      >>> pd.read_hdf('data.h5', 'df')  # doctest: +SKIP
 |      A  B
 |      a  1  4
 |      b  2  5
 |      c  3  6
 |      >>> pd.read_hdf('data.h5', 's')  # doctest: +SKIP
 |      0    1
 |      1    2
 |      2    3
 |      3    4
 |      dtype: int64
 |  
 |  to_json(self, path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: "Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: "Literal['a', 'w']" = 'w') -> 'str | None'
 |      Convert the object to a JSON string.
 |      
 |      Note NaN's and None will be converted to null and datetime objects
 |      will be converted to UNIX timestamps.
 |      
 |      Parameters
 |      ----------
 |      path_or_buf : str, path object, file-like object, or None, default None
 |          String, path object (implementing os.PathLike[str]), or file-like
 |          object implementing a write() function. If None, the result is
 |          returned as a string.
 |      orient : str
 |          Indication of expected JSON string format.
 |      
 |          * Series:
 |      
 |              - default is 'index'
 |              - allowed values are: {'split', 'records', 'index', 'table'}.
 |      
 |          * DataFrame:
 |      
 |              - default is 'columns'
 |              - allowed values are: {'split', 'records', 'index', 'columns',
 |                'values', 'table'}.
 |      
 |          * The format of the JSON string:
 |      
 |              - 'split' : dict like {'index' -> [index], 'columns' -> [columns],
 |                'data' -> [values]}
 |              - 'records' : list like [{column -> value}, ... , {column -> value}]
 |              - 'index' : dict like {index -> {column -> value}}
 |              - 'columns' : dict like {column -> {index -> value}}
 |              - 'values' : just the values array
 |              - 'table' : dict like {'schema': {schema}, 'data': {data}}
 |      
 |              Describing the data, where data component is like ``orient='records'``.
 |      
 |      date_format : {None, 'epoch', 'iso'}
 |          Type of date conversion. 'epoch' = epoch milliseconds,
 |          'iso' = ISO8601. The default depends on the `orient`. For
 |          ``orient='table'``, the default is 'iso'. For all other orients,
 |          the default is 'epoch'.
 |      double_precision : int, default 10
 |          The number of decimal places to use when encoding
 |          floating point values. The possible maximal value is 15.
 |          Passing double_precision greater than 15 will raise a ValueError.
 |      force_ascii : bool, default True
 |          Force encoded string to be ASCII.
 |      date_unit : str, default 'ms' (milliseconds)
 |          The time unit to encode to, governs timestamp and ISO8601
 |          precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,
 |          microsecond, and nanosecond respectively.
 |      default_handler : callable, default None
 |          Handler to call if object cannot otherwise be converted to a
 |          suitable format for JSON. Should receive a single argument which is
 |          the object to convert and return a serialisable object.
 |      lines : bool, default False
 |          If 'orient' is 'records' write out line-delimited json format. Will
 |          throw ValueError if incorrect 'orient' since others are not
 |          list-like.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      
 |          .. versionchanged:: 1.4.0 Zstandard support.
 |      
 |      index : bool or None, default None
 |          The index is only used when 'orient' is 'split', 'index', 'column',
 |          or 'table'. Of these, 'index' and 'column' do not support
 |          `index=False`.
 |      
 |      indent : int, optional
 |         Length of whitespace used to indent each record.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      mode : str, default 'w' (writing)
 |          Specify the IO mode for output when supplying a path_or_buf.
 |          Accepted args are 'w' (writing) and 'a' (append) only.
 |          mode='a' is only supported when lines is True and orient is 'records'.
 |      
 |      Returns
 |      -------
 |      None or str
 |          If path_or_buf is None, returns the resulting json format as a
 |          string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      read_json : Convert a JSON string to pandas object.
 |      
 |      Notes
 |      -----
 |      The behavior of ``indent=0`` varies from the stdlib, which does not
 |      indent the output but does insert newlines. Currently, ``indent=0``
 |      and the default ``indent=None`` are equivalent in pandas, though this
 |      may change in a future release.
 |      
 |      ``orient='table'`` contains a 'pandas_version' field under 'schema'.
 |      This stores the version of `pandas` used in the latest revision of the
 |      schema.
 |      
 |      Examples
 |      --------
 |      >>> from json import loads, dumps
 |      >>> df = pd.DataFrame(
 |      ...     [["a", "b"], ["c", "d"]],
 |      ...     index=["row 1", "row 2"],
 |      ...     columns=["col 1", "col 2"],
 |      ... )
 |      
 |      >>> result = df.to_json(orient="split")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "columns": [
 |              "col 1",
 |              "col 2"
 |          ],
 |          "index": [
 |              "row 1",
 |              "row 2"
 |          ],
 |          "data": [
 |              [
 |                  "a",
 |                  "b"
 |              ],
 |              [
 |                  "c",
 |                  "d"
 |              ]
 |          ]
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'records'`` formatted JSON.
 |      Note that index labels are not preserved with this encoding.
 |      
 |      >>> result = df.to_json(orient="records")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      [
 |          {
 |              "col 1": "a",
 |              "col 2": "b"
 |          },
 |          {
 |              "col 1": "c",
 |              "col 2": "d"
 |          }
 |      ]
 |      
 |      Encoding/decoding a Dataframe using ``'index'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="index")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "row 1": {
 |              "col 1": "a",
 |              "col 2": "b"
 |          },
 |          "row 2": {
 |              "col 1": "c",
 |              "col 2": "d"
 |          }
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="columns")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "col 1": {
 |              "row 1": "a",
 |              "row 2": "c"
 |          },
 |          "col 2": {
 |              "row 1": "b",
 |              "row 2": "d"
 |          }
 |      }
 |      
 |      Encoding/decoding a Dataframe using ``'values'`` formatted JSON:
 |      
 |      >>> result = df.to_json(orient="values")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      [
 |          [
 |              "a",
 |              "b"
 |          ],
 |          [
 |              "c",
 |              "d"
 |          ]
 |      ]
 |      
 |      Encoding with Table Schema:
 |      
 |      >>> result = df.to_json(orient="table")
 |      >>> parsed = loads(result)
 |      >>> dumps(parsed, indent=4)  # doctest: +SKIP
 |      {
 |          "schema": {
 |              "fields": [
 |                  {
 |                      "name": "index",
 |                      "type": "string"
 |                  },
 |                  {
 |                      "name": "col 1",
 |                      "type": "string"
 |                  },
 |                  {
 |                      "name": "col 2",
 |                      "type": "string"
 |                  }
 |              ],
 |              "primaryKey": [
 |                  "index"
 |              ],
 |              "pandas_version": "1.4.0"
 |          },
 |          "data": [
 |              {
 |                  "index": "row 1",
 |                  "col 1": "a",
 |                  "col 2": "b"
 |              },
 |              {
 |                  "index": "row 2",
 |                  "col 1": "c",
 |                  "col 2": "d"
 |              }
 |          ]
 |      }
 |  
 |  to_latex(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -> 'str | None'
 |      Render object to a LaTeX tabular, longtable, or nested table.
 |      
 |      Requires ``\usepackage{{booktabs}}``.  The output can be copy/pasted
 |      into a main LaTeX document or read from an external file
 |      with ``\input{{table.tex}}``.
 |      
 |      .. versionchanged:: 2.0.0
 |         Refactored to use the Styler implementation via jinja2 templating.
 |      
 |      Parameters
 |      ----------
 |      buf : str, Path or StringIO-like, optional, default None
 |          Buffer to write to. If None, the output is returned as a string.
 |      columns : list of label, optional
 |          The subset of columns to write. Writes all columns by default.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of strings is given,
 |          it is assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      na_rep : str, default 'NaN'
 |          Missing data representation.
 |      formatters : list of functions or dict of {{str: function}}, optional
 |          Formatter functions to apply to columns' elements by position or
 |          name. The result of each function must be a unicode string.
 |          List must be of length equal to the number of columns.
 |      float_format : one-parameter function or str, optional, default None
 |          Formatter for floating point numbers. For example
 |          ``float_format="%.2f"`` and ``float_format="{{:0.2f}}".format`` will
 |          both result in 0.1234 being formatted as 0.12.
 |      sparsify : bool, optional
 |          Set to False for a DataFrame with a hierarchical index to print
 |          every multiindex key at each row. By default, the value will be
 |          read from the config module.
 |      index_names : bool, default True
 |          Prints the names of the indexes.
 |      bold_rows : bool, default False
 |          Make the row labels bold in the output.
 |      column_format : str, optional
 |          The columns format as specified in `LaTeX table format
 |          <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3
 |          columns. By default, 'l' will be used for all columns except
 |          columns of numbers, which default to 'r'.
 |      longtable : bool, optional
 |          Use a longtable environment instead of tabular. Requires
 |          adding a \usepackage{{longtable}} to your LaTeX preamble.
 |          By default, the value will be read from the pandas config
 |          module, and set to `True` if the option ``styler.latex.environment`` is
 |          `"longtable"`.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed.
 |      escape : bool, optional
 |          By default, the value will be read from the pandas config
 |          module and set to `True` if the option ``styler.format.escape`` is
 |          `"latex"`. When set to False prevents from escaping latex special
 |          characters in column names.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to `False`.
 |      encoding : str, optional
 |          A string representing the encoding to use in the output file,
 |          defaults to 'utf-8'.
 |      decimal : str, default '.'
 |          Character recognized as decimal separator, e.g. ',' in Europe.
 |      multicolumn : bool, default True
 |          Use \multicolumn to enhance MultiIndex columns.
 |          The default will be read from the config module, and is set
 |          as the option ``styler.sparse.columns``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed.
 |      multicolumn_format : str, default 'r'
 |          The alignment for multicolumns, similar to `column_format`
 |          The default will be read from the config module, and is set as the option
 |          ``styler.latex.multicol_align``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to "r".
 |      multirow : bool, default True
 |          Use \multirow to enhance MultiIndex rows. Requires adding a
 |          \usepackage{{multirow}} to your LaTeX preamble. Will print
 |          centered labels (instead of top-aligned) across the contained
 |          rows, separating groups via clines. The default will be read
 |          from the pandas config module, and is set as the option
 |          ``styler.sparse.index``.
 |      
 |          .. versionchanged:: 2.0.0
 |             The pandas option affecting this argument has changed, as has the
 |             default value to `True`.
 |      caption : str or tuple, optional
 |          Tuple (full_caption, short_caption),
 |          which results in ``\caption[short_caption]{{full_caption}}``;
 |          if a single string is passed, no short caption will be set.
 |      label : str, optional
 |          The LaTeX label to be placed inside ``\label{{}}`` in the output.
 |          This is used with ``\ref{{}}`` in the main ``.tex`` file.
 |      
 |      position : str, optional
 |          The LaTeX positional argument for tables, to be placed after
 |          ``\begin{{}}`` in the output.
 |      
 |      Returns
 |      -------
 |      str or None
 |          If buf is None, returns the result as a string. Otherwise returns None.
 |      
 |      See Also
 |      --------
 |      io.formats.style.Styler.to_latex : Render a DataFrame to LaTeX
 |          with conditional formatting.
 |      DataFrame.to_string : Render a DataFrame to a console-friendly
 |          tabular output.
 |      DataFrame.to_html : Render a DataFrame as an HTML table.
 |      
 |      Notes
 |      -----
 |      As of v2.0.0 this method has changed to use the Styler implementation as
 |      part of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means
 |      that ``jinja2`` is a requirement, and needs to be installed, for this method
 |      to function. It is advised that users switch to using Styler, since that
 |      implementation is more frequently updated and contains much more
 |      flexibility with the output.
 |      
 |      Examples
 |      --------
 |      Convert a general DataFrame to LaTeX with formatting:
 |      
 |      >>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],
 |      ...                        age=[26, 45],
 |      ...                        height=[181.23, 177.65]))
 |      >>> print(df.to_latex(index=False,
 |      ...                   formatters={"name": str.upper},
 |      ...                   float_format="{:.1f}".format,
 |      ... ))  # doctest: +SKIP
 |      \begin{tabular}{lrr}
 |      \toprule
 |      name & age & height \\
 |      \midrule
 |      RAPHAEL & 26 & 181.2 \\
 |      DONATELLO & 45 & 177.7 \\
 |      \bottomrule
 |      \end{tabular}
 |  
 |  to_pickle(self, path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -> 'None'
 |      Pickle (serialize) object to file.
 |      
 |      Parameters
 |      ----------
 |      path : str, path object, or file-like object
 |          String, path object (implementing ``os.PathLike[str]``), or file-like
 |          object implementing a binary ``write()`` function. File path where
 |          the pickled object will be stored.
 |      compression : str or dict, default 'infer'
 |          For on-the-fly compression of the output data. If 'infer' and 'path' is
 |          path-like, then detect compression from the following extensions: '.gz',
 |          '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
 |          (otherwise no compression).
 |          Set to ``None`` for no compression.
 |          Can also be a dict with key ``'method'`` set
 |          to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
 |          other key-value pairs are forwarded to
 |          ``zipfile.ZipFile``, ``gzip.GzipFile``,
 |          ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
 |          ``tarfile.TarFile``, respectively.
 |          As an example, the following could be passed for faster compression and to create
 |          a reproducible gzip archive:
 |          ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
 |      
 |          .. versionadded:: 1.5.0
 |              Added support for `.tar` files.
 |      protocol : int
 |          Int which indicates which protocol should be used by the pickler,
 |          default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible
 |          values are 0, 1, 2, 3, 4, 5. A negative value for the protocol
 |          parameter is equivalent to setting its value to HIGHEST_PROTOCOL.
 |      
 |          .. [1] https://docs.python.org/3/library/pickle.html.
 |      
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |      See Also
 |      --------
 |      read_pickle : Load pickled pandas object (or any object) from file.
 |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.
 |      DataFrame.to_sql : Write DataFrame to a SQL database.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      
 |      Examples
 |      --------
 |      >>> original_df = pd.DataFrame({"foo": range(5), "bar": range(5, 10)})  # doctest: +SKIP
 |      >>> original_df  # doctest: +SKIP
 |         foo  bar
 |      0    0    5
 |      1    1    6
 |      2    2    7
 |      3    3    8
 |      4    4    9
 |      >>> original_df.to_pickle("./dummy.pkl")  # doctest: +SKIP
 |      
 |      >>> unpickled_df = pd.read_pickle("./dummy.pkl")  # doctest: +SKIP
 |      >>> unpickled_df  # doctest: +SKIP
 |         foo  bar
 |      0    0    5
 |      1    1    6
 |      2    2    7
 |      3    3    8
 |      4    4    9
 |  
 |  to_sql(self, name: 'str', con, *, schema: 'str | None' = None, if_exists: "Literal['fail', 'replace', 'append']" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: "Literal['multi'] | Callable | None" = None) -> 'int | None'
 |      Write records stored in a DataFrame to a SQL database.
 |      
 |      Databases supported by SQLAlchemy [1]_ are supported. Tables can be
 |      newly created, appended to, or overwritten.
 |      
 |      Parameters
 |      ----------
 |      name : str
 |          Name of SQL table.
 |      con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection
 |          Using SQLAlchemy makes it possible to use any DB supported by that
 |          library. Legacy support is provided for sqlite3.Connection objects. The user
 |          is responsible for engine disposal and connection closure for the SQLAlchemy
 |          connectable. See `here                 <https://docs.sqlalchemy.org/en/20/core/connections.html>`_.
 |          If passing a sqlalchemy.engine.Connection which is already in a transaction,
 |          the transaction will not be committed.  If passing a sqlite3.Connection,
 |          it will not be possible to roll back the record insertion.
 |      
 |      schema : str, optional
 |          Specify the schema (if database flavor supports this). If None, use
 |          default schema.
 |      if_exists : {'fail', 'replace', 'append'}, default 'fail'
 |          How to behave if the table already exists.
 |      
 |          * fail: Raise a ValueError.
 |          * replace: Drop the table before inserting new values.
 |          * append: Insert new values to the existing table.
 |      
 |      index : bool, default True
 |          Write DataFrame index as a column. Uses `index_label` as the column
 |          name in the table. Creates a table index for this column.
 |      index_label : str or sequence, default None
 |          Column label for index column(s). If None is given (default) and
 |          `index` is True, then the index names are used.
 |          A sequence should be given if the DataFrame uses MultiIndex.
 |      chunksize : int, optional
 |          Specify the number of rows in each batch to be written at a time.
 |          By default, all rows will be written at once.
 |      dtype : dict or scalar, optional
 |          Specifying the datatype for columns. If a dictionary is used, the
 |          keys should be the column names and the values should be the
 |          SQLAlchemy types or strings for the sqlite3 legacy mode. If a
 |          scalar is provided, it will be applied to all columns.
 |      method : {None, 'multi', callable}, optional
 |          Controls the SQL insertion clause used:
 |      
 |          * None : Uses standard SQL ``INSERT`` clause (one per row).
 |          * 'multi': Pass multiple values in a single ``INSERT`` clause.
 |          * callable with signature ``(pd_table, conn, keys, data_iter)``.
 |      
 |          Details and a sample callable implementation can be found in the
 |          section :ref:`insert method <io.sql.method>`.
 |      
 |      Returns
 |      -------
 |      None or int
 |          Number of rows affected by to_sql. None is returned if the callable
 |          passed into ``method`` does not return an integer number of rows.
 |      
 |          The number of returned rows affected is the sum of the ``rowcount``
 |          attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not
 |          reflect the exact number of written rows as stipulated in the
 |          `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or
 |          `SQLAlchemy <https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount>`__.
 |      
 |          .. versionadded:: 1.4.0
 |      
 |      Raises
 |      ------
 |      ValueError
 |          When the table already exists and `if_exists` is 'fail' (the
 |          default).
 |      
 |      See Also
 |      --------
 |      read_sql : Read a DataFrame from a table.
 |      
 |      Notes
 |      -----
 |      Timezone aware datetime columns will be written as
 |      ``Timestamp with timezone`` type with SQLAlchemy if supported by the
 |      database. Otherwise, the datetimes will be stored as timezone unaware
 |      timestamps local to the original timezone.
 |      
 |      Not all datastores support ``method="multi"``. Oracle, for example,
 |      does not support multi-value insert.
 |      
 |      References
 |      ----------
 |      .. [1] https://docs.sqlalchemy.org
 |      .. [2] https://www.python.org/dev/peps/pep-0249/
 |      
 |      Examples
 |      --------
 |      Create an in-memory SQLite database.
 |      
 |      >>> from sqlalchemy import create_engine
 |      >>> engine = create_engine('sqlite://', echo=False)
 |      
 |      Create a table from scratch with 3 rows.
 |      
 |      >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})
 |      >>> df
 |           name
 |      0  User 1
 |      1  User 2
 |      2  User 3
 |      
 |      >>> df.to_sql(name='users', con=engine)
 |      3
 |      >>> from sqlalchemy import text
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]
 |      
 |      An `sqlalchemy.engine.Connection` can also be passed to `con`:
 |      
 |      >>> with engine.begin() as connection:
 |      ...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})
 |      ...     df1.to_sql(name='users', con=connection, if_exists='append')
 |      2
 |      
 |      This is allowed to support operations that require that the same
 |      DBAPI connection is used for the entire operation.
 |      
 |      >>> df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})
 |      >>> df2.to_sql(name='users', con=engine, if_exists='append')
 |      2
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),
 |       (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),
 |       (1, 'User 7')]
 |      
 |      Overwrite the table with just ``df2``.
 |      
 |      >>> df2.to_sql(name='users', con=engine, if_exists='replace',
 |      ...            index_label='id')
 |      2
 |      >>> with engine.connect() as conn:
 |      ...    conn.execute(text("SELECT * FROM users")).fetchall()
 |      [(0, 'User 6'), (1, 'User 7')]
 |      
 |      Use ``method`` to define a callable insertion method to do nothing
 |      if there's a primary key conflict on a table in a PostgreSQL database.
 |      
 |      >>> from sqlalchemy.dialects.postgresql import insert
 |      >>> def insert_on_conflict_nothing(table, conn, keys, data_iter):
 |      ...     # "a" is the primary key in "conflict_table"
 |      ...     data = [dict(zip(keys, row)) for row in data_iter]
 |      ...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=["a"])
 |      ...     result = conn.execute(stmt)
 |      ...     return result.rowcount
 |      >>> df_conflict.to_sql(name="conflict_table", con=conn, if_exists="append", method=insert_on_conflict_nothing)  # doctest: +SKIP
 |      0
 |      
 |      For MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict
 |      on a primary key.
 |      
 |      >>> from sqlalchemy.dialects.mysql import insert
 |      >>> def insert_on_conflict_update(table, conn, keys, data_iter):
 |      ...     # update columns "b" and "c" on primary key conflict
 |      ...     data = [dict(zip(keys, row)) for row in data_iter]
 |      ...     stmt = (
 |      ...         insert(table.table)
 |      ...         .values(data)
 |      ...     )
 |      ...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)
 |      ...     result = conn.execute(stmt)
 |      ...     return result.rowcount
 |      >>> df_conflict.to_sql(name="conflict_table", con=conn, if_exists="append", method=insert_on_conflict_update)  # doctest: +SKIP
 |      2
 |      
 |      Specify the dtype (especially useful for integers with missing values).
 |      Notice that while pandas is forced to store the data as floating point,
 |      the database supports nullable integers. When fetching the data with
 |      Python, we get back integer scalars.
 |      
 |      >>> df = pd.DataFrame({"A": [1, None, 2]})
 |      >>> df
 |           A
 |      0  1.0
 |      1  NaN
 |      2  2.0
 |      
 |      >>> from sqlalchemy.types import Integer
 |      >>> df.to_sql(name='integers', con=engine, index=False,
 |      ...           dtype={"A": Integer()})
 |      3
 |      
 |      >>> with engine.connect() as conn:
 |      ...   conn.execute(text("SELECT * FROM integers")).fetchall()
 |      [(1,), (None,), (2,)]
 |  
 |  to_xarray(self)
 |      Return an xarray object from the pandas object.
 |      
 |      Returns
 |      -------
 |      xarray.DataArray or xarray.Dataset
 |          Data in the pandas structure converted to Dataset if the object is
 |          a DataFrame, or a DataArray if the object is a Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.to_hdf : Write DataFrame to an HDF5 file.
 |      DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
 |      
 |      Notes
 |      -----
 |      See the `xarray docs <https://xarray.pydata.org/en/stable/>`__
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),
 |      ...                    ('parrot', 'bird', 24.0, 2),
 |      ...                    ('lion', 'mammal', 80.5, 4),
 |      ...                    ('monkey', 'mammal', np.nan, 4)],
 |      ...                   columns=['name', 'class', 'max_speed',
 |      ...                            'num_legs'])
 |      >>> df
 |           name   class  max_speed  num_legs
 |      0  falcon    bird      389.0         2
 |      1  parrot    bird       24.0         2
 |      2    lion  mammal       80.5         4
 |      3  monkey  mammal        NaN         4
 |      
 |      >>> df.to_xarray()  # doctest: +SKIP
 |      <xarray.Dataset>
 |      Dimensions:    (index: 4)
 |      Coordinates:
 |        * index      (index) int64 32B 0 1 2 3
 |      Data variables:
 |          name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'
 |          class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'
 |          max_speed  (index) float64 32B 389.0 24.0 80.5 nan
 |          num_legs   (index) int64 32B 2 2 4 4
 |      
 |      >>> df['max_speed'].to_xarray()  # doctest: +SKIP
 |      <xarray.DataArray 'max_speed' (index: 4)>
 |      array([389. ,  24. ,  80.5,   nan])
 |      Coordinates:
 |        * index    (index) int64 0 1 2 3
 |      
 |      >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',
 |      ...                         '2018-01-02', '2018-01-02'])
 |      >>> df_multiindex = pd.DataFrame({'date': dates,
 |      ...                               'animal': ['falcon', 'parrot',
 |      ...                                          'falcon', 'parrot'],
 |      ...                               'speed': [350, 18, 361, 15]})
 |      >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])
 |      
 |      >>> df_multiindex
 |                         speed
 |      date       animal
 |      2018-01-01 falcon    350
 |                 parrot     18
 |      2018-01-02 falcon    361
 |                 parrot     15
 |      
 |      >>> df_multiindex.to_xarray()  # doctest: +SKIP
 |      <xarray.Dataset>
 |      Dimensions:  (date: 2, animal: 2)
 |      Coordinates:
 |        * date     (date) datetime64[ns] 2018-01-01 2018-01-02
 |        * animal   (animal) object 'falcon' 'parrot'
 |      Data variables:
 |          speed    (date, animal) int64 350 18 361 15
 |  
 |  truncate(self, before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -> 'Self'
 |      Truncate a Series or DataFrame before and after some index value.
 |      
 |      This is a useful shorthand for boolean indexing based on index
 |      values above or below certain thresholds.
 |      
 |      Parameters
 |      ----------
 |      before : date, str, int
 |          Truncate all rows before this index value.
 |      after : date, str, int
 |          Truncate all rows after this index value.
 |      axis : {0 or 'index', 1 or 'columns'}, optional
 |          Axis to truncate. Truncates the index (rows) by default.
 |          For `Series` this parameter is unused and defaults to 0.
 |      copy : bool, default is True,
 |          Return a copy of the truncated section.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      type of caller
 |          The truncated Series or DataFrame.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Select a subset of a DataFrame by label.
 |      DataFrame.iloc : Select a subset of a DataFrame by position.
 |      
 |      Notes
 |      -----
 |      If the index being truncated contains only datetime values,
 |      `before` and `after` may be specified as strings instead of
 |      Timestamps.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],
 |      ...                    'B': ['f', 'g', 'h', 'i', 'j'],
 |      ...                    'C': ['k', 'l', 'm', 'n', 'o']},
 |      ...                   index=[1, 2, 3, 4, 5])
 |      >>> df
 |         A  B  C
 |      1  a  f  k
 |      2  b  g  l
 |      3  c  h  m
 |      4  d  i  n
 |      5  e  j  o
 |      
 |      >>> df.truncate(before=2, after=4)
 |         A  B  C
 |      2  b  g  l
 |      3  c  h  m
 |      4  d  i  n
 |      
 |      The columns of a DataFrame can be truncated.
 |      
 |      >>> df.truncate(before="A", after="B", axis="columns")
 |         A  B
 |      1  a  f
 |      2  b  g
 |      3  c  h
 |      4  d  i
 |      5  e  j
 |      
 |      For Series, only rows can be truncated.
 |      
 |      >>> df['A'].truncate(before=2, after=4)
 |      2    b
 |      3    c
 |      4    d
 |      Name: A, dtype: object
 |      
 |      The index values in ``truncate`` can be datetimes or string
 |      dates.
 |      
 |      >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')
 |      >>> df = pd.DataFrame(index=dates, data={'A': 1})
 |      >>> df.tail()
 |                           A
 |      2016-01-31 23:59:56  1
 |      2016-01-31 23:59:57  1
 |      2016-01-31 23:59:58  1
 |      2016-01-31 23:59:59  1
 |      2016-02-01 00:00:00  1
 |      
 |      >>> df.truncate(before=pd.Timestamp('2016-01-05'),
 |      ...             after=pd.Timestamp('2016-01-10')).tail()
 |                           A
 |      2016-01-09 23:59:56  1
 |      2016-01-09 23:59:57  1
 |      2016-01-09 23:59:58  1
 |      2016-01-09 23:59:59  1
 |      2016-01-10 00:00:00  1
 |      
 |      Because the index is a DatetimeIndex containing only dates, we can
 |      specify `before` and `after` as strings. They will be coerced to
 |      Timestamps before truncation.
 |      
 |      >>> df.truncate('2016-01-05', '2016-01-10').tail()
 |                           A
 |      2016-01-09 23:59:56  1
 |      2016-01-09 23:59:57  1
 |      2016-01-09 23:59:58  1
 |      2016-01-09 23:59:59  1
 |      2016-01-10 00:00:00  1
 |      
 |      Note that ``truncate`` assumes a 0 value for any unspecified time
 |      component (midnight). This differs from partial string slicing, which
 |      returns any partially matching dates.
 |      
 |      >>> df.loc['2016-01-05':'2016-01-10', :].tail()
 |                           A
 |      2016-01-10 23:59:55  1
 |      2016-01-10 23:59:56  1
 |      2016-01-10 23:59:57  1
 |      2016-01-10 23:59:58  1
 |      2016-01-10 23:59:59  1
 |  
 |  tz_convert(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -> 'Self'
 |      Convert tz-aware axis to target time zone.
 |      
 |      Parameters
 |      ----------
 |      tz : str or tzinfo object or None
 |          Target time zone. Passing ``None`` will convert to
 |          UTC and remove the timezone information.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to convert
 |      level : int, str, default None
 |          If axis is a MultiIndex, convert a specific level. Otherwise
 |          must be None.
 |      copy : bool, default True
 |          Also make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Object with time zone converted axis.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the axis is tz-naive.
 |      
 |      Examples
 |      --------
 |      Change to another time zone:
 |      
 |      >>> s = pd.Series(
 |      ...     [1],
 |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']),
 |      ... )
 |      >>> s.tz_convert('Asia/Shanghai')
 |      2018-09-15 07:30:00+08:00    1
 |      dtype: int64
 |      
 |      Pass None to convert to UTC and get a tz-naive index:
 |      
 |      >>> s = pd.Series([1],
 |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))
 |      >>> s.tz_convert(None)
 |      2018-09-14 23:30:00    1
 |      dtype: int64
 |  
 |  tz_localize(self, tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -> 'Self'
 |      Localize tz-naive index of a Series or DataFrame to target time zone.
 |      
 |      This operation localizes the Index. To localize the values in a
 |      timezone-naive Series, use :meth:`Series.dt.tz_localize`.
 |      
 |      Parameters
 |      ----------
 |      tz : str or tzinfo or None
 |          Time zone to localize. Passing ``None`` will remove the
 |          time zone information and preserve local time.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          The axis to localize
 |      level : int, str, default None
 |          If axis ia a MultiIndex, localize a specific level. Otherwise
 |          must be None.
 |      copy : bool, default True
 |          Also make a copy of the underlying data.
 |      
 |          .. note::
 |              The `copy` keyword will change behavior in pandas 3.0.
 |              `Copy-on-Write
 |              <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
 |              will be enabled by default, which means that all methods with a
 |              `copy` keyword will use a lazy copy mechanism to defer the copy and
 |              ignore the `copy` keyword. The `copy` keyword will be removed in a
 |              future version of pandas.
 |      
 |              You can already get the future behavior and improvements through
 |              enabling copy on write ``pd.options.mode.copy_on_write = True``
 |      ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'
 |          When clocks moved backward due to DST, ambiguous times may arise.
 |          For example in Central European Time (UTC+01), when going from
 |          03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at
 |          00:30:00 UTC and at 01:30:00 UTC. In such a situation, the
 |          `ambiguous` parameter dictates how ambiguous times should be
 |          handled.
 |      
 |          - 'infer' will attempt to infer fall dst-transition hours based on
 |            order
 |          - bool-ndarray where True signifies a DST time, False designates
 |            a non-DST time (note that this flag is only applicable for
 |            ambiguous times)
 |          - 'NaT' will return NaT where there are ambiguous times
 |          - 'raise' will raise an AmbiguousTimeError if there are ambiguous
 |            times.
 |      nonexistent : str, default 'raise'
 |          A nonexistent time does not exist in a particular timezone
 |          where clocks moved forward due to DST. Valid values are:
 |      
 |          - 'shift_forward' will shift the nonexistent time forward to the
 |            closest existing time
 |          - 'shift_backward' will shift the nonexistent time backward to the
 |            closest existing time
 |          - 'NaT' will return NaT where there are nonexistent times
 |          - timedelta objects will shift nonexistent times by the timedelta
 |          - 'raise' will raise an NonExistentTimeError if there are
 |            nonexistent times.
 |      
 |      Returns
 |      -------
 |      Series/DataFrame
 |          Same type as the input.
 |      
 |      Raises
 |      ------
 |      TypeError
 |          If the TimeSeries is tz-aware and tz is not None.
 |      
 |      Examples
 |      --------
 |      Localize local times:
 |      
 |      >>> s = pd.Series(
 |      ...     [1],
 |      ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00']),
 |      ... )
 |      >>> s.tz_localize('CET')
 |      2018-09-15 01:30:00+02:00    1
 |      dtype: int64
 |      
 |      Pass None to convert to tz-naive index and preserve local time:
 |      
 |      >>> s = pd.Series([1],
 |      ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))
 |      >>> s.tz_localize(None)
 |      2018-09-15 01:30:00    1
 |      dtype: int64
 |      
 |      Be careful with DST changes. When there is sequential data, pandas
 |      can infer the DST time:
 |      
 |      >>> s = pd.Series(range(7),
 |      ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',
 |      ...                                       '2018-10-28 02:00:00',
 |      ...                                       '2018-10-28 02:30:00',
 |      ...                                       '2018-10-28 02:00:00',
 |      ...                                       '2018-10-28 02:30:00',
 |      ...                                       '2018-10-28 03:00:00',
 |      ...                                       '2018-10-28 03:30:00']))
 |      >>> s.tz_localize('CET', ambiguous='infer')
 |      2018-10-28 01:30:00+02:00    0
 |      2018-10-28 02:00:00+02:00    1
 |      2018-10-28 02:30:00+02:00    2
 |      2018-10-28 02:00:00+01:00    3
 |      2018-10-28 02:30:00+01:00    4
 |      2018-10-28 03:00:00+01:00    5
 |      2018-10-28 03:30:00+01:00    6
 |      dtype: int64
 |      
 |      In some cases, inferring the DST is impossible. In such cases, you can
 |      pass an ndarray to the ambiguous parameter to set the DST explicitly
 |      
 |      >>> s = pd.Series(range(3),
 |      ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',
 |      ...                                       '2018-10-28 02:36:00',
 |      ...                                       '2018-10-28 03:46:00']))
 |      >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))
 |      2018-10-28 01:20:00+02:00    0
 |      2018-10-28 02:36:00+02:00    1
 |      2018-10-28 03:46:00+01:00    2
 |      dtype: int64
 |      
 |      If the DST transition causes nonexistent times, you can shift these
 |      dates forward or backward with a timedelta object or `'shift_forward'`
 |      or `'shift_backward'`.
 |      
 |      >>> s = pd.Series(range(2),
 |      ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',
 |      ...                                       '2015-03-29 03:30:00']))
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')
 |      2015-03-29 03:00:00+02:00    0
 |      2015-03-29 03:30:00+02:00    1
 |      dtype: int64
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')
 |      2015-03-29 01:59:59.999999999+01:00    0
 |      2015-03-29 03:30:00+02:00              1
 |      dtype: int64
 |      >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))
 |      2015-03-29 03:30:00+02:00    0
 |      2015-03-29 03:30:00+02:00    1
 |      dtype: int64
 |  
 |  where(self, cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None'
 |      Replace values where the condition is False.
 |      
 |      Parameters
 |      ----------
 |      cond : bool Series/DataFrame, array-like, or callable
 |          Where `cond` is True, keep the original value. Where
 |          False, replace with corresponding value from `other`.
 |          If `cond` is callable, it is computed on the Series/DataFrame and
 |          should return boolean Series/DataFrame or array. The callable must
 |          not change input Series/DataFrame (though pandas doesn't check it).
 |      other : scalar, Series/DataFrame, or callable
 |          Entries where `cond` is False are replaced with
 |          corresponding value from `other`.
 |          If other is callable, it is computed on the Series/DataFrame and
 |          should return scalar or Series/DataFrame. The callable must not
 |          change input Series/DataFrame (though pandas doesn't check it).
 |          If not specified, entries will be filled with the corresponding
 |          NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension
 |          dtypes).
 |      inplace : bool, default False
 |          Whether to perform the operation in place on the data.
 |      axis : int, default None
 |          Alignment axis if needed. For `Series` this parameter is
 |          unused and defaults to 0.
 |      level : int, default None
 |          Alignment level if needed.
 |      
 |      Returns
 |      -------
 |      Same type as caller or None if ``inplace=True``.
 |      
 |      See Also
 |      --------
 |      :func:`DataFrame.mask` : Return an object of same shape as
 |          self.
 |      
 |      Notes
 |      -----
 |      The where method is an application of the if-then idiom. For each
 |      element in the calling DataFrame, if ``cond`` is ``True`` the
 |      element is used; otherwise the corresponding element from the DataFrame
 |      ``other`` is used. If the axis of ``other`` does not align with axis of
 |      ``cond`` Series/DataFrame, the misaligned index positions will be filled with
 |      False.
 |      
 |      The signature for :func:`DataFrame.where` differs from
 |      :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to
 |      ``np.where(m, df1, df2)``.
 |      
 |      For further details and examples see the ``where`` documentation in
 |      :ref:`indexing <indexing.where_mask>`.
 |      
 |      The dtype of the object takes precedence. The fill value is casted to
 |      the object's dtype, if this can be done losslessly.
 |      
 |      Examples
 |      --------
 |      >>> s = pd.Series(range(5))
 |      >>> s.where(s > 0)
 |      0    NaN
 |      1    1.0
 |      2    2.0
 |      3    3.0
 |      4    4.0
 |      dtype: float64
 |      >>> s.mask(s > 0)
 |      0    0.0
 |      1    NaN
 |      2    NaN
 |      3    NaN
 |      4    NaN
 |      dtype: float64
 |      
 |      >>> s = pd.Series(range(5))
 |      >>> t = pd.Series([True, False])
 |      >>> s.where(t, 99)
 |      0     0
 |      1    99
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      >>> s.mask(t, 99)
 |      0    99
 |      1     1
 |      2    99
 |      3    99
 |      4    99
 |      dtype: int64
 |      
 |      >>> s.where(s > 1, 10)
 |      0    10
 |      1    10
 |      2    2
 |      3    3
 |      4    4
 |      dtype: int64
 |      >>> s.mask(s > 1, 10)
 |      0     0
 |      1     1
 |      2    10
 |      3    10
 |      4    10
 |      dtype: int64
 |      
 |      >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])
 |      >>> df
 |         A  B
 |      0  0  1
 |      1  2  3
 |      2  4  5
 |      3  6  7
 |      4  8  9
 |      >>> m = df % 3 == 0
 |      >>> df.where(m, -df)
 |         A  B
 |      0  0 -1
 |      1 -2  3
 |      2 -4 -5
 |      3  6 -7
 |      4 -8  9
 |      >>> df.where(m, -df) == np.where(m, df, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |      >>> df.where(m, -df) == df.mask(~m, -df)
 |            A     B
 |      0  True  True
 |      1  True  True
 |      2  True  True
 |      3  True  True
 |      4  True  True
 |  
 |  xs(self, key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -> 'Self'
 |      Return cross-section from the Series/DataFrame.
 |      
 |      This method takes a `key` argument to select data at a particular
 |      level of a MultiIndex.
 |      
 |      Parameters
 |      ----------
 |      key : label or tuple of label
 |          Label contained in the index, or partially in a MultiIndex.
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Axis to retrieve cross-section on.
 |      level : object, defaults to first n levels (n=1 or len(key))
 |          In case of a key partially contained in a MultiIndex, indicate
 |          which levels are used. Levels can be referred by label or position.
 |      drop_level : bool, default True
 |          If False, returns object with same levels as self.
 |      
 |      Returns
 |      -------
 |      Series or DataFrame
 |          Cross-section from the original Series or DataFrame
 |          corresponding to the selected index levels.
 |      
 |      See Also
 |      --------
 |      DataFrame.loc : Access a group of rows and columns
 |          by label(s) or a boolean array.
 |      DataFrame.iloc : Purely integer-location based indexing
 |          for selection by position.
 |      
 |      Notes
 |      -----
 |      `xs` can not be used to set values.
 |      
 |      MultiIndex Slicers is a generic way to get/set values on
 |      any level or levels.
 |      It is a superset of `xs` functionality, see
 |      :ref:`MultiIndex Slicers <advanced.mi_slicers>`.
 |      
 |      Examples
 |      --------
 |      >>> d = {'num_legs': [4, 4, 2, 2],
 |      ...      'num_wings': [0, 0, 2, 2],
 |      ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],
 |      ...      'animal': ['cat', 'dog', 'bat', 'penguin'],
 |      ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}
 |      >>> df = pd.DataFrame(data=d)
 |      >>> df = df.set_index(['class', 'animal', 'locomotion'])
 |      >>> df
 |                                 num_legs  num_wings
 |      class  animal  locomotion
 |      mammal cat     walks              4          0
 |             dog     walks              4          0
 |             bat     flies              2          2
 |      bird   penguin walks              2          2
 |      
 |      Get values at specified index
 |      
 |      >>> df.xs('mammal')
 |                         num_legs  num_wings
 |      animal locomotion
 |      cat    walks              4          0
 |      dog    walks              4          0
 |      bat    flies              2          2
 |      
 |      Get values at several indexes
 |      
 |      >>> df.xs(('mammal', 'dog', 'walks'))
 |      num_legs     4
 |      num_wings    0
 |      Name: (mammal, dog, walks), dtype: int64
 |      
 |      Get values at specified index and level
 |      
 |      >>> df.xs('cat', level=1)
 |                         num_legs  num_wings
 |      class  locomotion
 |      mammal walks              4          0
 |      
 |      Get values at several indexes and levels
 |      
 |      >>> df.xs(('bird', 'walks'),
 |      ...       level=[0, 'locomotion'])
 |               num_legs  num_wings
 |      animal
 |      penguin         2          2
 |      
 |      Get values at specified column and axis
 |      
 |      >>> df.xs('num_wings', axis=1)
 |      class   animal   locomotion
 |      mammal  cat      walks         0
 |              dog      walks         0
 |              bat      flies         2
 |      bird    penguin  walks         2
 |      Name: num_wings, dtype: int64
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.generic.NDFrame:
 |  
 |  flags
 |      Get the properties associated with this pandas object.
 |      
 |      The available flags are
 |      
 |      * :attr:`Flags.allows_duplicate_labels`
 |      
 |      See Also
 |      --------
 |      Flags : Flags that apply to pandas objects.
 |      DataFrame.attrs : Global metadata applying to this dataset.
 |      
 |      Notes
 |      -----
 |      "Flags" differ from "metadata". Flags reflect properties of the
 |      pandas object (the Series or DataFrame). Metadata refer to properties
 |      of the dataset, and should be stored in :attr:`DataFrame.attrs`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({"A": [1, 2]})
 |      >>> df.flags
 |      <Flags(allows_duplicate_labels=True)>
 |      
 |      Flags can be get or set using ``.``
 |      
 |      >>> df.flags.allows_duplicate_labels
 |      True
 |      >>> df.flags.allows_duplicate_labels = False
 |      
 |      Or by slicing with a key
 |      
 |      >>> df.flags["allows_duplicate_labels"]
 |      False
 |      >>> df.flags["allows_duplicate_labels"] = True
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.generic.NDFrame:
 |  
 |  attrs
 |      Dictionary of global attributes of this dataset.
 |      
 |      .. warning::
 |      
 |         attrs is experimental and may change without warning.
 |      
 |      See Also
 |      --------
 |      DataFrame.flags : Global flags applying to this object.
 |      
 |      Notes
 |      -----
 |      Many operations that create new datasets will copy ``attrs``. Copies
 |      are always deep so that changing ``attrs`` will only affect the
 |      present dataset. ``pandas.concat`` copies ``attrs`` only if all input
 |      datasets have the same ``attrs``.
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      >>> ser = pd.Series([1, 2, 3])
 |      >>> ser.attrs = {"A": [10, 20, 30]}
 |      >>> ser.attrs
 |      {'A': [10, 20, 30]}
 |      
 |      For DataFrame:
 |      
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> df.attrs = {"A": [10, 20, 30]}
 |      >>> df.attrs
 |      {'A': [10, 20, 30]}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.PandasObject:
 |  
 |  __sizeof__(self) -> 'int'
 |      Generates the total memory usage for an object that returns
 |      either a value or Series of values
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  __dir__(self) -> 'list[str]'
 |      Provide method name lookup and completion.
 |      
 |      Notes
 |      -----
 |      Only provide 'public' methods.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from pandas.core.indexing.IndexingMixin:
 |  
 |  at
 |      Access a single value for a row/column label pair.
 |      
 |      Similar to ``loc``, in that both provide label-based lookups. Use
 |      ``at`` if you only need to get or set a single value in a DataFrame
 |      or Series.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If getting a value and 'label' does not exist in a DataFrame or Series.
 |      
 |      ValueError
 |          If row/column label pair is not a tuple or if any label
 |          from the pair is not a scalar for DataFrame.
 |          If label is list-like (*excluding* NamedTuple) for Series.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column pair by label.
 |      DataFrame.iat : Access a single value for a row/column pair by integer
 |          position.
 |      DataFrame.loc : Access a group of rows and columns by label(s).
 |      DataFrame.iloc : Access a group of rows and columns by integer
 |          position(s).
 |      Series.at : Access a single value by label.
 |      Series.iat : Access a single value by integer position.
 |      Series.loc : Access a group of rows by label(s).
 |      Series.iloc : Access a group of rows by integer position(s).
 |      
 |      Notes
 |      -----
 |      See :ref:`Fast scalar value getting and setting <indexing.basics.get_value>`
 |      for more details.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
 |      ...                   index=[4, 5, 6], columns=['A', 'B', 'C'])
 |      >>> df
 |          A   B   C
 |      4   0   2   3
 |      5   0   4   1
 |      6  10  20  30
 |      
 |      Get value at specified row/column pair
 |      
 |      >>> df.at[4, 'B']
 |      2
 |      
 |      Set value at specified row/column pair
 |      
 |      >>> df.at[4, 'B'] = 10
 |      >>> df.at[4, 'B']
 |      10
 |      
 |      Get value within a Series
 |      
 |      >>> df.loc[5].at['B']
 |      4
 |  
 |  iat
 |      Access a single value for a row/column pair by integer position.
 |      
 |      Similar to ``iloc``, in that both provide integer-based lookups. Use
 |      ``iat`` if you only need to get or set a single value in a DataFrame
 |      or Series.
 |      
 |      Raises
 |      ------
 |      IndexError
 |          When integer position is out of bounds.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column label pair.
 |      DataFrame.loc : Access a group of rows and columns by label(s).
 |      DataFrame.iloc : Access a group of rows and columns by integer position(s).
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
 |      ...                   columns=['A', 'B', 'C'])
 |      >>> df
 |          A   B   C
 |      0   0   2   3
 |      1   0   4   1
 |      2  10  20  30
 |      
 |      Get value at specified row/column pair
 |      
 |      >>> df.iat[1, 2]
 |      1
 |      
 |      Set value at specified row/column pair
 |      
 |      >>> df.iat[1, 2] = 10
 |      >>> df.iat[1, 2]
 |      10
 |      
 |      Get value within a series
 |      
 |      >>> df.loc[0].iat[1]
 |      2
 |  
 |  iloc
 |      Purely integer-location based indexing for selection by position.
 |      
 |      .. deprecated:: 2.2.0
 |      
 |         Returning a tuple from a callable is deprecated.
 |      
 |      ``.iloc[]`` is primarily integer position based (from ``0`` to
 |      ``length-1`` of the axis), but may also be used with a boolean
 |      array.
 |      
 |      Allowed inputs are:
 |      
 |      - An integer, e.g. ``5``.
 |      - A list or array of integers, e.g. ``[4, 3, 0]``.
 |      - A slice object with ints, e.g. ``1:7``.
 |      - A boolean array.
 |      - A ``callable`` function with one argument (the calling Series or
 |        DataFrame) and that returns valid output for indexing (one of the above).
 |        This is useful in method chains, when you don't have a reference to the
 |        calling object, but would like to base your selection on
 |        some value.
 |      - A tuple of row and column indexes. The tuple elements consist of one of the
 |        above inputs, e.g. ``(0, 1)``.
 |      
 |      ``.iloc`` will raise ``IndexError`` if a requested indexer is
 |      out-of-bounds, except *slice* indexers which allow out-of-bounds
 |      indexing (this conforms with python/numpy *slice* semantics).
 |      
 |      See more at :ref:`Selection by Position <indexing.integer>`.
 |      
 |      See Also
 |      --------
 |      DataFrame.iat : Fast integer location scalar accessor.
 |      DataFrame.loc : Purely label-location based indexer for selection by label.
 |      Series.iloc : Purely integer-location based indexing for
 |                     selection by position.
 |      
 |      Examples
 |      --------
 |      >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},
 |      ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},
 |      ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000}]
 |      >>> df = pd.DataFrame(mydict)
 |      >>> df
 |            a     b     c     d
 |      0     1     2     3     4
 |      1   100   200   300   400
 |      2  1000  2000  3000  4000
 |      
 |      **Indexing just the rows**
 |      
 |      With a scalar integer.
 |      
 |      >>> type(df.iloc[0])
 |      <class 'pandas.core.series.Series'>
 |      >>> df.iloc[0]
 |      a    1
 |      b    2
 |      c    3
 |      d    4
 |      Name: 0, dtype: int64
 |      
 |      With a list of integers.
 |      
 |      >>> df.iloc[[0]]
 |         a  b  c  d
 |      0  1  2  3  4
 |      >>> type(df.iloc[[0]])
 |      <class 'pandas.core.frame.DataFrame'>
 |      
 |      >>> df.iloc[[0, 1]]
 |           a    b    c    d
 |      0    1    2    3    4
 |      1  100  200  300  400
 |      
 |      With a `slice` object.
 |      
 |      >>> df.iloc[:3]
 |            a     b     c     d
 |      0     1     2     3     4
 |      1   100   200   300   400
 |      2  1000  2000  3000  4000
 |      
 |      With a boolean mask the same length as the index.
 |      
 |      >>> df.iloc[[True, False, True]]
 |            a     b     c     d
 |      0     1     2     3     4
 |      2  1000  2000  3000  4000
 |      
 |      With a callable, useful in method chains. The `x` passed
 |      to the ``lambda`` is the DataFrame being sliced. This selects
 |      the rows whose index label even.
 |      
 |      >>> df.iloc[lambda x: x.index % 2 == 0]
 |            a     b     c     d
 |      0     1     2     3     4
 |      2  1000  2000  3000  4000
 |      
 |      **Indexing both axes**
 |      
 |      You can mix the indexer types for the index and columns. Use ``:`` to
 |      select the entire axis.
 |      
 |      With scalar integers.
 |      
 |      >>> df.iloc[0, 1]
 |      2
 |      
 |      With lists of integers.
 |      
 |      >>> df.iloc[[0, 2], [1, 3]]
 |            b     d
 |      0     2     4
 |      2  2000  4000
 |      
 |      With `slice` objects.
 |      
 |      >>> df.iloc[1:3, 0:3]
 |            a     b     c
 |      1   100   200   300
 |      2  1000  2000  3000
 |      
 |      With a boolean array whose length matches the columns.
 |      
 |      >>> df.iloc[:, [True, False, True, False]]
 |            a     c
 |      0     1     3
 |      1   100   300
 |      2  1000  3000
 |      
 |      With a callable function that expects the Series or DataFrame.
 |      
 |      >>> df.iloc[:, lambda df: [0, 2]]
 |            a     c
 |      0     1     3
 |      1   100   300
 |      2  1000  3000
 |  
 |  loc
 |      Access a group of rows and columns by label(s) or a boolean array.
 |      
 |      ``.loc[]`` is primarily label based, but may also be used with a
 |      boolean array.
 |      
 |      Allowed inputs are:
 |      
 |      - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is
 |        interpreted as a *label* of the index, and **never** as an
 |        integer position along the index).
 |      - A list or array of labels, e.g. ``['a', 'b', 'c']``.
 |      - A slice object with labels, e.g. ``'a':'f'``.
 |      
 |        .. warning:: Note that contrary to usual python slices, **both** the
 |            start and the stop are included
 |      
 |      - A boolean array of the same length as the axis being sliced,
 |        e.g. ``[True, False, True]``.
 |      - An alignable boolean Series. The index of the key will be aligned before
 |        masking.
 |      - An alignable Index. The Index of the returned selection will be the input.
 |      - A ``callable`` function with one argument (the calling Series or
 |        DataFrame) and that returns valid output for indexing (one of the above)
 |      
 |      See more at :ref:`Selection by Label <indexing.label>`.
 |      
 |      Raises
 |      ------
 |      KeyError
 |          If any items are not found.
 |      IndexingError
 |          If an indexed key is passed and its index is unalignable to the frame index.
 |      
 |      See Also
 |      --------
 |      DataFrame.at : Access a single value for a row/column label pair.
 |      DataFrame.iloc : Access group of rows and columns by integer position(s).
 |      DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the
 |                     Series/DataFrame.
 |      Series.loc : Access group of values using labels.
 |      
 |      Examples
 |      --------
 |      **Getting values**
 |      
 |      >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
 |      ...                   index=['cobra', 'viper', 'sidewinder'],
 |      ...                   columns=['max_speed', 'shield'])
 |      >>> df
 |                  max_speed  shield
 |      cobra               1       2
 |      viper               4       5
 |      sidewinder          7       8
 |      
 |      Single label. Note this returns the row as a Series.
 |      
 |      >>> df.loc['viper']
 |      max_speed    4
 |      shield       5
 |      Name: viper, dtype: int64
 |      
 |      List of labels. Note using ``[[]]`` returns a DataFrame.
 |      
 |      >>> df.loc[['viper', 'sidewinder']]
 |                  max_speed  shield
 |      viper               4       5
 |      sidewinder          7       8
 |      
 |      Single label for row and column
 |      
 |      >>> df.loc['cobra', 'shield']
 |      2
 |      
 |      Slice with labels for row and single label for column. As mentioned
 |      above, note that both the start and stop of the slice are included.
 |      
 |      >>> df.loc['cobra':'viper', 'max_speed']
 |      cobra    1
 |      viper    4
 |      Name: max_speed, dtype: int64
 |      
 |      Boolean list with the same length as the row axis
 |      
 |      >>> df.loc[[False, False, True]]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      Alignable boolean Series:
 |      
 |      >>> df.loc[pd.Series([False, True, False],
 |      ...                  index=['viper', 'sidewinder', 'cobra'])]
 |                           max_speed  shield
 |      sidewinder          7       8
 |      
 |      Index (same behavior as ``df.reindex``)
 |      
 |      >>> df.loc[pd.Index(["cobra", "viper"], name="foo")]
 |             max_speed  shield
 |      foo
 |      cobra          1       2
 |      viper          4       5
 |      
 |      Conditional that returns a boolean Series
 |      
 |      >>> df.loc[df['shield'] > 6]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      Conditional that returns a boolean Series with column labels specified
 |      
 |      >>> df.loc[df['shield'] > 6, ['max_speed']]
 |                  max_speed
 |      sidewinder          7
 |      
 |      Multiple conditional using ``&`` that returns a boolean Series
 |      
 |      >>> df.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]
 |                  max_speed  shield
 |      viper          4       5
 |      
 |      Multiple conditional using ``|`` that returns a boolean Series
 |      
 |      >>> df.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]
 |                  max_speed  shield
 |      cobra               1       2
 |      sidewinder          7       8
 |      
 |      Please ensure that each condition is wrapped in parentheses ``()``.
 |      See the :ref:`user guide<indexing.boolean>`
 |      for more details and explanations of Boolean indexing.
 |      
 |      .. note::
 |          If you find yourself using 3 or more conditionals in ``.loc[]``,
 |          consider using :ref:`advanced indexing<advanced.advanced_hierarchical>`.
 |      
 |          See below for using ``.loc[]`` on MultiIndex DataFrames.
 |      
 |      Callable that returns a boolean Series
 |      
 |      >>> df.loc[lambda df: df['shield'] == 8]
 |                  max_speed  shield
 |      sidewinder          7       8
 |      
 |      **Setting values**
 |      
 |      Set value for all items matching the list of labels
 |      
 |      >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50
 |      >>> df
 |                  max_speed  shield
 |      cobra               1       2
 |      viper               4      50
 |      sidewinder          7      50
 |      
 |      Set value for an entire row
 |      
 |      >>> df.loc['cobra'] = 10
 |      >>> df
 |                  max_speed  shield
 |      cobra              10      10
 |      viper               4      50
 |      sidewinder          7      50
 |      
 |      Set value for an entire column
 |      
 |      >>> df.loc[:, 'max_speed'] = 30
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper              30      50
 |      sidewinder         30      50
 |      
 |      Set value for rows matching callable condition
 |      
 |      >>> df.loc[df['shield'] > 35] = 0
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper               0       0
 |      sidewinder          0       0
 |      
 |      Add value matching location
 |      
 |      >>> df.loc["viper", "shield"] += 5
 |      >>> df
 |                  max_speed  shield
 |      cobra              30      10
 |      viper               0       5
 |      sidewinder          0       0
 |      
 |      Setting using a ``Series`` or a ``DataFrame`` sets the values matching the
 |      index labels, not the index positions.
 |      
 |      >>> shuffled_df = df.loc[["viper", "cobra", "sidewinder"]]
 |      >>> df.loc[:] += shuffled_df
 |      >>> df
 |                  max_speed  shield
 |      cobra              60      20
 |      viper               0      10
 |      sidewinder          0       0
 |      
 |      **Getting values on a DataFrame with an index that has integer labels**
 |      
 |      Another example using integers for the index
 |      
 |      >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],
 |      ...                   index=[7, 8, 9], columns=['max_speed', 'shield'])
 |      >>> df
 |         max_speed  shield
 |      7          1       2
 |      8          4       5
 |      9          7       8
 |      
 |      Slice with integer labels for rows. As mentioned above, note that both
 |      the start and stop of the slice are included.
 |      
 |      >>> df.loc[7:9]
 |         max_speed  shield
 |      7          1       2
 |      8          4       5
 |      9          7       8
 |      
 |      **Getting values with a MultiIndex**
 |      
 |      A number of examples using a DataFrame with a MultiIndex
 |      
 |      >>> tuples = [
 |      ...     ('cobra', 'mark i'), ('cobra', 'mark ii'),
 |      ...     ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),
 |      ...     ('viper', 'mark ii'), ('viper', 'mark iii')
 |      ... ]
 |      >>> index = pd.MultiIndex.from_tuples(tuples)
 |      >>> values = [[12, 2], [0, 4], [10, 20],
 |      ...           [1, 4], [7, 1], [16, 36]]
 |      >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)
 |      >>> df
 |                           max_speed  shield
 |      cobra      mark i           12       2
 |                 mark ii           0       4
 |      sidewinder mark i           10      20
 |                 mark ii           1       4
 |      viper      mark ii           7       1
 |                 mark iii         16      36
 |      
 |      Single label. Note this returns a DataFrame with a single index.
 |      
 |      >>> df.loc['cobra']
 |               max_speed  shield
 |      mark i          12       2
 |      mark ii          0       4
 |      
 |      Single index tuple. Note this returns a Series.
 |      
 |      >>> df.loc[('cobra', 'mark ii')]
 |      max_speed    0
 |      shield       4
 |      Name: (cobra, mark ii), dtype: int64
 |      
 |      Single label for row and column. Similar to passing in a tuple, this
 |      returns a Series.
 |      
 |      >>> df.loc['cobra', 'mark i']
 |      max_speed    12
 |      shield        2
 |      Name: (cobra, mark i), dtype: int64
 |      
 |      Single tuple. Note using ``[[]]`` returns a DataFrame.
 |      
 |      >>> df.loc[[('cobra', 'mark ii')]]
 |                     max_speed  shield
 |      cobra mark ii          0       4
 |      
 |      Single tuple for the index with a single label for the column
 |      
 |      >>> df.loc[('cobra', 'mark i'), 'shield']
 |      2
 |      
 |      Slice from index tuple to single label
 |      
 |      >>> df.loc[('cobra', 'mark i'):'viper']
 |                           max_speed  shield
 |      cobra      mark i           12       2
 |                 mark ii           0       4
 |      sidewinder mark i           10      20
 |                 mark ii           1       4
 |      viper      mark ii           7       1
 |                 mark iii         16      36
 |      
 |      Slice from index tuple to index tuple
 |      
 |      >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]
 |                          max_speed  shield
 |      cobra      mark i          12       2
 |                 mark ii          0       4
 |      sidewinder mark i          10      20
 |                 mark ii          1       4
 |      viper      mark ii          7       1
 |      
 |      Please see the :ref:`user guide<advanced.advanced_hierarchical>`
 |      for more details and explanations of advanced indexing.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& notna &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method notna in module pandas.core.frame:

notna() -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Detect existing (non-missing) values.
    
    Return a boolean same-sized object indicating if the values are not NA.
    Non-missing values get mapped to True. Characters such as empty
    strings ``''`` or :attr:`numpy.inf` are not considered NA values
    (unless you set ``pandas.options.mode.use_inf_as_na = True``).
    NA values, such as None or :attr:`numpy.NaN`, get mapped to False
    values.
    
    Returns
    -------
    DataFrame
        Mask of bool values for each element in DataFrame that
        indicates whether an element is not an NA value.
    
    See Also
    --------
    DataFrame.notnull : Alias of notna.
    DataFrame.isna : Boolean inverse of notna.
    DataFrame.dropna : Omit axes labels with missing values.
    notna : Top-level notna.
    
    Examples
    --------
    Show which entries in a DataFrame are not NA.
    
    >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
    ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
    ...                              pd.Timestamp('1940-04-25')],
    ...                        name=['Alfred', 'Batman', ''],
    ...                        toy=[None, 'Batmobile', 'Joker']))
    >>> df
       age       born    name        toy
    0  5.0        NaT  Alfred       None
    1  6.0 1939-05-27  Batman  Batmobile
    2  NaN 1940-04-25              Joker
    
    >>> df.notna()
         age   born  name    toy
    0   True  False  True  False
    1   True   True  True   True
    2  False   True  True   True
    
    Show which entries in a Series are not NA.
    
    >>> ser = pd.Series([5, 6, np.nan])
    >>> ser
    0    5.0
    1    6.0
    2    NaN
    dtype: float64
    
    >>> ser.notna()
    0     True
    1     True
    2    False
    dtype: bool

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& notnull &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method notnull in module pandas.core.frame:

notnull() -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    DataFrame.notnull is an alias for DataFrame.notna.
    
    Detect existing (non-missing) values.
    
    Return a boolean same-sized object indicating if the values are not NA.
    Non-missing values get mapped to True. Characters such as empty
    strings ``''`` or :attr:`numpy.inf` are not considered NA values
    (unless you set ``pandas.options.mode.use_inf_as_na = True``).
    NA values, such as None or :attr:`numpy.NaN`, get mapped to False
    values.
    
    Returns
    -------
    DataFrame
        Mask of bool values for each element in DataFrame that
        indicates whether an element is not an NA value.
    
    See Also
    --------
    DataFrame.notnull : Alias of notna.
    DataFrame.isna : Boolean inverse of notna.
    DataFrame.dropna : Omit axes labels with missing values.
    notna : Top-level notna.
    
    Examples
    --------
    Show which entries in a DataFrame are not NA.
    
    >>> df = pd.DataFrame(dict(age=[5, 6, np.nan],
    ...                        born=[pd.NaT, pd.Timestamp('1939-05-27'),
    ...                              pd.Timestamp('1940-04-25')],
    ...                        name=['Alfred', 'Batman', ''],
    ...                        toy=[None, 'Batmobile', 'Joker']))
    >>> df
       age       born    name        toy
    0  5.0        NaT  Alfred       None
    1  6.0 1939-05-27  Batman  Batmobile
    2  NaN 1940-04-25              Joker
    
    >>> df.notna()
         age   born  name    toy
    0   True  False  True  False
    1   True   True  True   True
    2  False   True  True   True
    
    Show which entries in a Series are not NA.
    
    >>> ser = pd.Series([5, 6, np.nan])
    >>> ser
    0    5.0
    1    6.0
    2    NaN
    dtype: float64
    
    >>> ser.notna()
    0     True
    1     True
    2    False
    dtype: bool

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& nsmallest &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method nsmallest in module pandas.core.frame:

nsmallest(n: 'int', columns: 'IndexLabel', keep: 'NsmallestNlargestKeep' = 'first') -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Return the first `n` rows ordered by `columns` in ascending order.
    
    Return the first `n` rows with the smallest values in `columns`, in
    ascending order. The columns that are not specified are returned as
    well, but not used for ordering.
    
    This method is equivalent to
    ``df.sort_values(columns, ascending=True).head(n)``, but more
    performant.
    
    Parameters
    ----------
    n : int
        Number of items to retrieve.
    columns : list or str
        Column name or names to order by.
    keep : {'first', 'last', 'all'}, default 'first'
        Where there are duplicate values:
    
        - ``first`` : take the first occurrence.
        - ``last`` : take the last occurrence.
        - ``all`` : keep all the ties of the largest item even if it means
          selecting more than ``n`` items.
    
    Returns
    -------
    DataFrame
    
    See Also
    --------
    DataFrame.nlargest : Return the first `n` rows ordered by `columns` in
        descending order.
    DataFrame.sort_values : Sort DataFrame by the values.
    DataFrame.head : Return the first `n` rows without re-ordering.
    
    Examples
    --------
    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,
    ...                                   434000, 434000, 337000, 337000,
    ...                                   11300, 11300],
    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,
    ...                            17036, 182, 38, 311],
    ...                    'alpha-2': ["IT", "FR", "MT", "MV", "BN",
    ...                                "IS", "NR", "TV", "AI"]},
    ...                   index=["Italy", "France", "Malta",
    ...                          "Maldives", "Brunei", "Iceland",
    ...                          "Nauru", "Tuvalu", "Anguilla"])
    >>> df
              population      GDP alpha-2
    Italy       59000000  1937894      IT
    France      65000000  2583560      FR
    Malta         434000    12011      MT
    Maldives      434000     4520      MV
    Brunei        434000    12128      BN
    Iceland       337000    17036      IS
    Nauru         337000      182      NR
    Tuvalu         11300       38      TV
    Anguilla       11300      311      AI
    
    In the following example, we will use ``nsmallest`` to select the
    three rows having the smallest values in column "population".
    
    >>> df.nsmallest(3, 'population')
              population    GDP alpha-2
    Tuvalu         11300     38      TV
    Anguilla       11300    311      AI
    Iceland       337000  17036      IS
    
    When using ``keep='last'``, ties are resolved in reverse order:
    
    >>> df.nsmallest(3, 'population', keep='last')
              population  GDP alpha-2
    Anguilla       11300  311      AI
    Tuvalu         11300   38      TV
    Nauru         337000  182      NR
    
    When using ``keep='all'``, the number of element kept can go beyond ``n``
    if there are duplicate values for the largest element, all the
    ties are kept.
    
    >>> df.nsmallest(3, 'population', keep='all')
              population    GDP alpha-2
    Tuvalu         11300     38      TV
    Anguilla       11300    311      AI
    Iceland       337000  17036      IS
    Nauru         337000    182      NR
    
    However, ``nsmallest`` does not keep ``n`` distinct
    smallest elements:
    
    >>> df.nsmallest(4, 'population', keep='all')
              population    GDP alpha-2
    Tuvalu         11300     38      TV
    Anguilla       11300    311      AI
    Iceland       337000  17036      IS
    Nauru         337000    182      NR
    
    To order by the smallest values in column "population" and then "GDP", we can
    specify multiple columns like in the next example.
    
    >>> df.nsmallest(3, ['population', 'GDP'])
              population  GDP alpha-2
    Tuvalu         11300   38      TV
    Anguilla       11300  311      AI
    Nauru         337000  182      NR

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& nunique &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method nunique in module pandas.core.frame:

nunique(axis: 'Axis' = 0, dropna: 'bool' = True) -> 'Series' method of pandas.core.frame.DataFrame instance
    Count number of distinct elements in specified axis.
    
    Return Series with number of distinct elements. Can ignore NaN
    values.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for
        column-wise.
    dropna : bool, default True
        Don't include NaN in the counts.
    
    Returns
    -------
    Series
    
    See Also
    --------
    Series.nunique: Method nunique for Series.
    DataFrame.count: Count non-NA cells for each column or row.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': [4, 5, 6], 'B': [4, 1, 1]})
    >>> df.nunique()
    A    3
    B    2
    dtype: int64
    
    >>> df.nunique(axis=1)
    0    1
    1    2
    2    2
    dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& pad &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pad in module pandas.core.generic:

pad(*, axis: 'None | Axis' = None, inplace: 'bool_t' = False, limit: 'None | int' = None, downcast: 'dict | None | lib.NoDefault' = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Fill NA/NaN values by propagating the last valid observation to next valid.
    
    .. deprecated:: 2.0
    
        Series/DataFrame.pad is deprecated. Use Series/DataFrame.ffill instead.
    
    Returns
    -------
    Series/DataFrame or None
        Object with missing values filled or None if ``inplace=True``.
    
    Examples
    --------
    Please see examples for :meth:`DataFrame.ffill` or :meth:`Series.ffill`.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& pct_change &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pct_change in module pandas.core.generic:

pct_change(periods: 'int' = 1, fill_method: 'FillnaOptions | None | lib.NoDefault' = <no_default>, limit: 'int | None | lib.NoDefault' = <no_default>, freq=None, **kwargs) -> 'Self' method of pandas.core.frame.DataFrame instance
    Fractional change between the current and a prior element.
    
    Computes the fractional change from the immediately previous row by
    default. This is useful in comparing the fraction of change in a time
    series of elements.
    
    .. note::
    
        Despite the name of this method, it calculates fractional change
        (also known as per unit change or relative change) and not
        percentage change. If you need the percentage change, multiply
        these values by 100.
    
    Parameters
    ----------
    periods : int, default 1
        Periods to shift for forming percent change.
    fill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default 'pad'
        How to handle NAs **before** computing percent changes.
    
        .. deprecated:: 2.1
            All options of `fill_method` are deprecated except `fill_method=None`.
    
    limit : int, default None
        The number of consecutive NAs to fill before stopping.
    
        .. deprecated:: 2.1
    
    freq : DateOffset, timedelta, or str, optional
        Increment to use from time series API (e.g. 'ME' or BDay()).
    **kwargs
        Additional keyword arguments are passed into
        `DataFrame.shift` or `Series.shift`.
    
    Returns
    -------
    Series or DataFrame
        The same type as the calling object.
    
    See Also
    --------
    Series.diff : Compute the difference of two elements in a Series.
    DataFrame.diff : Compute the difference of two elements in a DataFrame.
    Series.shift : Shift the index by some number of periods.
    DataFrame.shift : Shift the index by some number of periods.
    
    Examples
    --------
    **Series**
    
    >>> s = pd.Series([90, 91, 85])
    >>> s
    0    90
    1    91
    2    85
    dtype: int64
    
    >>> s.pct_change()
    0         NaN
    1    0.011111
    2   -0.065934
    dtype: float64
    
    >>> s.pct_change(periods=2)
    0         NaN
    1         NaN
    2   -0.055556
    dtype: float64
    
    See the percentage change in a Series where filling NAs with last
    valid observation forward to next valid.
    
    >>> s = pd.Series([90, 91, None, 85])
    >>> s
    0    90.0
    1    91.0
    2     NaN
    3    85.0
    dtype: float64
    
    >>> s.ffill().pct_change()
    0         NaN
    1    0.011111
    2    0.000000
    3   -0.065934
    dtype: float64
    
    **DataFrame**
    
    Percentage change in French franc, Deutsche Mark, and Italian lira from
    1980-01-01 to 1980-03-01.
    
    >>> df = pd.DataFrame({
    ...     'FR': [4.0405, 4.0963, 4.3149],
    ...     'GR': [1.7246, 1.7482, 1.8519],
    ...     'IT': [804.74, 810.01, 860.13]},
    ...     index=['1980-01-01', '1980-02-01', '1980-03-01'])
    >>> df
                    FR      GR      IT
    1980-01-01  4.0405  1.7246  804.74
    1980-02-01  4.0963  1.7482  810.01
    1980-03-01  4.3149  1.8519  860.13
    
    >>> df.pct_change()
                      FR        GR        IT
    1980-01-01       NaN       NaN       NaN
    1980-02-01  0.013810  0.013684  0.006549
    1980-03-01  0.053365  0.059318  0.061876
    
    Percentage of change in GOOG and APPL stock volume. Shows computing
    the percentage change between columns.
    
    >>> df = pd.DataFrame({
    ...     '2016': [1769950, 30586265],
    ...     '2015': [1500923, 40912316],
    ...     '2014': [1371819, 41403351]},
    ...     index=['GOOG', 'APPL'])
    >>> df
              2016      2015      2014
    GOOG   1769950   1500923   1371819
    APPL  30586265  40912316  41403351
    
    >>> df.pct_change(axis='columns', periods=-1)
              2016      2015  2014
    GOOG  0.179241  0.094112   NaN
    APPL -0.252395 -0.011860   NaN

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& pipe &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pipe in module pandas.core.generic:

pipe(func: 'Callable[..., T] | tuple[Callable[..., T], str]', *args, **kwargs) -> 'T' method of pandas.core.frame.DataFrame instance
    Apply chainable functions that expect Series or DataFrames.
    
    Parameters
    ----------
    func : function
        Function to apply to the Series/DataFrame.
        ``args``, and ``kwargs`` are passed into ``func``.
        Alternatively a ``(callable, data_keyword)`` tuple where
        ``data_keyword`` is a string indicating the keyword of
        ``callable`` that expects the Series/DataFrame.
    *args : iterable, optional
        Positional arguments passed into ``func``.
    **kwargs : mapping, optional
        A dictionary of keyword arguments passed into ``func``.
    
    Returns
    -------
    the return type of ``func``.
    
    See Also
    --------
    DataFrame.apply : Apply a function along input axis of DataFrame.
    DataFrame.map : Apply a function elementwise on a whole DataFrame.
    Series.map : Apply a mapping correspondence on a
        :class:`~pandas.Series`.
    
    Notes
    -----
    Use ``.pipe`` when chaining together functions that expect
    Series, DataFrames or GroupBy objects.
    
    Examples
    --------
    Constructing a income DataFrame from a dictionary.
    
    >>> data = [[8000, 1000], [9500, np.nan], [5000, 2000]]
    >>> df = pd.DataFrame(data, columns=['Salary', 'Others'])
    >>> df
       Salary  Others
    0    8000  1000.0
    1    9500     NaN
    2    5000  2000.0
    
    Functions that perform tax reductions on an income DataFrame.
    
    >>> def subtract_federal_tax(df):
    ...     return df * 0.9
    >>> def subtract_state_tax(df, rate):
    ...     return df * (1 - rate)
    >>> def subtract_national_insurance(df, rate, rate_increase):
    ...     new_rate = rate + rate_increase
    ...     return df * (1 - new_rate)
    
    Instead of writing
    
    >>> subtract_national_insurance(
    ...     subtract_state_tax(subtract_federal_tax(df), rate=0.12),
    ...     rate=0.05,
    ...     rate_increase=0.02)  # doctest: +SKIP
    
    You can write
    
    >>> (
    ...     df.pipe(subtract_federal_tax)
    ...     .pipe(subtract_state_tax, rate=0.12)
    ...     .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)
    ... )
        Salary   Others
    0  5892.48   736.56
    1  6997.32      NaN
    2  3682.80  1473.12
    
    If you have a function that takes the data as (say) the second
    argument, pass a tuple indicating which keyword expects the
    data. For example, suppose ``national_insurance`` takes its data as ``df``
    in the second argument:
    
    >>> def subtract_national_insurance(rate, df, rate_increase):
    ...     new_rate = rate + rate_increase
    ...     return df * (1 - new_rate)
    >>> (
    ...     df.pipe(subtract_federal_tax)
    ...     .pipe(subtract_state_tax, rate=0.12)
    ...     .pipe(
    ...         (subtract_national_insurance, 'df'),
    ...         rate=0.05,
    ...         rate_increase=0.02
    ...     )
    ... )
        Salary   Others
    0  5892.48   736.56
    1  6997.32      NaN
    2  3682.80  1473.12

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& pivot &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pivot in module pandas.core.frame:

pivot(*, columns, index=<no_default>, values=<no_default>) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Return reshaped DataFrame organized by given index / column values.
    
    Reshape data (produce a "pivot" table) based on column values. Uses
    unique values from specified `index` / `columns` to form axes of the
    resulting DataFrame. This function does not support data
    aggregation, multiple values will result in a MultiIndex in the
    columns. See the :ref:`User Guide <reshaping>` for more on reshaping.
    
    Parameters
    ----------
    columns : str or object or a list of str
        Column to use to make new frame's columns.
    index : str or object or a list of str, optional
        Column to use to make new frame's index. If not given, uses existing index.
    values : str, object or a list of the previous, optional
        Column(s) to use for populating new frame's values. If not
        specified, all remaining columns will be used and the result will
        have hierarchically indexed columns.
    
    Returns
    -------
    DataFrame
        Returns reshaped DataFrame.
    
    Raises
    ------
    ValueError:
        When there are any `index`, `columns` combinations with multiple
        values. `DataFrame.pivot_table` when you need to aggregate.
    
    See Also
    --------
    DataFrame.pivot_table : Generalization of pivot that can handle
        duplicate values for one index/column pair.
    DataFrame.unstack : Pivot based on the index values instead of a
        column.
    wide_to_long : Wide panel to long format. Less flexible but more
        user-friendly than melt.
    
    Notes
    -----
    For finer-tuned control, see hierarchical indexing documentation along
    with the related stack/unstack methods.
    
    Reference :ref:`the user guide <reshaping.pivot>` for more examples.
    
    Examples
    --------
    >>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',
    ...                            'two'],
    ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],
    ...                    'baz': [1, 2, 3, 4, 5, 6],
    ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})
    >>> df
        foo   bar  baz  zoo
    0   one   A    1    x
    1   one   B    2    y
    2   one   C    3    z
    3   two   A    4    q
    4   two   B    5    w
    5   two   C    6    t
    
    >>> df.pivot(index='foo', columns='bar', values='baz')
    bar  A   B   C
    foo
    one  1   2   3
    two  4   5   6
    
    >>> df.pivot(index='foo', columns='bar')['baz']
    bar  A   B   C
    foo
    one  1   2   3
    two  4   5   6
    
    >>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])
          baz       zoo
    bar   A  B  C   A  B  C
    foo
    one   1  2  3   x  y  z
    two   4  5  6   q  w  t
    
    You could also assign a list of column names or a list of index names.
    
    >>> df = pd.DataFrame({
    ...        "lev1": [1, 1, 1, 2, 2, 2],
    ...        "lev2": [1, 1, 2, 1, 1, 2],
    ...        "lev3": [1, 2, 1, 2, 1, 2],
    ...        "lev4": [1, 2, 3, 4, 5, 6],
    ...        "values": [0, 1, 2, 3, 4, 5]})
    >>> df
        lev1 lev2 lev3 lev4 values
    0   1    1    1    1    0
    1   1    1    2    2    1
    2   1    2    1    3    2
    3   2    1    2    4    3
    4   2    1    1    5    4
    5   2    2    2    6    5
    
    >>> df.pivot(index="lev1", columns=["lev2", "lev3"], values="values")
    lev2    1         2
    lev3    1    2    1    2
    lev1
    1     0.0  1.0  2.0  NaN
    2     4.0  3.0  NaN  5.0
    
    >>> df.pivot(index=["lev1", "lev2"], columns=["lev3"], values="values")
          lev3    1    2
    lev1  lev2
       1     1  0.0  1.0
             2  2.0  NaN
       2     1  4.0  3.0
             2  NaN  5.0
    
    A ValueError is raised if there are any duplicates.
    
    >>> df = pd.DataFrame({"foo": ['one', 'one', 'two', 'two'],
    ...                    "bar": ['A', 'A', 'B', 'C'],
    ...                    "baz": [1, 2, 3, 4]})
    >>> df
       foo bar  baz
    0  one   A    1
    1  one   A    2
    2  two   B    3
    3  two   C    4
    
    Notice that the first two rows are the same for our `index`
    and `columns` arguments.
    
    >>> df.pivot(index='foo', columns='bar', values='baz')
    Traceback (most recent call last):
       ...
    ValueError: Index contains duplicate entries, cannot reshape

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& pivot_table &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pivot_table in module pandas.core.frame:

pivot_table(values=None, index=None, columns=None, aggfunc: 'AggFuncType' = 'mean', fill_value=None, margins: 'bool' = False, dropna: 'bool' = True, margins_name: 'Level' = 'All', observed: 'bool | lib.NoDefault' = <no_default>, sort: 'bool' = True) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Create a spreadsheet-style pivot table as a DataFrame.
    
    The levels in the pivot table will be stored in MultiIndex objects
    (hierarchical indexes) on the index and columns of the result DataFrame.
    
    Parameters
    ----------
    values : list-like or scalar, optional
        Column or columns to aggregate.
    index : column, Grouper, array, or list of the previous
        Keys to group by on the pivot table index. If a list is passed,
        it can contain any of the other types (except list). If an array is
        passed, it must be the same length as the data and will be used in
        the same manner as column values.
    columns : column, Grouper, array, or list of the previous
        Keys to group by on the pivot table column. If a list is passed,
        it can contain any of the other types (except list). If an array is
        passed, it must be the same length as the data and will be used in
        the same manner as column values.
    aggfunc : function, list of functions, dict, default "mean"
        If a list of functions is passed, the resulting pivot table will have
        hierarchical columns whose top level are the function names
        (inferred from the function objects themselves).
        If a dict is passed, the key is column to aggregate and the value is
        function or list of functions. If ``margin=True``, aggfunc will be
        used to calculate the partial aggregates.
    fill_value : scalar, default None
        Value to replace missing values with (in the resulting pivot table,
        after aggregation).
    margins : bool, default False
        If ``margins=True``, special ``All`` columns and rows
        will be added with partial group aggregates across the categories
        on the rows and columns.
    dropna : bool, default True
        Do not include columns whose entries are all NaN. If True,
        rows with a NaN value in any column will be omitted before
        computing margins.
    margins_name : str, default 'All'
        Name of the row / column that will contain the totals
        when margins is True.
    observed : bool, default False
        This only applies if any of the groupers are Categoricals.
        If True: only show observed values for categorical groupers.
        If False: show all values for categorical groupers.
    
        .. deprecated:: 2.2.0
    
            The default value of ``False`` is deprecated and will change to
            ``True`` in a future version of pandas.
    
    sort : bool, default True
        Specifies if the result should be sorted.
    
        .. versionadded:: 1.3.0
    
    Returns
    -------
    DataFrame
        An Excel style pivot table.
    
    See Also
    --------
    DataFrame.pivot : Pivot without aggregation that can handle
        non-numeric data.
    DataFrame.melt: Unpivot a DataFrame from wide to long format,
        optionally leaving identifiers set.
    wide_to_long : Wide panel to long format. Less flexible but more
        user-friendly than melt.
    
    Notes
    -----
    Reference :ref:`the user guide <reshaping.pivot>` for more examples.
    
    Examples
    --------
    >>> df = pd.DataFrame({"A": ["foo", "foo", "foo", "foo", "foo",
    ...                          "bar", "bar", "bar", "bar"],
    ...                    "B": ["one", "one", "one", "two", "two",
    ...                          "one", "one", "two", "two"],
    ...                    "C": ["small", "large", "large", "small",
    ...                          "small", "large", "small", "small",
    ...                          "large"],
    ...                    "D": [1, 2, 2, 3, 3, 4, 5, 6, 7],
    ...                    "E": [2, 4, 5, 5, 6, 6, 8, 9, 9]})
    >>> df
         A    B      C  D  E
    0  foo  one  small  1  2
    1  foo  one  large  2  4
    2  foo  one  large  2  5
    3  foo  two  small  3  5
    4  foo  two  small  3  6
    5  bar  one  large  4  6
    6  bar  one  small  5  8
    7  bar  two  small  6  9
    8  bar  two  large  7  9
    
    This first example aggregates values by taking the sum.
    
    >>> table = pd.pivot_table(df, values='D', index=['A', 'B'],
    ...                        columns=['C'], aggfunc="sum")
    >>> table
    C        large  small
    A   B
    bar one    4.0    5.0
        two    7.0    6.0
    foo one    4.0    1.0
        two    NaN    6.0
    
    We can also fill missing values using the `fill_value` parameter.
    
    >>> table = pd.pivot_table(df, values='D', index=['A', 'B'],
    ...                        columns=['C'], aggfunc="sum", fill_value=0)
    >>> table
    C        large  small
    A   B
    bar one      4      5
        two      7      6
    foo one      4      1
        two      0      6
    
    The next example aggregates by taking the mean across multiple columns.
    
    >>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],
    ...                        aggfunc={'D': "mean", 'E': "mean"})
    >>> table
                    D         E
    A   C
    bar large  5.500000  7.500000
        small  5.500000  8.500000
    foo large  2.000000  4.500000
        small  2.333333  4.333333
    
    We can also calculate multiple types of aggregations for any given
    value column.
    
    >>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],
    ...                        aggfunc={'D': "mean",
    ...                                 'E': ["min", "max", "mean"]})
    >>> table
                      D   E
                   mean max      mean  min
    A   C
    bar large  5.500000   9  7.500000    6
        small  5.500000   9  8.500000    8
    foo large  2.000000   5  4.500000    4
        small  2.333333   6  4.333333    2

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& plot &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on PlotAccessor in module pandas.plotting._core object:

class PlotAccessor(pandas.core.base.PandasObject)
 |  PlotAccessor(data: 'Series | DataFrame') -> 'None'
 |  
 |  Make plots of Series or DataFrame.
 |  
 |  Uses the backend specified by the
 |  option ``plotting.backend``. By default, matplotlib is used.
 |  
 |  Parameters
 |  ----------
 |  data : Series or DataFrame
 |      The object for which the method is called.
 |  x : label or position, default None
 |      Only used if data is a DataFrame.
 |  y : label, position or list of label, positions, default None
 |      Allows plotting of one column versus another. Only used if data is a
 |      DataFrame.
 |  kind : str
 |      The kind of plot to produce:
 |  
 |      - 'line' : line plot (default)
 |      - 'bar' : vertical bar plot
 |      - 'barh' : horizontal bar plot
 |      - 'hist' : histogram
 |      - 'box' : boxplot
 |      - 'kde' : Kernel Density Estimation plot
 |      - 'density' : same as 'kde'
 |      - 'area' : area plot
 |      - 'pie' : pie plot
 |      - 'scatter' : scatter plot (DataFrame only)
 |      - 'hexbin' : hexbin plot (DataFrame only)
 |  ax : matplotlib axes object, default None
 |      An axes of the current figure.
 |  subplots : bool or sequence of iterables, default False
 |      Whether to group columns into subplots:
 |  
 |      - ``False`` : No subplots will be used
 |      - ``True`` : Make separate subplots for each column.
 |      - sequence of iterables of column labels: Create a subplot for each
 |        group of columns. For example `[('a', 'c'), ('b', 'd')]` will
 |        create 2 subplots: one with columns 'a' and 'c', and one
 |        with columns 'b' and 'd'. Remaining columns that aren't specified
 |        will be plotted in additional subplots (one per column).
 |  
 |        .. versionadded:: 1.5.0
 |  
 |  sharex : bool, default True if ax is None else False
 |      In case ``subplots=True``, share x axis and set some x axis labels
 |      to invisible; defaults to True if ax is None otherwise False if
 |      an ax is passed in; Be aware, that passing in both an ax and
 |      ``sharex=True`` will alter all x axis labels for all axis in a figure.
 |  sharey : bool, default False
 |      In case ``subplots=True``, share y axis and set some y axis labels to invisible.
 |  layout : tuple, optional
 |      (rows, columns) for the layout of subplots.
 |  figsize : a tuple (width, height) in inches
 |      Size of a figure object.
 |  use_index : bool, default True
 |      Use index as ticks for x axis.
 |  title : str or list
 |      Title to use for the plot. If a string is passed, print the string
 |      at the top of the figure. If a list is passed and `subplots` is
 |      True, print each item in the list above the corresponding subplot.
 |  grid : bool, default None (matlab style default)
 |      Axis grid lines.
 |  legend : bool or {'reverse'}
 |      Place legend on axis subplots.
 |  style : list or dict
 |      The matplotlib line style per column.
 |  logx : bool or 'sym', default False
 |      Use log scaling or symlog scaling on x axis.
 |  
 |  logy : bool or 'sym' default False
 |      Use log scaling or symlog scaling on y axis.
 |  
 |  loglog : bool or 'sym', default False
 |      Use log scaling or symlog scaling on both x and y axes.
 |  
 |  xticks : sequence
 |      Values to use for the xticks.
 |  yticks : sequence
 |      Values to use for the yticks.
 |  xlim : 2-tuple/list
 |      Set the x limits of the current axes.
 |  ylim : 2-tuple/list
 |      Set the y limits of the current axes.
 |  xlabel : label, optional
 |      Name to use for the xlabel on x-axis. Default uses index name as xlabel, or the
 |      x-column name for planar plots.
 |  
 |      .. versionchanged:: 2.0.0
 |  
 |          Now applicable to histograms.
 |  
 |  ylabel : label, optional
 |      Name to use for the ylabel on y-axis. Default will show no ylabel, or the
 |      y-column name for planar plots.
 |  
 |      .. versionchanged:: 2.0.0
 |  
 |          Now applicable to histograms.
 |  
 |  rot : float, default None
 |      Rotation for ticks (xticks for vertical, yticks for horizontal
 |      plots).
 |  fontsize : float, default None
 |      Font size for xticks and yticks.
 |  colormap : str or matplotlib colormap object, default None
 |      Colormap to select colors from. If string, load colormap with that
 |      name from matplotlib.
 |  colorbar : bool, optional
 |      If True, plot colorbar (only relevant for 'scatter' and 'hexbin'
 |      plots).
 |  position : float
 |      Specify relative alignments for bar plot layout.
 |      From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |      (center).
 |  table : bool, Series or DataFrame, default False
 |      If True, draw a table using the data in the DataFrame and the data
 |      will be transposed to meet matplotlib's default layout.
 |      If a Series or DataFrame is passed, use passed data to draw a
 |      table.
 |  yerr : DataFrame, Series, array-like, dict and str
 |      See :ref:`Plotting with Error Bars <visualization.errorbars>` for
 |      detail.
 |  xerr : DataFrame, Series, array-like, dict and str
 |      Equivalent to yerr.
 |  stacked : bool, default False in line and bar plots, and True in area plot
 |      If True, create stacked plot.
 |  secondary_y : bool or sequence, default False
 |      Whether to plot on the secondary y-axis if a list/tuple, which
 |      columns to plot on secondary y-axis.
 |  mark_right : bool, default True
 |      When using a secondary_y axis, automatically mark the column
 |      labels with "(right)" in the legend.
 |  include_bool : bool, default is False
 |      If True, boolean values can be plotted.
 |  backend : str, default None
 |      Backend to use instead of the backend specified in the option
 |      ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |      specify the ``plotting.backend`` for the whole session, set
 |      ``pd.options.plotting.backend``.
 |  **kwargs
 |      Options to pass to matplotlib plotting method.
 |  
 |  Returns
 |  -------
 |  :class:`matplotlib.axes.Axes` or numpy.ndarray of them
 |      If the backend is not the default matplotlib one, the return value
 |      will be the object returned by the backend.
 |  
 |  Notes
 |  -----
 |  - See matplotlib documentation online for more on this subject
 |  - If `kind` = 'bar' or 'barh', you can specify relative alignments
 |    for bar plot layout by `position` keyword.
 |    From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |    (center)
 |  
 |  Examples
 |  --------
 |  For Series:
 |  
 |  .. plot::
 |      :context: close-figs
 |  
 |      >>> ser = pd.Series([1, 2, 3, 3])
 |      >>> plot = ser.plot(kind='hist', title="My plot")
 |  
 |  For DataFrame:
 |  
 |  .. plot::
 |      :context: close-figs
 |  
 |      >>> df = pd.DataFrame({'length': [1.5, 0.5, 1.2, 0.9, 3],
 |      ...                   'width': [0.7, 0.2, 0.15, 0.2, 1.1]},
 |      ...                   index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])
 |      >>> plot = df.plot(title="DataFrame Plot")
 |  
 |  For SeriesGroupBy:
 |  
 |  .. plot::
 |      :context: close-figs
 |  
 |      >>> lst = [-1, -2, -3, 1, 2, 3]
 |      >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |      >>> plot = ser.groupby(lambda x: x > 0).plot(title="SeriesGroupBy Plot")
 |  
 |  For DataFrameGroupBy:
 |  
 |  .. plot::
 |      :context: close-figs
 |  
 |      >>> df = pd.DataFrame({"col1" : [1, 2, 3, 4],
 |      ...                   "col2" : ["A", "B", "A", "B"]})
 |      >>> plot = df.groupby("col2").plot(kind="bar", title="DataFrameGroupBy Plot")
 |  
 |  Method resolution order:
 |      PlotAccessor
 |      pandas.core.base.PandasObject
 |      pandas.core.accessor.DirNamesMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __call__(self, *args, **kwargs)
 |      Make plots of Series or DataFrame.
 |      
 |      Uses the backend specified by the
 |      option ``plotting.backend``. By default, matplotlib is used.
 |      
 |      Parameters
 |      ----------
 |      data : Series or DataFrame
 |          The object for which the method is called.
 |      x : label or position, default None
 |          Only used if data is a DataFrame.
 |      y : label, position or list of label, positions, default None
 |          Allows plotting of one column versus another. Only used if data is a
 |          DataFrame.
 |      kind : str
 |          The kind of plot to produce:
 |      
 |          - 'line' : line plot (default)
 |          - 'bar' : vertical bar plot
 |          - 'barh' : horizontal bar plot
 |          - 'hist' : histogram
 |          - 'box' : boxplot
 |          - 'kde' : Kernel Density Estimation plot
 |          - 'density' : same as 'kde'
 |          - 'area' : area plot
 |          - 'pie' : pie plot
 |          - 'scatter' : scatter plot (DataFrame only)
 |          - 'hexbin' : hexbin plot (DataFrame only)
 |      ax : matplotlib axes object, default None
 |          An axes of the current figure.
 |      subplots : bool or sequence of iterables, default False
 |          Whether to group columns into subplots:
 |      
 |          - ``False`` : No subplots will be used
 |          - ``True`` : Make separate subplots for each column.
 |          - sequence of iterables of column labels: Create a subplot for each
 |            group of columns. For example `[('a', 'c'), ('b', 'd')]` will
 |            create 2 subplots: one with columns 'a' and 'c', and one
 |            with columns 'b' and 'd'. Remaining columns that aren't specified
 |            will be plotted in additional subplots (one per column).
 |      
 |            .. versionadded:: 1.5.0
 |      
 |      sharex : bool, default True if ax is None else False
 |          In case ``subplots=True``, share x axis and set some x axis labels
 |          to invisible; defaults to True if ax is None otherwise False if
 |          an ax is passed in; Be aware, that passing in both an ax and
 |          ``sharex=True`` will alter all x axis labels for all axis in a figure.
 |      sharey : bool, default False
 |          In case ``subplots=True``, share y axis and set some y axis labels to invisible.
 |      layout : tuple, optional
 |          (rows, columns) for the layout of subplots.
 |      figsize : a tuple (width, height) in inches
 |          Size of a figure object.
 |      use_index : bool, default True
 |          Use index as ticks for x axis.
 |      title : str or list
 |          Title to use for the plot. If a string is passed, print the string
 |          at the top of the figure. If a list is passed and `subplots` is
 |          True, print each item in the list above the corresponding subplot.
 |      grid : bool, default None (matlab style default)
 |          Axis grid lines.
 |      legend : bool or {'reverse'}
 |          Place legend on axis subplots.
 |      style : list or dict
 |          The matplotlib line style per column.
 |      logx : bool or 'sym', default False
 |          Use log scaling or symlog scaling on x axis.
 |      
 |      logy : bool or 'sym' default False
 |          Use log scaling or symlog scaling on y axis.
 |      
 |      loglog : bool or 'sym', default False
 |          Use log scaling or symlog scaling on both x and y axes.
 |      
 |      xticks : sequence
 |          Values to use for the xticks.
 |      yticks : sequence
 |          Values to use for the yticks.
 |      xlim : 2-tuple/list
 |          Set the x limits of the current axes.
 |      ylim : 2-tuple/list
 |          Set the y limits of the current axes.
 |      xlabel : label, optional
 |          Name to use for the xlabel on x-axis. Default uses index name as xlabel, or the
 |          x-column name for planar plots.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Now applicable to histograms.
 |      
 |      ylabel : label, optional
 |          Name to use for the ylabel on y-axis. Default will show no ylabel, or the
 |          y-column name for planar plots.
 |      
 |          .. versionchanged:: 2.0.0
 |      
 |              Now applicable to histograms.
 |      
 |      rot : float, default None
 |          Rotation for ticks (xticks for vertical, yticks for horizontal
 |          plots).
 |      fontsize : float, default None
 |          Font size for xticks and yticks.
 |      colormap : str or matplotlib colormap object, default None
 |          Colormap to select colors from. If string, load colormap with that
 |          name from matplotlib.
 |      colorbar : bool, optional
 |          If True, plot colorbar (only relevant for 'scatter' and 'hexbin'
 |          plots).
 |      position : float
 |          Specify relative alignments for bar plot layout.
 |          From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |          (center).
 |      table : bool, Series or DataFrame, default False
 |          If True, draw a table using the data in the DataFrame and the data
 |          will be transposed to meet matplotlib's default layout.
 |          If a Series or DataFrame is passed, use passed data to draw a
 |          table.
 |      yerr : DataFrame, Series, array-like, dict and str
 |          See :ref:`Plotting with Error Bars <visualization.errorbars>` for
 |          detail.
 |      xerr : DataFrame, Series, array-like, dict and str
 |          Equivalent to yerr.
 |      stacked : bool, default False in line and bar plots, and True in area plot
 |          If True, create stacked plot.
 |      secondary_y : bool or sequence, default False
 |          Whether to plot on the secondary y-axis if a list/tuple, which
 |          columns to plot on secondary y-axis.
 |      mark_right : bool, default True
 |          When using a secondary_y axis, automatically mark the column
 |          labels with "(right)" in the legend.
 |      include_bool : bool, default is False
 |          If True, boolean values can be plotted.
 |      backend : str, default None
 |          Backend to use instead of the backend specified in the option
 |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
 |          specify the ``plotting.backend`` for the whole session, set
 |          ``pd.options.plotting.backend``.
 |      **kwargs
 |          Options to pass to matplotlib plotting method.
 |      
 |      Returns
 |      -------
 |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them
 |          If the backend is not the default matplotlib one, the return value
 |          will be the object returned by the backend.
 |      
 |      Notes
 |      -----
 |      - See matplotlib documentation online for more on this subject
 |      - If `kind` = 'bar' or 'barh', you can specify relative alignments
 |        for bar plot layout by `position` keyword.
 |        From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5
 |        (center)
 |      
 |      Examples
 |      --------
 |      For Series:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ser = pd.Series([1, 2, 3, 3])
 |          >>> plot = ser.plot(kind='hist', title="My plot")
 |      
 |      For DataFrame:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({'length': [1.5, 0.5, 1.2, 0.9, 3],
 |          ...                   'width': [0.7, 0.2, 0.15, 0.2, 1.1]},
 |          ...                   index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])
 |          >>> plot = df.plot(title="DataFrame Plot")
 |      
 |      For SeriesGroupBy:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> lst = [-1, -2, -3, 1, 2, 3]
 |          >>> ser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)
 |          >>> plot = ser.groupby(lambda x: x > 0).plot(title="SeriesGroupBy Plot")
 |      
 |      For DataFrameGroupBy:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({"col1" : [1, 2, 3, 4],
 |          ...                   "col2" : ["A", "B", "A", "B"]})
 |          >>> plot = df.groupby("col2").plot(kind="bar", title="DataFrameGroupBy Plot")
 |  
 |  __init__(self, data: 'Series | DataFrame') -> 'None'
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  area(self, x: 'Hashable | None' = None, y: 'Hashable | None' = None, stacked: 'bool' = True, **kwargs) -> 'PlotAccessor'
 |      Draw a stacked area plot.
 |      
 |      An area plot displays quantitative data visually.
 |      This function wraps the matplotlib area function.
 |      
 |      Parameters
 |      ----------
 |      x : label or position, optional
 |          Coordinates for the X axis. By default uses the index.
 |      y : label or position, optional
 |          Column to plot. By default uses all columns.
 |      stacked : bool, default True
 |          Area plots are stacked by default. Set to False to create a
 |          unstacked plot.
 |      **kwargs
 |          Additional keyword arguments are documented in
 |          :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      matplotlib.axes.Axes or numpy.ndarray
 |          Area plot, or array of area plots if subplots is True.
 |      
 |      See Also
 |      --------
 |      DataFrame.plot : Make plots of DataFrame using matplotlib / pylab.
 |      
 |      Examples
 |      --------
 |      Draw an area plot based on basic business metrics:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({
 |          ...     'sales': [3, 2, 3, 9, 10, 6],
 |          ...     'signups': [5, 5, 6, 12, 14, 13],
 |          ...     'visits': [20, 42, 28, 62, 81, 50],
 |          ... }, index=pd.date_range(start='2018/01/01', end='2018/07/01',
 |          ...                        freq='ME'))
 |          >>> ax = df.plot.area()
 |      
 |      Area plots are stacked by default. To produce an unstacked plot,
 |      pass ``stacked=False``:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax = df.plot.area(stacked=False)
 |      
 |      Draw an area plot for a single column:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax = df.plot.area(y='sales')
 |      
 |      Draw with a different `x`:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({
 |          ...     'sales': [3, 2, 3],
 |          ...     'visits': [20, 42, 28],
 |          ...     'day': [1, 2, 3],
 |          ... })
 |          >>> ax = df.plot.area(x='day')
 |  
 |  bar(self, x: 'Hashable | None' = None, y: 'Hashable | None' = None, **kwargs) -> 'PlotAccessor'
 |      Vertical bar plot.
 |      
 |      A bar plot is a plot that presents categorical data with
 |      rectangular bars with lengths proportional to the values that they
 |      represent. A bar plot shows comparisons among discrete categories. One
 |      axis of the plot shows the specific categories being compared, and the
 |      other axis represents a measured value.
 |      
 |      Parameters
 |      ----------
 |      x : label or position, optional
 |          Allows plotting of one column versus another. If not specified,
 |          the index of the DataFrame is used.
 |      y : label or position, optional
 |          Allows plotting of one column versus another. If not specified,
 |          all numerical columns are used.
 |      color : str, array-like, or dict, optional
 |          The color for each of the DataFrame's columns. Possible values are:
 |      
 |          - A single color string referred to by name, RGB or RGBA code,
 |              for instance 'red' or '#a98d19'.
 |      
 |          - A sequence of color strings referred to by name, RGB or RGBA
 |              code, which will be used for each column recursively. For
 |              instance ['green','yellow'] each column's bar will be filled in
 |              green or yellow, alternatively. If there is only a single column to
 |              be plotted, then only the first color from the color list will be
 |              used.
 |      
 |          - A dict of the form {column name : color}, so that each column will be
 |              colored accordingly. For example, if your columns are called `a` and
 |              `b`, then passing {'a': 'green', 'b': 'red'} will color bars for
 |              column `a` in green and bars for column `b` in red.
 |      
 |      **kwargs
 |          Additional keyword arguments are documented in
 |          :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      matplotlib.axes.Axes or np.ndarray of them
 |          An ndarray is returned with one :class:`matplotlib.axes.Axes`
 |          per column when ``subplots=True``.
 |      
 |              See Also
 |              --------
 |              DataFrame.plot.barh : Horizontal bar plot.
 |              DataFrame.plot : Make plots of a DataFrame.
 |              matplotlib.pyplot.bar : Make a bar plot with matplotlib.
 |      
 |              Examples
 |              --------
 |              Basic plot.
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> df = pd.DataFrame({'lab':['A', 'B', 'C'], 'val':[10, 30, 20]})
 |                  >>> ax = df.plot.bar(x='lab', y='val', rot=0)
 |      
 |              Plot a whole dataframe to a bar plot. Each column is assigned a
 |              distinct color, and each row is nested in a group along the
 |              horizontal axis.
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]
 |                  >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]
 |                  >>> index = ['snail', 'pig', 'elephant',
 |                  ...          'rabbit', 'giraffe', 'coyote', 'horse']
 |                  >>> df = pd.DataFrame({'speed': speed,
 |                  ...                    'lifespan': lifespan}, index=index)
 |                  >>> ax = df.plot.bar(rot=0)
 |      
 |              Plot stacked bar charts for the DataFrame
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> ax = df.plot.bar(stacked=True)
 |      
 |              Instead of nesting, the figure can be split by column with
 |              ``subplots=True``. In this case, a :class:`numpy.ndarray` of
 |              :class:`matplotlib.axes.Axes` are returned.
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> axes = df.plot.bar(rot=0, subplots=True)
 |                  >>> axes[1].legend(loc=2)  # doctest: +SKIP
 |      
 |              If you don't like the default colours, you can specify how you'd
 |              like each column to be colored.
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> axes = df.plot.bar(
 |                  ...     rot=0, subplots=True, color={"speed": "red", "lifespan": "green"}
 |                  ... )
 |                  >>> axes[1].legend(loc=2)  # doctest: +SKIP
 |      
 |              Plot a single column.
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> ax = df.plot.bar(y='speed', rot=0)
 |      
 |              Plot only selected categories for the DataFrame.
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> ax = df.plot.bar(x='lifespan', rot=0)
 |  
 |  barh(self, x: 'Hashable | None' = None, y: 'Hashable | None' = None, **kwargs) -> 'PlotAccessor'
 |      Make a horizontal bar plot.
 |      
 |      A horizontal bar plot is a plot that presents quantitative data with
 |      rectangular bars with lengths proportional to the values that they
 |      represent. A bar plot shows comparisons among discrete categories. One
 |      axis of the plot shows the specific categories being compared, and the
 |      other axis represents a measured value.
 |      
 |      Parameters
 |      ----------
 |      x : label or position, optional
 |          Allows plotting of one column versus another. If not specified,
 |          the index of the DataFrame is used.
 |      y : label or position, optional
 |          Allows plotting of one column versus another. If not specified,
 |          all numerical columns are used.
 |      color : str, array-like, or dict, optional
 |          The color for each of the DataFrame's columns. Possible values are:
 |      
 |          - A single color string referred to by name, RGB or RGBA code,
 |              for instance 'red' or '#a98d19'.
 |      
 |          - A sequence of color strings referred to by name, RGB or RGBA
 |              code, which will be used for each column recursively. For
 |              instance ['green','yellow'] each column's bar will be filled in
 |              green or yellow, alternatively. If there is only a single column to
 |              be plotted, then only the first color from the color list will be
 |              used.
 |      
 |          - A dict of the form {column name : color}, so that each column will be
 |              colored accordingly. For example, if your columns are called `a` and
 |              `b`, then passing {'a': 'green', 'b': 'red'} will color bars for
 |              column `a` in green and bars for column `b` in red.
 |      
 |      **kwargs
 |          Additional keyword arguments are documented in
 |          :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      matplotlib.axes.Axes or np.ndarray of them
 |          An ndarray is returned with one :class:`matplotlib.axes.Axes`
 |          per column when ``subplots=True``.
 |      
 |              See Also
 |              --------
 |              DataFrame.plot.bar: Vertical bar plot.
 |              DataFrame.plot : Make plots of DataFrame using matplotlib.
 |              matplotlib.axes.Axes.bar : Plot a vertical bar plot using matplotlib.
 |      
 |              Examples
 |              --------
 |              Basic example
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> df = pd.DataFrame({'lab': ['A', 'B', 'C'], 'val': [10, 30, 20]})
 |                  >>> ax = df.plot.barh(x='lab', y='val')
 |      
 |              Plot a whole DataFrame to a horizontal bar plot
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]
 |                  >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]
 |                  >>> index = ['snail', 'pig', 'elephant',
 |                  ...          'rabbit', 'giraffe', 'coyote', 'horse']
 |                  >>> df = pd.DataFrame({'speed': speed,
 |                  ...                    'lifespan': lifespan}, index=index)
 |                  >>> ax = df.plot.barh()
 |      
 |              Plot stacked barh charts for the DataFrame
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> ax = df.plot.barh(stacked=True)
 |      
 |              We can specify colors for each column
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> ax = df.plot.barh(color={"speed": "red", "lifespan": "green"})
 |      
 |              Plot a column of the DataFrame to a horizontal bar plot
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]
 |                  >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]
 |                  >>> index = ['snail', 'pig', 'elephant',
 |                  ...          'rabbit', 'giraffe', 'coyote', 'horse']
 |                  >>> df = pd.DataFrame({'speed': speed,
 |                  ...                    'lifespan': lifespan}, index=index)
 |                  >>> ax = df.plot.barh(y='speed')
 |      
 |              Plot DataFrame versus the desired column
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]
 |                  >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]
 |                  >>> index = ['snail', 'pig', 'elephant',
 |                  ...          'rabbit', 'giraffe', 'coyote', 'horse']
 |                  >>> df = pd.DataFrame({'speed': speed,
 |                  ...                    'lifespan': lifespan}, index=index)
 |                  >>> ax = df.plot.barh(x='lifespan')
 |  
 |  box(self, by: 'IndexLabel | None' = None, **kwargs) -> 'PlotAccessor'
 |      Make a box plot of the DataFrame columns.
 |      
 |      A box plot is a method for graphically depicting groups of numerical
 |      data through their quartiles.
 |      The box extends from the Q1 to Q3 quartile values of the data,
 |      with a line at the median (Q2). The whiskers extend from the edges
 |      of box to show the range of the data. The position of the whiskers
 |      is set by default to 1.5*IQR (IQR = Q3 - Q1) from the edges of the
 |      box. Outlier points are those past the end of the whiskers.
 |      
 |      For further details see Wikipedia's
 |      entry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`__.
 |      
 |      A consideration when using this chart is that the box and the whiskers
 |      can overlap, which is very common when plotting small sets of data.
 |      
 |      Parameters
 |      ----------
 |      by : str or sequence
 |          Column in the DataFrame to group by.
 |      
 |          .. versionchanged:: 1.4.0
 |      
 |             Previously, `by` is silently ignore and makes no groupings
 |      
 |      **kwargs
 |          Additional keywords are documented in
 |          :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them
 |      
 |      See Also
 |      --------
 |      DataFrame.boxplot: Another method to draw a box plot.
 |      Series.plot.box: Draw a box plot from a Series object.
 |      matplotlib.pyplot.boxplot: Draw a box plot in matplotlib.
 |      
 |      Examples
 |      --------
 |      Draw a box plot from a DataFrame with four columns of randomly
 |      generated data.
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> data = np.random.randn(25, 4)
 |          >>> df = pd.DataFrame(data, columns=list('ABCD'))
 |          >>> ax = df.plot.box()
 |      
 |      You can also generate groupings if you specify the `by` parameter (which
 |      can take a column name, or a list or tuple of column names):
 |      
 |      .. versionchanged:: 1.4.0
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> age_list = [8, 10, 12, 14, 72, 74, 76, 78, 20, 25, 30, 35, 60, 85]
 |          >>> df = pd.DataFrame({"gender": list("MMMMMMMMFFFFFF"), "age": age_list})
 |          >>> ax = df.plot.box(column="age", by="gender", figsize=(10, 8))
 |  
 |  density = kde(self, bw_method: "Literal['scott', 'silverman'] | float | Callable | None" = None, ind: 'np.ndarray | int | None' = None, **kwargs) -> 'PlotAccessor'
 |  
 |  hexbin(self, x: 'Hashable', y: 'Hashable', C: 'Hashable | None' = None, reduce_C_function: 'Callable | None' = None, gridsize: 'int | tuple[int, int] | None' = None, **kwargs) -> 'PlotAccessor'
 |      Generate a hexagonal binning plot.
 |      
 |      Generate a hexagonal binning plot of `x` versus `y`. If `C` is `None`
 |      (the default), this is a histogram of the number of occurrences
 |      of the observations at ``(x[i], y[i])``.
 |      
 |      If `C` is specified, specifies values at given coordinates
 |      ``(x[i], y[i])``. These values are accumulated for each hexagonal
 |      bin and then reduced according to `reduce_C_function`,
 |      having as default the NumPy's mean function (:meth:`numpy.mean`).
 |      (If `C` is specified, it must also be a 1-D sequence
 |      of the same length as `x` and `y`, or a column label.)
 |      
 |      Parameters
 |      ----------
 |      x : int or str
 |          The column label or position for x points.
 |      y : int or str
 |          The column label or position for y points.
 |      C : int or str, optional
 |          The column label or position for the value of `(x, y)` point.
 |      reduce_C_function : callable, default `np.mean`
 |          Function of one argument that reduces all the values in a bin to
 |          a single number (e.g. `np.mean`, `np.max`, `np.sum`, `np.std`).
 |      gridsize : int or tuple of (int, int), default 100
 |          The number of hexagons in the x-direction.
 |          The corresponding number of hexagons in the y-direction is
 |          chosen in a way that the hexagons are approximately regular.
 |          Alternatively, gridsize can be a tuple with two elements
 |          specifying the number of hexagons in the x-direction and the
 |          y-direction.
 |      **kwargs
 |          Additional keyword arguments are documented in
 |          :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      matplotlib.AxesSubplot
 |          The matplotlib ``Axes`` on which the hexbin is plotted.
 |      
 |      See Also
 |      --------
 |      DataFrame.plot : Make plots of a DataFrame.
 |      matplotlib.pyplot.hexbin : Hexagonal binning plot using matplotlib,
 |          the matplotlib function that is used under the hood.
 |      
 |      Examples
 |      --------
 |      The following examples are generated with random data from
 |      a normal distribution.
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> n = 10000
 |          >>> df = pd.DataFrame({'x': np.random.randn(n),
 |          ...                    'y': np.random.randn(n)})
 |          >>> ax = df.plot.hexbin(x='x', y='y', gridsize=20)
 |      
 |      The next example uses `C` and `np.sum` as `reduce_C_function`.
 |      Note that `'observations'` values ranges from 1 to 5 but the result
 |      plot shows values up to more than 25. This is because of the
 |      `reduce_C_function`.
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> n = 500
 |          >>> df = pd.DataFrame({
 |          ...     'coord_x': np.random.uniform(-3, 3, size=n),
 |          ...     'coord_y': np.random.uniform(30, 50, size=n),
 |          ...     'observations': np.random.randint(1,5, size=n)
 |          ...     })
 |          >>> ax = df.plot.hexbin(x='coord_x',
 |          ...                     y='coord_y',
 |          ...                     C='observations',
 |          ...                     reduce_C_function=np.sum,
 |          ...                     gridsize=10,
 |          ...                     cmap="viridis")
 |  
 |  hist(self, by: 'IndexLabel | None' = None, bins: 'int' = 10, **kwargs) -> 'PlotAccessor'
 |      Draw one histogram of the DataFrame's columns.
 |      
 |      A histogram is a representation of the distribution of data.
 |      This function groups the values of all given Series in the DataFrame
 |      into bins and draws all bins in one :class:`matplotlib.axes.Axes`.
 |      This is useful when the DataFrame's Series are in a similar scale.
 |      
 |      Parameters
 |      ----------
 |      by : str or sequence, optional
 |          Column in the DataFrame to group by.
 |      
 |          .. versionchanged:: 1.4.0
 |      
 |             Previously, `by` is silently ignore and makes no groupings
 |      
 |      bins : int, default 10
 |          Number of histogram bins to be used.
 |      **kwargs
 |          Additional keyword arguments are documented in
 |          :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      class:`matplotlib.AxesSubplot`
 |          Return a histogram plot.
 |      
 |      See Also
 |      --------
 |      DataFrame.hist : Draw histograms per DataFrame's Series.
 |      Series.hist : Draw a histogram with Series' data.
 |      
 |      Examples
 |      --------
 |      When we roll a die 6000 times, we expect to get each value around 1000
 |      times. But when we roll two dice and sum the result, the distribution
 |      is going to be quite different. A histogram illustrates those
 |      distributions.
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame(np.random.randint(1, 7, 6000), columns=['one'])
 |          >>> df['two'] = df['one'] + np.random.randint(1, 7, 6000)
 |          >>> ax = df.plot.hist(bins=12, alpha=0.5)
 |      
 |      A grouped histogram can be generated by providing the parameter `by` (which
 |      can be a column name, or a list of column names):
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> age_list = [8, 10, 12, 14, 72, 74, 76, 78, 20, 25, 30, 35, 60, 85]
 |          >>> df = pd.DataFrame({"gender": list("MMMMMMMMFFFFFF"), "age": age_list})
 |          >>> ax = df.plot.hist(column=["age"], by="gender", figsize=(10, 8))
 |  
 |  kde(self, bw_method: "Literal['scott', 'silverman'] | float | Callable | None" = None, ind: 'np.ndarray | int | None' = None, **kwargs) -> 'PlotAccessor'
 |      Generate Kernel Density Estimate plot using Gaussian kernels.
 |      
 |      In statistics, `kernel density estimation`_ (KDE) is a non-parametric
 |      way to estimate the probability density function (PDF) of a random
 |      variable. This function uses Gaussian kernels and includes automatic
 |      bandwidth determination.
 |      
 |      .. _kernel density estimation:
 |          https://en.wikipedia.org/wiki/Kernel_density_estimation
 |      
 |      Parameters
 |      ----------
 |      bw_method : str, scalar or callable, optional
 |          The method used to calculate the estimator bandwidth. This can be
 |          'scott', 'silverman', a scalar constant or a callable.
 |          If None (default), 'scott' is used.
 |          See :class:`scipy.stats.gaussian_kde` for more information.
 |      ind : NumPy array or int, optional
 |          Evaluation points for the estimated PDF. If None (default),
 |          1000 equally spaced points are used. If `ind` is a NumPy array, the
 |          KDE is evaluated at the points passed. If `ind` is an integer,
 |          `ind` number of equally spaced points are used.
 |      **kwargs
 |          Additional keyword arguments are documented in
 |          :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      matplotlib.axes.Axes or numpy.ndarray of them
 |      
 |      See Also
 |      --------
 |      scipy.stats.gaussian_kde : Representation of a kernel-density
 |          estimate using Gaussian kernels. This is the function used
 |          internally to estimate the PDF.
 |      
 |      Examples
 |      --------
 |      Given a Series of points randomly sampled from an unknown
 |      distribution, estimate its PDF using KDE with automatic
 |      bandwidth determination and plot the results, evaluating them at
 |      1000 equally spaced points (default):
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])
 |          >>> ax = s.plot.kde()
 |      
 |      A scalar bandwidth can be specified. Using a small bandwidth value can
 |      lead to over-fitting, while using a large bandwidth value may result
 |      in under-fitting:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax = s.plot.kde(bw_method=0.3)
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax = s.plot.kde(bw_method=3)
 |      
 |      Finally, the `ind` parameter determines the evaluation points for the
 |      plot of the estimated PDF:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax = s.plot.kde(ind=[1, 2, 3, 4, 5])
 |      
 |      For DataFrame, it works in the same way:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({
 |          ...     'x': [1, 2, 2.5, 3, 3.5, 4, 5],
 |          ...     'y': [4, 4, 4.5, 5, 5.5, 6, 6],
 |          ... })
 |          >>> ax = df.plot.kde()
 |      
 |      A scalar bandwidth can be specified. Using a small bandwidth value can
 |      lead to over-fitting, while using a large bandwidth value may result
 |      in under-fitting:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax = df.plot.kde(bw_method=0.3)
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax = df.plot.kde(bw_method=3)
 |      
 |      Finally, the `ind` parameter determines the evaluation points for the
 |      plot of the estimated PDF:
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax = df.plot.kde(ind=[1, 2, 3, 4, 5, 6])
 |  
 |  line(self, x: 'Hashable | None' = None, y: 'Hashable | None' = None, **kwargs) -> 'PlotAccessor'
 |      Plot Series or DataFrame as lines.
 |      
 |      This function is useful to plot lines using DataFrame's values
 |      as coordinates.
 |      
 |      Parameters
 |      ----------
 |      x : label or position, optional
 |          Allows plotting of one column versus another. If not specified,
 |          the index of the DataFrame is used.
 |      y : label or position, optional
 |          Allows plotting of one column versus another. If not specified,
 |          all numerical columns are used.
 |      color : str, array-like, or dict, optional
 |          The color for each of the DataFrame's columns. Possible values are:
 |      
 |          - A single color string referred to by name, RGB or RGBA code,
 |              for instance 'red' or '#a98d19'.
 |      
 |          - A sequence of color strings referred to by name, RGB or RGBA
 |              code, which will be used for each column recursively. For
 |              instance ['green','yellow'] each column's line will be filled in
 |              green or yellow, alternatively. If there is only a single column to
 |              be plotted, then only the first color from the color list will be
 |              used.
 |      
 |          - A dict of the form {column name : color}, so that each column will be
 |              colored accordingly. For example, if your columns are called `a` and
 |              `b`, then passing {'a': 'green', 'b': 'red'} will color lines for
 |              column `a` in green and lines for column `b` in red.
 |      
 |      **kwargs
 |          Additional keyword arguments are documented in
 |          :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      matplotlib.axes.Axes or np.ndarray of them
 |          An ndarray is returned with one :class:`matplotlib.axes.Axes`
 |          per column when ``subplots=True``.
 |      
 |              See Also
 |              --------
 |              matplotlib.pyplot.plot : Plot y versus x as lines and/or markers.
 |      
 |              Examples
 |              --------
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  >>> s = pd.Series([1, 3, 2])
 |                  >>> s.plot.line()  # doctest: +SKIP
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  The following example shows the populations for some animals
 |                  over the years.
 |      
 |                  >>> df = pd.DataFrame({
 |                  ...    'pig': [20, 18, 489, 675, 1776],
 |                  ...    'horse': [4, 25, 281, 600, 1900]
 |                  ...    }, index=[1990, 1997, 2003, 2009, 2014])
 |                  >>> lines = df.plot.line()
 |      
 |              .. plot::
 |                 :context: close-figs
 |      
 |                 An example with subplots, so an array of axes is returned.
 |      
 |                 >>> axes = df.plot.line(subplots=True)
 |                 >>> type(axes)
 |                 <class 'numpy.ndarray'>
 |      
 |              .. plot::
 |                 :context: close-figs
 |      
 |                 Let's repeat the same example, but specifying colors for
 |                 each column (in this case, for each animal).
 |      
 |                 >>> axes = df.plot.line(
 |                 ...     subplots=True, color={"pig": "pink", "horse": "#742802"}
 |                 ... )
 |      
 |              .. plot::
 |                  :context: close-figs
 |      
 |                  The following example shows the relationship between both
 |                  populations.
 |      
 |                  >>> lines = df.plot.line(x='pig', y='horse')
 |  
 |  pie(self, **kwargs) -> 'PlotAccessor'
 |      Generate a pie plot.
 |      
 |      A pie plot is a proportional representation of the numerical data in a
 |      column. This function wraps :meth:`matplotlib.pyplot.pie` for the
 |      specified column. If no column reference is passed and
 |      ``subplots=True`` a pie plot is drawn for each numerical column
 |      independently.
 |      
 |      Parameters
 |      ----------
 |      y : int or label, optional
 |          Label or position of the column to plot.
 |          If not provided, ``subplots=True`` argument must be passed.
 |      **kwargs
 |          Keyword arguments to pass on to :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      matplotlib.axes.Axes or np.ndarray of them
 |          A NumPy array is returned when `subplots` is True.
 |      
 |      See Also
 |      --------
 |      Series.plot.pie : Generate a pie plot for a Series.
 |      DataFrame.plot : Make plots of a DataFrame.
 |      
 |      Examples
 |      --------
 |      In the example below we have a DataFrame with the information about
 |      planet's mass and radius. We pass the 'mass' column to the
 |      pie function to get a pie plot.
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame({'mass': [0.330, 4.87 , 5.97],
 |          ...                    'radius': [2439.7, 6051.8, 6378.1]},
 |          ...                   index=['Mercury', 'Venus', 'Earth'])
 |          >>> plot = df.plot.pie(y='mass', figsize=(5, 5))
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> plot = df.plot.pie(subplots=True, figsize=(11, 6))
 |  
 |  scatter(self, x: 'Hashable', y: 'Hashable', s: 'Hashable | Sequence[Hashable] | None' = None, c: 'Hashable | Sequence[Hashable] | None' = None, **kwargs) -> 'PlotAccessor'
 |      Create a scatter plot with varying marker point size and color.
 |      
 |      The coordinates of each point are defined by two dataframe columns and
 |      filled circles are used to represent each point. This kind of plot is
 |      useful to see complex correlations between two variables. Points could
 |      be for instance natural 2D coordinates like longitude and latitude in
 |      a map or, in general, any pair of metrics that can be plotted against
 |      each other.
 |      
 |      Parameters
 |      ----------
 |      x : int or str
 |          The column name or column position to be used as horizontal
 |          coordinates for each point.
 |      y : int or str
 |          The column name or column position to be used as vertical
 |          coordinates for each point.
 |      s : str, scalar or array-like, optional
 |          The size of each point. Possible values are:
 |      
 |          - A string with the name of the column to be used for marker's size.
 |      
 |          - A single scalar so all points have the same size.
 |      
 |          - A sequence of scalars, which will be used for each point's size
 |            recursively. For instance, when passing [2,14] all points size
 |            will be either 2 or 14, alternatively.
 |      
 |      c : str, int or array-like, optional
 |          The color of each point. Possible values are:
 |      
 |          - A single color string referred to by name, RGB or RGBA code,
 |            for instance 'red' or '#a98d19'.
 |      
 |          - A sequence of color strings referred to by name, RGB or RGBA
 |            code, which will be used for each point's color recursively. For
 |            instance ['green','yellow'] all points will be filled in green or
 |            yellow, alternatively.
 |      
 |          - A column name or position whose values will be used to color the
 |            marker points according to a colormap.
 |      
 |      **kwargs
 |          Keyword arguments to pass on to :meth:`DataFrame.plot`.
 |      
 |      Returns
 |      -------
 |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them
 |      
 |      See Also
 |      --------
 |      matplotlib.pyplot.scatter : Scatter plot using multiple input data
 |          formats.
 |      
 |      Examples
 |      --------
 |      Let's see how to draw a scatter plot using coordinates from the values
 |      in a DataFrame's columns.
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> df = pd.DataFrame([[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1],
 |          ...                    [6.4, 3.2, 1], [5.9, 3.0, 2]],
 |          ...                   columns=['length', 'width', 'species'])
 |          >>> ax1 = df.plot.scatter(x='length',
 |          ...                       y='width',
 |          ...                       c='DarkBlue')
 |      
 |      And now with the color determined by a column as well.
 |      
 |      .. plot::
 |          :context: close-figs
 |      
 |          >>> ax2 = df.plot.scatter(x='length',
 |          ...                       y='width',
 |          ...                       c='species',
 |          ...                       colormap='viridis')
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.base.PandasObject:
 |  
 |  __repr__(self) -> 'str'
 |      Return a string representation for a particular object.
 |  
 |  __sizeof__(self) -> 'int'
 |      Generates the total memory usage for an object that returns
 |      either a value or Series of values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.core.base.PandasObject:
 |  
 |  __annotations__ = {'_cache': 'dict[str, Any]'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  __dir__(self) -> 'list[str]'
 |      Provide method name lookup and completion.
 |      
 |      Notes
 |      -----
 |      Only provide 'public' methods.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.core.accessor.DirNamesMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& pop &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pop in module pandas.core.frame:

pop(item: 'Hashable') -> 'Series' method of pandas.core.frame.DataFrame instance
    Return item and drop from frame. Raise KeyError if not found.
    
    Parameters
    ----------
    item : label
        Label of column to be popped.
    
    Returns
    -------
    Series
    
    Examples
    --------
    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),
    ...                    ('parrot', 'bird', 24.0),
    ...                    ('lion', 'mammal', 80.5),
    ...                    ('monkey', 'mammal', np.nan)],
    ...                   columns=('name', 'class', 'max_speed'))
    >>> df
         name   class  max_speed
    0  falcon    bird      389.0
    1  parrot    bird       24.0
    2    lion  mammal       80.5
    3  monkey  mammal        NaN
    
    >>> df.pop('class')
    0      bird
    1      bird
    2    mammal
    3    mammal
    Name: class, dtype: object
    
    >>> df
         name  max_speed
    0  falcon      389.0
    1  parrot       24.0
    2    lion       80.5
    3  monkey        NaN

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& pow &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method pow in module pandas.core.frame:

pow(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Exponential power of dataframe and other, element-wise (binary operator `pow`).
    
    Equivalent to ``dataframe ** other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rpow`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& prod &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method prod in module pandas.core.frame:

prod(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the product of the values over the requested axis.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        .. warning::
    
            The behavior of DataFrame.prod with ``axis=None`` is deprecated,
            in a future version this will reduce over both axes and return a scalar
            To retain the old behavior, pass axis=0 (or do not pass axis).
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    min_count : int, default 0
        The required number of valid values to perform the operation. If fewer than
        ``min_count`` non-NA values are present the result will be NA.
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
    See Also
    --------
    Series.sum : Return the sum.
    Series.min : Return the minimum.
    Series.max : Return the maximum.
    Series.idxmin : Return the index of the minimum.
    Series.idxmax : Return the index of the maximum.
    DataFrame.sum : Return the sum over the requested axis.
    DataFrame.min : Return the minimum over the requested axis.
    DataFrame.max : Return the maximum over the requested axis.
    DataFrame.idxmin : Return the index of the minimum over the requested axis.
    DataFrame.idxmax : Return the index of the maximum over the requested axis.
    
    Examples
    --------
    By default, the product of an empty or all-NA Series is ``1``
    
    >>> pd.Series([], dtype="float64").prod()
    1.0
    
    This can be controlled with the ``min_count`` parameter
    
    >>> pd.Series([], dtype="float64").prod(min_count=1)
    nan
    
    Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
    empty series identically.
    
    >>> pd.Series([np.nan]).prod()
    1.0
    
    >>> pd.Series([np.nan]).prod(min_count=1)
    nan

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& product &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method prod in module pandas.core.frame:

prod(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the product of the values over the requested axis.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        .. warning::
    
            The behavior of DataFrame.prod with ``axis=None`` is deprecated,
            in a future version this will reduce over both axes and return a scalar
            To retain the old behavior, pass axis=0 (or do not pass axis).
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    min_count : int, default 0
        The required number of valid values to perform the operation. If fewer than
        ``min_count`` non-NA values are present the result will be NA.
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
    See Also
    --------
    Series.sum : Return the sum.
    Series.min : Return the minimum.
    Series.max : Return the maximum.
    Series.idxmin : Return the index of the minimum.
    Series.idxmax : Return the index of the maximum.
    DataFrame.sum : Return the sum over the requested axis.
    DataFrame.min : Return the minimum over the requested axis.
    DataFrame.max : Return the maximum over the requested axis.
    DataFrame.idxmin : Return the index of the minimum over the requested axis.
    DataFrame.idxmax : Return the index of the maximum over the requested axis.
    
    Examples
    --------
    By default, the product of an empty or all-NA Series is ``1``
    
    >>> pd.Series([], dtype="float64").prod()
    1.0
    
    This can be controlled with the ``min_count`` parameter
    
    >>> pd.Series([], dtype="float64").prod(min_count=1)
    nan
    
    Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
    empty series identically.
    
    >>> pd.Series([np.nan]).prod()
    1.0
    
    >>> pd.Series([np.nan]).prod(min_count=1)
    nan

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& quantile &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method quantile in module pandas.core.frame:

quantile(q: 'float | AnyArrayLike | Sequence[float]' = 0.5, axis: 'Axis' = 0, numeric_only: 'bool' = False, interpolation: 'QuantileInterpolation' = 'linear', method: "Literal['single', 'table']" = 'single') -> 'Series | DataFrame' method of pandas.core.frame.DataFrame instance
    Return values at the given quantile over requested axis.
    
    Parameters
    ----------
    q : float or array-like, default 0.5 (50% quantile)
        Value between 0 <= q <= 1, the quantile(s) to compute.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.
    numeric_only : bool, default False
        Include only `float`, `int` or `boolean` data.
    
        .. versionchanged:: 2.0.0
            The default value of ``numeric_only`` is now ``False``.
    
    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
        This optional parameter specifies the interpolation method to use,
        when the desired quantile lies between two data points `i` and `j`:
    
        * linear: `i + (j - i) * fraction`, where `fraction` is the
          fractional part of the index surrounded by `i` and `j`.
        * lower: `i`.
        * higher: `j`.
        * nearest: `i` or `j` whichever is nearest.
        * midpoint: (`i` + `j`) / 2.
    method : {'single', 'table'}, default 'single'
        Whether to compute quantiles per-column ('single') or over all columns
        ('table'). When 'table', the only allowed interpolation methods are
        'nearest', 'lower', and 'higher'.
    
    Returns
    -------
    Series or DataFrame
    
        If ``q`` is an array, a DataFrame will be returned where the
          index is ``q``, the columns are the columns of self, and the
          values are the quantiles.
        If ``q`` is a float, a Series will be returned where the
          index is the columns of self and the values are the quantiles.
    
    See Also
    --------
    core.window.rolling.Rolling.quantile: Rolling quantile.
    numpy.percentile: Numpy function to compute the percentile.
    
    Examples
    --------
    >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),
    ...                   columns=['a', 'b'])
    >>> df.quantile(.1)
    a    1.3
    b    3.7
    Name: 0.1, dtype: float64
    >>> df.quantile([.1, .5])
           a     b
    0.1  1.3   3.7
    0.5  2.5  55.0
    
    Specifying `method='table'` will compute the quantile over all columns.
    
    >>> df.quantile(.1, method="table", interpolation="nearest")
    a    1
    b    1
    Name: 0.1, dtype: int64
    >>> df.quantile([.1, .5], method="table", interpolation="nearest")
         a    b
    0.1  1    1
    0.5  3  100
    
    Specifying `numeric_only=False` will also compute the quantile of
    datetime and timedelta data.
    
    >>> df = pd.DataFrame({'A': [1, 2],
    ...                    'B': [pd.Timestamp('2010'),
    ...                          pd.Timestamp('2011')],
    ...                    'C': [pd.Timedelta('1 days'),
    ...                          pd.Timedelta('2 days')]})
    >>> df.quantile(0.5, numeric_only=False)
    A                    1.5
    B    2010-07-02 12:00:00
    C        1 days 12:00:00
    Name: 0.5, dtype: object

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& query &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method query in module pandas.core.frame:

query(expr: 'str', *, inplace: 'bool' = False, **kwargs) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Query the columns of a DataFrame with a boolean expression.
    
    Parameters
    ----------
    expr : str
        The query string to evaluate.
    
        You can refer to variables
        in the environment by prefixing them with an '@' character like
        ``@a + b``.
    
        You can refer to column names that are not valid Python variable names
        by surrounding them in backticks. Thus, column names containing spaces
        or punctuations (besides underscores) or starting with digits must be
        surrounded by backticks. (For example, a column named "Area (cm^2)" would
        be referenced as ```Area (cm^2)```). Column names which are Python keywords
        (like "list", "for", "import", etc) cannot be used.
    
        For example, if one of your columns is called ``a a`` and you want
        to sum it with ``b``, your query should be ```a a` + b``.
    
    inplace : bool
        Whether to modify the DataFrame rather than creating a new one.
    **kwargs
        See the documentation for :func:`eval` for complete details
        on the keyword arguments accepted by :meth:`DataFrame.query`.
    
    Returns
    -------
    DataFrame or None
        DataFrame resulting from the provided query expression or
        None if ``inplace=True``.
    
    See Also
    --------
    eval : Evaluate a string describing operations on
        DataFrame columns.
    DataFrame.eval : Evaluate a string describing operations on
        DataFrame columns.
    
    Notes
    -----
    The result of the evaluation of this expression is first passed to
    :attr:`DataFrame.loc` and if that fails because of a
    multidimensional key (e.g., a DataFrame) then the result will be passed
    to :meth:`DataFrame.__getitem__`.
    
    This method uses the top-level :func:`eval` function to
    evaluate the passed query.
    
    The :meth:`~pandas.DataFrame.query` method uses a slightly
    modified Python syntax by default. For example, the ``&`` and ``|``
    (bitwise) operators have the precedence of their boolean cousins,
    :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,
    however the semantics are different.
    
    You can change the semantics of the expression by passing the keyword
    argument ``parser='python'``. This enforces the same semantics as
    evaluation in Python space. Likewise, you can pass ``engine='python'``
    to evaluate an expression using Python itself as a backend. This is not
    recommended as it is inefficient compared to using ``numexpr`` as the
    engine.
    
    The :attr:`DataFrame.index` and
    :attr:`DataFrame.columns` attributes of the
    :class:`~pandas.DataFrame` instance are placed in the query namespace
    by default, which allows you to treat both the index and columns of the
    frame as a column in the frame.
    The identifier ``index`` is used for the frame index; you can also
    use the name of the index to identify it in a query. Please note that
    Python keywords may not be used as identifiers.
    
    For further details and examples see the ``query`` documentation in
    :ref:`indexing <indexing.query>`.
    
    *Backtick quoted variables*
    
    Backtick quoted variables are parsed as literal Python code and
    are converted internally to a Python valid identifier.
    This can lead to the following problems.
    
    During parsing a number of disallowed characters inside the backtick
    quoted string are replaced by strings that are allowed as a Python identifier.
    These characters include all operators in Python, the space character, the
    question mark, the exclamation mark, the dollar sign, and the euro sign.
    For other characters that fall outside the ASCII range (U+0001..U+007F)
    and those that are not further specified in PEP 3131,
    the query parser will raise an error.
    This excludes whitespace different than the space character,
    but also the hashtag (as it is used for comments) and the backtick
    itself (backtick can also not be escaped).
    
    In a special case, quotes that make a pair around a backtick can
    confuse the parser.
    For example, ```it's` > `that's``` will raise an error,
    as it forms a quoted string (``'s > `that'``) with a backtick inside.
    
    See also the Python documentation about lexical analysis
    (https://docs.python.org/3/reference/lexical_analysis.html)
    in combination with the source code in :mod:`pandas.core.computation.parsing`.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': range(1, 6),
    ...                    'B': range(10, 0, -2),
    ...                    'C C': range(10, 5, -1)})
    >>> df
       A   B  C C
    0  1  10   10
    1  2   8    9
    2  3   6    8
    3  4   4    7
    4  5   2    6
    >>> df.query('A > B')
       A  B  C C
    4  5  2    6
    
    The previous expression is equivalent to
    
    >>> df[df.A > df.B]
       A  B  C C
    4  5  2    6
    
    For columns with spaces in their name, you can use backtick quoting.
    
    >>> df.query('B == `C C`')
       A   B  C C
    0  1  10   10
    
    The previous expression is equivalent to
    
    >>> df[df.B == df['C C']]
       A   B  C C
    0  1  10   10

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& radd &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method radd in module pandas.core.frame:

radd(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Addition of dataframe and other, element-wise (binary operator `radd`).
    
    Equivalent to ``other + dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `add`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rank &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rank in module pandas.core.generic:

rank(axis: 'Axis' = 0, method: "Literal['average', 'min', 'max', 'first', 'dense']" = 'average', numeric_only: 'bool_t' = False, na_option: "Literal['keep', 'top', 'bottom']" = 'keep', ascending: 'bool_t' = True, pct: 'bool_t' = False) -> 'Self' method of pandas.core.frame.DataFrame instance
    Compute numerical data ranks (1 through n) along axis.
    
    By default, equal values are assigned a rank that is the average of the
    ranks of those values.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Index to direct ranking.
        For `Series` this parameter is unused and defaults to 0.
    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'
        How to rank the group of records that have the same value (i.e. ties):
    
        * average: average rank of the group
        * min: lowest rank in the group
        * max: highest rank in the group
        * first: ranks assigned in order they appear in the array
        * dense: like 'min', but rank always increases by 1 between groups.
    
    numeric_only : bool, default False
        For DataFrame objects, rank only numeric columns if set to True.
    
        .. versionchanged:: 2.0.0
            The default value of ``numeric_only`` is now ``False``.
    
    na_option : {'keep', 'top', 'bottom'}, default 'keep'
        How to rank NaN values:
    
        * keep: assign NaN rank to NaN values
        * top: assign lowest rank to NaN values
        * bottom: assign highest rank to NaN values
    
    ascending : bool, default True
        Whether or not the elements should be ranked in ascending order.
    pct : bool, default False
        Whether or not to display the returned rankings in percentile
        form.
    
    Returns
    -------
    same type as caller
        Return a Series or DataFrame with data ranks as values.
    
    See Also
    --------
    core.groupby.DataFrameGroupBy.rank : Rank of values within each group.
    core.groupby.SeriesGroupBy.rank : Rank of values within each group.
    
    Examples
    --------
    >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',
    ...                                    'spider', 'snake'],
    ...                         'Number_legs': [4, 2, 4, 8, np.nan]})
    >>> df
        Animal  Number_legs
    0      cat          4.0
    1  penguin          2.0
    2      dog          4.0
    3   spider          8.0
    4    snake          NaN
    
    Ties are assigned the mean of the ranks (by default) for the group.
    
    >>> s = pd.Series(range(5), index=list("abcde"))
    >>> s["d"] = s["b"]
    >>> s.rank()
    a    1.0
    b    2.5
    c    4.0
    d    2.5
    e    5.0
    dtype: float64
    
    The following example shows how the method behaves with the above
    parameters:
    
    * default_rank: this is the default behaviour obtained without using
      any parameter.
    * max_rank: setting ``method = 'max'`` the records that have the
      same values are ranked using the highest rank (e.g.: since 'cat'
      and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)
    * NA_bottom: choosing ``na_option = 'bottom'``, if there are records
      with NaN values they are placed at the bottom of the ranking.
    * pct_rank: when setting ``pct = True``, the ranking is expressed as
      percentile rank.
    
    >>> df['default_rank'] = df['Number_legs'].rank()
    >>> df['max_rank'] = df['Number_legs'].rank(method='max')
    >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')
    >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)
    >>> df
        Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank
    0      cat          4.0           2.5       3.0        2.5     0.625
    1  penguin          2.0           1.0       1.0        1.0     0.250
    2      dog          4.0           2.5       3.0        2.5     0.625
    3   spider          8.0           4.0       4.0        4.0     1.000
    4    snake          NaN           NaN       NaN        5.0       NaN

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rdiv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rtruediv in module pandas.core.frame:

rtruediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).
    
    Equivalent to ``other / dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `truediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& reindex &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method reindex in module pandas.core.frame:

reindex(labels=None, *, index=None, columns=None, axis: 'Axis | None' = None, method: 'ReindexMethod | None' = None, copy: 'bool | None' = None, level: 'Level | None' = None, fill_value: 'Scalar | None' = nan, limit: 'int | None' = None, tolerance=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Conform DataFrame to new index with optional filling logic.
    
    Places NA/NaN in locations having no value in the previous index. A new object
    is produced unless the new index is equivalent to the current one and
    ``copy=False``.
    
    Parameters
    ----------
    
    labels : array-like, optional
        New labels / index to conform the axis specified by 'axis' to.
    index : array-like, optional
        New labels for the index. Preferably an Index object to avoid
        duplicating data.
    columns : array-like, optional
        New labels for the columns. Preferably an Index object to avoid
        duplicating data.
    axis : int or str, optional
        Axis to target. Can be either the axis name ('index', 'columns')
        or number (0, 1).
    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}
        Method to use for filling holes in reindexed DataFrame.
        Please note: this is only applicable to DataFrames/Series with a
        monotonically increasing/decreasing index.
    
        * None (default): don't fill gaps
        * pad / ffill: Propagate last valid observation forward to next
          valid.
        * backfill / bfill: Use next valid observation to fill gap.
        * nearest: Use nearest valid observations to fill gap.
    
    copy : bool, default True
        Return a new object, even if the passed indexes are the same.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    level : int or name
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : scalar, default np.nan
        Value to use for missing values. Defaults to NaN, but can be any
        "compatible" value.
    limit : int, default None
        Maximum number of consecutive elements to forward or backward fill.
    tolerance : optional
        Maximum distance between original and new labels for inexact
        matches. The values of the index at the matching locations most
        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
    
        Tolerance may be a scalar value, which applies the same tolerance
        to all values, or list-like, which applies variable tolerance per
        element. List-like includes list, tuple, array, Series, and must be
        the same size as the index and its dtype must exactly match the
        index's type.
    
    Returns
    -------
    DataFrame with changed index.
    
    See Also
    --------
    DataFrame.set_index : Set row labels.
    DataFrame.reset_index : Remove row labels or move them to new columns.
    DataFrame.reindex_like : Change to same indices as other DataFrame.
    
    Examples
    --------
    ``DataFrame.reindex`` supports two calling conventions
    
    * ``(index=index_labels, columns=column_labels, ...)``
    * ``(labels, axis={'index', 'columns'}, ...)``
    
    We *highly* recommend using keyword arguments to clarify your
    intent.
    
    Create a dataframe with some fictional data.
    
    >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']
    >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],
    ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},
    ...                   index=index)
    >>> df
               http_status  response_time
    Firefox            200           0.04
    Chrome             200           0.02
    Safari             404           0.07
    IE10               404           0.08
    Konqueror          301           1.00
    
    Create a new index and reindex the dataframe. By default
    values in the new index that do not have corresponding
    records in the dataframe are assigned ``NaN``.
    
    >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',
    ...              'Chrome']
    >>> df.reindex(new_index)
                   http_status  response_time
    Safari               404.0           0.07
    Iceweasel              NaN            NaN
    Comodo Dragon          NaN            NaN
    IE10                 404.0           0.08
    Chrome               200.0           0.02
    
    We can fill in the missing values by passing a value to
    the keyword ``fill_value``. Because the index is not monotonically
    increasing or decreasing, we cannot use arguments to the keyword
    ``method`` to fill the ``NaN`` values.
    
    >>> df.reindex(new_index, fill_value=0)
                   http_status  response_time
    Safari                 404           0.07
    Iceweasel                0           0.00
    Comodo Dragon            0           0.00
    IE10                   404           0.08
    Chrome                 200           0.02
    
    >>> df.reindex(new_index, fill_value='missing')
                  http_status response_time
    Safari                404          0.07
    Iceweasel         missing       missing
    Comodo Dragon     missing       missing
    IE10                  404          0.08
    Chrome                200          0.02
    
    We can also reindex the columns.
    
    >>> df.reindex(columns=['http_status', 'user_agent'])
               http_status  user_agent
    Firefox            200         NaN
    Chrome             200         NaN
    Safari             404         NaN
    IE10               404         NaN
    Konqueror          301         NaN
    
    Or we can use "axis-style" keyword arguments
    
    >>> df.reindex(['http_status', 'user_agent'], axis="columns")
               http_status  user_agent
    Firefox            200         NaN
    Chrome             200         NaN
    Safari             404         NaN
    IE10               404         NaN
    Konqueror          301         NaN
    
    To further illustrate the filling functionality in
    ``reindex``, we will create a dataframe with a
    monotonically increasing index (for example, a sequence
    of dates).
    
    >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')
    >>> df2 = pd.DataFrame({"prices": [100, 101, np.nan, 100, 89, 88]},
    ...                    index=date_index)
    >>> df2
                prices
    2010-01-01   100.0
    2010-01-02   101.0
    2010-01-03     NaN
    2010-01-04   100.0
    2010-01-05    89.0
    2010-01-06    88.0
    
    Suppose we decide to expand the dataframe to cover a wider
    date range.
    
    >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')
    >>> df2.reindex(date_index2)
                prices
    2009-12-29     NaN
    2009-12-30     NaN
    2009-12-31     NaN
    2010-01-01   100.0
    2010-01-02   101.0
    2010-01-03     NaN
    2010-01-04   100.0
    2010-01-05    89.0
    2010-01-06    88.0
    2010-01-07     NaN
    
    The index entries that did not have a value in the original data frame
    (for example, '2009-12-29') are by default filled with ``NaN``.
    If desired, we can fill in the missing values using one of several
    options.
    
    For example, to back-propagate the last valid value to fill the ``NaN``
    values, pass ``bfill`` as an argument to the ``method`` keyword.
    
    >>> df2.reindex(date_index2, method='bfill')
                prices
    2009-12-29   100.0
    2009-12-30   100.0
    2009-12-31   100.0
    2010-01-01   100.0
    2010-01-02   101.0
    2010-01-03     NaN
    2010-01-04   100.0
    2010-01-05    89.0
    2010-01-06    88.0
    2010-01-07     NaN
    
    Please note that the ``NaN`` value present in the original dataframe
    (at index value 2010-01-03) will not be filled by any of the
    value propagation schemes. This is because filling while reindexing
    does not look at dataframe values, but only compares the original and
    desired indexes. If you do want to fill in the ``NaN`` values present
    in the original dataframe, use the ``fillna()`` method.
    
    See the :ref:`user guide <basics.reindexing>` for more.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& reindex_like &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method reindex_like in module pandas.core.generic:

reindex_like(other, method: "Literal['backfill', 'bfill', 'pad', 'ffill', 'nearest'] | None" = None, copy: 'bool_t | None' = None, limit: 'int | None' = None, tolerance=None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return an object with matching indices as other object.
    
    Conform the object to the same index on all axes. Optional
    filling logic, placing NaN in locations having no value
    in the previous index. A new object is produced unless the
    new index is equivalent to the current one and copy=False.
    
    Parameters
    ----------
    other : Object of the same data type
        Its row and column indices are used to define the new indices
        of this object.
    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}
        Method to use for filling holes in reindexed DataFrame.
        Please note: this is only applicable to DataFrames/Series with a
        monotonically increasing/decreasing index.
    
        * None (default): don't fill gaps
        * pad / ffill: propagate last valid observation forward to next
          valid
        * backfill / bfill: use next valid observation to fill gap
        * nearest: use nearest valid observations to fill gap.
    
    copy : bool, default True
        Return a new object, even if the passed indexes are the same.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    limit : int, default None
        Maximum number of consecutive labels to fill for inexact matches.
    tolerance : optional
        Maximum distance between original and new labels for inexact
        matches. The values of the index at the matching locations must
        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.
    
        Tolerance may be a scalar value, which applies the same tolerance
        to all values, or list-like, which applies variable tolerance per
        element. List-like includes list, tuple, array, Series, and must be
        the same size as the index and its dtype must exactly match the
        index's type.
    
    Returns
    -------
    Series or DataFrame
        Same type as caller, but with changed indices on each axis.
    
    See Also
    --------
    DataFrame.set_index : Set row labels.
    DataFrame.reset_index : Remove row labels or move them to new columns.
    DataFrame.reindex : Change to new indices or expand indices.
    
    Notes
    -----
    Same as calling
    ``.reindex(index=other.index, columns=other.columns,...)``.
    
    Examples
    --------
    >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],
    ...                     [31, 87.8, 'high'],
    ...                     [22, 71.6, 'medium'],
    ...                     [35, 95, 'medium']],
    ...                    columns=['temp_celsius', 'temp_fahrenheit',
    ...                             'windspeed'],
    ...                    index=pd.date_range(start='2014-02-12',
    ...                                        end='2014-02-15', freq='D'))
    
    >>> df1
                temp_celsius  temp_fahrenheit windspeed
    2014-02-12          24.3             75.7      high
    2014-02-13          31.0             87.8      high
    2014-02-14          22.0             71.6    medium
    2014-02-15          35.0             95.0    medium
    
    >>> df2 = pd.DataFrame([[28, 'low'],
    ...                     [30, 'low'],
    ...                     [35.1, 'medium']],
    ...                    columns=['temp_celsius', 'windspeed'],
    ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',
    ...                                            '2014-02-15']))
    
    >>> df2
                temp_celsius windspeed
    2014-02-12          28.0       low
    2014-02-13          30.0       low
    2014-02-15          35.1    medium
    
    >>> df2.reindex_like(df1)
                temp_celsius  temp_fahrenheit windspeed
    2014-02-12          28.0              NaN       low
    2014-02-13          30.0              NaN       low
    2014-02-14           NaN              NaN       NaN
    2014-02-15          35.1              NaN    medium

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rename &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rename in module pandas.core.frame:

rename(mapper: 'Renamer | None' = None, *, index: 'Renamer | None' = None, columns: 'Renamer | None' = None, axis: 'Axis | None' = None, copy: 'bool | None' = None, inplace: 'bool' = False, level: 'Level | None' = None, errors: 'IgnoreRaise' = 'ignore') -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Rename columns or index labels.
    
    Function / dict values must be unique (1-to-1). Labels not contained in
    a dict / Series will be left as-is. Extra labels listed don't throw an
    error.
    
    See the :ref:`user guide <basics.rename>` for more.
    
    Parameters
    ----------
    mapper : dict-like or function
        Dict-like or function transformations to apply to
        that axis' values. Use either ``mapper`` and ``axis`` to
        specify the axis to target with ``mapper``, or ``index`` and
        ``columns``.
    index : dict-like or function
        Alternative to specifying axis (``mapper, axis=0``
        is equivalent to ``index=mapper``).
    columns : dict-like or function
        Alternative to specifying axis (``mapper, axis=1``
        is equivalent to ``columns=mapper``).
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Axis to target with ``mapper``. Can be either the axis name
        ('index', 'columns') or number (0, 1). The default is 'index'.
    copy : bool, default True
        Also copy underlying data.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    inplace : bool, default False
        Whether to modify the DataFrame rather than creating a new one.
        If True then value of copy is ignored.
    level : int or level name, default None
        In case of a MultiIndex, only rename labels in the specified
        level.
    errors : {'ignore', 'raise'}, default 'ignore'
        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,
        or `columns` contains labels that are not present in the Index
        being transformed.
        If 'ignore', existing keys will be renamed and extra keys will be
        ignored.
    
    Returns
    -------
    DataFrame or None
        DataFrame with the renamed axis labels or None if ``inplace=True``.
    
    Raises
    ------
    KeyError
        If any of the labels is not found in the selected axis and
        "errors='raise'".
    
    See Also
    --------
    DataFrame.rename_axis : Set the name of the axis.
    
    Examples
    --------
    ``DataFrame.rename`` supports two calling conventions
    
    * ``(index=index_mapper, columns=columns_mapper, ...)``
    * ``(mapper, axis={'index', 'columns'}, ...)``
    
    We *highly* recommend using keyword arguments to clarify your
    intent.
    
    Rename columns using a mapping:
    
    >>> df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
    >>> df.rename(columns={"A": "a", "B": "c"})
       a  c
    0  1  4
    1  2  5
    2  3  6
    
    Rename index using a mapping:
    
    >>> df.rename(index={0: "x", 1: "y", 2: "z"})
       A  B
    x  1  4
    y  2  5
    z  3  6
    
    Cast index labels to a different type:
    
    >>> df.index
    RangeIndex(start=0, stop=3, step=1)
    >>> df.rename(index=str).index
    Index(['0', '1', '2'], dtype='object')
    
    >>> df.rename(columns={"A": "a", "B": "b", "C": "c"}, errors="raise")
    Traceback (most recent call last):
    KeyError: ['C'] not found in axis
    
    Using axis-style parameters:
    
    >>> df.rename(str.lower, axis='columns')
       a  b
    0  1  4
    1  2  5
    2  3  6
    
    >>> df.rename({1: 2, 2: 4}, axis='index')
       A  B
    0  1  4
    2  2  5
    4  3  6

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rename_axis &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rename_axis in module pandas.core.generic:

rename_axis(mapper: 'IndexLabel | lib.NoDefault' = <no_default>, *, index=<no_default>, columns=<no_default>, axis: 'Axis' = 0, copy: 'bool_t | None' = None, inplace: 'bool_t' = False) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Set the name of the axis for the index or columns.
    
    Parameters
    ----------
    mapper : scalar, list-like, optional
        Value to set the axis name attribute.
    index, columns : scalar, list-like, dict-like or function, optional
        A scalar, list-like, dict-like or functions transformations to
        apply to that axis' values.
        Note that the ``columns`` parameter is not allowed if the
        object is a Series. This parameter only apply for DataFrame
        type objects.
    
        Use either ``mapper`` and ``axis`` to
        specify the axis to target with ``mapper``, or ``index``
        and/or ``columns``.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to rename. For `Series` this parameter is unused and defaults to 0.
    copy : bool, default None
        Also copy underlying data.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    inplace : bool, default False
        Modifies the object directly, instead of creating a new Series
        or DataFrame.
    
    Returns
    -------
    Series, DataFrame, or None
        The same type as the caller or None if ``inplace=True``.
    
    See Also
    --------
    Series.rename : Alter Series index labels or name.
    DataFrame.rename : Alter DataFrame index labels or name.
    Index.rename : Set new names on index.
    
    Notes
    -----
    ``DataFrame.rename_axis`` supports two calling conventions
    
    * ``(index=index_mapper, columns=columns_mapper, ...)``
    * ``(mapper, axis={'index', 'columns'}, ...)``
    
    The first calling convention will only modify the names of
    the index and/or the names of the Index object that is the columns.
    In this case, the parameter ``copy`` is ignored.
    
    The second calling convention will modify the names of the
    corresponding index if mapper is a list or a scalar.
    However, if mapper is dict-like or a function, it will use the
    deprecated behavior of modifying the axis *labels*.
    
    We *highly* recommend using keyword arguments to clarify your
    intent.
    
    Examples
    --------
    **Series**
    
    >>> s = pd.Series(["dog", "cat", "monkey"])
    >>> s
    0       dog
    1       cat
    2    monkey
    dtype: object
    >>> s.rename_axis("animal")
    animal
    0    dog
    1    cat
    2    monkey
    dtype: object
    
    **DataFrame**
    
    >>> df = pd.DataFrame({"num_legs": [4, 4, 2],
    ...                    "num_arms": [0, 0, 2]},
    ...                   ["dog", "cat", "monkey"])
    >>> df
            num_legs  num_arms
    dog            4         0
    cat            4         0
    monkey         2         2
    >>> df = df.rename_axis("animal")
    >>> df
            num_legs  num_arms
    animal
    dog            4         0
    cat            4         0
    monkey         2         2
    >>> df = df.rename_axis("limbs", axis="columns")
    >>> df
    limbs   num_legs  num_arms
    animal
    dog            4         0
    cat            4         0
    monkey         2         2
    
    **MultiIndex**
    
    >>> df.index = pd.MultiIndex.from_product([['mammal'],
    ...                                        ['dog', 'cat', 'monkey']],
    ...                                       names=['type', 'name'])
    >>> df
    limbs          num_legs  num_arms
    type   name
    mammal dog            4         0
           cat            4         0
           monkey         2         2
    
    >>> df.rename_axis(index={'type': 'class'})
    limbs          num_legs  num_arms
    class  name
    mammal dog            4         0
           cat            4         0
           monkey         2         2
    
    >>> df.rename_axis(columns=str.upper)
    LIMBS          num_legs  num_arms
    type   name
    mammal dog            4         0
           cat            4         0
           monkey         2         2

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& reorder_levels &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method reorder_levels in module pandas.core.frame:

reorder_levels(order: 'Sequence[int | str]', axis: 'Axis' = 0) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Rearrange index levels using input order. May not drop or duplicate levels.
    
    Parameters
    ----------
    order : list of int or list of str
        List representing new level order. Reference level by number
        (position) or by key (label).
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Where to reorder levels.
    
    Returns
    -------
    DataFrame
    
    Examples
    --------
    >>> data = {
    ...     "class": ["Mammals", "Mammals", "Reptiles"],
    ...     "diet": ["Omnivore", "Carnivore", "Carnivore"],
    ...     "species": ["Humans", "Dogs", "Snakes"],
    ... }
    >>> df = pd.DataFrame(data, columns=["class", "diet", "species"])
    >>> df = df.set_index(["class", "diet"])
    >>> df
                                      species
    class      diet
    Mammals    Omnivore                Humans
               Carnivore                 Dogs
    Reptiles   Carnivore               Snakes
    
    Let's reorder the levels of the index:
    
    >>> df.reorder_levels(["diet", "class"])
                                      species
    diet      class
    Omnivore  Mammals                  Humans
    Carnivore Mammals                    Dogs
              Reptiles                 Snakes

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& replace &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method replace in module pandas.core.generic:

replace(to_replace=None, value=<no_default>, *, inplace: 'bool_t' = False, limit: 'int | None' = None, regex: 'bool_t' = False, method: "Literal['pad', 'ffill', 'bfill'] | lib.NoDefault" = <no_default>) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Replace values given in `to_replace` with `value`.
    
    Values of the Series/DataFrame are replaced with other values dynamically.
    This differs from updating with ``.loc`` or ``.iloc``, which require
    you to specify a location to update with some value.
    
    Parameters
    ----------
    to_replace : str, regex, list, dict, Series, int, float, or None
        How to find the values that will be replaced.
    
        * numeric, str or regex:
    
            - numeric: numeric values equal to `to_replace` will be
              replaced with `value`
            - str: string exactly matching `to_replace` will be replaced
              with `value`
            - regex: regexs matching `to_replace` will be replaced with
              `value`
    
        * list of str, regex, or numeric:
    
            - First, if `to_replace` and `value` are both lists, they
              **must** be the same length.
            - Second, if ``regex=True`` then all of the strings in **both**
              lists will be interpreted as regexs otherwise they will match
              directly. This doesn't matter much for `value` since there
              are only a few possible substitution regexes you can use.
            - str, regex and numeric rules apply as above.
    
        * dict:
    
            - Dicts can be used to specify different replacement values
              for different existing values. For example,
              ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and
              'y' with 'z'. To use a dict in this way, the optional `value`
              parameter should not be given.
            - For a DataFrame a dict can specify that different values
              should be replaced in different columns. For example,
              ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'
              and the value 'z' in column 'b' and replaces these values
              with whatever is specified in `value`. The `value` parameter
              should not be ``None`` in this case. You can treat this as a
              special case of passing two lists except that you are
              specifying the column to search in.
            - For a DataFrame nested dictionaries, e.g.,
              ``{'a': {'b': np.nan}}``, are read as follows: look in column
              'a' for the value 'b' and replace it with NaN. The optional `value`
              parameter should not be specified to use a nested dict in this
              way. You can nest regular expressions as well. Note that
              column names (the top-level dictionary keys in a nested
              dictionary) **cannot** be regular expressions.
    
        * None:
    
            - This means that the `regex` argument must be a string,
              compiled regular expression, or list, dict, ndarray or
              Series of such elements. If `value` is also ``None`` then
              this **must** be a nested dictionary or Series.
    
        See the examples section for examples of each of these.
    value : scalar, dict, list, str, regex, default None
        Value to replace any values matching `to_replace` with.
        For a DataFrame a dict of values can be used to specify which
        value to use for each column (columns not in the dict will not be
        filled). Regular expressions, strings and lists or dicts of such
        objects are also allowed.
    
    inplace : bool, default False
        If True, performs operation inplace and returns None.
    limit : int, default None
        Maximum size gap to forward or backward fill.
    
        .. deprecated:: 2.1.0
    regex : bool or same types as `to_replace`, default False
        Whether to interpret `to_replace` and/or `value` as regular
        expressions. Alternatively, this could be a regular expression or a
        list, dict, or array of regular expressions in which case
        `to_replace` must be ``None``.
    method : {'pad', 'ffill', 'bfill'}
        The method to use when for replacement, when `to_replace` is a
        scalar, list or tuple and `value` is ``None``.
    
        .. deprecated:: 2.1.0
    
    Returns
    -------
    Series/DataFrame
        Object after replacement.
    
    Raises
    ------
    AssertionError
        * If `regex` is not a ``bool`` and `to_replace` is not
          ``None``.
    
    TypeError
        * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``
        * If `to_replace` is a ``dict`` and `value` is not a ``list``,
          ``dict``, ``ndarray``, or ``Series``
        * If `to_replace` is ``None`` and `regex` is not compilable
          into a regular expression or is a list, dict, ndarray, or
          Series.
        * When replacing multiple ``bool`` or ``datetime64`` objects and
          the arguments to `to_replace` does not match the type of the
          value being replaced
    
    ValueError
        * If a ``list`` or an ``ndarray`` is passed to `to_replace` and
          `value` but they are not the same length.
    
    See Also
    --------
    Series.fillna : Fill NA values.
    DataFrame.fillna : Fill NA values.
    Series.where : Replace values based on boolean condition.
    DataFrame.where : Replace values based on boolean condition.
    DataFrame.map: Apply a function to a Dataframe elementwise.
    Series.map: Map values of Series according to an input mapping or function.
    Series.str.replace : Simple string replacement.
    
    Notes
    -----
    * Regex substitution is performed under the hood with ``re.sub``. The
      rules for substitution for ``re.sub`` are the same.
    * Regular expressions will only substitute on strings, meaning you
      cannot provide, for example, a regular expression matching floating
      point numbers and expect the columns in your frame that have a
      numeric dtype to be matched. However, if those floating point
      numbers *are* strings, then you can do this.
    * This method has *a lot* of options. You are encouraged to experiment
      and play with this method to gain intuition about how it works.
    * When dict is used as the `to_replace` value, it is like
      key(s) in the dict are the to_replace part and
      value(s) in the dict are the value parameter.
    
    Examples
    --------
    
    **Scalar `to_replace` and `value`**
    
    >>> s = pd.Series([1, 2, 3, 4, 5])
    >>> s.replace(1, 5)
    0    5
    1    2
    2    3
    3    4
    4    5
    dtype: int64
    
    >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
    ...                    'B': [5, 6, 7, 8, 9],
    ...                    'C': ['a', 'b', 'c', 'd', 'e']})
    >>> df.replace(0, 5)
        A  B  C
    0  5  5  a
    1  1  6  b
    2  2  7  c
    3  3  8  d
    4  4  9  e
    
    **List-like `to_replace`**
    
    >>> df.replace([0, 1, 2, 3], 4)
        A  B  C
    0  4  5  a
    1  4  6  b
    2  4  7  c
    3  4  8  d
    4  4  9  e
    
    >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])
        A  B  C
    0  4  5  a
    1  3  6  b
    2  2  7  c
    3  1  8  d
    4  4  9  e
    
    >>> s.replace([1, 2], method='bfill')
    0    3
    1    3
    2    3
    3    4
    4    5
    dtype: int64
    
    **dict-like `to_replace`**
    
    >>> df.replace({0: 10, 1: 100})
            A  B  C
    0   10  5  a
    1  100  6  b
    2    2  7  c
    3    3  8  d
    4    4  9  e
    
    >>> df.replace({'A': 0, 'B': 5}, 100)
            A    B  C
    0  100  100  a
    1    1    6  b
    2    2    7  c
    3    3    8  d
    4    4    9  e
    
    >>> df.replace({'A': {0: 100, 4: 400}})
            A  B  C
    0  100  5  a
    1    1  6  b
    2    2  7  c
    3    3  8  d
    4  400  9  e
    
    **Regular expression `to_replace`**
    
    >>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],
    ...                    'B': ['abc', 'bar', 'xyz']})
    >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)
            A    B
    0   new  abc
    1   foo  new
    2  bait  xyz
    
    >>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)
            A    B
    0   new  abc
    1   foo  bar
    2  bait  xyz
    
    >>> df.replace(regex=r'^ba.$', value='new')
            A    B
    0   new  abc
    1   foo  new
    2  bait  xyz
    
    >>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})
            A    B
    0   new  abc
    1   xyz  new
    2  bait  xyz
    
    >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')
            A    B
    0   new  abc
    1   new  new
    2  bait  xyz
    
    Compare the behavior of ``s.replace({'a': None})`` and
    ``s.replace('a', None)`` to understand the peculiarities
    of the `to_replace` parameter:
    
    >>> s = pd.Series([10, 'a', 'a', 'b', 'a'])
    
    When one uses a dict as the `to_replace` value, it is like the
    value(s) in the dict are equal to the `value` parameter.
    ``s.replace({'a': None})`` is equivalent to
    ``s.replace(to_replace={'a': None}, value=None, method=None)``:
    
    >>> s.replace({'a': None})
    0      10
    1    None
    2    None
    3       b
    4    None
    dtype: object
    
    When ``value`` is not explicitly passed and `to_replace` is a scalar, list
    or tuple, `replace` uses the method parameter (default 'pad') to do the
    replacement. So this is why the 'a' values are being replaced by 10
    in rows 1 and 2 and 'b' in row 4 in this case.
    
    >>> s.replace('a')
    0    10
    1    10
    2    10
    3     b
    4     b
    dtype: object
    
        .. deprecated:: 2.1.0
            The 'method' parameter and padding behavior are deprecated.
    
    On the other hand, if ``None`` is explicitly passed for ``value``, it will
    be respected:
    
    >>> s.replace('a', None)
    0      10
    1    None
    2    None
    3       b
    4    None
    dtype: object
    
        .. versionchanged:: 1.4.0
            Previously the explicit ``None`` was silently ignored.
    
    When ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,
    the replacement will be applied in all columns of the DataFrame.
    
    >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],
    ...                    'B': ['a', 'b', 'c', 'd', 'e'],
    ...                    'C': ['f', 'g', 'h', 'i', 'j']})
    
    >>> df.replace(to_replace='^[a-g]', value='e', regex=True)
        A  B  C
    0  0  e  e
    1  1  e  e
    2  2  e  h
    3  3  e  i
    4  4  e  j
    
    If ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary
    keys will be the DataFrame columns that the replacement will be applied.
    
    >>> df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)
        A  B  C
    0  0  e  f
    1  1  e  g
    2  2  e  e
    3  3  d  e
    4  4  e  e

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& resample &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method resample in module pandas.core.generic:

resample(rule, axis: 'Axis | lib.NoDefault' = <no_default>, closed: "Literal['right', 'left'] | None" = None, label: "Literal['right', 'left'] | None" = None, convention: "Literal['start', 'end', 's', 'e']" = 'start', kind: "Literal['timestamp', 'period'] | None | lib.NoDefault" = <no_default>, on: 'Level | None' = None, level: 'Level | None' = None, origin: 'str | TimestampConvertibleTypes' = 'start_day', offset: 'TimedeltaConvertibleTypes | None' = None, group_keys: 'bool_t' = False) -> 'Resampler' method of pandas.core.frame.DataFrame instance
    Resample time-series data.
    
    Convenience method for frequency conversion and resampling of time series.
    The object must have a datetime-like index (`DatetimeIndex`, `PeriodIndex`,
    or `TimedeltaIndex`), or the caller must pass the label of a datetime-like
    series/index to the ``on``/``level`` keyword parameter.
    
    Parameters
    ----------
    rule : DateOffset, Timedelta or str
        The offset string or object representing target conversion.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Which axis to use for up- or down-sampling. For `Series` this parameter
        is unused and defaults to 0. Must be
        `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.
    
        .. deprecated:: 2.0.0
            Use frame.T.resample(...) instead.
    closed : {'right', 'left'}, default None
        Which side of bin interval is closed. The default is 'left'
        for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',
        'BA', 'BQE', and 'W' which all have a default of 'right'.
    label : {'right', 'left'}, default None
        Which bin edge label to label bucket with. The default is 'left'
        for all frequency offsets except for 'ME', 'YE', 'QE', 'BME',
        'BA', 'BQE', and 'W' which all have a default of 'right'.
    convention : {'start', 'end', 's', 'e'}, default 'start'
        For `PeriodIndex` only, controls whether to use the start or
        end of `rule`.
    
    kind : {'timestamp', 'period'}, optional, default None
        Pass 'timestamp' to convert the resulting index to a
        `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.
        By default the input representation is retained.
    
        .. deprecated:: 2.2.0
            Convert index to desired type explicitly instead.
    
    on : str, optional
        For a DataFrame, column to use instead of index for resampling.
        Column must be datetime-like.
    level : str or int, optional
        For a MultiIndex, level (name or number) to use for
        resampling. `level` must be datetime-like.
    origin : Timestamp or str, default 'start_day'
        The timestamp on which to adjust the grouping. The timezone of origin
        must match the timezone of the index.
        If string, must be one of the following:
    
        - 'epoch': `origin` is 1970-01-01
        - 'start': `origin` is the first value of the timeseries
        - 'start_day': `origin` is the first day at midnight of the timeseries
    
        - 'end': `origin` is the last value of the timeseries
        - 'end_day': `origin` is the ceiling midnight of the last day
    
        .. versionadded:: 1.3.0
    
        .. note::
    
            Only takes effect for Tick-frequencies (i.e. fixed frequencies like
            days, hours, and minutes, rather than months or quarters).
    offset : Timedelta or str, default is None
        An offset timedelta added to the origin.
    
    group_keys : bool, default False
        Whether to include the group keys in the result index when using
        ``.apply()`` on the resampled object.
    
        .. versionadded:: 1.5.0
    
            Not specifying ``group_keys`` will retain values-dependent behavior
            from pandas 1.4 and earlier (see :ref:`pandas 1.5.0 Release notes
            <whatsnew_150.enhancements.resample_group_keys>` for examples).
    
        .. versionchanged:: 2.0.0
    
            ``group_keys`` now defaults to ``False``.
    
    Returns
    -------
    pandas.api.typing.Resampler
        :class:`~pandas.core.Resampler` object.
    
    See Also
    --------
    Series.resample : Resample a Series.
    DataFrame.resample : Resample a DataFrame.
    groupby : Group Series/DataFrame by mapping, function, label, or list of labels.
    asfreq : Reindex a Series/DataFrame with the given frequency without grouping.
    
    Notes
    -----
    See the `user guide
    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`__
    for more.
    
    To learn more about the offset strings, please see `this link
    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.
    
    Examples
    --------
    Start by creating a series with 9 one minute timestamps.
    
    >>> index = pd.date_range('1/1/2000', periods=9, freq='min')
    >>> series = pd.Series(range(9), index=index)
    >>> series
    2000-01-01 00:00:00    0
    2000-01-01 00:01:00    1
    2000-01-01 00:02:00    2
    2000-01-01 00:03:00    3
    2000-01-01 00:04:00    4
    2000-01-01 00:05:00    5
    2000-01-01 00:06:00    6
    2000-01-01 00:07:00    7
    2000-01-01 00:08:00    8
    Freq: min, dtype: int64
    
    Downsample the series into 3 minute bins and sum the values
    of the timestamps falling into a bin.
    
    >>> series.resample('3min').sum()
    2000-01-01 00:00:00     3
    2000-01-01 00:03:00    12
    2000-01-01 00:06:00    21
    Freq: 3min, dtype: int64
    
    Downsample the series into 3 minute bins as above, but label each
    bin using the right edge instead of the left. Please note that the
    value in the bucket used as the label is not included in the bucket,
    which it labels. For example, in the original series the
    bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed
    value in the resampled bucket with the label ``2000-01-01 00:03:00``
    does not include 3 (if it did, the summed value would be 6, not 3).
    
    >>> series.resample('3min', label='right').sum()
    2000-01-01 00:03:00     3
    2000-01-01 00:06:00    12
    2000-01-01 00:09:00    21
    Freq: 3min, dtype: int64
    
    To include this value close the right side of the bin interval,
    as shown below.
    
    >>> series.resample('3min', label='right', closed='right').sum()
    2000-01-01 00:00:00     0
    2000-01-01 00:03:00     6
    2000-01-01 00:06:00    15
    2000-01-01 00:09:00    15
    Freq: 3min, dtype: int64
    
    Upsample the series into 30 second bins.
    
    >>> series.resample('30s').asfreq()[0:5]   # Select first 5 rows
    2000-01-01 00:00:00   0.0
    2000-01-01 00:00:30   NaN
    2000-01-01 00:01:00   1.0
    2000-01-01 00:01:30   NaN
    2000-01-01 00:02:00   2.0
    Freq: 30s, dtype: float64
    
    Upsample the series into 30 second bins and fill the ``NaN``
    values using the ``ffill`` method.
    
    >>> series.resample('30s').ffill()[0:5]
    2000-01-01 00:00:00    0
    2000-01-01 00:00:30    0
    2000-01-01 00:01:00    1
    2000-01-01 00:01:30    1
    2000-01-01 00:02:00    2
    Freq: 30s, dtype: int64
    
    Upsample the series into 30 second bins and fill the
    ``NaN`` values using the ``bfill`` method.
    
    >>> series.resample('30s').bfill()[0:5]
    2000-01-01 00:00:00    0
    2000-01-01 00:00:30    1
    2000-01-01 00:01:00    1
    2000-01-01 00:01:30    2
    2000-01-01 00:02:00    2
    Freq: 30s, dtype: int64
    
    Pass a custom function via ``apply``
    
    >>> def custom_resampler(arraylike):
    ...     return np.sum(arraylike) + 5
    ...
    >>> series.resample('3min').apply(custom_resampler)
    2000-01-01 00:00:00     8
    2000-01-01 00:03:00    17
    2000-01-01 00:06:00    26
    Freq: 3min, dtype: int64
    
    For a Series with a PeriodIndex, the keyword `convention` can be
    used to control whether to use the start or end of `rule`.
    
    Resample a year by quarter using 'start' `convention`. Values are
    assigned to the first quarter of the period.
    
    >>> s = pd.Series(
    ...     [1, 2], index=pd.period_range("2012-01-01", freq="Y", periods=2)
    ... )
    >>> s
    2012    1
    2013    2
    Freq: Y-DEC, dtype: int64
    >>> s.resample("Q", convention="start").asfreq()
    2012Q1    1.0
    2012Q2    NaN
    2012Q3    NaN
    2012Q4    NaN
    2013Q1    2.0
    2013Q2    NaN
    2013Q3    NaN
    2013Q4    NaN
    Freq: Q-DEC, dtype: float64
    
    Resample quarters by month using 'end' `convention`. Values are
    assigned to the last month of the period.
    
    >>> q = pd.Series(
    ...     [1, 2, 3, 4], index=pd.period_range("2018-01-01", freq="Q", periods=4)
    ... )
    >>> q
    2018Q1    1
    2018Q2    2
    2018Q3    3
    2018Q4    4
    Freq: Q-DEC, dtype: int64
    >>> q.resample("M", convention="end").asfreq()
    2018-03    1.0
    2018-04    NaN
    2018-05    NaN
    2018-06    2.0
    2018-07    NaN
    2018-08    NaN
    2018-09    3.0
    2018-10    NaN
    2018-11    NaN
    2018-12    4.0
    Freq: M, dtype: float64
    
    For DataFrame objects, the keyword `on` can be used to specify the
    column instead of the index for resampling.
    
    >>> d = {'price': [10, 11, 9, 13, 14, 18, 17, 19],
    ...      'volume': [50, 60, 40, 100, 50, 100, 40, 50]}
    >>> df = pd.DataFrame(d)
    >>> df['week_starting'] = pd.date_range('01/01/2018',
    ...                                     periods=8,
    ...                                     freq='W')
    >>> df
       price  volume week_starting
    0     10      50    2018-01-07
    1     11      60    2018-01-14
    2      9      40    2018-01-21
    3     13     100    2018-01-28
    4     14      50    2018-02-04
    5     18     100    2018-02-11
    6     17      40    2018-02-18
    7     19      50    2018-02-25
    >>> df.resample('ME', on='week_starting').mean()
                   price  volume
    week_starting
    2018-01-31     10.75    62.5
    2018-02-28     17.00    60.0
    
    For a DataFrame with MultiIndex, the keyword `level` can be used to
    specify on which level the resampling needs to take place.
    
    >>> days = pd.date_range('1/1/2000', periods=4, freq='D')
    >>> d2 = {'price': [10, 11, 9, 13, 14, 18, 17, 19],
    ...       'volume': [50, 60, 40, 100, 50, 100, 40, 50]}
    >>> df2 = pd.DataFrame(
    ...     d2,
    ...     index=pd.MultiIndex.from_product(
    ...         [days, ['morning', 'afternoon']]
    ...     )
    ... )
    >>> df2
                          price  volume
    2000-01-01 morning       10      50
               afternoon     11      60
    2000-01-02 morning        9      40
               afternoon     13     100
    2000-01-03 morning       14      50
               afternoon     18     100
    2000-01-04 morning       17      40
               afternoon     19      50
    >>> df2.resample('D', level=0).sum()
                price  volume
    2000-01-01     21     110
    2000-01-02     22     140
    2000-01-03     32     150
    2000-01-04     36      90
    
    If you want to adjust the start of the bins based on a fixed timestamp:
    
    >>> start, end = '2000-10-01 23:30:00', '2000-10-02 00:30:00'
    >>> rng = pd.date_range(start, end, freq='7min')
    >>> ts = pd.Series(np.arange(len(rng)) * 3, index=rng)
    >>> ts
    2000-10-01 23:30:00     0
    2000-10-01 23:37:00     3
    2000-10-01 23:44:00     6
    2000-10-01 23:51:00     9
    2000-10-01 23:58:00    12
    2000-10-02 00:05:00    15
    2000-10-02 00:12:00    18
    2000-10-02 00:19:00    21
    2000-10-02 00:26:00    24
    Freq: 7min, dtype: int64
    
    >>> ts.resample('17min').sum()
    2000-10-01 23:14:00     0
    2000-10-01 23:31:00     9
    2000-10-01 23:48:00    21
    2000-10-02 00:05:00    54
    2000-10-02 00:22:00    24
    Freq: 17min, dtype: int64
    
    >>> ts.resample('17min', origin='epoch').sum()
    2000-10-01 23:18:00     0
    2000-10-01 23:35:00    18
    2000-10-01 23:52:00    27
    2000-10-02 00:09:00    39
    2000-10-02 00:26:00    24
    Freq: 17min, dtype: int64
    
    >>> ts.resample('17min', origin='2000-01-01').sum()
    2000-10-01 23:24:00     3
    2000-10-01 23:41:00    15
    2000-10-01 23:58:00    45
    2000-10-02 00:15:00    45
    Freq: 17min, dtype: int64
    
    If you want to adjust the start of the bins with an `offset` Timedelta, the two
    following lines are equivalent:
    
    >>> ts.resample('17min', origin='start').sum()
    2000-10-01 23:30:00     9
    2000-10-01 23:47:00    21
    2000-10-02 00:04:00    54
    2000-10-02 00:21:00    24
    Freq: 17min, dtype: int64
    
    >>> ts.resample('17min', offset='23h30min').sum()
    2000-10-01 23:30:00     9
    2000-10-01 23:47:00    21
    2000-10-02 00:04:00    54
    2000-10-02 00:21:00    24
    Freq: 17min, dtype: int64
    
    If you want to take the largest Timestamp as the end of the bins:
    
    >>> ts.resample('17min', origin='end').sum()
    2000-10-01 23:35:00     0
    2000-10-01 23:52:00    18
    2000-10-02 00:09:00    27
    2000-10-02 00:26:00    63
    Freq: 17min, dtype: int64
    
    In contrast with the `start_day`, you can use `end_day` to take the ceiling
    midnight of the largest Timestamp as the end of the bins and drop the bins
    not containing data:
    
    >>> ts.resample('17min', origin='end_day').sum()
    2000-10-01 23:38:00     3
    2000-10-01 23:55:00    15
    2000-10-02 00:12:00    45
    2000-10-02 00:29:00    45
    Freq: 17min, dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& reset_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method reset_index in module pandas.core.frame:

reset_index(level: 'IndexLabel | None' = None, *, drop: 'bool' = False, inplace: 'bool' = False, col_level: 'Hashable' = 0, col_fill: 'Hashable' = '', allow_duplicates: 'bool | lib.NoDefault' = <no_default>, names: 'Hashable | Sequence[Hashable] | None' = None) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Reset the index, or a level of it.
    
    Reset the index of the DataFrame, and use the default one instead.
    If the DataFrame has a MultiIndex, this method can remove one or more
    levels.
    
    Parameters
    ----------
    level : int, str, tuple, or list, default None
        Only remove the given levels from the index. Removes all levels by
        default.
    drop : bool, default False
        Do not try to insert index into dataframe columns. This resets
        the index to the default integer index.
    inplace : bool, default False
        Whether to modify the DataFrame rather than creating a new one.
    col_level : int or str, default 0
        If the columns have multiple levels, determines which level the
        labels are inserted into. By default it is inserted into the first
        level.
    col_fill : object, default ''
        If the columns have multiple levels, determines how the other
        levels are named. If None then the index name is repeated.
    allow_duplicates : bool, optional, default lib.no_default
        Allow duplicate column labels to be created.
    
        .. versionadded:: 1.5.0
    
    names : int, str or 1-dimensional list, default None
        Using the given string, rename the DataFrame column which contains the
        index data. If the DataFrame has a MultiIndex, this has to be a list or
        tuple with length equal to the number of levels.
    
        .. versionadded:: 1.5.0
    
    Returns
    -------
    DataFrame or None
        DataFrame with the new index or None if ``inplace=True``.
    
    See Also
    --------
    DataFrame.set_index : Opposite of reset_index.
    DataFrame.reindex : Change to new indices or expand indices.
    DataFrame.reindex_like : Change to same indices as other DataFrame.
    
    Examples
    --------
    >>> df = pd.DataFrame([('bird', 389.0),
    ...                    ('bird', 24.0),
    ...                    ('mammal', 80.5),
    ...                    ('mammal', np.nan)],
    ...                   index=['falcon', 'parrot', 'lion', 'monkey'],
    ...                   columns=('class', 'max_speed'))
    >>> df
             class  max_speed
    falcon    bird      389.0
    parrot    bird       24.0
    lion    mammal       80.5
    monkey  mammal        NaN
    
    When we reset the index, the old index is added as a column, and a
    new sequential index is used:
    
    >>> df.reset_index()
        index   class  max_speed
    0  falcon    bird      389.0
    1  parrot    bird       24.0
    2    lion  mammal       80.5
    3  monkey  mammal        NaN
    
    We can use the `drop` parameter to avoid the old index being added as
    a column:
    
    >>> df.reset_index(drop=True)
        class  max_speed
    0    bird      389.0
    1    bird       24.0
    2  mammal       80.5
    3  mammal        NaN
    
    You can also use `reset_index` with `MultiIndex`.
    
    >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),
    ...                                    ('bird', 'parrot'),
    ...                                    ('mammal', 'lion'),
    ...                                    ('mammal', 'monkey')],
    ...                                   names=['class', 'name'])
    >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),
    ...                                      ('species', 'type')])
    >>> df = pd.DataFrame([(389.0, 'fly'),
    ...                    (24.0, 'fly'),
    ...                    (80.5, 'run'),
    ...                    (np.nan, 'jump')],
    ...                   index=index,
    ...                   columns=columns)
    >>> df
                   speed species
                     max    type
    class  name
    bird   falcon  389.0     fly
           parrot   24.0     fly
    mammal lion     80.5     run
           monkey    NaN    jump
    
    Using the `names` parameter, choose a name for the index column:
    
    >>> df.reset_index(names=['classes', 'names'])
      classes   names  speed species
                         max    type
    0    bird  falcon  389.0     fly
    1    bird  parrot   24.0     fly
    2  mammal    lion   80.5     run
    3  mammal  monkey    NaN    jump
    
    If the index has multiple levels, we can reset a subset of them:
    
    >>> df.reset_index(level='class')
             class  speed species
                      max    type
    name
    falcon    bird  389.0     fly
    parrot    bird   24.0     fly
    lion    mammal   80.5     run
    monkey  mammal    NaN    jump
    
    If we are not dropping the index, by default, it is placed in the top
    level. We can place it in another level:
    
    >>> df.reset_index(level='class', col_level=1)
                    speed species
             class    max    type
    name
    falcon    bird  389.0     fly
    parrot    bird   24.0     fly
    lion    mammal   80.5     run
    monkey  mammal    NaN    jump
    
    When the index is inserted under another level, we can specify under
    which one with the parameter `col_fill`:
    
    >>> df.reset_index(level='class', col_level=1, col_fill='species')
                  species  speed species
                    class    max    type
    name
    falcon           bird  389.0     fly
    parrot           bird   24.0     fly
    lion           mammal   80.5     run
    monkey         mammal    NaN    jump
    
    If we specify a nonexistent level for `col_fill`, it is created:
    
    >>> df.reset_index(level='class', col_level=1, col_fill='genus')
                    genus  speed species
                    class    max    type
    name
    falcon           bird  389.0     fly
    parrot           bird   24.0     fly
    lion           mammal   80.5     run
    monkey         mammal    NaN    jump

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rfloordiv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rfloordiv in module pandas.core.frame:

rfloordiv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Integer division of dataframe and other, element-wise (binary operator `rfloordiv`).
    
    Equivalent to ``other // dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `floordiv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rmod &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rmod in module pandas.core.frame:

rmod(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Modulo of dataframe and other, element-wise (binary operator `rmod`).
    
    Equivalent to ``other % dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `mod`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rmul &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rmul in module pandas.core.frame:

rmul(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Multiplication of dataframe and other, element-wise (binary operator `rmul`).
    
    Equivalent to ``other * dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `mul`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rolling &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rolling in module pandas.core.generic:

rolling(window: 'int | dt.timedelta | str | BaseOffset | BaseIndexer', min_periods: 'int | None' = None, center: 'bool_t' = False, win_type: 'str | None' = None, on: 'str | None' = None, axis: 'Axis | lib.NoDefault' = <no_default>, closed: 'IntervalClosedType | None' = None, step: 'int | None' = None, method: 'str' = 'single') -> 'Window | Rolling' method of pandas.core.frame.DataFrame instance
    Provide rolling window calculations.
    
    Parameters
    ----------
    window : int, timedelta, str, offset, or BaseIndexer subclass
        Size of the moving window.
    
        If an integer, the fixed number of observations used for
        each window.
    
        If a timedelta, str, or offset, the time period of each window. Each
        window will be a variable sized based on the observations included in
        the time-period. This is only valid for datetimelike indexes.
        To learn more about the offsets & frequency strings, please see `this link
        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
    
        If a BaseIndexer subclass, the window boundaries
        based on the defined ``get_window_bounds`` method. Additional rolling
        keyword arguments, namely ``min_periods``, ``center``, ``closed`` and
        ``step`` will be passed to ``get_window_bounds``.
    
    min_periods : int, default None
        Minimum number of observations in window required to have a value;
        otherwise, result is ``np.nan``.
    
        For a window that is specified by an offset, ``min_periods`` will default to 1.
    
        For a window that is specified by an integer, ``min_periods`` will default
        to the size of the window.
    
    center : bool, default False
        If False, set the window labels as the right edge of the window index.
    
        If True, set the window labels as the center of the window index.
    
    win_type : str, default None
        If ``None``, all points are evenly weighted.
    
        If a string, it must be a valid `scipy.signal window function
        <https://docs.scipy.org/doc/scipy/reference/signal.windows.html#module-scipy.signal.windows>`__.
    
        Certain Scipy window types require additional parameters to be passed
        in the aggregation function. The additional parameters must match
        the keywords specified in the Scipy window type method signature.
    
    on : str, optional
        For a DataFrame, a column label or Index level on which
        to calculate the rolling window, rather than the DataFrame's index.
    
        Provided integer column is ignored and excluded from result since
        an integer index is not used to calculate the rolling window.
    
    axis : int or str, default 0
        If ``0`` or ``'index'``, roll across the rows.
    
        If ``1`` or ``'columns'``, roll across the columns.
    
        For `Series` this parameter is unused and defaults to 0.
    
        .. deprecated:: 2.1.0
    
            The axis keyword is deprecated. For ``axis=1``,
            transpose the DataFrame first instead.
    
    closed : str, default None
        If ``'right'``, the first point in the window is excluded from calculations.
    
        If ``'left'``, the last point in the window is excluded from calculations.
    
        If ``'both'``, the no points in the window are excluded from calculations.
    
        If ``'neither'``, the first and last points in the window are excluded
        from calculations.
    
        Default ``None`` (``'right'``).
    
    step : int, default None
    
        .. versionadded:: 1.5.0
    
        Evaluate the window at every ``step`` result, equivalent to slicing as
        ``[::step]``. ``window`` must be an integer. Using a step argument other
        than None or 1 will produce a result with a different shape than the input.
    
    method : str {'single', 'table'}, default 'single'
    
        .. versionadded:: 1.3.0
    
        Execute the rolling operation per single column or row (``'single'``)
        or over the entire object (``'table'``).
    
        This argument is only implemented when specifying ``engine='numba'``
        in the method call.
    
    Returns
    -------
    pandas.api.typing.Window or pandas.api.typing.Rolling
        An instance of Window is returned if ``win_type`` is passed. Otherwise,
        an instance of Rolling is returned.
    
    See Also
    --------
    expanding : Provides expanding transformations.
    ewm : Provides exponential weighted functions.
    
    Notes
    -----
    See :ref:`Windowing Operations <window.generic>` for further usage details
    and examples.
    
    Examples
    --------
    >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
    >>> df
         B
    0  0.0
    1  1.0
    2  2.0
    3  NaN
    4  4.0
    
    **window**
    
    Rolling sum with a window length of 2 observations.
    
    >>> df.rolling(2).sum()
         B
    0  NaN
    1  1.0
    2  3.0
    3  NaN
    4  NaN
    
    Rolling sum with a window span of 2 seconds.
    
    >>> df_time = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]},
    ...                        index=[pd.Timestamp('20130101 09:00:00'),
    ...                               pd.Timestamp('20130101 09:00:02'),
    ...                               pd.Timestamp('20130101 09:00:03'),
    ...                               pd.Timestamp('20130101 09:00:05'),
    ...                               pd.Timestamp('20130101 09:00:06')])
    
    >>> df_time
                           B
    2013-01-01 09:00:00  0.0
    2013-01-01 09:00:02  1.0
    2013-01-01 09:00:03  2.0
    2013-01-01 09:00:05  NaN
    2013-01-01 09:00:06  4.0
    
    >>> df_time.rolling('2s').sum()
                           B
    2013-01-01 09:00:00  0.0
    2013-01-01 09:00:02  1.0
    2013-01-01 09:00:03  3.0
    2013-01-01 09:00:05  NaN
    2013-01-01 09:00:06  4.0
    
    Rolling sum with forward looking windows with 2 observations.
    
    >>> indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)
    >>> df.rolling(window=indexer, min_periods=1).sum()
         B
    0  1.0
    1  3.0
    2  2.0
    3  4.0
    4  4.0
    
    **min_periods**
    
    Rolling sum with a window length of 2 observations, but only needs a minimum of 1
    observation to calculate a value.
    
    >>> df.rolling(2, min_periods=1).sum()
         B
    0  0.0
    1  1.0
    2  3.0
    3  2.0
    4  4.0
    
    **center**
    
    Rolling sum with the result assigned to the center of the window index.
    
    >>> df.rolling(3, min_periods=1, center=True).sum()
         B
    0  1.0
    1  3.0
    2  3.0
    3  6.0
    4  4.0
    
    >>> df.rolling(3, min_periods=1, center=False).sum()
         B
    0  0.0
    1  1.0
    2  3.0
    3  3.0
    4  6.0
    
    **step**
    
    Rolling sum with a window length of 2 observations, minimum of 1 observation to
    calculate a value, and a step of 2.
    
    >>> df.rolling(2, min_periods=1, step=2).sum()
         B
    0  0.0
    2  3.0
    4  4.0
    
    **win_type**
    
    Rolling sum with a window length of 2, using the Scipy ``'gaussian'``
    window type. ``std`` is required in the aggregation function.
    
    >>> df.rolling(2, win_type='gaussian').sum(std=3)
              B
    0       NaN
    1  0.986207
    2  2.958621
    3       NaN
    4       NaN
    
    **on**
    
    Rolling sum with a window length of 2 days.
    
    >>> df = pd.DataFrame({
    ...     'A': [pd.to_datetime('2020-01-01'),
    ...           pd.to_datetime('2020-01-01'),
    ...           pd.to_datetime('2020-01-02'),],
    ...     'B': [1, 2, 3], },
    ...     index=pd.date_range('2020', periods=3))
    
    >>> df
                        A  B
    2020-01-01 2020-01-01  1
    2020-01-02 2020-01-01  2
    2020-01-03 2020-01-02  3
    
    >>> df.rolling('2D', on='A').sum()
                        A    B
    2020-01-01 2020-01-01  1.0
    2020-01-02 2020-01-01  3.0
    2020-01-03 2020-01-02  6.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& round &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method round in module pandas.core.frame:

round(decimals: 'int | dict[IndexLabel, int] | Series' = 0, *args, **kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Round a DataFrame to a variable number of decimal places.
    
    Parameters
    ----------
    decimals : int, dict, Series
        Number of decimal places to round each column to. If an int is
        given, round each column to the same number of places.
        Otherwise dict and Series round to variable numbers of places.
        Column names should be in the keys if `decimals` is a
        dict-like, or in the index if `decimals` is a Series. Any
        columns not included in `decimals` will be left as is. Elements
        of `decimals` which are not columns of the input will be
        ignored.
    *args
        Additional keywords have no effect but might be accepted for
        compatibility with numpy.
    **kwargs
        Additional keywords have no effect but might be accepted for
        compatibility with numpy.
    
    Returns
    -------
    DataFrame
        A DataFrame with the affected columns rounded to the specified
        number of decimal places.
    
    See Also
    --------
    numpy.around : Round a numpy array to the given number of decimals.
    Series.round : Round a Series to the given number of decimals.
    
    Examples
    --------
    >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],
    ...                   columns=['dogs', 'cats'])
    >>> df
        dogs  cats
    0  0.21  0.32
    1  0.01  0.67
    2  0.66  0.03
    3  0.21  0.18
    
    By providing an integer each column is rounded to the same number
    of decimal places
    
    >>> df.round(1)
        dogs  cats
    0   0.2   0.3
    1   0.0   0.7
    2   0.7   0.0
    3   0.2   0.2
    
    With a dict, the number of places for specific columns can be
    specified with the column names as key and the number of decimal
    places as value
    
    >>> df.round({'dogs': 1, 'cats': 0})
        dogs  cats
    0   0.2   0.0
    1   0.0   1.0
    2   0.7   0.0
    3   0.2   0.0
    
    Using a Series, the number of places for specific columns can be
    specified with the column names as index and the number of
    decimal places as value
    
    >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])
    >>> df.round(decimals)
        dogs  cats
    0   0.2   0.0
    1   0.0   1.0
    2   0.7   0.0
    3   0.2   0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rpow &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rpow in module pandas.core.frame:

rpow(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Exponential power of dataframe and other, element-wise (binary operator `rpow`).
    
    Equivalent to ``other ** dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `pow`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rsub &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rsub in module pandas.core.frame:

rsub(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Subtraction of dataframe and other, element-wise (binary operator `rsub`).
    
    Equivalent to ``other - dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `sub`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& rtruediv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method rtruediv in module pandas.core.frame:

rtruediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `rtruediv`).
    
    Equivalent to ``other / dataframe``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `truediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& sample &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sample in module pandas.core.generic:

sample(n: 'int | None' = None, frac: 'float | None' = None, replace: 'bool_t' = False, weights=None, random_state: 'RandomState | None' = None, axis: 'Axis | None' = None, ignore_index: 'bool_t' = False) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return a random sample of items from an axis of object.
    
    You can use `random_state` for reproducibility.
    
    Parameters
    ----------
    n : int, optional
        Number of items from axis to return. Cannot be used with `frac`.
        Default = 1 if `frac` = None.
    frac : float, optional
        Fraction of axis items to return. Cannot be used with `n`.
    replace : bool, default False
        Allow or disallow sampling of the same row more than once.
    weights : str or ndarray-like, optional
        Default 'None' results in equal probability weighting.
        If passed a Series, will align with target object on index. Index
        values in weights not found in sampled object will be ignored and
        index values in sampled object not in weights will be assigned
        weights of zero.
        If called on a DataFrame, will accept the name of a column
        when axis = 0.
        Unless weights are a Series, weights must be same length as axis
        being sampled.
        If weights do not sum to 1, they will be normalized to sum to 1.
        Missing values in the weights column will be treated as zero.
        Infinite values not allowed.
    random_state : int, array-like, BitGenerator, np.random.RandomState, np.random.Generator, optional
        If int, array-like, or BitGenerator, seed for random number generator.
        If np.random.RandomState or np.random.Generator, use as given.
    
        .. versionchanged:: 1.4.0
    
            np.random.Generator objects now accepted
    
    axis : {0 or 'index', 1 or 'columns', None}, default None
        Axis to sample. Accepts axis number or name. Default is stat axis
        for given data type. For `Series` this parameter is unused and defaults to `None`.
    ignore_index : bool, default False
        If True, the resulting index will be labeled 0, 1, …, n - 1.
    
        .. versionadded:: 1.3.0
    
    Returns
    -------
    Series or DataFrame
        A new object of same type as caller containing `n` items randomly
        sampled from the caller object.
    
    See Also
    --------
    DataFrameGroupBy.sample: Generates random samples from each group of a
        DataFrame object.
    SeriesGroupBy.sample: Generates random samples from each group of a
        Series object.
    numpy.random.choice: Generates a random sample from a given 1-D numpy
        array.
    
    Notes
    -----
    If `frac` > 1, `replacement` should be set to `True`.
    
    Examples
    --------
    >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],
    ...                    'num_wings': [2, 0, 0, 0],
    ...                    'num_specimen_seen': [10, 2, 1, 8]},
    ...                   index=['falcon', 'dog', 'spider', 'fish'])
    >>> df
            num_legs  num_wings  num_specimen_seen
    falcon         2          2                 10
    dog            4          0                  2
    spider         8          0                  1
    fish           0          0                  8
    
    Extract 3 random elements from the ``Series`` ``df['num_legs']``:
    Note that we use `random_state` to ensure the reproducibility of
    the examples.
    
    >>> df['num_legs'].sample(n=3, random_state=1)
    fish      0
    spider    8
    falcon    2
    Name: num_legs, dtype: int64
    
    A random 50% sample of the ``DataFrame`` with replacement:
    
    >>> df.sample(frac=0.5, replace=True, random_state=1)
          num_legs  num_wings  num_specimen_seen
    dog          4          0                  2
    fish         0          0                  8
    
    An upsample sample of the ``DataFrame`` with replacement:
    Note that `replace` parameter has to be `True` for `frac` parameter > 1.
    
    >>> df.sample(frac=2, replace=True, random_state=1)
            num_legs  num_wings  num_specimen_seen
    dog            4          0                  2
    fish           0          0                  8
    falcon         2          2                 10
    falcon         2          2                 10
    fish           0          0                  8
    dog            4          0                  2
    fish           0          0                  8
    dog            4          0                  2
    
    Using a DataFrame column as weights. Rows with larger value in the
    `num_specimen_seen` column are more likely to be sampled.
    
    >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)
            num_legs  num_wings  num_specimen_seen
    falcon         2          2                 10
    fish           0          0                  8

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& select_dtypes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method select_dtypes in module pandas.core.frame:

select_dtypes(include=None, exclude=None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return a subset of the DataFrame's columns based on the column dtypes.
    
    Parameters
    ----------
    include, exclude : scalar or list-like
        A selection of dtypes or strings to be included/excluded. At least
        one of these parameters must be supplied.
    
    Returns
    -------
    DataFrame
        The subset of the frame including the dtypes in ``include`` and
        excluding the dtypes in ``exclude``.
    
    Raises
    ------
    ValueError
        * If both of ``include`` and ``exclude`` are empty
        * If ``include`` and ``exclude`` have overlapping elements
        * If any kind of string dtype is passed in.
    
    See Also
    --------
    DataFrame.dtypes: Return Series with the data type of each column.
    
    Notes
    -----
    * To select all *numeric* types, use ``np.number`` or ``'number'``
    * To select strings you must use the ``object`` dtype, but note that
      this will return *all* object dtype columns. With
      ``pd.options.future.infer_string`` enabled, using ``"str"`` will
      work to select all string columns.
    * See the `numpy dtype hierarchy
      <https://numpy.org/doc/stable/reference/arrays.scalars.html>`__
    * To select datetimes, use ``np.datetime64``, ``'datetime'`` or
      ``'datetime64'``
    * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or
      ``'timedelta64'``
    * To select Pandas categorical dtypes, use ``'category'``
    * To select Pandas datetimetz dtypes, use ``'datetimetz'``
      or ``'datetime64[ns, tz]'``
    
    Examples
    --------
    >>> df = pd.DataFrame({'a': [1, 2] * 3,
    ...                    'b': [True, False] * 3,
    ...                    'c': [1.0, 2.0] * 3})
    >>> df
            a      b  c
    0       1   True  1.0
    1       2  False  2.0
    2       1   True  1.0
    3       2  False  2.0
    4       1   True  1.0
    5       2  False  2.0
    
    >>> df.select_dtypes(include='bool')
       b
    0  True
    1  False
    2  True
    3  False
    4  True
    5  False
    
    >>> df.select_dtypes(include=['float64'])
       c
    0  1.0
    1  2.0
    2  1.0
    3  2.0
    4  1.0
    5  2.0
    
    >>> df.select_dtypes(exclude=['int64'])
           b    c
    0   True  1.0
    1  False  2.0
    2   True  1.0
    3  False  2.0
    4   True  1.0
    5  False  2.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& sem &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sem in module pandas.core.frame:

sem(axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased standard error of the mean over requested axis.
    
    Normalized by N-1 by default. This can be changed using the ddof argument
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        For `Series` this parameter is unused and defaults to 0.
    
        .. warning::
    
            The behavior of DataFrame.sem with ``axis=None`` is deprecated,
            in a future version this will reduce over both axes and return a scalar
            To retain the old behavior, pass axis=0 (or do not pass axis).
    
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    ddof : int, default 1
        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
        where N represents the number of elements.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    Returns
    -------
    Series or DataFrame (if level specified) 
    
                Examples
                --------
                >>> s = pd.Series([1, 2, 3])
                >>> s.sem().round(6)
                0.57735
    
                With a DataFrame
    
                >>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
                >>> df
                       a   b
                tiger  1   2
                zebra  2   3
                >>> df.sem()
                a   0.5
                b   0.5
                dtype: float64
    
                Using axis=1
    
                >>> df.sem(axis=1)
                tiger   0.5
                zebra   0.5
                dtype: float64
    
                In this case, `numeric_only` should be set to `True`
                to avoid getting an error.
    
                >>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
                ...                   index=['tiger', 'zebra'])
                >>> df.sem(numeric_only=True)
                a   0.5
                dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& set_axis &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_axis in module pandas.core.frame:

set_axis(labels, *, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Assign desired index to given axis.
    
    Indexes for column or row labels can be changed by assigning
    a list-like or Index.
    
    Parameters
    ----------
    labels : list-like, Index
        The values for the new index.
    
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to update. The value 0 identifies the rows. For `Series`
        this parameter is unused and defaults to 0.
    
    copy : bool, default True
        Whether to make a copy of the underlying data.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    
    Returns
    -------
    DataFrame
        An object of type DataFrame.
    
    See Also
    --------
    DataFrame.rename_axis : Alter the name of the index or columns.
    
            Examples
            --------
            >>> df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
    
            Change the row labels.
    
            >>> df.set_axis(['a', 'b', 'c'], axis='index')
               A  B
            a  1  4
            b  2  5
            c  3  6
    
            Change the column labels.
    
            >>> df.set_axis(['I', 'II'], axis='columns')
               I  II
            0  1   4
            1  2   5
            2  3   6

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& set_flags &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_flags in module pandas.core.generic:

set_flags(*, copy: 'bool_t' = False, allows_duplicate_labels: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return a new object with updated flags.
    
    Parameters
    ----------
    copy : bool, default False
        Specify if a copy of the object should be made.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    allows_duplicate_labels : bool, optional
        Whether the returned object allows duplicate labels.
    
    Returns
    -------
    Series or DataFrame
        The same type as the caller.
    
    See Also
    --------
    DataFrame.attrs : Global metadata applying to this dataset.
    DataFrame.flags : Global flags applying to this object.
    
    Notes
    -----
    This method returns a new object that's a view on the same data
    as the input. Mutating the input or the output values will be reflected
    in the other.
    
    This method is intended to be used in method chains.
    
    "Flags" differ from "metadata". Flags reflect properties of the
    pandas object (the Series or DataFrame). Metadata refer to properties
    of the dataset, and should be stored in :attr:`DataFrame.attrs`.
    
    Examples
    --------
    >>> df = pd.DataFrame({"A": [1, 2]})
    >>> df.flags.allows_duplicate_labels
    True
    >>> df2 = df.set_flags(allows_duplicate_labels=False)
    >>> df2.flags.allows_duplicate_labels
    False

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& set_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method set_index in module pandas.core.frame:

set_index(keys, *, drop: 'bool' = True, append: 'bool' = False, inplace: 'bool' = False, verify_integrity: 'bool' = False) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Set the DataFrame index using existing columns.
    
    Set the DataFrame index (row labels) using one or more existing
    columns or arrays (of the correct length). The index can replace the
    existing index or expand on it.
    
    Parameters
    ----------
    keys : label or array-like or list of labels/arrays
        This parameter can be either a single column key, a single array of
        the same length as the calling DataFrame, or a list containing an
        arbitrary combination of column keys and arrays. Here, "array"
        encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and
        instances of :class:`~collections.abc.Iterator`.
    drop : bool, default True
        Delete columns to be used as the new index.
    append : bool, default False
        Whether to append columns to existing index.
    inplace : bool, default False
        Whether to modify the DataFrame rather than creating a new one.
    verify_integrity : bool, default False
        Check the new index for duplicates. Otherwise defer the check until
        necessary. Setting to False will improve the performance of this
        method.
    
    Returns
    -------
    DataFrame or None
        Changed row labels or None if ``inplace=True``.
    
    See Also
    --------
    DataFrame.reset_index : Opposite of set_index.
    DataFrame.reindex : Change to new indices or expand indices.
    DataFrame.reindex_like : Change to same indices as other DataFrame.
    
    Examples
    --------
    >>> df = pd.DataFrame({'month': [1, 4, 7, 10],
    ...                    'year': [2012, 2014, 2013, 2014],
    ...                    'sale': [55, 40, 84, 31]})
    >>> df
       month  year  sale
    0      1  2012    55
    1      4  2014    40
    2      7  2013    84
    3     10  2014    31
    
    Set the index to become the 'month' column:
    
    >>> df.set_index('month')
           year  sale
    month
    1      2012    55
    4      2014    40
    7      2013    84
    10     2014    31
    
    Create a MultiIndex using columns 'year' and 'month':
    
    >>> df.set_index(['year', 'month'])
                sale
    year  month
    2012  1     55
    2014  4     40
    2013  7     84
    2014  10    31
    
    Create a MultiIndex using an Index and a column:
    
    >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])
             month  sale
       year
    1  2012  1      55
    2  2014  4      40
    3  2013  7      84
    4  2014  10     31
    
    Create a MultiIndex using two Series:
    
    >>> s = pd.Series([1, 2, 3, 4])
    >>> df.set_index([s, s**2])
          month  year  sale
    1 1       1  2012    55
    2 4       4  2014    40
    3 9       7  2013    84
    4 16     10  2014    31

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& shape &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on tuple object:

class tuple(object)
 |  tuple(iterable=(), /)
 |  
 |  Built-in immutable sequence.
 |  
 |  If no argument is given, the constructor returns an empty tuple.
 |  If iterable is specified the tuple is initialized from iterable's items.
 |  
 |  If the argument is a tuple, the return value is the same object.
 |  
 |  Built-in subclasses:
 |      asyncgen_hooks
 |      UnraisableHookArgs
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      See PEP 585
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& shift &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method shift in module pandas.core.frame:

shift(periods: 'int | Sequence[int]' = 1, freq: 'Frequency | None' = None, axis: 'Axis' = 0, fill_value: 'Hashable' = <no_default>, suffix: 'str | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Shift index by desired number of periods with an optional time `freq`.
    
    When `freq` is not passed, shift the index without realigning the data.
    If `freq` is passed (in this case, the index must be date or datetime,
    or it will raise a `NotImplementedError`), the index will be
    increased using the periods and the `freq`. `freq` can be inferred
    when specified as "infer" as long as either freq or inferred_freq
    attribute is set in the index.
    
    Parameters
    ----------
    periods : int or Sequence
        Number of periods to shift. Can be positive or negative.
        If an iterable of ints, the data will be shifted once by each int.
        This is equivalent to shifting by one value at a time and
        concatenating all resulting frames. The resulting columns will have
        the shift suffixed to their column names. For multiple periods,
        axis must not be 1.
    freq : DateOffset, tseries.offsets, timedelta, or str, optional
        Offset to use from the tseries module or time rule (e.g. 'EOM').
        If `freq` is specified then the index values are shifted but the
        data is not realigned. That is, use `freq` if you would like to
        extend the index when shifting and preserve the original data.
        If `freq` is specified as "infer" then it will be inferred from
        the freq or inferred_freq attributes of the index. If neither of
        those attributes exist, a ValueError is thrown.
    axis : {0 or 'index', 1 or 'columns', None}, default None
        Shift direction. For `Series` this parameter is unused and defaults to 0.
    fill_value : object, optional
        The scalar value to use for newly introduced missing values.
        the default depends on the dtype of `self`.
        For numeric data, ``np.nan`` is used.
        For datetime, timedelta, or period data, etc. :attr:`NaT` is used.
        For extension dtypes, ``self.dtype.na_value`` is used.
    suffix : str, optional
        If str and periods is an iterable, this is added after the column
        name and before the shift value for each shifted column name.
    
    Returns
    -------
    DataFrame
        Copy of input object, shifted.
    
    See Also
    --------
    Index.shift : Shift values of Index.
    DatetimeIndex.shift : Shift values of DatetimeIndex.
    PeriodIndex.shift : Shift values of PeriodIndex.
    
    Examples
    --------
    >>> df = pd.DataFrame({"Col1": [10, 20, 15, 30, 45],
    ...                    "Col2": [13, 23, 18, 33, 48],
    ...                    "Col3": [17, 27, 22, 37, 52]},
    ...                   index=pd.date_range("2020-01-01", "2020-01-05"))
    >>> df
                Col1  Col2  Col3
    2020-01-01    10    13    17
    2020-01-02    20    23    27
    2020-01-03    15    18    22
    2020-01-04    30    33    37
    2020-01-05    45    48    52
    
    >>> df.shift(periods=3)
                Col1  Col2  Col3
    2020-01-01   NaN   NaN   NaN
    2020-01-02   NaN   NaN   NaN
    2020-01-03   NaN   NaN   NaN
    2020-01-04  10.0  13.0  17.0
    2020-01-05  20.0  23.0  27.0
    
    >>> df.shift(periods=1, axis="columns")
                Col1  Col2  Col3
    2020-01-01   NaN    10    13
    2020-01-02   NaN    20    23
    2020-01-03   NaN    15    18
    2020-01-04   NaN    30    33
    2020-01-05   NaN    45    48
    
    >>> df.shift(periods=3, fill_value=0)
                Col1  Col2  Col3
    2020-01-01     0     0     0
    2020-01-02     0     0     0
    2020-01-03     0     0     0
    2020-01-04    10    13    17
    2020-01-05    20    23    27
    
    >>> df.shift(periods=3, freq="D")
                Col1  Col2  Col3
    2020-01-04    10    13    17
    2020-01-05    20    23    27
    2020-01-06    15    18    22
    2020-01-07    30    33    37
    2020-01-08    45    48    52
    
    >>> df.shift(periods=3, freq="infer")
                Col1  Col2  Col3
    2020-01-04    10    13    17
    2020-01-05    20    23    27
    2020-01-06    15    18    22
    2020-01-07    30    33    37
    2020-01-08    45    48    52
    
    >>> df['Col1'].shift(periods=[0, 1, 2])
                Col1_0  Col1_1  Col1_2
    2020-01-01      10     NaN     NaN
    2020-01-02      20    10.0     NaN
    2020-01-03      15    20.0    10.0
    2020-01-04      30    15.0    20.0
    2020-01-05      45    30.0    15.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& size &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on int object:

class int(object)
 |  int([x]) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Built-in subclasses:
 |      bool
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(self, format_spec, /)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(self, /)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(self, /)
 |      Returns size in memory, in bytes.
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  as_integer_ratio(self, /)
 |      Return integer ratio.
 |      
 |      Return a pair of integers, whose ratio is exactly equal to the original int
 |      and with a positive denominator.
 |      
 |      >>> (10).as_integer_ratio()
 |      (10, 1)
 |      >>> (-10).as_integer_ratio()
 |      (-10, 1)
 |      >>> (0).as_integer_ratio()
 |      (0, 1)
 |  
 |  bit_length(self, /)
 |      Number of bits necessary to represent self in binary.
 |      
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  to_bytes(self, /, length, byteorder, *, signed=False)
 |      Return an array of bytes representing an integer.
 |      
 |      length
 |        Length of bytes object to use.  An OverflowError is raised if the
 |        integer is not representable with the given number of bytes.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Determines whether two's complement is used to represent the integer.
 |        If signed is False and a negative integer is given, an OverflowError
 |        is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_bytes(bytes, byteorder, *, signed=False) from builtins.type
 |      Return the integer represented by the given array of bytes.
 |      
 |      bytes
 |        Holds the array of bytes to convert.  The argument must either
 |        support the buffer protocol or be an iterable object producing bytes.
 |        Bytes and bytearray are examples of built-in objects that support the
 |        buffer protocol.
 |      byteorder
 |        The byte order used to represent the integer.  If byteorder is 'big',
 |        the most significant byte is at the beginning of the byte array.  If
 |        byteorder is 'little', the most significant byte is at the end of the
 |        byte array.  To request the native byte order of the host system, use
 |        `sys.byteorder' as the byte order value.
 |      signed
 |        Indicates whether two's complement is used to represent the integer.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& skew &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method skew in module pandas.core.frame:

skew(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased skew over requested axis.
    
    Normalized by N-1.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        For DataFrames, specifying ``axis=None`` will apply the aggregation
        across both axes.
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
                Examples
                --------
                >>> s = pd.Series([1, 2, 3])
                >>> s.skew()
                0.0
    
                With a DataFrame
    
                >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [1, 3, 5]},
                ...                   index=['tiger', 'zebra', 'cow'])
                >>> df
                        a   b   c
                tiger   1   2   1
                zebra   2   3   3
                cow     3   4   5
                >>> df.skew()
                a   0.0
                b   0.0
                c   0.0
                dtype: float64
    
                Using axis=1
    
                >>> df.skew(axis=1)
                tiger   1.732051
                zebra  -1.732051
                cow     0.000000
                dtype: float64
    
                In this case, `numeric_only` should be set to `True` to avoid
                getting an error.
    
                >>> df = pd.DataFrame({'a': [1, 2, 3], 'b': ['T', 'Z', 'X']},
                ...                   index=['tiger', 'zebra', 'cow'])
                >>> df.skew(numeric_only=True)
                a   0.0
                dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& sort_index &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sort_index in module pandas.core.frame:

sort_index(*, axis: 'Axis' = 0, level: 'IndexLabel | None' = None, ascending: 'bool | Sequence[bool]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'NaPosition' = 'last', sort_remaining: 'bool' = True, ignore_index: 'bool' = False, key: 'IndexKeyFunc | None' = None) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Sort object by labels (along an axis).
    
    Returns a new DataFrame sorted by label if `inplace` argument is
    ``False``, otherwise updates the original DataFrame and returns None.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis along which to sort.  The value 0 identifies the rows,
        and 1 identifies the columns.
    level : int or level name or list of ints or list of level names
        If not None, sort on values in specified index level(s).
    ascending : bool or list-like of bools, default True
        Sort ascending vs. descending. When the index is a MultiIndex the
        sort direction can be controlled for each level individually.
    inplace : bool, default False
        Whether to modify the DataFrame rather than creating a new one.
    kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'
        Choice of sorting algorithm. See also :func:`numpy.sort` for more
        information. `mergesort` and `stable` are the only stable algorithms. For
        DataFrames, this option is only applied when sorting on a single
        column or label.
    na_position : {'first', 'last'}, default 'last'
        Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.
        Not implemented for MultiIndex.
    sort_remaining : bool, default True
        If True and sorting by level and index is multilevel, sort by other
        levels too (in order) after sorting by specified level.
    ignore_index : bool, default False
        If True, the resulting axis will be labeled 0, 1, …, n - 1.
    key : callable, optional
        If not None, apply the key function to the index values
        before sorting. This is similar to the `key` argument in the
        builtin :meth:`sorted` function, with the notable difference that
        this `key` function should be *vectorized*. It should expect an
        ``Index`` and return an ``Index`` of the same shape. For MultiIndex
        inputs, the key is applied *per level*.
    
    Returns
    -------
    DataFrame or None
        The original DataFrame sorted by the labels or None if ``inplace=True``.
    
    See Also
    --------
    Series.sort_index : Sort Series by the index.
    DataFrame.sort_values : Sort DataFrame by the value.
    Series.sort_values : Sort Series by the value.
    
    Examples
    --------
    >>> df = pd.DataFrame([1, 2, 3, 4, 5], index=[100, 29, 234, 1, 150],
    ...                   columns=['A'])
    >>> df.sort_index()
         A
    1    4
    29   2
    100  1
    150  5
    234  3
    
    By default, it sorts in ascending order, to sort in descending order,
    use ``ascending=False``
    
    >>> df.sort_index(ascending=False)
         A
    234  3
    150  5
    100  1
    29   2
    1    4
    
    A key function can be specified which is applied to the index before
    sorting. For a ``MultiIndex`` this is applied to each level separately.
    
    >>> df = pd.DataFrame({"a": [1, 2, 3, 4]}, index=['A', 'b', 'C', 'd'])
    >>> df.sort_index(key=lambda x: x.str.lower())
       a
    A  1
    b  2
    C  3
    d  4

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& sort_values &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sort_values in module pandas.core.frame:

sort_values(by: 'IndexLabel', *, axis: 'Axis' = 0, ascending: 'bool | list[bool] | tuple[bool, ...]' = True, inplace: 'bool' = False, kind: 'SortKind' = 'quicksort', na_position: 'str' = 'last', ignore_index: 'bool' = False, key: 'ValueKeyFunc | None' = None) -> 'DataFrame | None' method of pandas.core.frame.DataFrame instance
    Sort by the values along either axis.
    
    Parameters
    ----------
    by : str or list of str
        Name or list of names to sort by.
    
        - if `axis` is 0 or `'index'` then `by` may contain index
          levels and/or column labels.
        - if `axis` is 1 or `'columns'` then `by` may contain column
          levels and/or index labels.
    axis : "{0 or 'index', 1 or 'columns'}", default 0
         Axis to be sorted.
    ascending : bool or list of bool, default True
         Sort ascending vs. descending. Specify list for multiple sort
         orders.  If this is a list of bools, must match the length of
         the by.
    inplace : bool, default False
         If True, perform operation in-place.
    kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, default 'quicksort'
         Choice of sorting algorithm. See also :func:`numpy.sort` for more
         information. `mergesort` and `stable` are the only stable algorithms. For
         DataFrames, this option is only applied when sorting on a single
         column or label.
    na_position : {'first', 'last'}, default 'last'
         Puts NaNs at the beginning if `first`; `last` puts NaNs at the
         end.
    ignore_index : bool, default False
         If True, the resulting axis will be labeled 0, 1, …, n - 1.
    key : callable, optional
        Apply the key function to the values
        before sorting. This is similar to the `key` argument in the
        builtin :meth:`sorted` function, with the notable difference that
        this `key` function should be *vectorized*. It should expect a
        ``Series`` and return a Series with the same shape as the input.
        It will be applied to each column in `by` independently.
    
    Returns
    -------
    DataFrame or None
        DataFrame with sorted values or None if ``inplace=True``.
    
    See Also
    --------
    DataFrame.sort_index : Sort a DataFrame by the index.
    Series.sort_values : Similar method for a Series.
    
    Examples
    --------
    >>> df = pd.DataFrame({
    ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],
    ...     'col2': [2, 1, 9, 8, 7, 4],
    ...     'col3': [0, 1, 9, 4, 2, 3],
    ...     'col4': ['a', 'B', 'c', 'D', 'e', 'F']
    ... })
    >>> df
      col1  col2  col3 col4
    0    A     2     0    a
    1    A     1     1    B
    2    B     9     9    c
    3  NaN     8     4    D
    4    D     7     2    e
    5    C     4     3    F
    
    Sort by col1
    
    >>> df.sort_values(by=['col1'])
      col1  col2  col3 col4
    0    A     2     0    a
    1    A     1     1    B
    2    B     9     9    c
    5    C     4     3    F
    4    D     7     2    e
    3  NaN     8     4    D
    
    Sort by multiple columns
    
    >>> df.sort_values(by=['col1', 'col2'])
      col1  col2  col3 col4
    1    A     1     1    B
    0    A     2     0    a
    2    B     9     9    c
    5    C     4     3    F
    4    D     7     2    e
    3  NaN     8     4    D
    
    Sort Descending
    
    >>> df.sort_values(by='col1', ascending=False)
      col1  col2  col3 col4
    4    D     7     2    e
    5    C     4     3    F
    2    B     9     9    c
    0    A     2     0    a
    1    A     1     1    B
    3  NaN     8     4    D
    
    Putting NAs first
    
    >>> df.sort_values(by='col1', ascending=False, na_position='first')
      col1  col2  col3 col4
    3  NaN     8     4    D
    4    D     7     2    e
    5    C     4     3    F
    2    B     9     9    c
    0    A     2     0    a
    1    A     1     1    B
    
    Sorting with a key function
    
    >>> df.sort_values(by='col4', key=lambda col: col.str.lower())
       col1  col2  col3 col4
    0    A     2     0    a
    1    A     1     1    B
    2    B     9     9    c
    3  NaN     8     4    D
    4    D     7     2    e
    5    C     4     3    F
    
    Natural sort with the key argument,
    using the `natsort <https://github.com/SethMMorton/natsort>` package.
    
    >>> df = pd.DataFrame({
    ...    "time": ['0hr', '128hr', '72hr', '48hr', '96hr'],
    ...    "value": [10, 20, 30, 40, 50]
    ... })
    >>> df
        time  value
    0    0hr     10
    1  128hr     20
    2   72hr     30
    3   48hr     40
    4   96hr     50
    >>> from natsort import index_natsorted
    >>> df.sort_values(
    ...     by="time",
    ...     key=lambda x: np.argsort(index_natsorted(df["time"]))
    ... )
        time  value
    0    0hr     10
    3   48hr     40
    2   72hr     30
    4   96hr     50
    1  128hr     20

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& squeeze &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method squeeze in module pandas.core.generic:

squeeze(axis: 'Axis | None' = None) method of pandas.core.frame.DataFrame instance
    Squeeze 1 dimensional axis objects into scalars.
    
    Series or DataFrames with a single element are squeezed to a scalar.
    DataFrames with a single column or a single row are squeezed to a
    Series. Otherwise the object is unchanged.
    
    This method is most useful when you don't know if your
    object is a Series or DataFrame, but you do know it has just a single
    column. In that case you can safely call `squeeze` to ensure you have a
    Series.
    
    Parameters
    ----------
    axis : {0 or 'index', 1 or 'columns', None}, default None
        A specific axis to squeeze. By default, all length-1 axes are
        squeezed. For `Series` this parameter is unused and defaults to `None`.
    
    Returns
    -------
    DataFrame, Series, or scalar
        The projection after squeezing `axis` or all the axes.
    
    See Also
    --------
    Series.iloc : Integer-location based indexing for selecting scalars.
    DataFrame.iloc : Integer-location based indexing for selecting Series.
    Series.to_frame : Inverse of DataFrame.squeeze for a
        single-column DataFrame.
    
    Examples
    --------
    >>> primes = pd.Series([2, 3, 5, 7])
    
    Slicing might produce a Series with a single value:
    
    >>> even_primes = primes[primes % 2 == 0]
    >>> even_primes
    0    2
    dtype: int64
    
    >>> even_primes.squeeze()
    2
    
    Squeezing objects with more than one value in every axis does nothing:
    
    >>> odd_primes = primes[primes % 2 == 1]
    >>> odd_primes
    1    3
    2    5
    3    7
    dtype: int64
    
    >>> odd_primes.squeeze()
    1    3
    2    5
    3    7
    dtype: int64
    
    Squeezing is even more effective when used with DataFrames.
    
    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])
    >>> df
       a  b
    0  1  2
    1  3  4
    
    Slicing a single column will produce a DataFrame with the columns
    having only one value:
    
    >>> df_a = df[['a']]
    >>> df_a
       a
    0  1
    1  3
    
    So the columns can be squeezed down, resulting in a Series:
    
    >>> df_a.squeeze('columns')
    0    1
    1    3
    Name: a, dtype: int64
    
    Slicing a single row from a single column will produce a single
    scalar DataFrame:
    
    >>> df_0a = df.loc[df.index < 1, ['a']]
    >>> df_0a
       a
    0  1
    
    Squeezing the rows produces a single scalar Series:
    
    >>> df_0a.squeeze('rows')
    a    1
    Name: 0, dtype: int64
    
    Squeezing all axes will project directly into a scalar:
    
    >>> df_0a.squeeze()
    1

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& stack &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method stack in module pandas.core.frame:

stack(level: 'IndexLabel' = -1, dropna: 'bool | lib.NoDefault' = <no_default>, sort: 'bool | lib.NoDefault' = <no_default>, future_stack: 'bool' = False) method of pandas.core.frame.DataFrame instance
    Stack the prescribed level(s) from columns to index.
    
    Return a reshaped DataFrame or Series having a multi-level
    index with one or more new inner-most levels compared to the current
    DataFrame. The new inner-most levels are created by pivoting the
    columns of the current dataframe:
    
      - if the columns have a single level, the output is a Series;
      - if the columns have multiple levels, the new index
        level(s) is (are) taken from the prescribed level(s) and
        the output is a DataFrame.
    
    Parameters
    ----------
    level : int, str, list, default -1
        Level(s) to stack from the column axis onto the index
        axis, defined as one index or label, or a list of indices
        or labels.
    dropna : bool, default True
        Whether to drop rows in the resulting Frame/Series with
        missing values. Stacking a column level onto the index
        axis can create combinations of index and column values
        that are missing from the original dataframe. See Examples
        section.
    sort : bool, default True
        Whether to sort the levels of the resulting MultiIndex.
    future_stack : bool, default False
        Whether to use the new implementation that will replace the current
        implementation in pandas 3.0. When True, dropna and sort have no impact
        on the result and must remain unspecified. See :ref:`pandas 2.1.0 Release
        notes <whatsnew_210.enhancements.new_stack>` for more details.
    
    Returns
    -------
    DataFrame or Series
        Stacked dataframe or series.
    
    See Also
    --------
    DataFrame.unstack : Unstack prescribed level(s) from index axis
         onto column axis.
    DataFrame.pivot : Reshape dataframe from long format to wide
         format.
    DataFrame.pivot_table : Create a spreadsheet-style pivot table
         as a DataFrame.
    
    Notes
    -----
    The function is named by analogy with a collection of books
    being reorganized from being side by side on a horizontal
    position (the columns of the dataframe) to being stacked
    vertically on top of each other (in the index of the
    dataframe).
    
    Reference :ref:`the user guide <reshaping.stacking>` for more examples.
    
    Examples
    --------
    **Single level columns**
    
    >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],
    ...                                     index=['cat', 'dog'],
    ...                                     columns=['weight', 'height'])
    
    Stacking a dataframe with a single level column axis returns a Series:
    
    >>> df_single_level_cols
         weight height
    cat       0      1
    dog       2      3
    >>> df_single_level_cols.stack(future_stack=True)
    cat  weight    0
         height    1
    dog  weight    2
         height    3
    dtype: int64
    
    **Multi level columns: simple case**
    
    >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),
    ...                                        ('weight', 'pounds')])
    >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],
    ...                                     index=['cat', 'dog'],
    ...                                     columns=multicol1)
    
    Stacking a dataframe with a multi-level column axis:
    
    >>> df_multi_level_cols1
         weight
             kg    pounds
    cat       1        2
    dog       2        4
    >>> df_multi_level_cols1.stack(future_stack=True)
                weight
    cat kg           1
        pounds       2
    dog kg           2
        pounds       4
    
    **Missing values**
    
    >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),
    ...                                        ('height', 'm')])
    >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],
    ...                                     index=['cat', 'dog'],
    ...                                     columns=multicol2)
    
    It is common to have missing values when stacking a dataframe
    with multi-level columns, as the stacked dataframe typically
    has more values than the original dataframe. Missing values
    are filled with NaNs:
    
    >>> df_multi_level_cols2
        weight height
            kg      m
    cat    1.0    2.0
    dog    3.0    4.0
    >>> df_multi_level_cols2.stack(future_stack=True)
            weight  height
    cat kg     1.0     NaN
        m      NaN     2.0
    dog kg     3.0     NaN
        m      NaN     4.0
    
    **Prescribing the level(s) to be stacked**
    
    The first parameter controls which level or levels are stacked:
    
    >>> df_multi_level_cols2.stack(0, future_stack=True)
                 kg    m
    cat weight  1.0  NaN
        height  NaN  2.0
    dog weight  3.0  NaN
        height  NaN  4.0
    >>> df_multi_level_cols2.stack([0, 1], future_stack=True)
    cat  weight  kg    1.0
         height  m     2.0
    dog  weight  kg    3.0
         height  m     4.0
    dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& std &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method std in module pandas.core.frame:

std(axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return sample standard deviation over requested axis.
    
    Normalized by N-1 by default. This can be changed using the ddof argument.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        For `Series` this parameter is unused and defaults to 0.
    
        .. warning::
    
            The behavior of DataFrame.std with ``axis=None`` is deprecated,
            in a future version this will reduce over both axes and return a scalar
            To retain the old behavior, pass axis=0 (or do not pass axis).
    
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    ddof : int, default 1
        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
        where N represents the number of elements.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    Returns
    -------
    Series or DataFrame (if level specified) 
    
    Notes
    -----
    To have the same behaviour as `numpy.std`, use `ddof=0` (instead of the
    default `ddof=1`)
    
    Examples
    --------
    >>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],
    ...                    'age': [21, 25, 62, 43],
    ...                    'height': [1.61, 1.87, 1.49, 2.01]}
    ...                   ).set_index('person_id')
    >>> df
               age  height
    person_id
    0           21    1.61
    1           25    1.87
    2           62    1.49
    3           43    2.01
    
    The standard deviation of the columns can be found as follows:
    
    >>> df.std()
    age       18.786076
    height     0.237417
    dtype: float64
    
    Alternatively, `ddof=0` can be set to normalize by N instead of N-1:
    
    >>> df.std(ddof=0)
    age       16.269219
    height     0.205609
    dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& style &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on Styler in module pandas.io.formats.style object:

class Styler(pandas.io.formats.style_render.StylerRenderer)
 |  Styler(data: 'DataFrame | Series', precision: 'int | None' = None, table_styles: 'CSSStyles | None' = None, uuid: 'str | None' = None, caption: 'str | tuple | list | None' = None, table_attributes: 'str | None' = None, cell_ids: 'bool' = True, na_rep: 'str | None' = None, uuid_len: 'int' = 5, decimal: 'str | None' = None, thousands: 'str | None' = None, escape: 'str | None' = None, formatter: 'ExtFormatter | None' = None) -> 'None'
 |  
 |  Helps style a DataFrame or Series according to the data with HTML and CSS.
 |  
 |  Parameters
 |  ----------
 |  data : Series or DataFrame
 |      Data to be styled - either a Series or DataFrame.
 |  precision : int, optional
 |      Precision to round floats to. If not given defaults to
 |      ``pandas.options.styler.format.precision``.
 |  
 |      .. versionchanged:: 1.4.0
 |  table_styles : list-like, default None
 |      List of {selector: (attr, value)} dicts; see Notes.
 |  uuid : str, default None
 |      A unique identifier to avoid CSS collisions; generated automatically.
 |  caption : str, tuple, default None
 |      String caption to attach to the table. Tuple only used for LaTeX dual captions.
 |  table_attributes : str, default None
 |      Items that show up in the opening ``<table>`` tag
 |      in addition to automatic (by default) id.
 |  cell_ids : bool, default True
 |      If True, each cell will have an ``id`` attribute in their HTML tag.
 |      The ``id`` takes the form ``T_<uuid>_row<num_row>_col<num_col>``
 |      where ``<uuid>`` is the unique identifier, ``<num_row>`` is the row
 |      number and ``<num_col>`` is the column number.
 |  na_rep : str, optional
 |      Representation for missing values.
 |      If ``na_rep`` is None, no special formatting is applied, and falls back to
 |      ``pandas.options.styler.format.na_rep``.
 |  
 |  uuid_len : int, default 5
 |      If ``uuid`` is not specified, the length of the ``uuid`` to randomly generate
 |      expressed in hex characters, in range [0, 32].
 |  decimal : str, optional
 |      Character used as decimal separator for floats, complex and integers. If not
 |      given uses ``pandas.options.styler.format.decimal``.
 |  
 |      .. versionadded:: 1.3.0
 |  
 |  thousands : str, optional, default None
 |      Character used as thousands separator for floats, complex and integers. If not
 |      given uses ``pandas.options.styler.format.thousands``.
 |  
 |      .. versionadded:: 1.3.0
 |  
 |  escape : str, optional
 |      Use 'html' to replace the characters ``&``, ``<``, ``>``, ``'``, and ``"``
 |      in cell display string with HTML-safe sequences.
 |      Use 'latex' to replace the characters ``&``, ``%``, ``$``, ``#``, ``_``,
 |      ``{``, ``}``, ``~``, ``^``, and ``\`` in the cell display string with
 |      LaTeX-safe sequences. Use 'latex-math' to replace the characters
 |      the same way as in 'latex' mode, except for math substrings,
 |      which either are surrounded by two characters ``$`` or start with
 |      the character ``\(`` and end with ``\)``.
 |      If not given uses ``pandas.options.styler.format.escape``.
 |  
 |      .. versionadded:: 1.3.0
 |  formatter : str, callable, dict, optional
 |      Object to define how values are displayed. See ``Styler.format``. If not given
 |      uses ``pandas.options.styler.format.formatter``.
 |  
 |      .. versionadded:: 1.4.0
 |  
 |  Attributes
 |  ----------
 |  env : Jinja2 jinja2.Environment
 |  template_html : Jinja2 Template
 |  template_html_table : Jinja2 Template
 |  template_html_style : Jinja2 Template
 |  template_latex : Jinja2 Template
 |  loader : Jinja2 Loader
 |  
 |  See Also
 |  --------
 |  DataFrame.style : Return a Styler object containing methods for building
 |      a styled HTML representation for the DataFrame.
 |  
 |  Notes
 |  -----
 |  Most styling will be done by passing style functions into
 |  ``Styler.apply`` or ``Styler.map``. Style functions should
 |  return values with strings containing CSS ``'attr: value'`` that will
 |  be applied to the indicated cells.
 |  
 |  If using in the Jupyter notebook, Styler has defined a ``_repr_html_``
 |  to automatically render itself. Otherwise call Styler.to_html to get
 |  the generated HTML.
 |  
 |  CSS classes are attached to the generated HTML
 |  
 |  * Index and Column names include ``index_name`` and ``level<k>``
 |    where `k` is its level in a MultiIndex
 |  * Index label cells include
 |  
 |    * ``row_heading``
 |    * ``row<n>`` where `n` is the numeric position of the row
 |    * ``level<k>`` where `k` is the level in a MultiIndex
 |  
 |  * Column label cells include
 |    * ``col_heading``
 |    * ``col<n>`` where `n` is the numeric position of the column
 |    * ``level<k>`` where `k` is the level in a MultiIndex
 |  
 |  * Blank cells include ``blank``
 |  * Data cells include ``data``
 |  * Trimmed cells include ``col_trim`` or ``row_trim``.
 |  
 |  Any, or all, or these classes can be renamed by using the ``css_class_names``
 |  argument in ``Styler.set_table_classes``, giving a value such as
 |  *{"row": "MY_ROW_CLASS", "col_trim": "", "row_trim": ""}*.
 |  
 |  Examples
 |  --------
 |  >>> df = pd.DataFrame([[1.0, 2.0, 3.0], [4, 5, 6]], index=['a', 'b'],
 |  ...                   columns=['A', 'B', 'C'])
 |  >>> pd.io.formats.style.Styler(df, precision=2,
 |  ...                            caption="My table")  # doctest: +SKIP
 |  
 |  Please see:
 |  `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  Method resolution order:
 |      Styler
 |      pandas.io.formats.style_render.StylerRenderer
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __copy__(self) -> 'Styler'
 |  
 |  __deepcopy__(self, memo) -> 'Styler'
 |  
 |  __init__(self, data: 'DataFrame | Series', precision: 'int | None' = None, table_styles: 'CSSStyles | None' = None, uuid: 'str | None' = None, caption: 'str | tuple | list | None' = None, table_attributes: 'str | None' = None, cell_ids: 'bool' = True, na_rep: 'str | None' = None, uuid_len: 'int' = 5, decimal: 'str | None' = None, thousands: 'str | None' = None, escape: 'str | None' = None, formatter: 'ExtFormatter | None' = None) -> 'None'
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  apply(self, func: 'Callable', axis: 'Axis | None' = 0, subset: 'Subset | None' = None, **kwargs) -> 'Styler'
 |      Apply a CSS-styling function column-wise, row-wise, or table-wise.
 |      
 |      Updates the HTML representation with the result.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          ``func`` should take a Series if ``axis`` in [0,1] and return a list-like
 |          object of same length, or a Series, not necessarily of same length, with
 |          valid index labels considering ``subset``.
 |          ``func`` should take a DataFrame if ``axis`` is ``None`` and return either
 |          an ndarray with the same shape or a DataFrame, not necessarily of the same
 |          shape, with valid index and columns labels considering ``subset``.
 |      
 |          .. versionchanged:: 1.3.0
 |      
 |          .. versionchanged:: 1.4.0
 |      
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Apply to each column (``axis=0`` or ``'index'``), to each row
 |          (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
 |          with ``axis=None``.
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      **kwargs : dict
 |          Pass along to ``func``.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.map_index: Apply a CSS-styling function to headers elementwise.
 |      Styler.apply_index: Apply a CSS-styling function to headers level-wise.
 |      Styler.map: Apply a CSS-styling function elementwise.
 |      
 |      Notes
 |      -----
 |      The elements of the output of ``func`` should be CSS styles as strings, in the
 |      format 'attribute: value; attribute2: value2; ...' or,
 |      if nothing is to be applied to that element, an empty string or ``None``.
 |      
 |      This is similar to ``DataFrame.apply``, except that ``axis=None``
 |      applies the function to the entire DataFrame at once,
 |      rather than column-wise or row-wise.
 |      
 |      Examples
 |      --------
 |      >>> def highlight_max(x, color):
 |      ...     return np.where(x == np.nanmax(x.to_numpy()), f"color: {color};", None)
 |      >>> df = pd.DataFrame(np.random.randn(5, 2), columns=["A", "B"])
 |      >>> df.style.apply(highlight_max, color='red')  # doctest: +SKIP
 |      >>> df.style.apply(highlight_max, color='blue', axis=1)  # doctest: +SKIP
 |      >>> df.style.apply(highlight_max, color='green', axis=None)  # doctest: +SKIP
 |      
 |      Using ``subset`` to restrict application to a single column or multiple columns
 |      
 |      >>> df.style.apply(highlight_max, color='red', subset="A")
 |      ... # doctest: +SKIP
 |      >>> df.style.apply(highlight_max, color='red', subset=["A", "B"])
 |      ... # doctest: +SKIP
 |      
 |      Using a 2d input to ``subset`` to select rows in addition to columns
 |      
 |      >>> df.style.apply(highlight_max, color='red', subset=([0, 1, 2], slice(None)))
 |      ... # doctest: +SKIP
 |      >>> df.style.apply(highlight_max, color='red', subset=(slice(0, 5, 2), "A"))
 |      ... # doctest: +SKIP
 |      
 |      Using a function which returns a Series / DataFrame of unequal length but
 |      containing valid index labels
 |      
 |      >>> df = pd.DataFrame([[1, 2], [3, 4], [4, 6]], index=["A1", "A2", "Total"])
 |      >>> total_style = pd.Series("font-weight: bold;", index=["Total"])
 |      >>> df.style.apply(lambda s: total_style)  # doctest: +SKIP
 |      
 |      See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for
 |      more details.
 |  
 |  apply_index(self, func: 'Callable', axis: 'AxisInt | str' = 0, level: 'Level | list[Level] | None' = None, **kwargs) -> 'Styler'
 |      Apply a CSS-styling function to the index or column headers, level-wise.
 |      
 |      Updates the HTML representation with the result.
 |      
 |      .. versionadded:: 1.4.0
 |      
 |      .. versionadded:: 2.1.0
 |         Styler.applymap_index was deprecated and renamed to Styler.map_index.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          ``func`` should take a Series and return a string array of the same length.
 |      axis : {0, 1, "index", "columns"}
 |          The headers over which to apply the function.
 |      level : int, str, list, optional
 |          If index is MultiIndex the level(s) over which to apply the function.
 |      **kwargs : dict
 |          Pass along to ``func``.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.map_index: Apply a CSS-styling function to headers elementwise.
 |      Styler.apply: Apply a CSS-styling function column-wise, row-wise, or table-wise.
 |      Styler.map: Apply a CSS-styling function elementwise.
 |      
 |      Notes
 |      -----
 |      Each input to ``func`` will be the index as a Series, if an Index, or a level of a MultiIndex. The output of ``func`` should be
 |      an identically sized array of CSS styles as strings, in the format 'attribute: value; attribute2: value2; ...'
 |      or, if nothing is to be applied to that element, an empty string or ``None``.
 |      
 |      Examples
 |      --------
 |      Basic usage to conditionally highlight values in the index.
 |      
 |      >>> df = pd.DataFrame([[1,2], [3,4]], index=["A", "B"])
 |      >>> def color_b(s):
 |      ...     return np.where(s == "B", "background-color: yellow;", "")
 |      >>> df.style.apply_index(color_b)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/appmaphead1.png
 |      
 |      Selectively applying to specific levels of MultiIndex columns.
 |      
 |      >>> midx = pd.MultiIndex.from_product([['ix', 'jy'], [0, 1], ['x3', 'z4']])
 |      >>> df = pd.DataFrame([np.arange(8)], columns=midx)
 |      >>> def highlight_x(s):
 |      ...     return ["background-color: yellow;" if "x" in v else "" for v in s]
 |      >>> df.style.apply_index(highlight_x, axis="columns", level=[0, 2])
 |      ...  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/appmaphead2.png
 |  
 |  applymap(self, func: 'Callable', subset: 'Subset | None' = None, **kwargs) -> 'Styler'
 |      Apply a CSS-styling function elementwise.
 |      
 |      .. deprecated:: 2.1.0
 |      
 |         Styler.applymap has been deprecated. Use Styler.map instead.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          ``func`` should take a scalar and return a string.
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      **kwargs : dict
 |          Pass along to ``func``.
 |      
 |      Returns
 |      -------
 |      Styler
 |  
 |  applymap_index(self, func: 'Callable', axis: 'AxisInt | str' = 0, level: 'Level | list[Level] | None' = None, **kwargs) -> 'Styler'
 |      Apply a CSS-styling function to the index or column headers, elementwise.
 |      
 |      .. deprecated:: 2.1.0
 |      
 |         Styler.applymap_index has been deprecated. Use Styler.map_index instead.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          ``func`` should take a scalar and return a string.
 |      axis : {{0, 1, "index", "columns"}}
 |          The headers over which to apply the function.
 |      level : int, str, list, optional
 |          If index is MultiIndex the level(s) over which to apply the function.
 |      **kwargs : dict
 |          Pass along to ``func``.
 |      
 |      Returns
 |      -------
 |      Styler
 |  
 |  background_gradient(self, cmap: 'str | Colormap' = 'PuBu', low: 'float' = 0, high: 'float' = 0, axis: 'Axis | None' = 0, subset: 'Subset | None' = None, text_color_threshold: 'float' = 0.408, vmin: 'float | None' = None, vmax: 'float | None' = None, gmap: 'Sequence | None' = None) -> 'Styler'
 |      Color the background in a gradient style.
 |      
 |      The background color is determined according
 |      to the data in each column, row or frame, or by a given
 |      gradient map. Requires matplotlib.
 |      
 |      Parameters
 |      ----------
 |      cmap : str or colormap
 |          Matplotlib colormap.
 |      low : float
 |          Compress the color range at the low end. This is a multiple of the data
 |          range to extend below the minimum; good values usually in [0, 1],
 |          defaults to 0.
 |      high : float
 |          Compress the color range at the high end. This is a multiple of the data
 |          range to extend above the maximum; good values usually in [0, 1],
 |          defaults to 0.
 |      axis : {0, 1, "index", "columns", None}, default 0
 |          Apply to each column (``axis=0`` or ``'index'``), to each row
 |          (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
 |          with ``axis=None``.
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      text_color_threshold : float or int
 |      
 |                  Luminance threshold for determining text color in [0, 1]. Facilitates text
 |      
 |                  visibility across varying background colors. All text is dark if 0, and
 |      
 |                  light if 1, defaults to 0.408.
 |      vmin : float, optional
 |          Minimum data value that corresponds to colormap minimum value.
 |          If not specified the minimum value of the data (or gmap) will be used.
 |      vmax : float, optional
 |          Maximum data value that corresponds to colormap maximum value.
 |          If not specified the maximum value of the data (or gmap) will be used.
 |      gmap : array-like, optional
 |          Gradient map for determining the background colors. If not supplied
 |          will use the underlying data from rows, columns or frame. If given as an
 |          ndarray or list-like must be an identical shape to the underlying data
 |          considering ``axis`` and ``subset``. If given as DataFrame or Series must
 |          have same index and column labels considering ``axis`` and ``subset``.
 |          If supplied, ``vmin`` and ``vmax`` should be given relative to this
 |          gradient map.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.text_gradient: Color the text in a gradient style.
 |      
 |      Notes
 |      -----
 |      When using ``low`` and ``high`` the range
 |      of the gradient, given by the data if ``gmap`` is not given or by ``gmap``,
 |      is extended at the low end effectively by
 |      `map.min - low * map.range` and at the high end by
 |      `map.max + high * map.range` before the colors are normalized and determined.
 |      
 |      If combining with ``vmin`` and ``vmax`` the `map.min`, `map.max` and
 |      `map.range` are replaced by values according to the values derived from
 |      ``vmin`` and ``vmax``.
 |      
 |      This method will preselect numeric columns and ignore non-numeric columns
 |      unless a ``gmap`` is supplied in which case no preselection occurs.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(columns=["City", "Temp (c)", "Rain (mm)", "Wind (m/s)"],
 |      ...                   data=[["Stockholm", 21.6, 5.0, 3.2],
 |      ...                         ["Oslo", 22.4, 13.3, 3.1],
 |      ...                         ["Copenhagen", 24.5, 0.0, 6.7]])
 |      
 |      Shading the values column-wise, with ``axis=0``, preselecting numeric columns
 |      
 |      >>> df.style.background_gradient(axis=0)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/bg_ax0.png
 |      
 |      Shading all values collectively using ``axis=None``
 |      
 |      >>> df.style.background_gradient(axis=None)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/bg_axNone.png
 |      
 |      Compress the color map from the both ``low`` and ``high`` ends
 |      
 |      >>> df.style.background_gradient(axis=None, low=0.75, high=1.0)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/bg_axNone_lowhigh.png
 |      
 |      Manually setting ``vmin`` and ``vmax`` gradient thresholds
 |      
 |      >>> df.style.background_gradient(axis=None, vmin=6.7, vmax=21.6)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/bg_axNone_vminvmax.png
 |      
 |      Setting a ``gmap`` and applying to all columns with another ``cmap``
 |      
 |      >>> df.style.background_gradient(axis=0, gmap=df['Temp (c)'], cmap='YlOrRd')
 |      ...  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/bg_gmap.png
 |      
 |      Setting the gradient map for a dataframe (i.e. ``axis=None``), we need to
 |      explicitly state ``subset`` to match the ``gmap`` shape
 |      
 |      >>> gmap = np.array([[1,2,3], [2,3,4], [3,4,5]])
 |      >>> df.style.background_gradient(axis=None, gmap=gmap,
 |      ...     cmap='YlOrRd', subset=['Temp (c)', 'Rain (mm)', 'Wind (m/s)']
 |      ... )  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/bg_axNone_gmap.png
 |  
 |  bar(self, subset: 'Subset | None' = None, axis: 'Axis | None' = 0, *, color: 'str | list | tuple | None' = None, cmap: 'Any | None' = None, width: 'float' = 100, height: 'float' = 100, align: 'str | float | Callable' = 'mid', vmin: 'float | None' = None, vmax: 'float | None' = None, props: 'str' = 'width: 10em;') -> 'Styler'
 |      Draw bar chart in the cell backgrounds.
 |      
 |      .. versionchanged:: 1.4.0
 |      
 |      Parameters
 |      ----------
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Apply to each column (``axis=0`` or ``'index'``), to each row
 |          (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
 |          with ``axis=None``.
 |      color : str or 2-tuple/list
 |          If a str is passed, the color is the same for both
 |          negative and positive numbers. If 2-tuple/list is used, the
 |          first element is the color_negative and the second is the
 |          color_positive (eg: ['#d65f5f', '#5fba7d']).
 |      cmap : str, matplotlib.cm.ColorMap
 |          A string name of a matplotlib Colormap, or a Colormap object. Cannot be
 |          used together with ``color``.
 |      
 |          .. versionadded:: 1.4.0
 |      width : float, default 100
 |          The percentage of the cell, measured from the left, in which to draw the
 |          bars, in [0, 100].
 |      height : float, default 100
 |          The percentage height of the bar in the cell, centrally aligned, in [0,100].
 |      
 |          .. versionadded:: 1.4.0
 |      align : str, int, float, callable, default 'mid'
 |          How to align the bars within the cells relative to a width adjusted center.
 |          If string must be one of:
 |      
 |          - 'left' : bars are drawn rightwards from the minimum data value.
 |          - 'right' : bars are drawn leftwards from the maximum data value.
 |          - 'zero' : a value of zero is located at the center of the cell.
 |          - 'mid' : a value of (max-min)/2 is located at the center of the cell,
 |            or if all values are negative (positive) the zero is
 |            aligned at the right (left) of the cell.
 |          - 'mean' : the mean value of the data is located at the center of the cell.
 |      
 |          If a float or integer is given this will indicate the center of the cell.
 |      
 |          If a callable should take a 1d or 2d array and return a scalar.
 |      
 |          .. versionchanged:: 1.4.0
 |      
 |      vmin : float, optional
 |          Minimum bar value, defining the left hand limit
 |          of the bar drawing range, lower values are clipped to `vmin`.
 |          When None (default): the minimum value of the data will be used.
 |      vmax : float, optional
 |          Maximum bar value, defining the right hand limit
 |          of the bar drawing range, higher values are clipped to `vmax`.
 |          When None (default): the maximum value of the data will be used.
 |      props : str, optional
 |          The base CSS of the cell that is extended to add the bar chart. Defaults to
 |          `"width: 10em;"`.
 |      
 |          .. versionadded:: 1.4.0
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      Notes
 |      -----
 |      This section of the user guide:
 |      `Table Visualization <../../user_guide/style.ipynb>`_ gives
 |      a number of examples for different settings and color coordination.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})
 |      >>> df.style.bar(subset=['A'], color='gray')  # doctest: +SKIP
 |  
 |  clear(self) -> 'None'
 |      Reset the ``Styler``, removing any previously applied styles.
 |      
 |      Returns None.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, np.nan]})
 |      
 |      After any added style:
 |      
 |      >>> df.style.highlight_null(color='yellow')  # doctest: +SKIP
 |      
 |      Remove it with:
 |      
 |      >>> df.style.clear()  # doctest: +SKIP
 |      
 |      Please see:
 |      `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  concat(self, other: 'Styler') -> 'Styler'
 |      Append another Styler to combine the output into a single table.
 |      
 |      .. versionadded:: 1.5.0
 |      
 |      Parameters
 |      ----------
 |      other : Styler
 |          The other Styler object which has already been styled and formatted. The
 |          data for this Styler must have the same columns as the original, and the
 |          number of index levels must also be the same to render correctly.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      Notes
 |      -----
 |      The purpose of this method is to extend existing styled dataframes with other
 |      metrics that may be useful but may not conform to the original's structure.
 |      For example adding a sub total row, or displaying metrics such as means,
 |      variance or counts.
 |      
 |      Styles that are applied using the ``apply``, ``map``, ``apply_index``
 |      and ``map_index``, and formatting applied with ``format`` and
 |      ``format_index`` will be preserved.
 |      
 |      .. warning::
 |          Only the output methods ``to_html``, ``to_string`` and ``to_latex``
 |          currently work with concatenated Stylers.
 |      
 |          Other output methods, including ``to_excel``, **do not** work with
 |          concatenated Stylers.
 |      
 |      The following should be noted:
 |      
 |        - ``table_styles``, ``table_attributes``, ``caption`` and ``uuid`` are all
 |          inherited from the original Styler and not ``other``.
 |        - hidden columns and hidden index levels will be inherited from the
 |          original Styler
 |        - ``css`` will be inherited from the original Styler, and the value of
 |          keys ``data``, ``row_heading`` and ``row`` will be prepended with
 |          ``foot0_``. If more concats are chained, their styles will be prepended
 |          with ``foot1_``, ''foot_2'', etc., and if a concatenated style have
 |          another concatanated style, the second style will be prepended with
 |          ``foot{parent}_foot{child}_``.
 |      
 |      A common use case is to concatenate user defined functions with
 |      ``DataFrame.agg`` or with described statistics via ``DataFrame.describe``.
 |      See examples.
 |      
 |      Examples
 |      --------
 |      A common use case is adding totals rows, or otherwise, via methods calculated
 |      in ``DataFrame.agg``.
 |      
 |      >>> df = pd.DataFrame([[4, 6], [1, 9], [3, 4], [5, 5], [9, 6]],
 |      ...                   columns=["Mike", "Jim"],
 |      ...                   index=["Mon", "Tue", "Wed", "Thurs", "Fri"])
 |      >>> styler = df.style.concat(df.agg(["sum"]).style)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/footer_simple.png
 |      
 |      Since the concatenated object is a Styler the existing functionality can be
 |      used to conditionally format it as well as the original.
 |      
 |      >>> descriptors = df.agg(["sum", "mean", lambda s: s.dtype])
 |      >>> descriptors.index = ["Total", "Average", "dtype"]
 |      >>> other = (descriptors.style
 |      ...          .highlight_max(axis=1, subset=(["Total", "Average"], slice(None)))
 |      ...          .format(subset=("Average", slice(None)), precision=2, decimal=",")
 |      ...          .map(lambda v: "font-weight: bold;"))
 |      >>> styler = (df.style
 |      ...             .highlight_max(color="salmon")
 |      ...             .set_table_styles([{"selector": ".foot_row0",
 |      ...                                 "props": "border-top: 1px solid black;"}]))
 |      >>> styler.concat(other)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/footer_extended.png
 |      
 |      When ``other`` has fewer index levels than the original Styler it is possible
 |      to extend the index in ``other``, with placeholder levels.
 |      
 |      >>> df = pd.DataFrame([[1], [2]],
 |      ...                   index=pd.MultiIndex.from_product([[0], [1, 2]]))
 |      >>> descriptors = df.agg(["sum"])
 |      >>> descriptors.index = pd.MultiIndex.from_product([[""], descriptors.index])
 |      >>> df.style.concat(descriptors.style)  # doctest: +SKIP
 |  
 |  export(self) -> 'dict[str, Any]'
 |      Export the styles applied to the current Styler.
 |      
 |      Can be applied to a second Styler with ``Styler.use``.
 |      
 |      Returns
 |      -------
 |      dict
 |      
 |      See Also
 |      --------
 |      Styler.use: Set the styles on the current Styler.
 |      Styler.copy: Create a copy of the current Styler.
 |      
 |      Notes
 |      -----
 |      This method is designed to copy non-data dependent attributes of
 |      one Styler to another. It differs from ``Styler.copy`` where data and
 |      data dependent attributes are also copied.
 |      
 |      The following items are exported since they are not generally data dependent:
 |      
 |        - Styling functions added by the ``apply`` and ``map``
 |        - Whether axes and names are hidden from the display, if unambiguous.
 |        - Table attributes
 |        - Table styles
 |      
 |      The following attributes are considered data dependent and therefore not
 |      exported:
 |      
 |        - Caption
 |        - UUID
 |        - Tooltips
 |        - Any hidden rows or columns identified by Index labels
 |        - Any formatting applied using ``Styler.format``
 |        - Any CSS classes added using ``Styler.set_td_classes``
 |      
 |      Examples
 |      --------
 |      
 |      >>> styler = pd.DataFrame([[1, 2], [3, 4]]).style
 |      >>> styler2 = pd.DataFrame([[9, 9, 9]]).style
 |      >>> styler.hide(axis=0).highlight_max(axis=1)  # doctest: +SKIP
 |      >>> export = styler.export()
 |      >>> styler2.use(export)  # doctest: +SKIP
 |  
 |  hide(self, subset: 'Subset | None' = None, axis: 'Axis' = 0, level: 'Level | list[Level] | None' = None, names: 'bool' = False) -> 'Styler'
 |      Hide the entire index / column headers, or specific rows / columns from display.
 |      
 |      .. versionadded:: 1.4.0
 |      
 |      Parameters
 |      ----------
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 1d input or single key along the axis within
 |          `DataFrame.loc[<subset>, :]` or `DataFrame.loc[:, <subset>]` depending
 |          upon ``axis``, to limit ``data`` to select hidden rows / columns.
 |      axis : {"index", 0, "columns", 1}
 |          Apply to the index or columns.
 |      level : int, str, list
 |          The level(s) to hide in a MultiIndex if hiding the entire index / column
 |          headers. Cannot be used simultaneously with ``subset``.
 |      names : bool
 |          Whether to hide the level name(s) of the index / columns headers in the case
 |          it (or at least one the levels) remains visible.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      Notes
 |      -----
 |      .. warning::
 |         This method only works with the output methods ``to_html``, ``to_string``
 |         and ``to_latex``.
 |      
 |         Other output methods, including ``to_excel``, ignore this hiding method
 |         and will display all data.
 |      
 |      This method has multiple functionality depending upon the combination
 |      of the ``subset``, ``level`` and ``names`` arguments (see examples). The
 |      ``axis`` argument is used only to control whether the method is applied to row
 |      or column headers:
 |      
 |      .. list-table:: Argument combinations
 |         :widths: 10 20 10 60
 |         :header-rows: 1
 |      
 |         * - ``subset``
 |           - ``level``
 |           - ``names``
 |           - Effect
 |         * - None
 |           - None
 |           - False
 |           - The axis-Index is hidden entirely.
 |         * - None
 |           - None
 |           - True
 |           - Only the axis-Index names are hidden.
 |         * - None
 |           - Int, Str, List
 |           - False
 |           - Specified axis-MultiIndex levels are hidden entirely.
 |         * - None
 |           - Int, Str, List
 |           - True
 |           - Specified axis-MultiIndex levels are hidden entirely and the names of
 |             remaining axis-MultiIndex levels.
 |         * - Subset
 |           - None
 |           - False
 |           - The specified data rows/columns are hidden, but the axis-Index itself,
 |             and names, remain unchanged.
 |         * - Subset
 |           - None
 |           - True
 |           - The specified data rows/columns and axis-Index names are hidden, but
 |             the axis-Index itself remains unchanged.
 |         * - Subset
 |           - Int, Str, List
 |           - Boolean
 |           - ValueError: cannot supply ``subset`` and ``level`` simultaneously.
 |      
 |      Note this method only hides the identified elements so can be chained to hide
 |      multiple elements in sequence.
 |      
 |      Examples
 |      --------
 |      Simple application hiding specific rows:
 |      
 |      >>> df = pd.DataFrame([[1,2], [3,4], [5,6]], index=["a", "b", "c"])
 |      >>> df.style.hide(["a", "b"])  # doctest: +SKIP
 |           0    1
 |      c    5    6
 |      
 |      Hide the index and retain the data values:
 |      
 |      >>> midx = pd.MultiIndex.from_product([["x", "y"], ["a", "b", "c"]])
 |      >>> df = pd.DataFrame(np.random.randn(6,6), index=midx, columns=midx)
 |      >>> df.style.format("{:.1f}").hide()  # doctest: +SKIP
 |                       x                    y
 |         a      b      c      a      b      c
 |       0.1    0.0    0.4    1.3    0.6   -1.4
 |       0.7    1.0    1.3    1.5   -0.0   -0.2
 |       1.4   -0.8    1.6   -0.2   -0.4   -0.3
 |       0.4    1.0   -0.2   -0.8   -1.2    1.1
 |      -0.6    1.2    1.8    1.9    0.3    0.3
 |       0.8    0.5   -0.3    1.2    2.2   -0.8
 |      
 |      Hide specific rows in a MultiIndex but retain the index:
 |      
 |      >>> df.style.format("{:.1f}").hide(subset=(slice(None), ["a", "c"]))
 |      ...   # doctest: +SKIP
 |                               x                    y
 |                 a      b      c      a      b      c
 |      x   b    0.7    1.0    1.3    1.5   -0.0   -0.2
 |      y   b   -0.6    1.2    1.8    1.9    0.3    0.3
 |      
 |      Hide specific rows and the index through chaining:
 |      
 |      >>> df.style.format("{:.1f}").hide(subset=(slice(None), ["a", "c"])).hide()
 |      ...   # doctest: +SKIP
 |                       x                    y
 |         a      b      c      a      b      c
 |       0.7    1.0    1.3    1.5   -0.0   -0.2
 |      -0.6    1.2    1.8    1.9    0.3    0.3
 |      
 |      Hide a specific level:
 |      
 |      >>> df.style.format("{:,.1f}").hide(level=1)  # doctest: +SKIP
 |                           x                    y
 |             a      b      c      a      b      c
 |      x    0.1    0.0    0.4    1.3    0.6   -1.4
 |           0.7    1.0    1.3    1.5   -0.0   -0.2
 |           1.4   -0.8    1.6   -0.2   -0.4   -0.3
 |      y    0.4    1.0   -0.2   -0.8   -1.2    1.1
 |          -0.6    1.2    1.8    1.9    0.3    0.3
 |           0.8    0.5   -0.3    1.2    2.2   -0.8
 |      
 |      Hiding just the index level names:
 |      
 |      >>> df.index.names = ["lev0", "lev1"]
 |      >>> df.style.format("{:,.1f}").hide(names=True)  # doctest: +SKIP
 |                               x                    y
 |                 a      b      c      a      b      c
 |      x   a    0.1    0.0    0.4    1.3    0.6   -1.4
 |          b    0.7    1.0    1.3    1.5   -0.0   -0.2
 |          c    1.4   -0.8    1.6   -0.2   -0.4   -0.3
 |      y   a    0.4    1.0   -0.2   -0.8   -1.2    1.1
 |          b   -0.6    1.2    1.8    1.9    0.3    0.3
 |          c    0.8    0.5   -0.3    1.2    2.2   -0.8
 |      
 |      Examples all produce equivalently transposed effects with ``axis="columns"``.
 |  
 |  highlight_between(self, subset: 'Subset | None' = None, color: 'str' = 'yellow', axis: 'Axis | None' = 0, left: 'Scalar | Sequence | None' = None, right: 'Scalar | Sequence | None' = None, inclusive: 'IntervalClosedType' = 'both', props: 'str | None' = None) -> 'Styler'
 |      Highlight a defined range with a style.
 |      
 |      .. versionadded:: 1.3.0
 |      
 |      Parameters
 |      ----------
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      color : str, default 'yellow'
 |         Background color to use for highlighting.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          If ``left`` or ``right`` given as sequence, axis along which to apply those
 |          boundaries. See examples.
 |      left : scalar or datetime-like, or sequence or array-like, default None
 |          Left bound for defining the range.
 |      right : scalar or datetime-like, or sequence or array-like, default None
 |          Right bound for defining the range.
 |      inclusive : {'both', 'neither', 'left', 'right'}
 |          Identify whether bounds are closed or open.
 |      props : str, default None
 |         CSS properties to use for highlighting. If ``props`` is given, ``color``
 |         is not used.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.highlight_null: Highlight missing values with a style.
 |      Styler.highlight_max: Highlight the maximum with a style.
 |      Styler.highlight_min: Highlight the minimum with a style.
 |      Styler.highlight_quantile: Highlight values defined by a quantile with a style.
 |      
 |      Notes
 |      -----
 |      If ``left`` is ``None`` only the right bound is applied.
 |      If ``right`` is ``None`` only the left bound is applied. If both are ``None``
 |      all values are highlighted.
 |      
 |      ``axis`` is only needed if ``left`` or ``right`` are provided as a sequence or
 |      an array-like object for aligning the shapes. If ``left`` and ``right`` are
 |      both scalars then all ``axis`` inputs will give the same result.
 |      
 |      This function only works with compatible ``dtypes``. For example a datetime-like
 |      region can only use equivalent datetime-like ``left`` and ``right`` arguments.
 |      Use ``subset`` to control regions which have multiple ``dtypes``.
 |      
 |      Examples
 |      --------
 |      Basic usage
 |      
 |      >>> df = pd.DataFrame({
 |      ...     'One': [1.2, 1.6, 1.5],
 |      ...     'Two': [2.9, 2.1, 2.5],
 |      ...     'Three': [3.1, 3.2, 3.8],
 |      ... })
 |      >>> df.style.highlight_between(left=2.1, right=2.9)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/hbetw_basic.png
 |      
 |      Using a range input sequence along an ``axis``, in this case setting a ``left``
 |      and ``right`` for each column individually
 |      
 |      >>> df.style.highlight_between(left=[1.4, 2.4, 3.4], right=[1.6, 2.6, 3.6],
 |      ...     axis=1, color="#fffd75")  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/hbetw_seq.png
 |      
 |      Using ``axis=None`` and providing the ``left`` argument as an array that
 |      matches the input DataFrame, with a constant ``right``
 |      
 |      >>> df.style.highlight_between(left=[[2,2,3],[2,2,3],[3,3,3]], right=3.5,
 |      ...     axis=None, color="#fffd75")  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/hbetw_axNone.png
 |      
 |      Using ``props`` instead of default background coloring
 |      
 |      >>> df.style.highlight_between(left=1.5, right=3.5,
 |      ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/hbetw_props.png
 |  
 |  highlight_max(self, subset: 'Subset | None' = None, color: 'str' = 'yellow', axis: 'Axis | None' = 0, props: 'str | None' = None) -> 'Styler'
 |      Highlight the maximum with a style.
 |      
 |      Parameters
 |      ----------
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      color : str, default 'yellow'
 |         Background color to use for highlighting.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Apply to each column (``axis=0`` or ``'index'``), to each row
 |          (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
 |          with ``axis=None``.
 |      props : str, default None
 |         CSS properties to use for highlighting. If ``props`` is given, ``color``
 |         is not used.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.highlight_null: Highlight missing values with a style.
 |      Styler.highlight_min: Highlight the minimum with a style.
 |      Styler.highlight_between: Highlight a defined range with a style.
 |      Styler.highlight_quantile: Highlight values defined by a quantile with a style.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [2, 1], 'B': [3, 4]})
 |      >>> df.style.highlight_max(color='yellow')  # doctest: +SKIP
 |      
 |      Please see:
 |      `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  highlight_min(self, subset: 'Subset | None' = None, color: 'str' = 'yellow', axis: 'Axis | None' = 0, props: 'str | None' = None) -> 'Styler'
 |      Highlight the minimum with a style.
 |      
 |      Parameters
 |      ----------
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      color : str, default 'yellow'
 |         Background color to use for highlighting.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Apply to each column (``axis=0`` or ``'index'``), to each row
 |          (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
 |          with ``axis=None``.
 |      props : str, default None
 |         CSS properties to use for highlighting. If ``props`` is given, ``color``
 |         is not used.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.highlight_null: Highlight missing values with a style.
 |      Styler.highlight_max: Highlight the maximum with a style.
 |      Styler.highlight_between: Highlight a defined range with a style.
 |      Styler.highlight_quantile: Highlight values defined by a quantile with a style.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [2, 1], 'B': [3, 4]})
 |      >>> df.style.highlight_min(color='yellow')  # doctest: +SKIP
 |      
 |      Please see:
 |      `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  highlight_null(self, color: 'str' = 'red', subset: 'Subset | None' = None, props: 'str | None' = None) -> 'Styler'
 |      Highlight missing values with a style.
 |      
 |      Parameters
 |      ----------
 |      color : str, default 'red'
 |         Background color to use for highlighting.
 |      
 |          .. versionadded:: 1.5.0
 |      
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      
 |      props : str, default None
 |         CSS properties to use for highlighting. If ``props`` is given, ``color``
 |         is not used.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.highlight_max: Highlight the maximum with a style.
 |      Styler.highlight_min: Highlight the minimum with a style.
 |      Styler.highlight_between: Highlight a defined range with a style.
 |      Styler.highlight_quantile: Highlight values defined by a quantile with a style.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, np.nan]})
 |      >>> df.style.highlight_null(color='yellow')  # doctest: +SKIP
 |      
 |      Please see:
 |      `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  highlight_quantile(self, subset: 'Subset | None' = None, color: 'str' = 'yellow', axis: 'Axis | None' = 0, q_left: 'float' = 0.0, q_right: 'float' = 1.0, interpolation: 'QuantileInterpolation' = 'linear', inclusive: 'IntervalClosedType' = 'both', props: 'str | None' = None) -> 'Styler'
 |      Highlight values defined by a quantile with a style.
 |      
 |      .. versionadded:: 1.3.0
 |      
 |      Parameters
 |      ----------
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      color : str, default 'yellow'
 |         Background color to use for highlighting.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Axis along which to determine and highlight quantiles. If ``None`` quantiles
 |          are measured over the entire DataFrame. See examples.
 |      q_left : float, default 0
 |          Left bound, in [0, q_right), for the target quantile range.
 |      q_right : float, default 1
 |          Right bound, in (q_left, 1], for the target quantile range.
 |      interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
 |          Argument passed to ``Series.quantile`` or ``DataFrame.quantile`` for
 |          quantile estimation.
 |      inclusive : {'both', 'neither', 'left', 'right'}
 |          Identify whether quantile bounds are closed or open.
 |      props : str, default None
 |         CSS properties to use for highlighting. If ``props`` is given, ``color``
 |         is not used.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.highlight_null: Highlight missing values with a style.
 |      Styler.highlight_max: Highlight the maximum with a style.
 |      Styler.highlight_min: Highlight the minimum with a style.
 |      Styler.highlight_between: Highlight a defined range with a style.
 |      
 |      Notes
 |      -----
 |      This function does not work with ``str`` dtypes.
 |      
 |      Examples
 |      --------
 |      Using ``axis=None`` and apply a quantile to all collective data
 |      
 |      >>> df = pd.DataFrame(np.arange(10).reshape(2,5) + 1)
 |      >>> df.style.highlight_quantile(axis=None, q_left=0.8, color="#fffd75")
 |      ...  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/hq_axNone.png
 |      
 |      Or highlight quantiles row-wise or column-wise, in this case by row-wise
 |      
 |      >>> df.style.highlight_quantile(axis=1, q_left=0.8, color="#fffd75")
 |      ...  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/hq_ax1.png
 |      
 |      Use ``props`` instead of default background coloring
 |      
 |      >>> df.style.highlight_quantile(axis=None, q_left=0.2, q_right=0.8,
 |      ...     props='font-weight:bold;color:#e83e8c')  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/hq_props.png
 |  
 |  map(self, func: 'Callable', subset: 'Subset | None' = None, **kwargs) -> 'Styler'
 |      Apply a CSS-styling function elementwise.
 |      
 |      Updates the HTML representation with the result.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          ``func`` should take a scalar and return a string.
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      **kwargs : dict
 |          Pass along to ``func``.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.map_index: Apply a CSS-styling function to headers elementwise.
 |      Styler.apply_index: Apply a CSS-styling function to headers level-wise.
 |      Styler.apply: Apply a CSS-styling function column-wise, row-wise, or table-wise.
 |      
 |      Notes
 |      -----
 |      The elements of the output of ``func`` should be CSS styles as strings, in the
 |      format 'attribute: value; attribute2: value2; ...' or,
 |      if nothing is to be applied to that element, an empty string or ``None``.
 |      
 |      Examples
 |      --------
 |      >>> def color_negative(v, color):
 |      ...     return f"color: {color};" if v < 0 else None
 |      >>> df = pd.DataFrame(np.random.randn(5, 2), columns=["A", "B"])
 |      >>> df.style.map(color_negative, color='red')  # doctest: +SKIP
 |      
 |      Using ``subset`` to restrict application to a single column or multiple columns
 |      
 |      >>> df.style.map(color_negative, color='red', subset="A")
 |      ...  # doctest: +SKIP
 |      >>> df.style.map(color_negative, color='red', subset=["A", "B"])
 |      ...  # doctest: +SKIP
 |      
 |      Using a 2d input to ``subset`` to select rows in addition to columns
 |      
 |      >>> df.style.map(color_negative, color='red',
 |      ...  subset=([0,1,2], slice(None)))  # doctest: +SKIP
 |      >>> df.style.map(color_negative, color='red', subset=(slice(0,5,2), "A"))
 |      ...  # doctest: +SKIP
 |      
 |      See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for
 |      more details.
 |  
 |  map_index(self, func: 'Callable', axis: 'AxisInt | str' = 0, level: 'Level | list[Level] | None' = None, **kwargs) -> 'Styler'
 |      Apply a CSS-styling function to the index or column headers, elementwise.
 |      
 |      Updates the HTML representation with the result.
 |      
 |      .. versionadded:: 1.4.0
 |      
 |      .. versionadded:: 2.1.0
 |         Styler.applymap_index was deprecated and renamed to Styler.map_index.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          ``func`` should take a scalar and return a string.
 |      axis : {0, 1, "index", "columns"}
 |          The headers over which to apply the function.
 |      level : int, str, list, optional
 |          If index is MultiIndex the level(s) over which to apply the function.
 |      **kwargs : dict
 |          Pass along to ``func``.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.apply_index: Apply a CSS-styling function to headers level-wise.
 |      Styler.apply: Apply a CSS-styling function column-wise, row-wise, or table-wise.
 |      Styler.map: Apply a CSS-styling function elementwise.
 |      
 |      Notes
 |      -----
 |      Each input to ``func`` will be an index value, if an Index, or a level value of a MultiIndex. The output of ``func`` should be
 |      CSS styles as a string, in the format 'attribute: value; attribute2: value2; ...'
 |      or, if nothing is to be applied to that element, an empty string or ``None``.
 |      
 |      Examples
 |      --------
 |      Basic usage to conditionally highlight values in the index.
 |      
 |      >>> df = pd.DataFrame([[1,2], [3,4]], index=["A", "B"])
 |      >>> def color_b(s):
 |      ...     return "background-color: yellow;" if v == "B" else None
 |      >>> df.style.map_index(color_b)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/appmaphead1.png
 |      
 |      Selectively applying to specific levels of MultiIndex columns.
 |      
 |      >>> midx = pd.MultiIndex.from_product([['ix', 'jy'], [0, 1], ['x3', 'z4']])
 |      >>> df = pd.DataFrame([np.arange(8)], columns=midx)
 |      >>> def highlight_x(v):
 |      ...     return "background-color: yellow;" if "x" in v else None
 |      >>> df.style.map_index(highlight_x, axis="columns", level=[0, 2])
 |      ...  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/appmaphead2.png
 |  
 |  pipe(self, func: 'Callable', *args, **kwargs)
 |      Apply ``func(self, *args, **kwargs)``, and return the result.
 |      
 |      Parameters
 |      ----------
 |      func : function
 |          Function to apply to the Styler.  Alternatively, a
 |          ``(callable, keyword)`` tuple where ``keyword`` is a string
 |          indicating the keyword of ``callable`` that expects the Styler.
 |      *args : optional
 |          Arguments passed to `func`.
 |      **kwargs : optional
 |          A dictionary of keyword arguments passed into ``func``.
 |      
 |      Returns
 |      -------
 |      object :
 |          The value returned by ``func``.
 |      
 |      See Also
 |      --------
 |      DataFrame.pipe : Analogous method for DataFrame.
 |      Styler.apply : Apply a CSS-styling function column-wise, row-wise, or
 |          table-wise.
 |      
 |      Notes
 |      -----
 |      Like :meth:`DataFrame.pipe`, this method can simplify the
 |      application of several user-defined functions to a styler.  Instead
 |      of writing:
 |      
 |      .. code-block:: python
 |      
 |          f(g(df.style.format(precision=3), arg1=a), arg2=b, arg3=c)
 |      
 |      users can write:
 |      
 |      .. code-block:: python
 |      
 |          (df.style.format(precision=3)
 |             .pipe(g, arg1=a)
 |             .pipe(f, arg2=b, arg3=c))
 |      
 |      In particular, this allows users to define functions that take a
 |      styler object, along with other parameters, and return the styler after
 |      making styling changes (such as calling :meth:`Styler.apply` or
 |      :meth:`Styler.set_properties`).
 |      
 |      Examples
 |      --------
 |      
 |      **Common Use**
 |      
 |      A common usage pattern is to pre-define styling operations which
 |      can be easily applied to a generic styler in a single ``pipe`` call.
 |      
 |      >>> def some_highlights(styler, min_color="red", max_color="blue"):
 |      ...      styler.highlight_min(color=min_color, axis=None)
 |      ...      styler.highlight_max(color=max_color, axis=None)
 |      ...      styler.highlight_null()
 |      ...      return styler
 |      >>> df = pd.DataFrame([[1, 2, 3, pd.NA], [pd.NA, 4, 5, 6]], dtype="Int64")
 |      >>> df.style.pipe(some_highlights, min_color="green")  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/df_pipe_hl.png
 |      
 |      Since the method returns a ``Styler`` object it can be chained with other
 |      methods as if applying the underlying highlighters directly.
 |      
 |      >>> (df.style.format("{:.1f}")
 |      ...         .pipe(some_highlights, min_color="green")
 |      ...         .highlight_between(left=2, right=5))  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/df_pipe_hl2.png
 |      
 |      **Advanced Use**
 |      
 |      Sometimes it may be necessary to pre-define styling functions, but in the case
 |      where those functions rely on the styler, data or context. Since
 |      ``Styler.use`` and ``Styler.export`` are designed to be non-data dependent,
 |      they cannot be used for this purpose. Additionally the ``Styler.apply``
 |      and ``Styler.format`` type methods are not context aware, so a solution
 |      is to use ``pipe`` to dynamically wrap this functionality.
 |      
 |      Suppose we want to code a generic styling function that highlights the final
 |      level of a MultiIndex. The number of levels in the Index is dynamic so we
 |      need the ``Styler`` context to define the level.
 |      
 |      >>> def highlight_last_level(styler):
 |      ...     return styler.apply_index(
 |      ...         lambda v: "background-color: pink; color: yellow", axis="columns",
 |      ...         level=styler.columns.nlevels-1
 |      ...     )  # doctest: +SKIP
 |      >>> df.columns = pd.MultiIndex.from_product([["A", "B"], ["X", "Y"]])
 |      >>> df.style.pipe(highlight_last_level)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/df_pipe_applymap.png
 |      
 |      Additionally suppose we want to highlight a column header if there is any
 |      missing data in that column.
 |      In this case we need the data object itself to determine the effect on the
 |      column headers.
 |      
 |      >>> def highlight_header_missing(styler, level):
 |      ...     def dynamic_highlight(s):
 |      ...         return np.where(
 |      ...             styler.data.isna().any(), "background-color: red;", ""
 |      ...         )
 |      ...     return styler.apply_index(dynamic_highlight, axis=1, level=level)
 |      >>> df.style.pipe(highlight_header_missing, level=1)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/df_pipe_applydata.png
 |  
 |  set_caption(self, caption: 'str | tuple | list') -> 'Styler'
 |      Set the text added to a ``<caption>`` HTML element.
 |      
 |      Parameters
 |      ----------
 |      caption : str, tuple, list
 |          For HTML output either the string input is used or the first element of the
 |          tuple. For LaTeX the string input provides a caption and the additional
 |          tuple input allows for full captions and short captions, in that order.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> df.style.set_caption("test")  # doctest: +SKIP
 |      
 |      Please see:
 |      `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  set_properties(self, subset: 'Subset | None' = None, **kwargs) -> 'Styler'
 |      Set defined CSS-properties to each ``<td>`` HTML element for the given subset.
 |      
 |      Parameters
 |      ----------
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      **kwargs : dict
 |          A dictionary of property, value pairs to be set for each cell.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      Notes
 |      -----
 |      This is a convenience methods which wraps the :meth:`Styler.map` calling a
 |      function returning the CSS-properties independently of the data.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(np.random.randn(10, 4))
 |      >>> df.style.set_properties(color="white", align="right")  # doctest: +SKIP
 |      >>> df.style.set_properties(**{'background-color': 'yellow'})  # doctest: +SKIP
 |      
 |      See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for
 |      more details.
 |  
 |  set_sticky(self, axis: 'Axis' = 0, pixel_size: 'int | None' = None, levels: 'Level | list[Level] | None' = None) -> 'Styler'
 |      Add CSS to permanently display the index or column headers in a scrolling frame.
 |      
 |      Parameters
 |      ----------
 |      axis : {0 or 'index', 1 or 'columns'}, default 0
 |          Whether to make the index or column headers sticky.
 |      pixel_size : int, optional
 |          Required to configure the width of index cells or the height of column
 |          header cells when sticking a MultiIndex (or with a named Index).
 |          Defaults to 75 and 25 respectively.
 |      levels : int, str, list, optional
 |          If ``axis`` is a MultiIndex the specific levels to stick. If ``None`` will
 |          stick all levels.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      Notes
 |      -----
 |      This method uses the CSS 'position: sticky;' property to display. It is
 |      designed to work with visible axes, therefore both:
 |      
 |        - `styler.set_sticky(axis="index").hide(axis="index")`
 |        - `styler.set_sticky(axis="columns").hide(axis="columns")`
 |      
 |      may produce strange behaviour due to CSS controls with missing elements.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> df.style.set_sticky(axis="index")  # doctest: +SKIP
 |      
 |      Please see:
 |      `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  set_table_attributes(self, attributes: 'str') -> 'Styler'
 |      Set the table attributes added to the ``<table>`` HTML element.
 |      
 |      These are items in addition to automatic (by default) ``id`` attribute.
 |      
 |      Parameters
 |      ----------
 |      attributes : str
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.set_table_styles: Set the table styles included within the ``<style>``
 |          HTML element.
 |      Styler.set_td_classes: Set the DataFrame of strings added to the ``class``
 |          attribute of ``<td>`` HTML elements.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(np.random.randn(10, 4))
 |      >>> df.style.set_table_attributes('class="pure-table"')  # doctest: +SKIP
 |      # ... <table class="pure-table"> ...
 |  
 |  set_table_styles(self, table_styles: 'dict[Any, CSSStyles] | CSSStyles | None' = None, axis: 'AxisInt' = 0, overwrite: 'bool' = True, css_class_names: 'dict[str, str] | None' = None) -> 'Styler'
 |      Set the table styles included within the ``<style>`` HTML element.
 |      
 |      This function can be used to style the entire table, columns, rows or
 |      specific HTML selectors.
 |      
 |      Parameters
 |      ----------
 |      table_styles : list or dict
 |          If supplying a list, each individual table_style should be a
 |          dictionary with ``selector`` and ``props`` keys. ``selector``
 |          should be a CSS selector that the style will be applied to
 |          (automatically prefixed by the table's UUID) and ``props``
 |          should be a list of tuples with ``(attribute, value)``.
 |          If supplying a dict, the dict keys should correspond to
 |          column names or index values, depending upon the specified
 |          `axis` argument. These will be mapped to row or col CSS
 |          selectors. MultiIndex values as dict keys should be
 |          in their respective tuple form. The dict values should be
 |          a list as specified in the form with CSS selectors and
 |          props that will be applied to the specified row or column.
 |      axis : {0 or 'index', 1 or 'columns', None}, default 0
 |          Apply to each column (``axis=0`` or ``'index'``), to each row
 |          (``axis=1`` or ``'columns'``). Only used if `table_styles` is
 |          dict.
 |      overwrite : bool, default True
 |          Styles are replaced if `True`, or extended if `False`. CSS
 |          rules are preserved so most recent styles set will dominate
 |          if selectors intersect.
 |      css_class_names : dict, optional
 |          A dict of strings used to replace the default CSS classes described below.
 |      
 |          .. versionadded:: 1.4.0
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.set_td_classes: Set the DataFrame of strings added to the ``class``
 |          attribute of ``<td>`` HTML elements.
 |      Styler.set_table_attributes: Set the table attributes added to the ``<table>``
 |          HTML element.
 |      
 |      Notes
 |      -----
 |      The default CSS classes dict, whose values can be replaced is as follows:
 |      
 |      .. code-block:: python
 |      
 |          css_class_names = {"row_heading": "row_heading",
 |                             "col_heading": "col_heading",
 |                             "index_name": "index_name",
 |                             "col": "col",
 |                             "row": "row",
 |                             "col_trim": "col_trim",
 |                             "row_trim": "row_trim",
 |                             "level": "level",
 |                             "data": "data",
 |                             "blank": "blank",
 |                             "foot": "foot"}
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(np.random.randn(10, 4),
 |      ...                   columns=['A', 'B', 'C', 'D'])
 |      >>> df.style.set_table_styles(
 |      ...     [{'selector': 'tr:hover',
 |      ...       'props': [('background-color', 'yellow')]}]
 |      ... )  # doctest: +SKIP
 |      
 |      Or with CSS strings
 |      
 |      >>> df.style.set_table_styles(
 |      ...     [{'selector': 'tr:hover',
 |      ...       'props': 'background-color: yellow; font-size: 1em;'}]
 |      ... )  # doctest: +SKIP
 |      
 |      Adding column styling by name
 |      
 |      >>> df.style.set_table_styles({
 |      ...     'A': [{'selector': '',
 |      ...            'props': [('color', 'red')]}],
 |      ...     'B': [{'selector': 'td',
 |      ...            'props': 'color: blue;'}]
 |      ... }, overwrite=False)  # doctest: +SKIP
 |      
 |      Adding row styling
 |      
 |      >>> df.style.set_table_styles({
 |      ...     0: [{'selector': 'td:hover',
 |      ...          'props': [('font-size', '25px')]}]
 |      ... }, axis=1, overwrite=False)  # doctest: +SKIP
 |      
 |      See `Table Visualization <../../user_guide/style.ipynb>`_ user guide for
 |      more details.
 |  
 |  set_td_classes(self, classes: 'DataFrame') -> 'Styler'
 |      Set the ``class`` attribute of ``<td>`` HTML elements.
 |      
 |      Parameters
 |      ----------
 |      classes : DataFrame
 |          DataFrame containing strings that will be translated to CSS classes,
 |          mapped by identical column and index key values that must exist on the
 |          underlying Styler data. None, NaN values, and empty strings will
 |          be ignored and not affect the rendered HTML.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.set_table_styles: Set the table styles included within the ``<style>``
 |          HTML element.
 |      Styler.set_table_attributes: Set the table attributes added to the ``<table>``
 |          HTML element.
 |      
 |      Notes
 |      -----
 |      Can be used in combination with ``Styler.set_table_styles`` to define an
 |      internal CSS solution without reference to external CSS files.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(data=[[1, 2, 3], [4, 5, 6]], columns=["A", "B", "C"])
 |      >>> classes = pd.DataFrame([
 |      ...     ["min-val red", "", "blue"],
 |      ...     ["red", None, "blue max-val"]
 |      ... ], index=df.index, columns=df.columns)
 |      >>> df.style.set_td_classes(classes)  # doctest: +SKIP
 |      
 |      Using `MultiIndex` columns and a `classes` `DataFrame` as a subset of the
 |      underlying,
 |      
 |      >>> df = pd.DataFrame([[1,2],[3,4]], index=["a", "b"],
 |      ...     columns=[["level0", "level0"], ["level1a", "level1b"]])
 |      >>> classes = pd.DataFrame(["min-val"], index=["a"],
 |      ...     columns=[["level0"],["level1a"]])
 |      >>> df.style.set_td_classes(classes)  # doctest: +SKIP
 |      
 |      Form of the output with new additional css classes,
 |      
 |      >>> from pandas.io.formats.style import Styler
 |      >>> df = pd.DataFrame([[1]])
 |      >>> css = pd.DataFrame([["other-class"]])
 |      >>> s = Styler(df, uuid="_", cell_ids=False).set_td_classes(css)
 |      >>> s.hide(axis=0).to_html()  # doctest: +SKIP
 |      '<style type="text/css"></style>'
 |      '<table id="T__">'
 |      '  <thead>'
 |      '    <tr><th class="col_heading level0 col0" >0</th></tr>'
 |      '  </thead>'
 |      '  <tbody>'
 |      '    <tr><td class="data row0 col0 other-class" >1</td></tr>'
 |      '  </tbody>'
 |      '</table>'
 |  
 |  set_tooltips(self, ttips: 'DataFrame', props: 'CSSProperties | None' = None, css_class: 'str | None' = None) -> 'Styler'
 |      Set the DataFrame of strings on ``Styler`` generating ``:hover`` tooltips.
 |      
 |      These string based tooltips are only applicable to ``<td>`` HTML elements,
 |      and cannot be used for column or index headers.
 |      
 |      .. versionadded:: 1.3.0
 |      
 |      Parameters
 |      ----------
 |      ttips : DataFrame
 |          DataFrame containing strings that will be translated to tooltips, mapped
 |          by identical column and index values that must exist on the underlying
 |          Styler data. None, NaN values, and empty strings will be ignored and
 |          not affect the rendered HTML.
 |      props : list-like or str, optional
 |          List of (attr, value) tuples or a valid CSS string. If ``None`` adopts
 |          the internal default values described in notes.
 |      css_class : str, optional
 |          Name of the tooltip class used in CSS, should conform to HTML standards.
 |          Only useful if integrating tooltips with external CSS. If ``None`` uses the
 |          internal default value 'pd-t'.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      Notes
 |      -----
 |      Tooltips are created by adding `<span class="pd-t"></span>` to each data cell
 |      and then manipulating the table level CSS to attach pseudo hover and pseudo
 |      after selectors to produce the required the results.
 |      
 |      The default properties for the tooltip CSS class are:
 |      
 |      - visibility: hidden
 |      - position: absolute
 |      - z-index: 1
 |      - background-color: black
 |      - color: white
 |      - transform: translate(-20px, -20px)
 |      
 |      The property 'visibility: hidden;' is a key prerequisite to the hover
 |      functionality, and should always be included in any manual properties
 |      specification, using the ``props`` argument.
 |      
 |      Tooltips are not designed to be efficient, and can add large amounts of
 |      additional HTML for larger tables, since they also require that ``cell_ids``
 |      is forced to `True`.
 |      
 |      Examples
 |      --------
 |      Basic application
 |      
 |      >>> df = pd.DataFrame(data=[[0, 1], [2, 3]])
 |      >>> ttips = pd.DataFrame(
 |      ...    data=[["Min", ""], [np.nan, "Max"]], columns=df.columns, index=df.index
 |      ... )
 |      >>> s = df.style.set_tooltips(ttips).to_html()
 |      
 |      Optionally controlling the tooltip visual display
 |      
 |      >>> df.style.set_tooltips(ttips, css_class='tt-add', props=[
 |      ...     ('visibility', 'hidden'),
 |      ...     ('position', 'absolute'),
 |      ...     ('z-index', 1)])  # doctest: +SKIP
 |      >>> df.style.set_tooltips(ttips, css_class='tt-add',
 |      ...     props='visibility:hidden; position:absolute; z-index:1;')
 |      ... # doctest: +SKIP
 |  
 |  set_uuid(self, uuid: 'str') -> 'Styler'
 |      Set the uuid applied to ``id`` attributes of HTML elements.
 |      
 |      Parameters
 |      ----------
 |      uuid : str
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      Notes
 |      -----
 |      Almost all HTML elements within the table, and including the ``<table>`` element
 |      are assigned ``id`` attributes. The format is ``T_uuid_<extra>`` where
 |      ``<extra>`` is typically a more specific identifier, such as ``row1_col2``.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame([[1, 2], [3, 4]], index=['A', 'B'], columns=['c1', 'c2'])
 |      
 |      You can get the `id` attributes with the following:
 |      
 |      >>> print((df).style.to_html())  # doctest: +SKIP
 |      
 |      To add a title to column `c1`, its `id` is T_20a7d_level0_col0:
 |      
 |      >>> df.style.set_uuid("T_20a7d_level0_col0")
 |      ... .set_caption("Test")  # doctest: +SKIP
 |      
 |      Please see:
 |      `Table visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  text_gradient(self, cmap: 'str | Colormap' = 'PuBu', low: 'float' = 0, high: 'float' = 0, axis: 'Axis | None' = 0, subset: 'Subset | None' = None, vmin: 'float | None' = None, vmax: 'float | None' = None, gmap: 'Sequence | None' = None) -> 'Styler'
 |      Color the text in a gradient style.
 |      
 |      The text color is determined according
 |      to the data in each column, row or frame, or by a given
 |      gradient map. Requires matplotlib.
 |      
 |      Parameters
 |      ----------
 |      cmap : str or colormap
 |          Matplotlib colormap.
 |      low : float
 |          Compress the color range at the low end. This is a multiple of the data
 |          range to extend below the minimum; good values usually in [0, 1],
 |          defaults to 0.
 |      high : float
 |          Compress the color range at the high end. This is a multiple of the data
 |          range to extend above the maximum; good values usually in [0, 1],
 |          defaults to 0.
 |      axis : {0, 1, "index", "columns", None}, default 0
 |          Apply to each column (``axis=0`` or ``'index'``), to each row
 |          (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
 |          with ``axis=None``.
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      
 |      vmin : float, optional
 |          Minimum data value that corresponds to colormap minimum value.
 |          If not specified the minimum value of the data (or gmap) will be used.
 |      vmax : float, optional
 |          Maximum data value that corresponds to colormap maximum value.
 |          If not specified the maximum value of the data (or gmap) will be used.
 |      gmap : array-like, optional
 |          Gradient map for determining the text colors. If not supplied
 |          will use the underlying data from rows, columns or frame. If given as an
 |          ndarray or list-like must be an identical shape to the underlying data
 |          considering ``axis`` and ``subset``. If given as DataFrame or Series must
 |          have same index and column labels considering ``axis`` and ``subset``.
 |          If supplied, ``vmin`` and ``vmax`` should be given relative to this
 |          gradient map.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.background_gradient: Color the background in a gradient style.
 |      
 |      Notes
 |      -----
 |      When using ``low`` and ``high`` the range
 |      of the gradient, given by the data if ``gmap`` is not given or by ``gmap``,
 |      is extended at the low end effectively by
 |      `map.min - low * map.range` and at the high end by
 |      `map.max + high * map.range` before the colors are normalized and determined.
 |      
 |      If combining with ``vmin`` and ``vmax`` the `map.min`, `map.max` and
 |      `map.range` are replaced by values according to the values derived from
 |      ``vmin`` and ``vmax``.
 |      
 |      This method will preselect numeric columns and ignore non-numeric columns
 |      unless a ``gmap`` is supplied in which case no preselection occurs.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame(columns=["City", "Temp (c)", "Rain (mm)", "Wind (m/s)"],
 |      ...                   data=[["Stockholm", 21.6, 5.0, 3.2],
 |      ...                         ["Oslo", 22.4, 13.3, 3.1],
 |      ...                         ["Copenhagen", 24.5, 0.0, 6.7]])
 |      
 |      Shading the values column-wise, with ``axis=0``, preselecting numeric columns
 |      
 |      >>> df.style.text_gradient(axis=0)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/tg_ax0.png
 |      
 |      Shading all values collectively using ``axis=None``
 |      
 |      >>> df.style.text_gradient(axis=None)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/tg_axNone.png
 |      
 |      Compress the color map from the both ``low`` and ``high`` ends
 |      
 |      >>> df.style.text_gradient(axis=None, low=0.75, high=1.0)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/tg_axNone_lowhigh.png
 |      
 |      Manually setting ``vmin`` and ``vmax`` gradient thresholds
 |      
 |      >>> df.style.text_gradient(axis=None, vmin=6.7, vmax=21.6)  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/tg_axNone_vminvmax.png
 |      
 |      Setting a ``gmap`` and applying to all columns with another ``cmap``
 |      
 |      >>> df.style.text_gradient(axis=0, gmap=df['Temp (c)'], cmap='YlOrRd')
 |      ...  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/tg_gmap.png
 |      
 |      Setting the gradient map for a dataframe (i.e. ``axis=None``), we need to
 |      explicitly state ``subset`` to match the ``gmap`` shape
 |      
 |      >>> gmap = np.array([[1,2,3], [2,3,4], [3,4,5]])
 |      >>> df.style.text_gradient(axis=None, gmap=gmap,
 |      ...     cmap='YlOrRd', subset=['Temp (c)', 'Rain (mm)', 'Wind (m/s)']
 |      ... )  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/tg_axNone_gmap.png
 |  
 |  to_excel(self, excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool' = True, index: 'bool' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: 'str | None' = None, merge_cells: 'bool' = True, encoding: 'str | None' = None, inf_rep: 'str' = 'inf', verbose: 'bool' = True, freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None) -> 'None'
 |      Write Styler to an Excel sheet.
 |      
 |      To write a single Styler to an Excel .xlsx file it is only necessary to
 |      specify a target file name. To write to multiple sheets it is necessary to
 |      create an `ExcelWriter` object with a target file name, and specify a sheet
 |      in the file to write to.
 |      
 |      Multiple sheets may be written to by specifying unique `sheet_name`.
 |      With all data written to the file it is necessary to save the changes.
 |      Note that creating an `ExcelWriter` object with a file name that already
 |      exists will result in the contents of the existing file being erased.
 |      
 |      Parameters
 |      ----------
 |      excel_writer : path-like, file-like, or ExcelWriter object
 |          File path or existing ExcelWriter.
 |      sheet_name : str, default 'Sheet1'
 |          Name of sheet which will contain DataFrame.
 |      na_rep : str, default ''
 |          Missing data representation.
 |      float_format : str, optional
 |          Format string for floating point numbers. For example
 |          ``float_format="%.2f"`` will format 0.1234 to 0.12.
 |      columns : sequence or list of str, optional
 |          Columns to write.
 |      header : bool or list of str, default True
 |          Write out the column names. If a list of string is given it is
 |          assumed to be aliases for the column names.
 |      index : bool, default True
 |          Write row names (index).
 |      index_label : str or sequence, optional
 |          Column label for index column(s) if desired. If not specified, and
 |          `header` and `index` are True, then the index names are used. A
 |          sequence should be given if the DataFrame uses MultiIndex.
 |      startrow : int, default 0
 |          Upper left cell row to dump data frame.
 |      startcol : int, default 0
 |          Upper left cell column to dump data frame.
 |      engine : str, optional
 |          Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this
 |          via the options ``io.excel.xlsx.writer`` or
 |          ``io.excel.xlsm.writer``.
 |      
 |      merge_cells : bool, default True
 |          Write MultiIndex and Hierarchical Rows as merged cells.
 |      inf_rep : str, default 'inf'
 |          Representation for infinity (there is no native representation for
 |          infinity in Excel).
 |      freeze_panes : tuple of int (length 2), optional
 |          Specifies the one-based bottommost row and rightmost column that
 |          is to be frozen.
 |      storage_options : dict, optional
 |          Extra options that make sense for a particular storage connection, e.g.
 |          host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
 |          are forwarded to ``urllib.request.Request`` as header options. For other
 |          URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
 |          forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
 |          details, and for more examples on storage options refer `here
 |          <https://pandas.pydata.org/docs/user_guide/io.html?
 |          highlight=storage_options#reading-writing-remote-files>`_.
 |      
 |          .. versionadded:: 1.5.0
 |      engine_kwargs : dict, optional
 |          Arbitrary keyword arguments passed to excel engine.
 |      
 |      See Also
 |      --------
 |      to_csv : Write DataFrame to a comma-separated values (csv) file.
 |      ExcelWriter : Class for writing DataFrame objects into excel sheets.
 |      read_excel : Read an Excel file into a pandas DataFrame.
 |      read_csv : Read a comma-separated values (csv) file into DataFrame.
 |      io.formats.style.Styler.to_excel : Add styles to Excel sheet.
 |      
 |      Notes
 |      -----
 |      For compatibility with :meth:`~DataFrame.to_csv`,
 |      to_excel serializes lists and dicts to strings before writing.
 |      
 |      Once a workbook has been saved it is not possible to write further
 |      data without rewriting the whole workbook.
 |      
 |      Examples
 |      --------
 |      
 |      Create, write to and save a workbook:
 |      
 |      >>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],
 |      ...                    index=['row 1', 'row 2'],
 |      ...                    columns=['col 1', 'col 2'])
 |      >>> df1.to_excel("output.xlsx")  # doctest: +SKIP
 |      
 |      To specify the sheet name:
 |      
 |      >>> df1.to_excel("output.xlsx",
 |      ...              sheet_name='Sheet_name_1')  # doctest: +SKIP
 |      
 |      If you wish to write to more than one sheet in the workbook, it is
 |      necessary to specify an ExcelWriter object:
 |      
 |      >>> df2 = df1.copy()
 |      >>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP
 |      ...     df1.to_excel(writer, sheet_name='Sheet_name_1')
 |      ...     df2.to_excel(writer, sheet_name='Sheet_name_2')
 |      
 |      ExcelWriter can also be used to append to an existing Excel file:
 |      
 |      >>> with pd.ExcelWriter('output.xlsx',
 |      ...                     mode='a') as writer:  # doctest: +SKIP
 |      ...     df1.to_excel(writer, sheet_name='Sheet_name_3')
 |      
 |      To set the library that is used to write the Excel file,
 |      you can pass the `engine` keyword (the default engine is
 |      automatically chosen depending on the file extension):
 |      
 |      >>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP
 |  
 |  to_html(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, table_uuid: 'str | None' = None, table_attributes: 'str | None' = None, sparse_index: 'bool | None' = None, sparse_columns: 'bool | None' = None, bold_headers: 'bool' = False, caption: 'str | None' = None, max_rows: 'int | None' = None, max_columns: 'int | None' = None, encoding: 'str | None' = None, doctype_html: 'bool' = False, exclude_styles: 'bool' = False, **kwargs) -> 'str | None'
 |      Write Styler to a file, buffer or string in HTML-CSS format.
 |      
 |      .. versionadded:: 1.3.0
 |      
 |      Parameters
 |      ----------
 |      buf : str, path object, file-like object, optional
 |       String, path object (implementing ``os.PathLike[str]``), or file-like
 |       object implementing a string ``write()`` function. If ``None``, the result is
 |       returned as a string.
 |      table_uuid : str, optional
 |          Id attribute assigned to the <table> HTML element in the format:
 |      
 |          ``<table id="T_<table_uuid>" ..>``
 |      
 |          If not given uses Styler's initially assigned value.
 |      table_attributes : str, optional
 |          Attributes to assign within the `<table>` HTML element in the format:
 |      
 |          ``<table .. <table_attributes> >``
 |      
 |          If not given defaults to Styler's preexisting value.
 |      sparse_index : bool, optional
 |          Whether to sparsify the display of a hierarchical index. Setting to False
 |          will display each explicit level element in a hierarchical key for each row.
 |          Defaults to ``pandas.options.styler.sparse.index`` value.
 |      
 |          .. versionadded:: 1.4.0
 |      sparse_columns : bool, optional
 |          Whether to sparsify the display of a hierarchical index. Setting to False
 |          will display each explicit level element in a hierarchical key for each
 |          column. Defaults to ``pandas.options.styler.sparse.columns`` value.
 |      
 |          .. versionadded:: 1.4.0
 |      bold_headers : bool, optional
 |          Adds "font-weight: bold;" as a CSS property to table style header cells.
 |      
 |          .. versionadded:: 1.4.0
 |      caption : str, optional
 |          Set, or overwrite, the caption on Styler before rendering.
 |      
 |          .. versionadded:: 1.4.0
 |      max_rows : int, optional
 |          The maximum number of rows that will be rendered. Defaults to
 |          ``pandas.options.styler.render.max_rows/max_columns``.
 |      
 |          .. versionadded:: 1.4.0
 |      max_columns : int, optional
 |          The maximum number of columns that will be rendered. Defaults to
 |          ``pandas.options.styler.render.max_columns``, which is None.
 |      
 |          Rows and columns may be reduced if the number of total elements is
 |          large. This value is set to ``pandas.options.styler.render.max_elements``,
 |          which is 262144 (18 bit browser rendering).
 |      
 |          .. versionadded:: 1.4.0
 |      encoding : str, optional
 |            Character encoding setting for file output (and meta tags if available).
 |            Defaults to ``pandas.options.styler.render.encoding`` value of "utf-8".
 |      doctype_html : bool, default False
 |          Whether to output a fully structured HTML file including all
 |          HTML elements, or just the core ``<style>`` and ``<table>`` elements.
 |      exclude_styles : bool, default False
 |          Whether to include the ``<style>`` element and all associated element
 |          ``class`` and ``id`` identifiers, or solely the ``<table>`` element without
 |          styling identifiers.
 |      **kwargs
 |          Any additional keyword arguments are passed through to the jinja2
 |          ``self.template.render`` process. This is useful when you need to provide
 |          additional variables for a custom template.
 |      
 |      Returns
 |      -------
 |      str or None
 |          If `buf` is None, returns the result as a string. Otherwise returns `None`.
 |      
 |      See Also
 |      --------
 |      DataFrame.to_html: Write a DataFrame to a file, buffer or string in HTML format.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> print(df.style.to_html())  # doctest: +SKIP
 |      <style type="text/css">
 |      </style>
 |      <table id="T_1e78e">
 |        <thead>
 |          <tr>
 |            <th class="blank level0" >&nbsp;</th>
 |            <th id="T_1e78e_level0_col0" class="col_heading level0 col0" >A</th>
 |            <th id="T_1e78e_level0_col1" class="col_heading level0 col1" >B</th>
 |          </tr>
 |      ...
 |  
 |  to_latex(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, column_format: 'str | None' = None, position: 'str | None' = None, position_float: 'str | None' = None, hrules: 'bool | None' = None, clines: 'str | None' = None, label: 'str | None' = None, caption: 'str | tuple | None' = None, sparse_index: 'bool | None' = None, sparse_columns: 'bool | None' = None, multirow_align: 'str | None' = None, multicol_align: 'str | None' = None, siunitx: 'bool' = False, environment: 'str | None' = None, encoding: 'str | None' = None, convert_css: 'bool' = False) -> 'str | None'
 |      Write Styler to a file, buffer or string in LaTeX format.
 |      
 |      .. versionadded:: 1.3.0
 |      
 |      Parameters
 |      ----------
 |      buf : str, path object, file-like object, or None, default None
 |          String, path object (implementing ``os.PathLike[str]``), or file-like
 |          object implementing a string ``write()`` function. If None, the result is
 |          returned as a string.
 |      column_format : str, optional
 |          The LaTeX column specification placed in location:
 |      
 |          \\begin{tabular}{<column_format>}
 |      
 |          Defaults to 'l' for index and
 |          non-numeric data columns, and, for numeric data columns,
 |          to 'r' by default, or 'S' if ``siunitx`` is ``True``.
 |      position : str, optional
 |          The LaTeX positional argument (e.g. 'h!') for tables, placed in location:
 |      
 |          ``\\begin{table}[<position>]``.
 |      position_float : {"centering", "raggedleft", "raggedright"}, optional
 |          The LaTeX float command placed in location:
 |      
 |          \\begin{table}[<position>]
 |      
 |          \\<position_float>
 |      
 |          Cannot be used if ``environment`` is "longtable".
 |      hrules : bool
 |          Set to `True` to add \\toprule, \\midrule and \\bottomrule from the
 |          {booktabs} LaTeX package.
 |          Defaults to ``pandas.options.styler.latex.hrules``, which is `False`.
 |      
 |          .. versionchanged:: 1.4.0
 |      clines : str, optional
 |          Use to control adding \\cline commands for the index labels separation.
 |          Possible values are:
 |      
 |            - `None`: no cline commands are added (default).
 |            - `"all;data"`: a cline is added for every index value extending the
 |              width of the table, including data entries.
 |            - `"all;index"`: as above with lines extending only the width of the
 |              index entries.
 |            - `"skip-last;data"`: a cline is added for each index value except the
 |              last level (which is never sparsified), extending the widtn of the
 |              table.
 |            - `"skip-last;index"`: as above with lines extending only the width of the
 |              index entries.
 |      
 |          .. versionadded:: 1.4.0
 |      label : str, optional
 |          The LaTeX label included as: \\label{<label>}.
 |          This is used with \\ref{<label>} in the main .tex file.
 |      caption : str, tuple, optional
 |          If string, the LaTeX table caption included as: \\caption{<caption>}.
 |          If tuple, i.e ("full caption", "short caption"), the caption included
 |          as: \\caption[<caption[1]>]{<caption[0]>}.
 |      sparse_index : bool, optional
 |          Whether to sparsify the display of a hierarchical index. Setting to False
 |          will display each explicit level element in a hierarchical key for each row.
 |          Defaults to ``pandas.options.styler.sparse.index``, which is `True`.
 |      sparse_columns : bool, optional
 |          Whether to sparsify the display of a hierarchical index. Setting to False
 |          will display each explicit level element in a hierarchical key for each
 |          column. Defaults to ``pandas.options.styler.sparse.columns``, which
 |          is `True`.
 |      multirow_align : {"c", "t", "b", "naive"}, optional
 |          If sparsifying hierarchical MultiIndexes whether to align text centrally,
 |          at the top or bottom using the multirow package. If not given defaults to
 |          ``pandas.options.styler.latex.multirow_align``, which is `"c"`.
 |          If "naive" is given renders without multirow.
 |      
 |          .. versionchanged:: 1.4.0
 |      multicol_align : {"r", "c", "l", "naive-l", "naive-r"}, optional
 |          If sparsifying hierarchical MultiIndex columns whether to align text at
 |          the left, centrally, or at the right. If not given defaults to
 |          ``pandas.options.styler.latex.multicol_align``, which is "r".
 |          If a naive option is given renders without multicol.
 |          Pipe decorators can also be added to non-naive values to draw vertical
 |          rules, e.g. "\|r" will draw a rule on the left side of right aligned merged
 |          cells.
 |      
 |          .. versionchanged:: 1.4.0
 |      siunitx : bool, default False
 |          Set to ``True`` to structure LaTeX compatible with the {siunitx} package.
 |      environment : str, optional
 |          If given, the environment that will replace 'table' in ``\\begin{table}``.
 |          If 'longtable' is specified then a more suitable template is
 |          rendered. If not given defaults to
 |          ``pandas.options.styler.latex.environment``, which is `None`.
 |      
 |          .. versionadded:: 1.4.0
 |      encoding : str, optional
 |          Character encoding setting. Defaults
 |          to ``pandas.options.styler.render.encoding``, which is "utf-8".
 |      convert_css : bool, default False
 |          Convert simple cell-styles from CSS to LaTeX format. Any CSS not found in
 |          conversion table is dropped. A style can be forced by adding option
 |          `--latex`. See notes.
 |      
 |      Returns
 |      -------
 |      str or None
 |          If `buf` is None, returns the result as a string. Otherwise returns `None`.
 |      
 |      See Also
 |      --------
 |      Styler.format: Format the text display value of cells.
 |      
 |      Notes
 |      -----
 |      **Latex Packages**
 |      
 |      For the following features we recommend the following LaTeX inclusions:
 |      
 |      ===================== ==========================================================
 |      Feature               Inclusion
 |      ===================== ==========================================================
 |      sparse columns        none: included within default {tabular} environment
 |      sparse rows           \\usepackage{multirow}
 |      hrules                \\usepackage{booktabs}
 |      colors                \\usepackage[table]{xcolor}
 |      siunitx               \\usepackage{siunitx}
 |      bold (with siunitx)   | \\usepackage{etoolbox}
 |                            | \\robustify\\bfseries
 |                            | \\sisetup{detect-all = true}  *(within {document})*
 |      italic (with siunitx) | \\usepackage{etoolbox}
 |                            | \\robustify\\itshape
 |                            | \\sisetup{detect-all = true}  *(within {document})*
 |      environment           \\usepackage{longtable} if arg is "longtable"
 |                            | or any other relevant environment package
 |      hyperlinks            \\usepackage{hyperref}
 |      ===================== ==========================================================
 |      
 |      **Cell Styles**
 |      
 |      LaTeX styling can only be rendered if the accompanying styling functions have
 |      been constructed with appropriate LaTeX commands. All styling
 |      functionality is built around the concept of a CSS ``(<attribute>, <value>)``
 |      pair (see `Table Visualization <../../user_guide/style.ipynb>`_), and this
 |      should be replaced by a LaTeX
 |      ``(<command>, <options>)`` approach. Each cell will be styled individually
 |      using nested LaTeX commands with their accompanied options.
 |      
 |      For example the following code will highlight and bold a cell in HTML-CSS:
 |      
 |      >>> df = pd.DataFrame([[1,2], [3,4]])
 |      >>> s = df.style.highlight_max(axis=None,
 |      ...                            props='background-color:red; font-weight:bold;')
 |      >>> s.to_html()  # doctest: +SKIP
 |      
 |      The equivalent using LaTeX only commands is the following:
 |      
 |      >>> s = df.style.highlight_max(axis=None,
 |      ...                            props='cellcolor:{red}; bfseries: ;')
 |      >>> s.to_latex()  # doctest: +SKIP
 |      
 |      Internally these structured LaTeX ``(<command>, <options>)`` pairs
 |      are translated to the
 |      ``display_value`` with the default structure:
 |      ``\<command><options> <display_value>``.
 |      Where there are multiple commands the latter is nested recursively, so that
 |      the above example highlighted cell is rendered as
 |      ``\cellcolor{red} \bfseries 4``.
 |      
 |      Occasionally this format does not suit the applied command, or
 |      combination of LaTeX packages that is in use, so additional flags can be
 |      added to the ``<options>``, within the tuple, to result in different
 |      positions of required braces (the **default** being the same as ``--nowrap``):
 |      
 |      =================================== ============================================
 |      Tuple Format                           Output Structure
 |      =================================== ============================================
 |      (<command>,<options>)               \\<command><options> <display_value>
 |      (<command>,<options> ``--nowrap``)  \\<command><options> <display_value>
 |      (<command>,<options> ``--rwrap``)   \\<command><options>{<display_value>}
 |      (<command>,<options> ``--wrap``)    {\\<command><options> <display_value>}
 |      (<command>,<options> ``--lwrap``)   {\\<command><options>} <display_value>
 |      (<command>,<options> ``--dwrap``)   {\\<command><options>}{<display_value>}
 |      =================================== ============================================
 |      
 |      For example the `textbf` command for font-weight
 |      should always be used with `--rwrap` so ``('textbf', '--rwrap')`` will render a
 |      working cell, wrapped with braces, as ``\textbf{<display_value>}``.
 |      
 |      A more comprehensive example is as follows:
 |      
 |      >>> df = pd.DataFrame([[1, 2.2, "dogs"], [3, 4.4, "cats"], [2, 6.6, "cows"]],
 |      ...                   index=["ix1", "ix2", "ix3"],
 |      ...                   columns=["Integers", "Floats", "Strings"])
 |      >>> s = df.style.highlight_max(
 |      ...     props='cellcolor:[HTML]{FFFF00}; color:{red};'
 |      ...           'textit:--rwrap; textbf:--rwrap;'
 |      ... )
 |      >>> s.to_latex()  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/latex_1.png
 |      
 |      **Table Styles**
 |      
 |      Internally Styler uses its ``table_styles`` object to parse the
 |      ``column_format``, ``position``, ``position_float``, and ``label``
 |      input arguments. These arguments are added to table styles in the format:
 |      
 |      .. code-block:: python
 |      
 |          set_table_styles([
 |              {"selector": "column_format", "props": f":{column_format};"},
 |              {"selector": "position", "props": f":{position};"},
 |              {"selector": "position_float", "props": f":{position_float};"},
 |              {"selector": "label", "props": f":{{{label.replace(':','§')}}};"}
 |          ], overwrite=False)
 |      
 |      Exception is made for the ``hrules`` argument which, in fact, controls all three
 |      commands: ``toprule``, ``bottomrule`` and ``midrule`` simultaneously. Instead of
 |      setting ``hrules`` to ``True``, it is also possible to set each
 |      individual rule definition, by manually setting the ``table_styles``,
 |      for example below we set a regular ``toprule``, set an ``hline`` for
 |      ``bottomrule`` and exclude the ``midrule``:
 |      
 |      .. code-block:: python
 |      
 |          set_table_styles([
 |              {'selector': 'toprule', 'props': ':toprule;'},
 |              {'selector': 'bottomrule', 'props': ':hline;'},
 |          ], overwrite=False)
 |      
 |      If other ``commands`` are added to table styles they will be detected, and
 |      positioned immediately above the '\\begin{tabular}' command. For example to
 |      add odd and even row coloring, from the {colortbl} package, in format
 |      ``\rowcolors{1}{pink}{red}``, use:
 |      
 |      .. code-block:: python
 |      
 |          set_table_styles([
 |              {'selector': 'rowcolors', 'props': ':{1}{pink}{red};'}
 |          ], overwrite=False)
 |      
 |      A more comprehensive example using these arguments is as follows:
 |      
 |      >>> df.columns = pd.MultiIndex.from_tuples([
 |      ...     ("Numeric", "Integers"),
 |      ...     ("Numeric", "Floats"),
 |      ...     ("Non-Numeric", "Strings")
 |      ... ])
 |      >>> df.index = pd.MultiIndex.from_tuples([
 |      ...     ("L0", "ix1"), ("L0", "ix2"), ("L1", "ix3")
 |      ... ])
 |      >>> s = df.style.highlight_max(
 |      ...     props='cellcolor:[HTML]{FFFF00}; color:{red}; itshape:; bfseries:;'
 |      ... )
 |      >>> s.to_latex(
 |      ...     column_format="rrrrr", position="h", position_float="centering",
 |      ...     hrules=True, label="table:5", caption="Styled LaTeX Table",
 |      ...     multirow_align="t", multicol_align="r"
 |      ... )  # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/latex_2.png
 |      
 |      **Formatting**
 |      
 |      To format values :meth:`Styler.format` should be used prior to calling
 |      `Styler.to_latex`, as well as other methods such as :meth:`Styler.hide`
 |      for example:
 |      
 |      >>> s.clear()
 |      >>> s.table_styles = []
 |      >>> s.caption = None
 |      >>> s.format({
 |      ...    ("Numeric", "Integers"): '\${}',
 |      ...    ("Numeric", "Floats"): '{:.3f}',
 |      ...    ("Non-Numeric", "Strings"): str.upper
 |      ... })  # doctest: +SKIP
 |                      Numeric      Non-Numeric
 |                Integers   Floats    Strings
 |      L0    ix1       $1   2.200      DOGS
 |            ix2       $3   4.400      CATS
 |      L1    ix3       $2   6.600      COWS
 |      
 |      >>> s.to_latex()  # doctest: +SKIP
 |      \begin{tabular}{llrrl}
 |      {} & {} & \multicolumn{2}{r}{Numeric} & {Non-Numeric} \\
 |      {} & {} & {Integers} & {Floats} & {Strings} \\
 |      \multirow[c]{2}{*}{L0} & ix1 & \\$1 & 2.200 & DOGS \\
 |       & ix2 & \$3 & 4.400 & CATS \\
 |      L1 & ix3 & \$2 & 6.600 & COWS \\
 |      \end{tabular}
 |      
 |      **CSS Conversion**
 |      
 |      This method can convert a Styler constructured with HTML-CSS to LaTeX using
 |      the following limited conversions.
 |      
 |      ================== ==================== ============= ==========================
 |      CSS Attribute      CSS value            LaTeX Command LaTeX Options
 |      ================== ==================== ============= ==========================
 |      font-weight        | bold               | bfseries
 |                         | bolder             | bfseries
 |      font-style         | italic             | itshape
 |                         | oblique            | slshape
 |      background-color   | red                cellcolor     | {red}--lwrap
 |                         | #fe01ea                          | [HTML]{FE01EA}--lwrap
 |                         | #f0e                             | [HTML]{FF00EE}--lwrap
 |                         | rgb(128,255,0)                   | [rgb]{0.5,1,0}--lwrap
 |                         | rgba(128,0,0,0.5)                | [rgb]{0.5,0,0}--lwrap
 |                         | rgb(25%,255,50%)                 | [rgb]{0.25,1,0.5}--lwrap
 |      color              | red                color         | {red}
 |                         | #fe01ea                          | [HTML]{FE01EA}
 |                         | #f0e                             | [HTML]{FF00EE}
 |                         | rgb(128,255,0)                   | [rgb]{0.5,1,0}
 |                         | rgba(128,0,0,0.5)                | [rgb]{0.5,0,0}
 |                         | rgb(25%,255,50%)                 | [rgb]{0.25,1,0.5}
 |      ================== ==================== ============= ==========================
 |      
 |      It is also possible to add user-defined LaTeX only styles to a HTML-CSS Styler
 |      using the ``--latex`` flag, and to add LaTeX parsing options that the
 |      converter will detect within a CSS-comment.
 |      
 |      >>> df = pd.DataFrame([[1]])
 |      >>> df.style.set_properties(
 |      ...     **{"font-weight": "bold /* --dwrap */", "Huge": "--latex--rwrap"}
 |      ... ).to_latex(convert_css=True)  # doctest: +SKIP
 |      \begin{tabular}{lr}
 |      {} & {0} \\
 |      0 & {\bfseries}{\Huge{1}} \\
 |      \end{tabular}
 |      
 |      Examples
 |      --------
 |      Below we give a complete step by step example adding some advanced features
 |      and noting some common gotchas.
 |      
 |      First we create the DataFrame and Styler as usual, including MultiIndex rows
 |      and columns, which allow for more advanced formatting options:
 |      
 |      >>> cidx = pd.MultiIndex.from_arrays([
 |      ...     ["Equity", "Equity", "Equity", "Equity",
 |      ...      "Stats", "Stats", "Stats", "Stats", "Rating"],
 |      ...     ["Energy", "Energy", "Consumer", "Consumer", "", "", "", "", ""],
 |      ...     ["BP", "Shell", "H&M", "Unilever",
 |      ...      "Std Dev", "Variance", "52w High", "52w Low", ""]
 |      ... ])
 |      >>> iidx = pd.MultiIndex.from_arrays([
 |      ...     ["Equity", "Equity", "Equity", "Equity"],
 |      ...     ["Energy", "Energy", "Consumer", "Consumer"],
 |      ...     ["BP", "Shell", "H&M", "Unilever"]
 |      ... ])
 |      >>> styler = pd.DataFrame([
 |      ...     [1, 0.8, 0.66, 0.72, 32.1678, 32.1678**2, 335.12, 240.89, "Buy"],
 |      ...     [0.8, 1.0, 0.69, 0.79, 1.876, 1.876**2, 14.12, 19.78, "Hold"],
 |      ...     [0.66, 0.69, 1.0, 0.86, 7, 7**2, 210.9, 140.6, "Buy"],
 |      ...     [0.72, 0.79, 0.86, 1.0, 213.76, 213.76**2, 2807, 3678, "Sell"],
 |      ... ], columns=cidx, index=iidx).style
 |      
 |      Second we will format the display and, since our table is quite wide, will
 |      hide the repeated level-0 of the index:
 |      
 |      >>> (styler.format(subset="Equity", precision=2)
 |      ...       .format(subset="Stats", precision=1, thousands=",")
 |      ...       .format(subset="Rating", formatter=str.upper)
 |      ...       .format_index(escape="latex", axis=1)
 |      ...       .format_index(escape="latex", axis=0)
 |      ...       .hide(level=0, axis=0))  # doctest: +SKIP
 |      
 |      Note that one of the string entries of the index and column headers is "H&M".
 |      Without applying the `escape="latex"` option to the `format_index` method the
 |      resultant LaTeX will fail to render, and the error returned is quite
 |      difficult to debug. Using the appropriate escape the "&" is converted to "\\&".
 |      
 |      Thirdly we will apply some (CSS-HTML) styles to our object. We will use a
 |      builtin method and also define our own method to highlight the stock
 |      recommendation:
 |      
 |      >>> def rating_color(v):
 |      ...     if v == "Buy": color = "#33ff85"
 |      ...     elif v == "Sell": color = "#ff5933"
 |      ...     else: color = "#ffdd33"
 |      ...     return f"color: {color}; font-weight: bold;"
 |      >>> (styler.background_gradient(cmap="inferno", subset="Equity", vmin=0, vmax=1)
 |      ...       .map(rating_color, subset="Rating"))  # doctest: +SKIP
 |      
 |      All the above styles will work with HTML (see below) and LaTeX upon conversion:
 |      
 |      .. figure:: ../../_static/style/latex_stocks_html.png
 |      
 |      However, we finally want to add one LaTeX only style
 |      (from the {graphicx} package), that is not easy to convert from CSS and
 |      pandas does not support it. Notice the `--latex` flag used here,
 |      as well as `--rwrap` to ensure this is formatted correctly and
 |      not ignored upon conversion.
 |      
 |      >>> styler.map_index(
 |      ...     lambda v: "rotatebox:{45}--rwrap--latex;", level=2, axis=1
 |      ... )  # doctest: +SKIP
 |      
 |      Finally we render our LaTeX adding in other options as required:
 |      
 |      >>> styler.to_latex(
 |      ...     caption="Selected stock correlation and simple statistics.",
 |      ...     clines="skip-last;data",
 |      ...     convert_css=True,
 |      ...     position_float="centering",
 |      ...     multicol_align="|c|",
 |      ...     hrules=True,
 |      ... )  # doctest: +SKIP
 |      \begin{table}
 |      \centering
 |      \caption{Selected stock correlation and simple statistics.}
 |      \begin{tabular}{llrrrrrrrrl}
 |      \toprule
 |       &  & \multicolumn{4}{|c|}{Equity} & \multicolumn{4}{|c|}{Stats} & Rating \\
 |       &  & \multicolumn{2}{|c|}{Energy} & \multicolumn{2}{|c|}{Consumer} &
 |      \multicolumn{4}{|c|}{} &  \\
 |       &  & \rotatebox{45}{BP} & \rotatebox{45}{Shell} & \rotatebox{45}{H\&M} &
 |      \rotatebox{45}{Unilever} & \rotatebox{45}{Std Dev} & \rotatebox{45}{Variance} &
 |      \rotatebox{45}{52w High} & \rotatebox{45}{52w Low} & \rotatebox{45}{} \\
 |      \midrule
 |      \multirow[c]{2}{*}{Energy} & BP & {\cellcolor[HTML]{FCFFA4}}
 |      \color[HTML]{000000} 1.00 & {\cellcolor[HTML]{FCA50A}} \color[HTML]{000000}
 |      0.80 & {\cellcolor[HTML]{EB6628}} \color[HTML]{F1F1F1} 0.66 &
 |      {\cellcolor[HTML]{F68013}} \color[HTML]{F1F1F1} 0.72 & 32.2 & 1,034.8 & 335.1
 |      & 240.9 & \color[HTML]{33FF85} \bfseries BUY \\
 |       & Shell & {\cellcolor[HTML]{FCA50A}} \color[HTML]{000000} 0.80 &
 |      {\cellcolor[HTML]{FCFFA4}} \color[HTML]{000000} 1.00 &
 |      {\cellcolor[HTML]{F1731D}} \color[HTML]{F1F1F1} 0.69 &
 |      {\cellcolor[HTML]{FCA108}} \color[HTML]{000000} 0.79 & 1.9 & 3.5 & 14.1 &
 |      19.8 & \color[HTML]{FFDD33} \bfseries HOLD \\
 |      \cline{1-11}
 |      \multirow[c]{2}{*}{Consumer} & H\&M & {\cellcolor[HTML]{EB6628}}
 |      \color[HTML]{F1F1F1} 0.66 & {\cellcolor[HTML]{F1731D}} \color[HTML]{F1F1F1}
 |      0.69 & {\cellcolor[HTML]{FCFFA4}} \color[HTML]{000000} 1.00 &
 |      {\cellcolor[HTML]{FAC42A}} \color[HTML]{000000} 0.86 & 7.0 & 49.0 & 210.9 &
 |      140.6 & \color[HTML]{33FF85} \bfseries BUY \\
 |       & Unilever & {\cellcolor[HTML]{F68013}} \color[HTML]{F1F1F1} 0.72 &
 |      {\cellcolor[HTML]{FCA108}} \color[HTML]{000000} 0.79 &
 |      {\cellcolor[HTML]{FAC42A}} \color[HTML]{000000} 0.86 &
 |      {\cellcolor[HTML]{FCFFA4}} \color[HTML]{000000} 1.00 & 213.8 & 45,693.3 &
 |      2,807.0 & 3,678.0 & \color[HTML]{FF5933} \bfseries SELL \\
 |      \cline{1-11}
 |      \bottomrule
 |      \end{tabular}
 |      \end{table}
 |      
 |      .. figure:: ../../_static/style/latex_stocks.png
 |  
 |  to_string(self, buf: 'FilePath | WriteBuffer[str] | None' = None, *, encoding: 'str | None' = None, sparse_index: 'bool | None' = None, sparse_columns: 'bool | None' = None, max_rows: 'int | None' = None, max_columns: 'int | None' = None, delimiter: 'str' = ' ') -> 'str | None'
 |      Write Styler to a file, buffer or string in text format.
 |      
 |      .. versionadded:: 1.5.0
 |      
 |      Parameters
 |      ----------
 |      buf : str, path object, file-like object, optional
 |       String, path object (implementing ``os.PathLike[str]``), or file-like
 |       object implementing a string ``write()`` function. If ``None``, the result is
 |       returned as a string.
 |      encoding : str, optional
 |            Character encoding setting for file output (and meta tags if available).
 |            Defaults to ``pandas.options.styler.render.encoding`` value of "utf-8".
 |      sparse_index : bool, optional
 |          Whether to sparsify the display of a hierarchical index. Setting to False
 |          will display each explicit level element in a hierarchical key for each row.
 |          Defaults to ``pandas.options.styler.sparse.index`` value.
 |      sparse_columns : bool, optional
 |          Whether to sparsify the display of a hierarchical index. Setting to False
 |          will display each explicit level element in a hierarchical key for each
 |          column. Defaults to ``pandas.options.styler.sparse.columns`` value.
 |      max_rows : int, optional
 |          The maximum number of rows that will be rendered. Defaults to
 |          ``pandas.options.styler.render.max_rows``, which is None.
 |      max_columns : int, optional
 |          The maximum number of columns that will be rendered. Defaults to
 |          ``pandas.options.styler.render.max_columns``, which is None.
 |      
 |          Rows and columns may be reduced if the number of total elements is
 |          large. This value is set to ``pandas.options.styler.render.max_elements``,
 |          which is 262144 (18 bit browser rendering).
 |      delimiter : str, default single space
 |          The separator between data elements.
 |      
 |      Returns
 |      -------
 |      str or None
 |          If `buf` is None, returns the result as a string. Otherwise returns `None`.
 |      
 |      Examples
 |      --------
 |      >>> df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})
 |      >>> df.style.to_string()
 |      ' A B\n0 1 3\n1 2 4\n'
 |  
 |  use(self, styles: 'dict[str, Any]') -> 'Styler'
 |      Set the styles on the current Styler.
 |      
 |      Possibly uses styles from ``Styler.export``.
 |      
 |      Parameters
 |      ----------
 |      styles : dict(str, Any)
 |          List of attributes to add to Styler. Dict keys should contain only:
 |            - "apply": list of styler functions, typically added with ``apply`` or
 |              ``map``.
 |            - "table_attributes": HTML attributes, typically added with
 |              ``set_table_attributes``.
 |            - "table_styles": CSS selectors and properties, typically added with
 |              ``set_table_styles``.
 |            - "hide_index":  whether the index is hidden, typically added with
 |              ``hide_index``, or a boolean list for hidden levels.
 |            - "hide_columns": whether column headers are hidden, typically added with
 |              ``hide_columns``, or a boolean list for hidden levels.
 |            - "hide_index_names": whether index names are hidden.
 |            - "hide_column_names": whether column header names are hidden.
 |            - "css": the css class names used.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.export : Export the non data dependent attributes to the current Styler.
 |      
 |      Examples
 |      --------
 |      
 |      >>> styler = pd.DataFrame([[1, 2], [3, 4]]).style
 |      >>> styler2 = pd.DataFrame([[9, 9, 9]]).style
 |      >>> styler.hide(axis=0).highlight_max(axis=1)  # doctest: +SKIP
 |      >>> export = styler.export()
 |      >>> styler2.use(export)  # doctest: +SKIP
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_custom_template(searchpath: 'Sequence[str]', html_table: 'str | None' = None, html_style: 'str | None' = None) -> 'type[Styler]' from builtins.type
 |      Factory function for creating a subclass of ``Styler``.
 |      
 |      Uses custom templates and Jinja environment.
 |      
 |      .. versionchanged:: 1.3.0
 |      
 |      Parameters
 |      ----------
 |      searchpath : str or list
 |          Path or paths of directories containing the templates.
 |      html_table : str
 |          Name of your custom template to replace the html_table template.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      html_style : str
 |          Name of your custom template to replace the html_style template.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      Returns
 |      -------
 |      MyStyler : subclass of Styler
 |          Has the correct ``env``,``template_html``, ``template_html_table`` and
 |          ``template_html_style`` class attributes set.
 |      
 |      Examples
 |      --------
 |      >>> from pandas.io.formats.style import Styler
 |      >>> EasyStyler = Styler.from_custom_template("path/to/template",
 |      ...                                          "template.tpl",
 |      ...                                          )  # doctest: +SKIP
 |      >>> df = pd.DataFrame({"A": [1, 2]})
 |      >>> EasyStyler(df)  # doctest: +SKIP
 |      
 |      Please see:
 |      `Table Visualization <../../user_guide/style.ipynb>`_ for more examples.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from pandas.io.formats.style_render.StylerRenderer:
 |  
 |  format(self, formatter: 'ExtFormatter | None' = None, subset: 'Subset | None' = None, na_rep: 'str | None' = None, precision: 'int | None' = None, decimal: 'str' = '.', thousands: 'str | None' = None, escape: 'str | None' = None, hyperlinks: 'str | None' = None) -> 'StylerRenderer'
 |      Format the text display value of cells.
 |      
 |      Parameters
 |      ----------
 |      formatter : str, callable, dict or None
 |          Object to define how values are displayed. See notes.
 |      subset : label, array-like, IndexSlice, optional
 |          A valid 2d input to `DataFrame.loc[<subset>]`, or, in the case of a 1d input
 |          or single key, to `DataFrame.loc[:, <subset>]` where the columns are
 |          prioritised, to limit ``data`` to *before* applying the function.
 |      na_rep : str, optional
 |          Representation for missing values.
 |          If ``na_rep`` is None, no special formatting is applied.
 |      precision : int, optional
 |          Floating point precision to use for display purposes, if not determined by
 |          the specified ``formatter``.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      decimal : str, default "."
 |          Character used as decimal separator for floats, complex and integers.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      thousands : str, optional, default None
 |          Character used as thousands separator for floats, complex and integers.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      escape : str, optional
 |          Use 'html' to replace the characters ``&``, ``<``, ``>``, ``'``, and ``"``
 |          in cell display string with HTML-safe sequences.
 |          Use 'latex' to replace the characters ``&``, ``%``, ``$``, ``#``, ``_``,
 |          ``{``, ``}``, ``~``, ``^``, and ``\`` in the cell display string with
 |          LaTeX-safe sequences.
 |          Use 'latex-math' to replace the characters the same way as in 'latex' mode,
 |          except for math substrings, which either are surrounded
 |          by two characters ``$`` or start with the character ``\(`` and
 |          end with ``\)``. Escaping is done before ``formatter``.
 |      
 |          .. versionadded:: 1.3.0
 |      
 |      hyperlinks : {"html", "latex"}, optional
 |          Convert string patterns containing https://, http://, ftp:// or www. to
 |          HTML <a> tags as clickable URL hyperlinks if "html", or LaTeX \href
 |          commands if "latex".
 |      
 |          .. versionadded:: 1.4.0
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.format_index: Format the text display value of index labels.
 |      
 |      Notes
 |      -----
 |      This method assigns a formatting function, ``formatter``, to each cell in the
 |      DataFrame. If ``formatter`` is ``None``, then the default formatter is used.
 |      If a callable then that function should take a data value as input and return
 |      a displayable representation, such as a string. If ``formatter`` is
 |      given as a string this is assumed to be a valid Python format specification
 |      and is wrapped to a callable as ``string.format(x)``. If a ``dict`` is given,
 |      keys should correspond to column names, and values should be string or
 |      callable, as above.
 |      
 |      The default formatter currently expresses floats and complex numbers with the
 |      pandas display precision unless using the ``precision`` argument here. The
 |      default formatter does not adjust the representation of missing values unless
 |      the ``na_rep`` argument is used.
 |      
 |      The ``subset`` argument defines which region to apply the formatting function
 |      to. If the ``formatter`` argument is given in dict form but does not include
 |      all columns within the subset then these columns will have the default formatter
 |      applied. Any columns in the formatter dict excluded from the subset will
 |      be ignored.
 |      
 |      When using a ``formatter`` string the dtypes must be compatible, otherwise a
 |      `ValueError` will be raised.
 |      
 |      When instantiating a Styler, default formatting can be applied be setting the
 |      ``pandas.options``:
 |      
 |        - ``styler.format.formatter``: default None.
 |        - ``styler.format.na_rep``: default None.
 |        - ``styler.format.precision``: default 6.
 |        - ``styler.format.decimal``: default ".".
 |        - ``styler.format.thousands``: default None.
 |        - ``styler.format.escape``: default None.
 |      
 |      .. warning::
 |         `Styler.format` is ignored when using the output format `Styler.to_excel`,
 |         since Excel and Python have inherrently different formatting structures.
 |         However, it is possible to use the `number-format` pseudo CSS attribute
 |         to force Excel permissible formatting. See examples.
 |      
 |      Examples
 |      --------
 |      Using ``na_rep`` and ``precision`` with the default ``formatter``
 |      
 |      >>> df = pd.DataFrame([[np.nan, 1.0, 'A'], [2.0, np.nan, 3.0]])
 |      >>> df.style.format(na_rep='MISS', precision=3)  # doctest: +SKIP
 |              0       1       2
 |      0    MISS   1.000       A
 |      1   2.000    MISS   3.000
 |      
 |      Using a ``formatter`` specification on consistent column dtypes
 |      
 |      >>> df.style.format('{:.2f}', na_rep='MISS', subset=[0,1])  # doctest: +SKIP
 |              0      1          2
 |      0    MISS   1.00          A
 |      1    2.00   MISS   3.000000
 |      
 |      Using the default ``formatter`` for unspecified columns
 |      
 |      >>> df.style.format({0: '{:.2f}', 1: '£ {:.1f}'}, na_rep='MISS', precision=1)
 |      ...  # doctest: +SKIP
 |               0      1     2
 |      0    MISS   £ 1.0     A
 |      1    2.00    MISS   3.0
 |      
 |      Multiple ``na_rep`` or ``precision`` specifications under the default
 |      ``formatter``.
 |      
 |      >>> (df.style.format(na_rep='MISS', precision=1, subset=[0])
 |      ...     .format(na_rep='PASS', precision=2, subset=[1, 2]))  # doctest: +SKIP
 |              0      1      2
 |      0    MISS   1.00      A
 |      1     2.0   PASS   3.00
 |      
 |      Using a callable ``formatter`` function.
 |      
 |      >>> func = lambda s: 'STRING' if isinstance(s, str) else 'FLOAT'
 |      >>> df.style.format({0: '{:.1f}', 2: func}, precision=4, na_rep='MISS')
 |      ...  # doctest: +SKIP
 |              0        1        2
 |      0    MISS   1.0000   STRING
 |      1     2.0     MISS    FLOAT
 |      
 |      Using a ``formatter`` with HTML ``escape`` and ``na_rep``.
 |      
 |      >>> df = pd.DataFrame([['<div></div>', '"A&B"', None]])
 |      >>> s = df.style.format(
 |      ...     '<a href="a.com/{0}">{0}</a>', escape="html", na_rep="NA"
 |      ...     )
 |      >>> s.to_html()  # doctest: +SKIP
 |      ...
 |      <td .. ><a href="a.com/&lt;div&gt;&lt;/div&gt;">&lt;div&gt;&lt;/div&gt;</a></td>
 |      <td .. ><a href="a.com/&#34;A&amp;B&#34;">&#34;A&amp;B&#34;</a></td>
 |      <td .. >NA</td>
 |      ...
 |      
 |      Using a ``formatter`` with ``escape`` in 'latex' mode.
 |      
 |      >>> df = pd.DataFrame([["123"], ["~ ^"], ["$%#"]])
 |      >>> df.style.format("\\textbf{{{}}}", escape="latex").to_latex()
 |      ...  # doctest: +SKIP
 |      \begin{tabular}{ll}
 |       & 0 \\
 |      0 & \textbf{123} \\
 |      1 & \textbf{\textasciitilde \space \textasciicircum } \\
 |      2 & \textbf{\$\%\#} \\
 |      \end{tabular}
 |      
 |      Applying ``escape`` in 'latex-math' mode. In the example below
 |      we enter math mode using the character ``$``.
 |      
 |      >>> df = pd.DataFrame([[r"$\sum_{i=1}^{10} a_i$ a~b $\alpha \
 |      ...     = \frac{\beta}{\zeta^2}$"], ["%#^ $ \$x^2 $"]])
 |      >>> df.style.format(escape="latex-math").to_latex()
 |      ...  # doctest: +SKIP
 |      \begin{tabular}{ll}
 |       & 0 \\
 |      0 & $\sum_{i=1}^{10} a_i$ a\textasciitilde b $\alpha = \frac{\beta}{\zeta^2}$ \\
 |      1 & \%\#\textasciicircum \space $ \$x^2 $ \\
 |      \end{tabular}
 |      
 |      We can use the character ``\(`` to enter math mode and the character ``\)``
 |      to close math mode.
 |      
 |      >>> df = pd.DataFrame([[r"\(\sum_{i=1}^{10} a_i\) a~b \(\alpha \
 |      ...     = \frac{\beta}{\zeta^2}\)"], ["%#^ \( \$x^2 \)"]])
 |      >>> df.style.format(escape="latex-math").to_latex()
 |      ...  # doctest: +SKIP
 |      \begin{tabular}{ll}
 |       & 0 \\
 |      0 & \(\sum_{i=1}^{10} a_i\) a\textasciitilde b \(\alpha
 |      = \frac{\beta}{\zeta^2}\) \\
 |      1 & \%\#\textasciicircum \space \( \$x^2 \) \\
 |      \end{tabular}
 |      
 |      If we have in one DataFrame cell a combination of both shorthands
 |      for math formulas, the shorthand with the sign ``$`` will be applied.
 |      
 |      >>> df = pd.DataFrame([[r"\( x^2 \)  $x^2$"], \
 |      ...     [r"$\frac{\beta}{\zeta}$ \(\frac{\beta}{\zeta}\)"]])
 |      >>> df.style.format(escape="latex-math").to_latex()
 |      ...  # doctest: +SKIP
 |      \begin{tabular}{ll}
 |       & 0 \\
 |      0 & \textbackslash ( x\textasciicircum 2 \textbackslash )  $x^2$ \\
 |      1 & $\frac{\beta}{\zeta}$ \textbackslash (\textbackslash
 |      frac\{\textbackslash beta\}\{\textbackslash zeta\}\textbackslash ) \\
 |      \end{tabular}
 |      
 |      Pandas defines a `number-format` pseudo CSS attribute instead of the `.format`
 |      method to create `to_excel` permissible formatting. Note that semi-colons are
 |      CSS protected characters but used as separators in Excel's format string.
 |      Replace semi-colons with the section separator character (ASCII-245) when
 |      defining the formatting here.
 |      
 |      >>> df = pd.DataFrame({"A": [1, 0, -1]})
 |      >>> pseudo_css = "number-format: 0§[Red](0)§-§@;"
 |      >>> filename = "formatted_file.xlsx"
 |      >>> df.style.map(lambda v: pseudo_css).to_excel(filename) # doctest: +SKIP
 |      
 |      .. figure:: ../../_static/style/format_excel_css.png
 |  
 |  format_index(self, formatter: 'ExtFormatter | None' = None, axis: 'Axis' = 0, level: 'Level | list[Level] | None' = None, na_rep: 'str | None' = None, precision: 'int | None' = None, decimal: 'str' = '.', thousands: 'str | None' = None, escape: 'str | None' = None, hyperlinks: 'str | None' = None) -> 'StylerRenderer'
 |      Format the text display value of index labels or column headers.
 |      
 |      .. versionadded:: 1.4.0
 |      
 |      Parameters
 |      ----------
 |      formatter : str, callable, dict or None
 |          Object to define how values are displayed. See notes.
 |      axis : {0, "index", 1, "columns"}
 |          Whether to apply the formatter to the index or column headers.
 |      level : int, str, list
 |          The level(s) over which to apply the generic formatter.
 |      na_rep : str, optional
 |          Representation for missing values.
 |          If ``na_rep`` is None, no special formatting is applied.
 |      precision : int, optional
 |          Floating point precision to use for display purposes, if not determined by
 |          the specified ``formatter``.
 |      decimal : str, default "."
 |          Character used as decimal separator for floats, complex and integers.
 |      thousands : str, optional, default None
 |          Character used as thousands separator for floats, complex and integers.
 |      escape : str, optional
 |          Use 'html' to replace the characters ``&``, ``<``, ``>``, ``'``, and ``"``
 |          in cell display string with HTML-safe sequences.
 |          Use 'latex' to replace the characters ``&``, ``%``, ``$``, ``#``, ``_``,
 |          ``{``, ``}``, ``~``, ``^``, and ``\`` in the cell display string with
 |          LaTeX-safe sequences.
 |          Escaping is done before ``formatter``.
 |      hyperlinks : {"html", "latex"}, optional
 |          Convert string patterns containing https://, http://, ftp:// or www. to
 |          HTML <a> tags as clickable URL hyperlinks if "html", or LaTeX \href
 |          commands if "latex".
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.format: Format the text display value of data cells.
 |      
 |      Notes
 |      -----
 |      This method assigns a formatting function, ``formatter``, to each level label
 |      in the DataFrame's index or column headers. If ``formatter`` is ``None``,
 |      then the default formatter is used.
 |      If a callable then that function should take a label value as input and return
 |      a displayable representation, such as a string. If ``formatter`` is
 |      given as a string this is assumed to be a valid Python format specification
 |      and is wrapped to a callable as ``string.format(x)``. If a ``dict`` is given,
 |      keys should correspond to MultiIndex level numbers or names, and values should
 |      be string or callable, as above.
 |      
 |      The default formatter currently expresses floats and complex numbers with the
 |      pandas display precision unless using the ``precision`` argument here. The
 |      default formatter does not adjust the representation of missing values unless
 |      the ``na_rep`` argument is used.
 |      
 |      The ``level`` argument defines which levels of a MultiIndex to apply the
 |      method to. If the ``formatter`` argument is given in dict form but does
 |      not include all levels within the level argument then these unspecified levels
 |      will have the default formatter applied. Any levels in the formatter dict
 |      specifically excluded from the level argument will be ignored.
 |      
 |      When using a ``formatter`` string the dtypes must be compatible, otherwise a
 |      `ValueError` will be raised.
 |      
 |      .. warning::
 |         `Styler.format_index` is ignored when using the output format
 |         `Styler.to_excel`, since Excel and Python have inherrently different
 |         formatting structures.
 |         However, it is possible to use the `number-format` pseudo CSS attribute
 |         to force Excel permissible formatting. See documentation for `Styler.format`.
 |      
 |      Examples
 |      --------
 |      Using ``na_rep`` and ``precision`` with the default ``formatter``
 |      
 |      >>> df = pd.DataFrame([[1, 2, 3]], columns=[2.0, np.nan, 4.0])
 |      >>> df.style.format_index(axis=1, na_rep='MISS', precision=3)  # doctest: +SKIP
 |          2.000    MISS   4.000
 |      0       1       2       3
 |      
 |      Using a ``formatter`` specification on consistent dtypes in a level
 |      
 |      >>> df.style.format_index('{:.2f}', axis=1, na_rep='MISS')  # doctest: +SKIP
 |           2.00   MISS    4.00
 |      0       1      2       3
 |      
 |      Using the default ``formatter`` for unspecified levels
 |      
 |      >>> df = pd.DataFrame([[1, 2, 3]],
 |      ...     columns=pd.MultiIndex.from_arrays([["a", "a", "b"],[2, np.nan, 4]]))
 |      >>> df.style.format_index({0: lambda v: v.upper()}, axis=1, precision=1)
 |      ...  # doctest: +SKIP
 |                     A       B
 |            2.0    nan     4.0
 |      0       1      2       3
 |      
 |      Using a callable ``formatter`` function.
 |      
 |      >>> func = lambda s: 'STRING' if isinstance(s, str) else 'FLOAT'
 |      >>> df.style.format_index(func, axis=1, na_rep='MISS')
 |      ...  # doctest: +SKIP
 |                STRING  STRING
 |          FLOAT   MISS   FLOAT
 |      0       1      2       3
 |      
 |      Using a ``formatter`` with HTML ``escape`` and ``na_rep``.
 |      
 |      >>> df = pd.DataFrame([[1, 2, 3]], columns=['"A"', 'A&B', None])
 |      >>> s = df.style.format_index('$ {0}', axis=1, escape="html", na_rep="NA")
 |      ...  # doctest: +SKIP
 |      <th .. >$ &#34;A&#34;</th>
 |      <th .. >$ A&amp;B</th>
 |      <th .. >NA</td>
 |      ...
 |      
 |      Using a ``formatter`` with LaTeX ``escape``.
 |      
 |      >>> df = pd.DataFrame([[1, 2, 3]], columns=["123", "~", "$%#"])
 |      >>> df.style.format_index("\\textbf{{{}}}", escape="latex", axis=1).to_latex()
 |      ...  # doctest: +SKIP
 |      \begin{tabular}{lrrr}
 |      {} & {\textbf{123}} & {\textbf{\textasciitilde }} & {\textbf{\$\%\#}} \\
 |      0 & 1 & 2 & 3 \\
 |      \end{tabular}
 |  
 |  relabel_index(self, labels: 'Sequence | Index', axis: 'Axis' = 0, level: 'Level | list[Level] | None' = None) -> 'StylerRenderer'
 |      Relabel the index, or column header, keys to display a set of specified values.
 |      
 |      .. versionadded:: 1.5.0
 |      
 |      Parameters
 |      ----------
 |      labels : list-like or Index
 |          New labels to display. Must have same length as the underlying values not
 |          hidden.
 |      axis : {"index", 0, "columns", 1}
 |          Apply to the index or columns.
 |      level : int, str, list, optional
 |          The level(s) over which to apply the new labels. If `None` will apply
 |          to all levels of an Index or MultiIndex which are not hidden.
 |      
 |      Returns
 |      -------
 |      Styler
 |      
 |      See Also
 |      --------
 |      Styler.format_index: Format the text display value of index or column headers.
 |      Styler.hide: Hide the index, column headers, or specified data from display.
 |      
 |      Notes
 |      -----
 |      As part of Styler, this method allows the display of an index to be
 |      completely user-specified without affecting the underlying DataFrame data,
 |      index, or column headers. This means that the flexibility of indexing is
 |      maintained whilst the final display is customisable.
 |      
 |      Since Styler is designed to be progressively constructed with method chaining,
 |      this method is adapted to react to the **currently specified hidden elements**.
 |      This is useful because it means one does not have to specify all the new
 |      labels if the majority of an index, or column headers, have already been hidden.
 |      The following produce equivalent display (note the length of ``labels`` in
 |      each case).
 |      
 |      .. code-block:: python
 |      
 |          # relabel first, then hide
 |          df = pd.DataFrame({"col": ["a", "b", "c"]})
 |          df.style.relabel_index(["A", "B", "C"]).hide([0,1])
 |          # hide first, then relabel
 |          df = pd.DataFrame({"col": ["a", "b", "c"]})
 |          df.style.hide([0,1]).relabel_index(["C"])
 |      
 |      This method should be used, rather than :meth:`Styler.format_index`, in one of
 |      the following cases (see examples):
 |      
 |        - A specified set of labels are required which are not a function of the
 |          underlying index keys.
 |        - The function of the underlying index keys requires a counter variable,
 |          such as those available upon enumeration.
 |      
 |      Examples
 |      --------
 |      Basic use
 |      
 |      >>> df = pd.DataFrame({"col": ["a", "b", "c"]})
 |      >>> df.style.relabel_index(["A", "B", "C"])  # doctest: +SKIP
 |           col
 |      A      a
 |      B      b
 |      C      c
 |      
 |      Chaining with pre-hidden elements
 |      
 |      >>> df.style.hide([0,1]).relabel_index(["C"])  # doctest: +SKIP
 |           col
 |      C      c
 |      
 |      Using a MultiIndex
 |      
 |      >>> midx = pd.MultiIndex.from_product([[0, 1], [0, 1], [0, 1]])
 |      >>> df = pd.DataFrame({"col": list(range(8))}, index=midx)
 |      >>> styler = df.style  # doctest: +SKIP
 |                col
 |      0  0  0     0
 |            1     1
 |         1  0     2
 |            1     3
 |      1  0  0     4
 |            1     5
 |         1  0     6
 |            1     7
 |      >>> styler.hide((midx.get_level_values(0)==0)|(midx.get_level_values(1)==0))
 |      ...  # doctest: +SKIP
 |      >>> styler.hide(level=[0,1])  # doctest: +SKIP
 |      >>> styler.relabel_index(["binary6", "binary7"])  # doctest: +SKIP
 |                col
 |      binary6     6
 |      binary7     7
 |      
 |      We can also achieve the above by indexing first and then re-labeling
 |      
 |      >>> styler = df.loc[[(1,1,0), (1,1,1)]].style
 |      >>> styler.hide(level=[0,1]).relabel_index(["binary6", "binary7"])
 |      ...  # doctest: +SKIP
 |                col
 |      binary6     6
 |      binary7     7
 |      
 |      Defining a formatting function which uses an enumeration counter. Also note
 |      that the value of the index key is passed in the case of string labels so it
 |      can also be inserted into the label, using curly brackets (or double curly
 |      brackets if the string if pre-formatted),
 |      
 |      >>> df = pd.DataFrame({"samples": np.random.rand(10)})
 |      >>> styler = df.loc[np.random.randint(0,10,3)].style
 |      >>> styler.relabel_index([f"sample{i+1} ({{}})" for i in range(3)])
 |      ...  # doctest: +SKIP
 |                       samples
 |      sample1 (5)     0.315811
 |      sample2 (0)     0.495941
 |      sample3 (2)     0.067946
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from pandas.io.formats.style_render.StylerRenderer:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from pandas.io.formats.style_render.StylerRenderer:
 |  
 |  env = <jinja2.environment.Environment object>
 |  
 |  loader = <jinja2.loaders.PackageLoader object>
 |  
 |  template_html = <Template 'html.tpl'>
 |  
 |  template_html_style = <Template 'html_style.tpl'>
 |  
 |  template_html_table = <Template 'html_table.tpl'>
 |  
 |  template_latex = <Template 'latex.tpl'>
 |  
 |  template_string = <Template 'string.tpl'>

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& sub &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sub in module pandas.core.frame:

sub(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Subtraction of dataframe and other, element-wise (binary operator `sub`).
    
    Equivalent to ``dataframe - other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rsub`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& subtract &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sub in module pandas.core.frame:

sub(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Subtraction of dataframe and other, element-wise (binary operator `sub`).
    
    Equivalent to ``dataframe - other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rsub`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& sum &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method sum in module pandas.core.frame:

sum(axis: 'Axis | None' = 0, skipna: 'bool' = True, numeric_only: 'bool' = False, min_count: 'int' = 0, **kwargs) method of pandas.core.frame.DataFrame instance
    Return the sum of the values over the requested axis.
    
    This is equivalent to the method ``numpy.sum``.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        Axis for the function to be applied on.
        For `Series` this parameter is unused and defaults to 0.
    
        .. warning::
    
            The behavior of DataFrame.sum with ``axis=None`` is deprecated,
            in a future version this will reduce over both axes and return a scalar
            To retain the old behavior, pass axis=0 (or do not pass axis).
    
        .. versionadded:: 2.0.0
    
    skipna : bool, default True
        Exclude NA/null values when computing the result.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    min_count : int, default 0
        The required number of valid values to perform the operation. If fewer than
        ``min_count`` non-NA values are present the result will be NA.
    **kwargs
        Additional keyword arguments to be passed to the function.
    
    Returns
    -------
    Series or scalar
    
    See Also
    --------
    Series.sum : Return the sum.
    Series.min : Return the minimum.
    Series.max : Return the maximum.
    Series.idxmin : Return the index of the minimum.
    Series.idxmax : Return the index of the maximum.
    DataFrame.sum : Return the sum over the requested axis.
    DataFrame.min : Return the minimum over the requested axis.
    DataFrame.max : Return the maximum over the requested axis.
    DataFrame.idxmin : Return the index of the minimum over the requested axis.
    DataFrame.idxmax : Return the index of the maximum over the requested axis.
    
    Examples
    --------
    >>> idx = pd.MultiIndex.from_arrays([
    ...     ['warm', 'warm', 'cold', 'cold'],
    ...     ['dog', 'falcon', 'fish', 'spider']],
    ...     names=['blooded', 'animal'])
    >>> s = pd.Series([4, 2, 0, 8], name='legs', index=idx)
    >>> s
    blooded  animal
    warm     dog       4
             falcon    2
    cold     fish      0
             spider    8
    Name: legs, dtype: int64
    
    >>> s.sum()
    14
    
    By default, the sum of an empty or all-NA Series is ``0``.
    
    >>> pd.Series([], dtype="float64").sum()  # min_count=0 is the default
    0.0
    
    This can be controlled with the ``min_count`` parameter. For example, if
    you'd like the sum of an empty series to be NaN, pass ``min_count=1``.
    
    >>> pd.Series([], dtype="float64").sum(min_count=1)
    nan
    
    Thanks to the ``skipna`` parameter, ``min_count`` handles all-NA and
    empty series identically.
    
    >>> pd.Series([np.nan]).sum()
    0.0
    
    >>> pd.Series([np.nan]).sum(min_count=1)
    nan

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& swapaxes &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method swapaxes in module pandas.core.generic:

swapaxes(axis1: 'Axis', axis2: 'Axis', copy: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Interchange axes and swap values axes appropriately.
    
    .. deprecated:: 2.1.0
        ``swapaxes`` is deprecated and will be removed.
        Please use ``transpose`` instead.
    
    Returns
    -------
    same as input
    
    Examples
    --------
    Please see examples for :meth:`DataFrame.transpose`.

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& swaplevel &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method swaplevel in module pandas.core.frame:

swaplevel(i: 'Axis' = -2, j: 'Axis' = -1, axis: 'Axis' = 0) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Swap levels i and j in a :class:`MultiIndex`.
    
    Default is to swap the two innermost levels of the index.
    
    Parameters
    ----------
    i, j : int or str
        Levels of the indices to be swapped. Can pass level name as string.
    axis : {0 or 'index', 1 or 'columns'}, default 0
                The axis to swap levels on. 0 or 'index' for row-wise, 1 or
                'columns' for column-wise.
    
    Returns
    -------
    DataFrame
        DataFrame with levels swapped in MultiIndex.
    
    Examples
    --------
    >>> df = pd.DataFrame(
    ...     {"Grade": ["A", "B", "A", "C"]},
    ...     index=[
    ...         ["Final exam", "Final exam", "Coursework", "Coursework"],
    ...         ["History", "Geography", "History", "Geography"],
    ...         ["January", "February", "March", "April"],
    ...     ],
    ... )
    >>> df
                                        Grade
    Final exam  History     January      A
                Geography   February     B
    Coursework  History     March        A
                Geography   April        C
    
    In the following example, we will swap the levels of the indices.
    Here, we will swap the levels column-wise, but levels can be swapped row-wise
    in a similar manner. Note that column-wise is the default behaviour.
    By not supplying any arguments for i and j, we swap the last and second to
    last indices.
    
    >>> df.swaplevel()
                                        Grade
    Final exam  January     History         A
                February    Geography       B
    Coursework  March       History         A
                April       Geography       C
    
    By supplying one argument, we can choose which index to swap the last
    index with. We can for example swap the first index with the last one as
    follows.
    
    >>> df.swaplevel(0)
                                        Grade
    January     History     Final exam      A
    February    Geography   Final exam      B
    March       History     Coursework      A
    April       Geography   Coursework      C
    
    We can also define explicitly which indices we want to swap by supplying values
    for both i and j. Here, we for example swap the first and second indices.
    
    >>> df.swaplevel(0, 1)
                                        Grade
    History     Final exam  January         A
    Geography   Final exam  February        B
    History     Coursework  March           A
    Geography   Coursework  April           C

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& tail &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method tail in module pandas.core.generic:

tail(n: 'int' = 5) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return the last `n` rows.
    
    This function returns last `n` rows from the object based on
    position. It is useful for quickly verifying data, for example,
    after sorting or appending rows.
    
    For negative values of `n`, this function returns all rows except
    the first `|n|` rows, equivalent to ``df[|n|:]``.
    
    If n is larger than the number of rows, this function returns all rows.
    
    Parameters
    ----------
    n : int, default 5
        Number of rows to select.
    
    Returns
    -------
    type of caller
        The last `n` rows of the caller object.
    
    See Also
    --------
    DataFrame.head : The first `n` rows of the caller object.
    
    Examples
    --------
    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',
    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})
    >>> df
          animal
    0  alligator
    1        bee
    2     falcon
    3       lion
    4     monkey
    5     parrot
    6      shark
    7      whale
    8      zebra
    
    Viewing the last 5 lines
    
    >>> df.tail()
       animal
    4  monkey
    5  parrot
    6   shark
    7   whale
    8   zebra
    
    Viewing the last `n` lines (three in this case)
    
    >>> df.tail(3)
      animal
    6  shark
    7  whale
    8  zebra
    
    For negative values of `n`
    
    >>> df.tail(-3)
       animal
    3    lion
    4  monkey
    5  parrot
    6   shark
    7   whale
    8   zebra

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& take &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method take in module pandas.core.generic:

take(indices, axis: 'Axis' = 0, **kwargs) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return the elements in the given *positional* indices along an axis.
    
    This means that we are not indexing according to actual values in
    the index attribute of the object. We are indexing according to the
    actual position of the element in the object.
    
    Parameters
    ----------
    indices : array-like
        An array of ints indicating which positions to take.
    axis : {0 or 'index', 1 or 'columns', None}, default 0
        The axis on which to select elements. ``0`` means that we are
        selecting rows, ``1`` means that we are selecting columns.
        For `Series` this parameter is unused and defaults to 0.
    **kwargs
        For compatibility with :meth:`numpy.take`. Has no effect on the
        output.
    
    Returns
    -------
    same type as caller
        An array-like containing the elements taken from the object.
    
    See Also
    --------
    DataFrame.loc : Select a subset of a DataFrame by labels.
    DataFrame.iloc : Select a subset of a DataFrame by positions.
    numpy.take : Take elements from an array along an axis.
    
    Examples
    --------
    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),
    ...                    ('parrot', 'bird', 24.0),
    ...                    ('lion', 'mammal', 80.5),
    ...                    ('monkey', 'mammal', np.nan)],
    ...                   columns=['name', 'class', 'max_speed'],
    ...                   index=[0, 2, 3, 1])
    >>> df
         name   class  max_speed
    0  falcon    bird      389.0
    2  parrot    bird       24.0
    3    lion  mammal       80.5
    1  monkey  mammal        NaN
    
    Take elements at positions 0 and 3 along the axis 0 (default).
    
    Note how the actual indices selected (0 and 1) do not correspond to
    our selected indices 0 and 3. That's because we are selecting the 0th
    and 3rd rows, not rows whose indices equal 0 and 3.
    
    >>> df.take([0, 3])
         name   class  max_speed
    0  falcon    bird      389.0
    1  monkey  mammal        NaN
    
    Take elements at indices 1 and 2 along the axis 1 (column selection).
    
    >>> df.take([1, 2], axis=1)
        class  max_speed
    0    bird      389.0
    2    bird       24.0
    3  mammal       80.5
    1  mammal        NaN
    
    We may take elements using negative integers for positive indices,
    starting from the end of the object, just like with Python lists.
    
    >>> df.take([-1, -2])
         name   class  max_speed
    1  monkey  mammal        NaN
    3    lion  mammal       80.5

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_clipboard &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_clipboard in module pandas.core.generic:

to_clipboard(*, excel: 'bool_t' = True, sep: 'str | None' = None, **kwargs) -> 'None' method of pandas.core.frame.DataFrame instance
    Copy object to the system clipboard.
    
    Write a text representation of object to the system clipboard.
    This can be pasted into Excel, for example.
    
    Parameters
    ----------
    excel : bool, default True
        Produce output in a csv format for easy pasting into excel.
    
        - True, use the provided separator for csv pasting.
        - False, write a string representation of the object to the clipboard.
    
    sep : str, default ``'\t'``
        Field delimiter.
    **kwargs
        These parameters will be passed to DataFrame.to_csv.
    
    See Also
    --------
    DataFrame.to_csv : Write a DataFrame to a comma-separated values
        (csv) file.
    read_clipboard : Read text from clipboard and pass to read_csv.
    
    Notes
    -----
    Requirements for your platform.
    
      - Linux : `xclip`, or `xsel` (with `PyQt4` modules)
      - Windows : none
      - macOS : none
    
    This method uses the processes developed for the package `pyperclip`. A
    solution to render any output string format is given in the examples.
    
    Examples
    --------
    Copy the contents of a DataFrame to the clipboard.
    
    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])
    
    >>> df.to_clipboard(sep=',')  # doctest: +SKIP
    ... # Wrote the following to the system clipboard:
    ... # ,A,B,C
    ... # 0,1,2,3
    ... # 1,4,5,6
    
    We can omit the index by passing the keyword `index` and setting
    it to false.
    
    >>> df.to_clipboard(sep=',', index=False)  # doctest: +SKIP
    ... # Wrote the following to the system clipboard:
    ... # A,B,C
    ... # 1,2,3
    ... # 4,5,6
    
    Using the original `pyperclip` package for any string output format.
    
    .. code-block:: python
    
       import pyperclip
       html = df.style.to_html()
       pyperclip.copy(html)

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_csv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_csv in module pandas.core.generic:

to_csv(path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, sep: 'str' = ',', na_rep: 'str' = '', float_format: 'str | Callable | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | list[str]' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, mode: 'str' = 'w', encoding: 'str | None' = None, compression: 'CompressionOptions' = 'infer', quoting: 'int | None' = None, quotechar: 'str' = '"', lineterminator: 'str | None' = None, chunksize: 'int | None' = None, date_format: 'str | None' = None, doublequote: 'bool_t' = True, escapechar: 'str | None' = None, decimal: 'str' = '.', errors: 'OpenFileErrors' = 'strict', storage_options: 'StorageOptions | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Write object to a comma-separated values (csv) file.
    
    Parameters
    ----------
    path_or_buf : str, path object, file-like object, or None, default None
        String, path object (implementing os.PathLike[str]), or file-like
        object implementing a write() function. If None, the result is
        returned as a string. If a non-binary file object is passed, it should
        be opened with `newline=''`, disabling universal newlines. If a binary
        file object is passed, `mode` might need to contain a `'b'`.
    sep : str, default ','
        String of length 1. Field delimiter for the output file.
    na_rep : str, default ''
        Missing data representation.
    float_format : str, Callable, default None
        Format string for floating point numbers. If a Callable is given, it takes
        precedence over other numeric formatting parameters, like decimal.
    columns : sequence, optional
        Columns to write.
    header : bool or list of str, default True
        Write out the column names. If a list of strings is given it is
        assumed to be aliases for the column names.
    index : bool, default True
        Write row names (index).
    index_label : str or sequence, or False, default None
        Column label for index column(s) if desired. If None is given, and
        `header` and `index` are True, then the index names are used. A
        sequence should be given if the object uses MultiIndex. If
        False do not print fields for index names. Use index_label=False
        for easier importing in R.
    mode : {'w', 'x', 'a'}, default 'w'
        Forwarded to either `open(mode=)` or `fsspec.open(mode=)` to control
        the file opening. Typical values include:
    
        - 'w', truncate the file first.
        - 'x', exclusive creation, failing if the file already exists.
        - 'a', append to the end of file if it exists.
    
    encoding : str, optional
        A string representing the encoding to use in the output file,
        defaults to 'utf-8'. `encoding` is not supported if `path_or_buf`
        is a non-binary file object.
    compression : str or dict, default 'infer'
        For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is
        path-like, then detect compression from the following extensions: '.gz',
        '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
        (otherwise no compression).
        Set to ``None`` for no compression.
        Can also be a dict with key ``'method'`` set
        to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
        other key-value pairs are forwarded to
        ``zipfile.ZipFile``, ``gzip.GzipFile``,
        ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
        ``tarfile.TarFile``, respectively.
        As an example, the following could be passed for faster compression and to create
        a reproducible gzip archive:
        ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
    
        .. versionadded:: 1.5.0
            Added support for `.tar` files.
    
           May be a dict with key 'method' as compression mode
           and other entries as additional compression options if
           compression mode is 'zip'.
    
           Passing compression options as keys in dict is
           supported for compression modes 'gzip', 'bz2', 'zstd', and 'zip'.
    quoting : optional constant from csv module
        Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`
        then floats are converted to strings and thus csv.QUOTE_NONNUMERIC
        will treat them as non-numeric.
    quotechar : str, default '\"'
        String of length 1. Character used to quote fields.
    lineterminator : str, optional
        The newline character or character sequence to use in the output
        file. Defaults to `os.linesep`, which depends on the OS in which
        this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).
    
        .. versionchanged:: 1.5.0
    
            Previously was line_terminator, changed for consistency with
            read_csv and the standard library 'csv' module.
    
    chunksize : int or None
        Rows to write at a time.
    date_format : str, default None
        Format string for datetime objects.
    doublequote : bool, default True
        Control quoting of `quotechar` inside a field.
    escapechar : str, default None
        String of length 1. Character used to escape `sep` and `quotechar`
        when appropriate.
    decimal : str, default '.'
        Character recognized as decimal separator. E.g. use ',' for
        European data.
    errors : str, default 'strict'
        Specifies how encoding and decoding errors are to be handled.
        See the errors argument for :func:`open` for a full list
        of options.
    
    storage_options : dict, optional
        Extra options that make sense for a particular storage connection, e.g.
        host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
        are forwarded to ``urllib.request.Request`` as header options. For other
        URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
        forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
        details, and for more examples on storage options refer `here
        <https://pandas.pydata.org/docs/user_guide/io.html?
        highlight=storage_options#reading-writing-remote-files>`_.
    
    Returns
    -------
    None or str
        If path_or_buf is None, returns the resulting csv format as a
        string. Otherwise returns None.
    
    See Also
    --------
    read_csv : Load a CSV file into a DataFrame.
    to_excel : Write DataFrame to an Excel file.
    
    Examples
    --------
    Create 'out.csv' containing 'df' without indices
    
    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],
    ...                    'mask': ['red', 'purple'],
    ...                    'weapon': ['sai', 'bo staff']})
    >>> df.to_csv('out.csv', index=False)  # doctest: +SKIP
    
    Create 'out.zip' containing 'out.csv'
    
    >>> df.to_csv(index=False)
    'name,mask,weapon\nRaphael,red,sai\nDonatello,purple,bo staff\n'
    >>> compression_opts = dict(method='zip',
    ...                         archive_name='out.csv')  # doctest: +SKIP
    >>> df.to_csv('out.zip', index=False,
    ...           compression=compression_opts)  # doctest: +SKIP
    
    To write a csv file to a new folder or nested folder you will first
    need to create it using either Pathlib or os:
    
    >>> from pathlib import Path  # doctest: +SKIP
    >>> filepath = Path('folder/subfolder/out.csv')  # doctest: +SKIP
    >>> filepath.parent.mkdir(parents=True, exist_ok=True)  # doctest: +SKIP
    >>> df.to_csv(filepath)  # doctest: +SKIP
    
    >>> import os  # doctest: +SKIP
    >>> os.makedirs('folder/subfolder', exist_ok=True)  # doctest: +SKIP
    >>> df.to_csv('folder/subfolder/out.csv')  # doctest: +SKIP

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_dict &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_dict in module pandas.core.frame:

to_dict(orient: "Literal['dict', 'list', 'series', 'split', 'tight', 'records', 'index']" = 'dict', *, into: 'type[MutableMappingT] | MutableMappingT' = <class 'dict'>, index: 'bool' = True) -> 'MutableMappingT | list[MutableMappingT]' method of pandas.core.frame.DataFrame instance
    Convert the DataFrame to a dictionary.
    
    The type of the key-value pairs can be customized with the parameters
    (see below).
    
    Parameters
    ----------
    orient : str {'dict', 'list', 'series', 'split', 'tight', 'records', 'index'}
        Determines the type of the values of the dictionary.
    
        - 'dict' (default) : dict like {column -> {index -> value}}
        - 'list' : dict like {column -> [values]}
        - 'series' : dict like {column -> Series(values)}
        - 'split' : dict like
          {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}
        - 'tight' : dict like
          {'index' -> [index], 'columns' -> [columns], 'data' -> [values],
          'index_names' -> [index.names], 'column_names' -> [column.names]}
        - 'records' : list like
          [{column -> value}, ... , {column -> value}]
        - 'index' : dict like {index -> {column -> value}}
    
        .. versionadded:: 1.4.0
            'tight' as an allowed value for the ``orient`` argument
    
    into : class, default dict
        The collections.abc.MutableMapping subclass used for all Mappings
        in the return value.  Can be the actual class or an empty
        instance of the mapping type you want.  If you want a
        collections.defaultdict, you must pass it initialized.
    
    index : bool, default True
        Whether to include the index item (and index_names item if `orient`
        is 'tight') in the returned dictionary. Can only be ``False``
        when `orient` is 'split' or 'tight'.
    
        .. versionadded:: 2.0.0
    
    Returns
    -------
    dict, list or collections.abc.MutableMapping
        Return a collections.abc.MutableMapping object representing the
        DataFrame. The resulting transformation depends on the `orient`
        parameter.
    
    See Also
    --------
    DataFrame.from_dict: Create a DataFrame from a dictionary.
    DataFrame.to_json: Convert a DataFrame to JSON format.
    
    Examples
    --------
    >>> df = pd.DataFrame({'col1': [1, 2],
    ...                    'col2': [0.5, 0.75]},
    ...                   index=['row1', 'row2'])
    >>> df
          col1  col2
    row1     1  0.50
    row2     2  0.75
    >>> df.to_dict()
    {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}
    
    You can specify the return orientation.
    
    >>> df.to_dict('series')
    {'col1': row1    1
             row2    2
    Name: col1, dtype: int64,
    'col2': row1    0.50
            row2    0.75
    Name: col2, dtype: float64}
    
    >>> df.to_dict('split')
    {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],
     'data': [[1, 0.5], [2, 0.75]]}
    
    >>> df.to_dict('records')
    [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]
    
    >>> df.to_dict('index')
    {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}
    
    >>> df.to_dict('tight')
    {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],
     'data': [[1, 0.5], [2, 0.75]], 'index_names': [None], 'column_names': [None]}
    
    You can also specify the mapping type.
    
    >>> from collections import OrderedDict, defaultdict
    >>> df.to_dict(into=OrderedDict)
    OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),
                 ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])
    
    If you want a `defaultdict`, you need to initialize it:
    
    >>> dd = defaultdict(list)
    >>> df.to_dict('records', into=dd)
    [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),
     defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_excel &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_excel in module pandas.core.generic:

to_excel(excel_writer: 'FilePath | WriteExcelBuffer | ExcelWriter', *, sheet_name: 'str' = 'Sheet1', na_rep: 'str' = '', float_format: 'str | None' = None, columns: 'Sequence[Hashable] | None' = None, header: 'Sequence[Hashable] | bool_t' = True, index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, startrow: 'int' = 0, startcol: 'int' = 0, engine: "Literal['openpyxl', 'xlsxwriter'] | None" = None, merge_cells: 'bool_t' = True, inf_rep: 'str' = 'inf', freeze_panes: 'tuple[int, int] | None' = None, storage_options: 'StorageOptions | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'None' method of pandas.core.frame.DataFrame instance
    Write object to an Excel sheet.
    
    To write a single object to an Excel .xlsx file it is only necessary to
    specify a target file name. To write to multiple sheets it is necessary to
    create an `ExcelWriter` object with a target file name, and specify a sheet
    in the file to write to.
    
    Multiple sheets may be written to by specifying unique `sheet_name`.
    With all data written to the file it is necessary to save the changes.
    Note that creating an `ExcelWriter` object with a file name that already
    exists will result in the contents of the existing file being erased.
    
    Parameters
    ----------
    excel_writer : path-like, file-like, or ExcelWriter object
        File path or existing ExcelWriter.
    sheet_name : str, default 'Sheet1'
        Name of sheet which will contain DataFrame.
    na_rep : str, default ''
        Missing data representation.
    float_format : str, optional
        Format string for floating point numbers. For example
        ``float_format="%.2f"`` will format 0.1234 to 0.12.
    columns : sequence or list of str, optional
        Columns to write.
    header : bool or list of str, default True
        Write out the column names. If a list of string is given it is
        assumed to be aliases for the column names.
    index : bool, default True
        Write row names (index).
    index_label : str or sequence, optional
        Column label for index column(s) if desired. If not specified, and
        `header` and `index` are True, then the index names are used. A
        sequence should be given if the DataFrame uses MultiIndex.
    startrow : int, default 0
        Upper left cell row to dump data frame.
    startcol : int, default 0
        Upper left cell column to dump data frame.
    engine : str, optional
        Write engine to use, 'openpyxl' or 'xlsxwriter'. You can also set this
        via the options ``io.excel.xlsx.writer`` or
        ``io.excel.xlsm.writer``.
    
    merge_cells : bool, default True
        Write MultiIndex and Hierarchical Rows as merged cells.
    inf_rep : str, default 'inf'
        Representation for infinity (there is no native representation for
        infinity in Excel).
    freeze_panes : tuple of int (length 2), optional
        Specifies the one-based bottommost row and rightmost column that
        is to be frozen.
    storage_options : dict, optional
        Extra options that make sense for a particular storage connection, e.g.
        host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
        are forwarded to ``urllib.request.Request`` as header options. For other
        URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
        forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
        details, and for more examples on storage options refer `here
        <https://pandas.pydata.org/docs/user_guide/io.html?
        highlight=storage_options#reading-writing-remote-files>`_.
    
        .. versionadded:: 1.2.0
    engine_kwargs : dict, optional
        Arbitrary keyword arguments passed to excel engine.
    
    See Also
    --------
    to_csv : Write DataFrame to a comma-separated values (csv) file.
    ExcelWriter : Class for writing DataFrame objects into excel sheets.
    read_excel : Read an Excel file into a pandas DataFrame.
    read_csv : Read a comma-separated values (csv) file into DataFrame.
    io.formats.style.Styler.to_excel : Add styles to Excel sheet.
    
    Notes
    -----
    For compatibility with :meth:`~DataFrame.to_csv`,
    to_excel serializes lists and dicts to strings before writing.
    
    Once a workbook has been saved it is not possible to write further
    data without rewriting the whole workbook.
    
    Examples
    --------
    
    Create, write to and save a workbook:
    
    >>> df1 = pd.DataFrame([['a', 'b'], ['c', 'd']],
    ...                    index=['row 1', 'row 2'],
    ...                    columns=['col 1', 'col 2'])
    >>> df1.to_excel("output.xlsx")  # doctest: +SKIP
    
    To specify the sheet name:
    
    >>> df1.to_excel("output.xlsx",
    ...              sheet_name='Sheet_name_1')  # doctest: +SKIP
    
    If you wish to write to more than one sheet in the workbook, it is
    necessary to specify an ExcelWriter object:
    
    >>> df2 = df1.copy()
    >>> with pd.ExcelWriter('output.xlsx') as writer:  # doctest: +SKIP
    ...     df1.to_excel(writer, sheet_name='Sheet_name_1')
    ...     df2.to_excel(writer, sheet_name='Sheet_name_2')
    
    ExcelWriter can also be used to append to an existing Excel file:
    
    >>> with pd.ExcelWriter('output.xlsx',
    ...                     mode='a') as writer:  # doctest: +SKIP
    ...     df1.to_excel(writer, sheet_name='Sheet_name_3')
    
    To set the library that is used to write the Excel file,
    you can pass the `engine` keyword (the default engine is
    automatically chosen depending on the file extension):
    
    >>> df1.to_excel('output1.xlsx', engine='xlsxwriter')  # doctest: +SKIP

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_feather &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_feather in module pandas.core.frame:

to_feather(path: 'FilePath | WriteBuffer[bytes]', **kwargs) -> 'None' method of pandas.core.frame.DataFrame instance
    Write a DataFrame to the binary Feather format.
    
    Parameters
    ----------
    path : str, path object, file-like object
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a binary ``write()`` function. If a string or a path,
        it will be used as Root Directory path when writing a partitioned dataset.
    **kwargs :
        Additional keywords passed to :func:`pyarrow.feather.write_feather`.
        This includes the `compression`, `compression_level`, `chunksize`
        and `version` keywords.
    
    Notes
    -----
    This function writes the dataframe as a `feather file
    <https://arrow.apache.org/docs/python/feather.html>`_. Requires a default
    index. For saving the DataFrame with your custom index use a method that
    supports custom indices e.g. `to_parquet`.
    
    Examples
    --------
    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]])
    >>> df.to_feather("file.feather")  # doctest: +SKIP

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_gbq &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_gbq in module pandas.core.frame:

to_gbq(destination_table: 'str', *, project_id: 'str | None' = None, chunksize: 'int | None' = None, reauth: 'bool' = False, if_exists: 'ToGbqIfexist' = 'fail', auth_local_webserver: 'bool' = True, table_schema: 'list[dict[str, str]] | None' = None, location: 'str | None' = None, progress_bar: 'bool' = True, credentials=None) -> 'None' method of pandas.core.frame.DataFrame instance
    Write a DataFrame to a Google BigQuery table.
    
    .. deprecated:: 2.2.0
    
       Please use ``pandas_gbq.to_gbq`` instead.
    
    This function requires the `pandas-gbq package
    <https://pandas-gbq.readthedocs.io>`__.
    
    See the `How to authenticate with Google BigQuery
    <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__
    guide for authentication instructions.
    
    Parameters
    ----------
    destination_table : str
        Name of table to be written, in the form ``dataset.tablename``.
    project_id : str, optional
        Google BigQuery Account project ID. Optional when available from
        the environment.
    chunksize : int, optional
        Number of rows to be inserted in each chunk from the dataframe.
        Set to ``None`` to load the whole dataframe at once.
    reauth : bool, default False
        Force Google BigQuery to re-authenticate the user. This is useful
        if multiple accounts are used.
    if_exists : str, default 'fail'
        Behavior when the destination table exists. Value can be one of:
    
        ``'fail'``
            If table exists raise pandas_gbq.gbq.TableCreationError.
        ``'replace'``
            If table exists, drop it, recreate it, and insert data.
        ``'append'``
            If table exists, insert data. Create if does not exist.
    auth_local_webserver : bool, default True
        Use the `local webserver flow`_ instead of the `console flow`_
        when getting user credentials.
    
        .. _local webserver flow:
            https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server
        .. _console flow:
            https://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console
    
        *New in version 0.2.0 of pandas-gbq*.
    
        .. versionchanged:: 1.5.0
           Default value is changed to ``True``. Google has deprecated the
           ``auth_local_webserver = False`` `"out of band" (copy-paste)
           flow
           <https://developers.googleblog.com/2022/02/making-oauth-flows-safer.html?m=1#disallowed-oob>`_.
    table_schema : list of dicts, optional
        List of BigQuery table fields to which according DataFrame
        columns conform to, e.g. ``[{'name': 'col1', 'type':
        'STRING'},...]``. If schema is not provided, it will be
        generated according to dtypes of DataFrame columns. See
        BigQuery API documentation on available names of a field.
    
        *New in version 0.3.1 of pandas-gbq*.
    location : str, optional
        Location where the load job should run. See the `BigQuery locations
        documentation
        <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a
        list of available locations. The location must match that of the
        target dataset.
    
        *New in version 0.5.0 of pandas-gbq*.
    progress_bar : bool, default True
        Use the library `tqdm` to show the progress bar for the upload,
        chunk by chunk.
    
        *New in version 0.5.0 of pandas-gbq*.
    credentials : google.auth.credentials.Credentials, optional
        Credentials for accessing Google APIs. Use this parameter to
        override default credentials, such as to use Compute Engine
        :class:`google.auth.compute_engine.Credentials` or Service
        Account :class:`google.oauth2.service_account.Credentials`
        directly.
    
        *New in version 0.8.0 of pandas-gbq*.
    
    See Also
    --------
    pandas_gbq.to_gbq : This function in the pandas-gbq library.
    read_gbq : Read a DataFrame from Google BigQuery.
    
    Examples
    --------
    Example taken from `Google BigQuery documentation
    <https://cloud.google.com/bigquery/docs/samples/bigquery-pandas-gbq-to-gbq-simple>`_
    
    >>> project_id = "my-project"
    >>> table_id = 'my_dataset.my_table'
    >>> df = pd.DataFrame({
    ...                   "my_string": ["a", "b", "c"],
    ...                   "my_int64": [1, 2, 3],
    ...                   "my_float64": [4.0, 5.0, 6.0],
    ...                   "my_bool1": [True, False, True],
    ...                   "my_bool2": [False, True, False],
    ...                   "my_dates": pd.date_range("now", periods=3),
    ...                   }
    ...                   )
    
    >>> df.to_gbq(table_id, project_id=project_id)  # doctest: +SKIP

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_hdf &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_hdf in module pandas.core.generic:

to_hdf(path_or_buf: 'FilePath | HDFStore', *, key: 'str', mode: "Literal['a', 'w', 'r+']" = 'a', complevel: 'int | None' = None, complib: "Literal['zlib', 'lzo', 'bzip2', 'blosc'] | None" = None, append: 'bool_t' = False, format: "Literal['fixed', 'table'] | None" = None, index: 'bool_t' = True, min_itemsize: 'int | dict[str, int] | None' = None, nan_rep=None, dropna: 'bool_t | None' = None, data_columns: 'Literal[True] | list[str] | None' = None, errors: 'OpenFileErrors' = 'strict', encoding: 'str' = 'UTF-8') -> 'None' method of pandas.core.frame.DataFrame instance
    Write the contained data to an HDF5 file using HDFStore.
    
    Hierarchical Data Format (HDF) is self-describing, allowing an
    application to interpret the structure and contents of a file with
    no outside information. One HDF file can hold a mix of related objects
    which can be accessed as a group or as individual objects.
    
    In order to add another DataFrame or Series to an existing HDF file
    please use append mode and a different a key.
    
    .. warning::
    
       One can store a subclass of ``DataFrame`` or ``Series`` to HDF5,
       but the type of the subclass is lost upon storing.
    
    For more information see the :ref:`user guide <io.hdf5>`.
    
    Parameters
    ----------
    path_or_buf : str or pandas.HDFStore
        File path or HDFStore object.
    key : str
        Identifier for the group in the store.
    mode : {'a', 'w', 'r+'}, default 'a'
        Mode to open file:
    
        - 'w': write, a new file is created (an existing file with
          the same name would be deleted).
        - 'a': append, an existing file is opened for reading and
          writing, and if the file does not exist it is created.
        - 'r+': similar to 'a', but the file must already exist.
    complevel : {0-9}, default None
        Specifies a compression level for data.
        A value of 0 or None disables compression.
    complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'
        Specifies the compression library to be used.
        These additional compressors for Blosc are supported
        (default if no compressor specified: 'blosc:blosclz'):
        {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',
        'blosc:zlib', 'blosc:zstd'}.
        Specifying a compression library which is not available issues
        a ValueError.
    append : bool, default False
        For Table formats, append the input data to the existing.
    format : {'fixed', 'table', None}, default 'fixed'
        Possible values:
    
        - 'fixed': Fixed format. Fast writing/reading. Not-appendable,
          nor searchable.
        - 'table': Table format. Write as a PyTables Table structure
          which may perform worse but allow more flexible operations
          like searching / selecting subsets of the data.
        - If None, pd.get_option('io.hdf.default_format') is checked,
          followed by fallback to "fixed".
    index : bool, default True
        Write DataFrame index as a column.
    min_itemsize : dict or int, optional
        Map column names to minimum string sizes for columns.
    nan_rep : Any, optional
        How to represent null values as str.
        Not allowed with append=True.
    dropna : bool, default False, optional
        Remove missing values.
    data_columns : list of columns or True, optional
        List of columns to create as indexed data columns for on-disk
        queries, or True to use all columns. By default only the axes
        of the object are indexed. See
        :ref:`Query via data columns<io.hdf5-query-data-columns>`. for
        more information.
        Applicable only to format='table'.
    errors : str, default 'strict'
        Specifies how encoding and decoding errors are to be handled.
        See the errors argument for :func:`open` for a full list
        of options.
    encoding : str, default "UTF-8"
    
    See Also
    --------
    read_hdf : Read from HDF file.
    DataFrame.to_orc : Write a DataFrame to the binary orc format.
    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
    DataFrame.to_sql : Write to a SQL table.
    DataFrame.to_feather : Write out feather-format for DataFrames.
    DataFrame.to_csv : Write out to a csv file.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},
    ...                   index=['a', 'b', 'c'])  # doctest: +SKIP
    >>> df.to_hdf('data.h5', key='df', mode='w')  # doctest: +SKIP
    
    We can add another object to the same file:
    
    >>> s = pd.Series([1, 2, 3, 4])  # doctest: +SKIP
    >>> s.to_hdf('data.h5', key='s')  # doctest: +SKIP
    
    Reading from HDF file:
    
    >>> pd.read_hdf('data.h5', 'df')  # doctest: +SKIP
    A  B
    a  1  4
    b  2  5
    c  3  6
    >>> pd.read_hdf('data.h5', 's')  # doctest: +SKIP
    0    1
    1    2
    2    3
    3    4
    dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_html &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_html in module pandas.core.frame:

to_html(buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'ColspaceArgType | None' = None, header: 'bool' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool | str' = False, decimal: 'str' = '.', bold_rows: 'bool' = True, classes: 'str | list | tuple | None' = None, escape: 'bool' = True, notebook: 'bool' = False, border: 'int | bool | None' = None, table_id: 'str | None' = None, render_links: 'bool' = False, encoding: 'str | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Render a DataFrame as an HTML table.
    
    Parameters
    ----------
    buf : str, Path or StringIO-like, optional, default None
        Buffer to write to. If None, the output is returned as a string.
    columns : array-like, optional, default None
        The subset of columns to write. Writes all columns by default.
    col_space : str or int, list or dict of int or str, optional
        The minimum width of each column in CSS length units.  An int is assumed to be px units..
    header : bool, optional
        Whether to print column labels, default True.
    index : bool, optional, default True
        Whether to print index (row) labels.
    na_rep : str, optional, default 'NaN'
        String representation of ``NaN`` to use.
    formatters : list, tuple or dict of one-param. functions, optional
        Formatter functions to apply to columns' elements by position or
        name.
        The result of each function must be a unicode string.
        List/tuple must be of length equal to the number of columns.
    float_format : one-parameter function, optional, default None
        Formatter function to apply to columns' elements if they are
        floats. This function must return a unicode string and will be
        applied only to the non-``NaN`` elements, with ``NaN`` being
        handled by ``na_rep``.
    sparsify : bool, optional, default True
        Set to False for a DataFrame with a hierarchical index to print
        every multiindex key at each row.
    index_names : bool, optional, default True
        Prints the names of the indexes.
    justify : str, default None
        How to justify the column labels. If None uses the option from
        the print configuration (controlled by set_option), 'right' out
        of the box. Valid values are
    
        * left
        * right
        * center
        * justify
        * justify-all
        * start
        * end
        * inherit
        * match-parent
        * initial
        * unset.
    max_rows : int, optional
        Maximum number of rows to display in the console.
    max_cols : int, optional
        Maximum number of columns to display in the console.
    show_dimensions : bool, default False
        Display DataFrame dimensions (number of rows by number of columns).
    decimal : str, default '.'
        Character recognized as decimal separator, e.g. ',' in Europe.
    
    bold_rows : bool, default True
        Make the row labels bold in the output.
    classes : str or list or tuple, default None
        CSS class(es) to apply to the resulting html table.
    escape : bool, default True
        Convert the characters <, >, and & to HTML-safe sequences.
    notebook : {True, False}, default False
        Whether the generated HTML is for IPython Notebook.
    border : int
        A ``border=border`` attribute is included in the opening
        `<table>` tag. Default ``pd.options.display.html.border``.
    table_id : str, optional
        A css id is included in the opening `<table>` tag if specified.
    render_links : bool, default False
        Convert URLs to HTML links.
    encoding : str, default "utf-8"
        Set character encoding.
    
    Returns
    -------
    str or None
        If buf is None, returns the result as a string. Otherwise returns
        None.
    
    See Also
    --------
    to_string : Convert DataFrame to a string.
    
    Examples
    --------
    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})
    >>> html_string = '''<table border="1" class="dataframe">
    ...   <thead>
    ...     <tr style="text-align: right;">
    ...       <th></th>
    ...       <th>col1</th>
    ...       <th>col2</th>
    ...     </tr>
    ...   </thead>
    ...   <tbody>
    ...     <tr>
    ...       <th>0</th>
    ...       <td>1</td>
    ...       <td>4</td>
    ...     </tr>
    ...     <tr>
    ...       <th>1</th>
    ...       <td>2</td>
    ...       <td>3</td>
    ...     </tr>
    ...   </tbody>
    ... </table>'''
    >>> assert html_string == df.to_html()

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_json &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_json in module pandas.core.generic:

to_json(path_or_buf: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, orient: "Literal['split', 'records', 'index', 'table', 'columns', 'values'] | None" = None, date_format: 'str | None' = None, double_precision: 'int' = 10, force_ascii: 'bool_t' = True, date_unit: 'TimeUnit' = 'ms', default_handler: 'Callable[[Any], JSONSerializable] | None' = None, lines: 'bool_t' = False, compression: 'CompressionOptions' = 'infer', index: 'bool_t | None' = None, indent: 'int | None' = None, storage_options: 'StorageOptions | None' = None, mode: "Literal['a', 'w']" = 'w') -> 'str | None' method of pandas.core.frame.DataFrame instance
    Convert the object to a JSON string.
    
    Note NaN's and None will be converted to null and datetime objects
    will be converted to UNIX timestamps.
    
    Parameters
    ----------
    path_or_buf : str, path object, file-like object, or None, default None
        String, path object (implementing os.PathLike[str]), or file-like
        object implementing a write() function. If None, the result is
        returned as a string.
    orient : str
        Indication of expected JSON string format.
    
        * Series:
    
            - default is 'index'
            - allowed values are: {'split', 'records', 'index', 'table'}.
    
        * DataFrame:
    
            - default is 'columns'
            - allowed values are: {'split', 'records', 'index', 'columns',
              'values', 'table'}.
    
        * The format of the JSON string:
    
            - 'split' : dict like {'index' -> [index], 'columns' -> [columns],
              'data' -> [values]}
            - 'records' : list like [{column -> value}, ... , {column -> value}]
            - 'index' : dict like {index -> {column -> value}}
            - 'columns' : dict like {column -> {index -> value}}
            - 'values' : just the values array
            - 'table' : dict like {'schema': {schema}, 'data': {data}}
    
            Describing the data, where data component is like ``orient='records'``.
    
    date_format : {None, 'epoch', 'iso'}
        Type of date conversion. 'epoch' = epoch milliseconds,
        'iso' = ISO8601. The default depends on the `orient`. For
        ``orient='table'``, the default is 'iso'. For all other orients,
        the default is 'epoch'.
    double_precision : int, default 10
        The number of decimal places to use when encoding
        floating point values. The possible maximal value is 15.
        Passing double_precision greater than 15 will raise a ValueError.
    force_ascii : bool, default True
        Force encoded string to be ASCII.
    date_unit : str, default 'ms' (milliseconds)
        The time unit to encode to, governs timestamp and ISO8601
        precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,
        microsecond, and nanosecond respectively.
    default_handler : callable, default None
        Handler to call if object cannot otherwise be converted to a
        suitable format for JSON. Should receive a single argument which is
        the object to convert and return a serialisable object.
    lines : bool, default False
        If 'orient' is 'records' write out line-delimited json format. Will
        throw ValueError if incorrect 'orient' since others are not
        list-like.
    compression : str or dict, default 'infer'
        For on-the-fly compression of the output data. If 'infer' and 'path_or_buf' is
        path-like, then detect compression from the following extensions: '.gz',
        '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
        (otherwise no compression).
        Set to ``None`` for no compression.
        Can also be a dict with key ``'method'`` set
        to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
        other key-value pairs are forwarded to
        ``zipfile.ZipFile``, ``gzip.GzipFile``,
        ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
        ``tarfile.TarFile``, respectively.
        As an example, the following could be passed for faster compression and to create
        a reproducible gzip archive:
        ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
    
        .. versionadded:: 1.5.0
            Added support for `.tar` files.
    
        .. versionchanged:: 1.4.0 Zstandard support.
    
    index : bool or None, default None
        The index is only used when 'orient' is 'split', 'index', 'column',
        or 'table'. Of these, 'index' and 'column' do not support
        `index=False`.
    
    indent : int, optional
       Length of whitespace used to indent each record.
    
    storage_options : dict, optional
        Extra options that make sense for a particular storage connection, e.g.
        host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
        are forwarded to ``urllib.request.Request`` as header options. For other
        URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
        forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
        details, and for more examples on storage options refer `here
        <https://pandas.pydata.org/docs/user_guide/io.html?
        highlight=storage_options#reading-writing-remote-files>`_.
    
    mode : str, default 'w' (writing)
        Specify the IO mode for output when supplying a path_or_buf.
        Accepted args are 'w' (writing) and 'a' (append) only.
        mode='a' is only supported when lines is True and orient is 'records'.
    
    Returns
    -------
    None or str
        If path_or_buf is None, returns the resulting json format as a
        string. Otherwise returns None.
    
    See Also
    --------
    read_json : Convert a JSON string to pandas object.
    
    Notes
    -----
    The behavior of ``indent=0`` varies from the stdlib, which does not
    indent the output but does insert newlines. Currently, ``indent=0``
    and the default ``indent=None`` are equivalent in pandas, though this
    may change in a future release.
    
    ``orient='table'`` contains a 'pandas_version' field under 'schema'.
    This stores the version of `pandas` used in the latest revision of the
    schema.
    
    Examples
    --------
    >>> from json import loads, dumps
    >>> df = pd.DataFrame(
    ...     [["a", "b"], ["c", "d"]],
    ...     index=["row 1", "row 2"],
    ...     columns=["col 1", "col 2"],
    ... )
    
    >>> result = df.to_json(orient="split")
    >>> parsed = loads(result)
    >>> dumps(parsed, indent=4)  # doctest: +SKIP
    {
        "columns": [
            "col 1",
            "col 2"
        ],
        "index": [
            "row 1",
            "row 2"
        ],
        "data": [
            [
                "a",
                "b"
            ],
            [
                "c",
                "d"
            ]
        ]
    }
    
    Encoding/decoding a Dataframe using ``'records'`` formatted JSON.
    Note that index labels are not preserved with this encoding.
    
    >>> result = df.to_json(orient="records")
    >>> parsed = loads(result)
    >>> dumps(parsed, indent=4)  # doctest: +SKIP
    [
        {
            "col 1": "a",
            "col 2": "b"
        },
        {
            "col 1": "c",
            "col 2": "d"
        }
    ]
    
    Encoding/decoding a Dataframe using ``'index'`` formatted JSON:
    
    >>> result = df.to_json(orient="index")
    >>> parsed = loads(result)
    >>> dumps(parsed, indent=4)  # doctest: +SKIP
    {
        "row 1": {
            "col 1": "a",
            "col 2": "b"
        },
        "row 2": {
            "col 1": "c",
            "col 2": "d"
        }
    }
    
    Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:
    
    >>> result = df.to_json(orient="columns")
    >>> parsed = loads(result)
    >>> dumps(parsed, indent=4)  # doctest: +SKIP
    {
        "col 1": {
            "row 1": "a",
            "row 2": "c"
        },
        "col 2": {
            "row 1": "b",
            "row 2": "d"
        }
    }
    
    Encoding/decoding a Dataframe using ``'values'`` formatted JSON:
    
    >>> result = df.to_json(orient="values")
    >>> parsed = loads(result)
    >>> dumps(parsed, indent=4)  # doctest: +SKIP
    [
        [
            "a",
            "b"
        ],
        [
            "c",
            "d"
        ]
    ]
    
    Encoding with Table Schema:
    
    >>> result = df.to_json(orient="table")
    >>> parsed = loads(result)
    >>> dumps(parsed, indent=4)  # doctest: +SKIP
    {
        "schema": {
            "fields": [
                {
                    "name": "index",
                    "type": "string"
                },
                {
                    "name": "col 1",
                    "type": "string"
                },
                {
                    "name": "col 2",
                    "type": "string"
                }
            ],
            "primaryKey": [
                "index"
            ],
            "pandas_version": "1.4.0"
        },
        "data": [
            {
                "index": "row 1",
                "col 1": "a",
                "col 2": "b"
            },
            {
                "index": "row 2",
                "col 1": "c",
                "col 2": "d"
            }
        ]
    }

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_latex &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_latex in module pandas.core.generic:

to_latex(buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Sequence[Hashable] | None' = None, header: 'bool_t | SequenceNotStr[str]' = True, index: 'bool_t' = True, na_rep: 'str' = 'NaN', formatters: 'FormattersType | None' = None, float_format: 'FloatFormatType | None' = None, sparsify: 'bool_t | None' = None, index_names: 'bool_t' = True, bold_rows: 'bool_t' = False, column_format: 'str | None' = None, longtable: 'bool_t | None' = None, escape: 'bool_t | None' = None, encoding: 'str | None' = None, decimal: 'str' = '.', multicolumn: 'bool_t | None' = None, multicolumn_format: 'str | None' = None, multirow: 'bool_t | None' = None, caption: 'str | tuple[str, str] | None' = None, label: 'str | None' = None, position: 'str | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Render object to a LaTeX tabular, longtable, or nested table.
    
    Requires ``\usepackage{{booktabs}}``.  The output can be copy/pasted
    into a main LaTeX document or read from an external file
    with ``\input{{table.tex}}``.
    
    .. versionchanged:: 2.0.0
       Refactored to use the Styler implementation via jinja2 templating.
    
    Parameters
    ----------
    buf : str, Path or StringIO-like, optional, default None
        Buffer to write to. If None, the output is returned as a string.
    columns : list of label, optional
        The subset of columns to write. Writes all columns by default.
    header : bool or list of str, default True
        Write out the column names. If a list of strings is given,
        it is assumed to be aliases for the column names.
    index : bool, default True
        Write row names (index).
    na_rep : str, default 'NaN'
        Missing data representation.
    formatters : list of functions or dict of {{str: function}}, optional
        Formatter functions to apply to columns' elements by position or
        name. The result of each function must be a unicode string.
        List must be of length equal to the number of columns.
    float_format : one-parameter function or str, optional, default None
        Formatter for floating point numbers. For example
        ``float_format="%.2f"`` and ``float_format="{{:0.2f}}".format`` will
        both result in 0.1234 being formatted as 0.12.
    sparsify : bool, optional
        Set to False for a DataFrame with a hierarchical index to print
        every multiindex key at each row. By default, the value will be
        read from the config module.
    index_names : bool, default True
        Prints the names of the indexes.
    bold_rows : bool, default False
        Make the row labels bold in the output.
    column_format : str, optional
        The columns format as specified in `LaTeX table format
        <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3
        columns. By default, 'l' will be used for all columns except
        columns of numbers, which default to 'r'.
    longtable : bool, optional
        Use a longtable environment instead of tabular. Requires
        adding a \usepackage{{longtable}} to your LaTeX preamble.
        By default, the value will be read from the pandas config
        module, and set to `True` if the option ``styler.latex.environment`` is
        `"longtable"`.
    
        .. versionchanged:: 2.0.0
           The pandas option affecting this argument has changed.
    escape : bool, optional
        By default, the value will be read from the pandas config
        module and set to `True` if the option ``styler.format.escape`` is
        `"latex"`. When set to False prevents from escaping latex special
        characters in column names.
    
        .. versionchanged:: 2.0.0
           The pandas option affecting this argument has changed, as has the
           default value to `False`.
    encoding : str, optional
        A string representing the encoding to use in the output file,
        defaults to 'utf-8'.
    decimal : str, default '.'
        Character recognized as decimal separator, e.g. ',' in Europe.
    multicolumn : bool, default True
        Use \multicolumn to enhance MultiIndex columns.
        The default will be read from the config module, and is set
        as the option ``styler.sparse.columns``.
    
        .. versionchanged:: 2.0.0
           The pandas option affecting this argument has changed.
    multicolumn_format : str, default 'r'
        The alignment for multicolumns, similar to `column_format`
        The default will be read from the config module, and is set as the option
        ``styler.latex.multicol_align``.
    
        .. versionchanged:: 2.0.0
           The pandas option affecting this argument has changed, as has the
           default value to "r".
    multirow : bool, default True
        Use \multirow to enhance MultiIndex rows. Requires adding a
        \usepackage{{multirow}} to your LaTeX preamble. Will print
        centered labels (instead of top-aligned) across the contained
        rows, separating groups via clines. The default will be read
        from the pandas config module, and is set as the option
        ``styler.sparse.index``.
    
        .. versionchanged:: 2.0.0
           The pandas option affecting this argument has changed, as has the
           default value to `True`.
    caption : str or tuple, optional
        Tuple (full_caption, short_caption),
        which results in ``\caption[short_caption]{{full_caption}}``;
        if a single string is passed, no short caption will be set.
    label : str, optional
        The LaTeX label to be placed inside ``\label{{}}`` in the output.
        This is used with ``\ref{{}}`` in the main ``.tex`` file.
    
    position : str, optional
        The LaTeX positional argument for tables, to be placed after
        ``\begin{{}}`` in the output.
    
    Returns
    -------
    str or None
        If buf is None, returns the result as a string. Otherwise returns None.
    
    See Also
    --------
    io.formats.style.Styler.to_latex : Render a DataFrame to LaTeX
        with conditional formatting.
    DataFrame.to_string : Render a DataFrame to a console-friendly
        tabular output.
    DataFrame.to_html : Render a DataFrame as an HTML table.
    
    Notes
    -----
    As of v2.0.0 this method has changed to use the Styler implementation as
    part of :meth:`.Styler.to_latex` via ``jinja2`` templating. This means
    that ``jinja2`` is a requirement, and needs to be installed, for this method
    to function. It is advised that users switch to using Styler, since that
    implementation is more frequently updated and contains much more
    flexibility with the output.
    
    Examples
    --------
    Convert a general DataFrame to LaTeX with formatting:
    
    >>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],
    ...                        age=[26, 45],
    ...                        height=[181.23, 177.65]))
    >>> print(df.to_latex(index=False,
    ...                   formatters={"name": str.upper},
    ...                   float_format="{:.1f}".format,
    ... ))  # doctest: +SKIP
    \begin{tabular}{lrr}
    \toprule
    name & age & height \\
    \midrule
    RAPHAEL & 26 & 181.2 \\
    DONATELLO & 45 & 177.7 \\
    \bottomrule
    \end{tabular}

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_markdown &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_markdown in module pandas.core.frame:

to_markdown(buf: 'FilePath | WriteBuffer[str] | None' = None, *, mode: 'str' = 'wt', index: 'bool' = True, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Print DataFrame in Markdown-friendly format.
    
    Parameters
    ----------
    buf : str, Path or StringIO-like, optional, default None
        Buffer to write to. If None, the output is returned as a string.
    mode : str, optional
        Mode in which file is opened, "wt" by default.
    index : bool, optional, default True
        Add index (row) labels.
    
    storage_options : dict, optional
        Extra options that make sense for a particular storage connection, e.g.
        host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
        are forwarded to ``urllib.request.Request`` as header options. For other
        URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
        forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
        details, and for more examples on storage options refer `here
        <https://pandas.pydata.org/docs/user_guide/io.html?
        highlight=storage_options#reading-writing-remote-files>`_.
    
    **kwargs
        These parameters will be passed to `tabulate                 <https://pypi.org/project/tabulate>`_.
    
    Returns
    -------
    str
        DataFrame in Markdown-friendly format.
    
    Notes
    -----
    Requires the `tabulate <https://pypi.org/project/tabulate>`_ package.
    
    Examples
            --------
            >>> df = pd.DataFrame(
            ...     data={"animal_1": ["elk", "pig"], "animal_2": ["dog", "quetzal"]}
            ... )
            >>> print(df.to_markdown())
            |    | animal_1   | animal_2   |
            |---:|:-----------|:-----------|
            |  0 | elk        | dog        |
            |  1 | pig        | quetzal    |
    
            Output markdown with a tabulate option.
    
            >>> print(df.to_markdown(tablefmt="grid"))
            +----+------------+------------+
            |    | animal_1   | animal_2   |
            +====+============+============+
            |  0 | elk        | dog        |
            +----+------------+------------+
            |  1 | pig        | quetzal    |
            +----+------------+------------+

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_numpy &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_numpy in module pandas.core.frame:

to_numpy(dtype: 'npt.DTypeLike | None' = None, copy: 'bool' = False, na_value: 'object' = <no_default>) -> 'np.ndarray' method of pandas.core.frame.DataFrame instance
    Convert the DataFrame to a NumPy array.
    
    By default, the dtype of the returned array will be the common NumPy
    dtype of all types in the DataFrame. For example, if the dtypes are
    ``float16`` and ``float32``, the results dtype will be ``float32``.
    This may require copying data and coercing values, which may be
    expensive.
    
    Parameters
    ----------
    dtype : str or numpy.dtype, optional
        The dtype to pass to :meth:`numpy.asarray`.
    copy : bool, default False
        Whether to ensure that the returned value is not a view on
        another array. Note that ``copy=False`` does not *ensure* that
        ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that
        a copy is made, even if not strictly necessary.
    na_value : Any, optional
        The value to use for missing values. The default value depends
        on `dtype` and the dtypes of the DataFrame columns.
    
    Returns
    -------
    numpy.ndarray
    
    See Also
    --------
    Series.to_numpy : Similar method for Series.
    
    Examples
    --------
    >>> pd.DataFrame({"A": [1, 2], "B": [3, 4]}).to_numpy()
    array([[1, 3],
           [2, 4]])
    
    With heterogeneous data, the lowest common type will have to
    be used.
    
    >>> df = pd.DataFrame({"A": [1, 2], "B": [3.0, 4.5]})
    >>> df.to_numpy()
    array([[1. , 3. ],
           [2. , 4.5]])
    
    For a mix of numeric and non-numeric types, the output array will
    have object dtype.
    
    >>> df['C'] = pd.date_range('2000', periods=2)
    >>> df.to_numpy()
    array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],
           [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_orc &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_orc in module pandas.core.frame:

to_orc(path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: "Literal['pyarrow']" = 'pyarrow', index: 'bool | None' = None, engine_kwargs: 'dict[str, Any] | None' = None) -> 'bytes | None' method of pandas.core.frame.DataFrame instance
    Write a DataFrame to the ORC format.
    
    .. versionadded:: 1.5.0
    
    Parameters
    ----------
    path : str, file-like object or None, default None
        If a string, it will be used as Root Directory path
        when writing a partitioned dataset. By file-like object,
        we refer to objects with a write() method, such as a file handle
        (e.g. via builtin open function). If path is None,
        a bytes object is returned.
    engine : {'pyarrow'}, default 'pyarrow'
        ORC library to use.
    index : bool, optional
        If ``True``, include the dataframe's index(es) in the file output.
        If ``False``, they will not be written to the file.
        If ``None``, similar to ``infer`` the dataframe's index(es)
        will be saved. However, instead of being saved as values,
        the RangeIndex will be stored as a range in the metadata so it
        doesn't require much space and is faster. Other indexes will
        be included as columns in the file output.
    engine_kwargs : dict[str, Any] or None, default None
        Additional keyword arguments passed to :func:`pyarrow.orc.write_table`.
    
    Returns
    -------
    bytes if no path argument is provided else None
    
    Raises
    ------
    NotImplementedError
        Dtype of one or more columns is category, unsigned integers, interval,
        period or sparse.
    ValueError
        engine is not pyarrow.
    
    See Also
    --------
    read_orc : Read a ORC file.
    DataFrame.to_parquet : Write a parquet file.
    DataFrame.to_csv : Write a csv file.
    DataFrame.to_sql : Write to a sql table.
    DataFrame.to_hdf : Write to hdf.
    
    Notes
    -----
    * Before using this function you should read the :ref:`user guide about
      ORC <io.orc>` and :ref:`install optional dependencies <install.warn_orc>`.
    * This function requires `pyarrow <https://arrow.apache.org/docs/python/>`_
      library.
    * For supported dtypes please refer to `supported ORC features in Arrow
      <https://arrow.apache.org/docs/cpp/orc.html#data-types>`__.
    * Currently timezones in datetime columns are not preserved when a
      dataframe is converted into ORC files.
    
    Examples
    --------
    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [4, 3]})
    >>> df.to_orc('df.orc')  # doctest: +SKIP
    >>> pd.read_orc('df.orc')  # doctest: +SKIP
       col1  col2
    0     1     4
    1     2     3
    
    If you want to get a buffer to the orc content you can write it to io.BytesIO
    
    >>> import io
    >>> b = io.BytesIO(df.to_orc())  # doctest: +SKIP
    >>> b.seek(0)  # doctest: +SKIP
    0
    >>> content = b.read()  # doctest: +SKIP

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_parquet &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_parquet in module pandas.core.frame:

to_parquet(path: 'FilePath | WriteBuffer[bytes] | None' = None, *, engine: "Literal['auto', 'pyarrow', 'fastparquet']" = 'auto', compression: 'str | None' = 'snappy', index: 'bool | None' = None, partition_cols: 'list[str] | None' = None, storage_options: 'StorageOptions | None' = None, **kwargs) -> 'bytes | None' method of pandas.core.frame.DataFrame instance
    Write a DataFrame to the binary parquet format.
    
    This function writes the dataframe as a `parquet file
    <https://parquet.apache.org/>`_. You can choose different parquet
    backends, and have the option of compression. See
    :ref:`the user guide <io.parquet>` for more details.
    
    Parameters
    ----------
    path : str, path object, file-like object, or None, default None
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a binary ``write()`` function. If None, the result is
        returned as bytes. If a string or path, it will be used as Root Directory
        path when writing a partitioned dataset.
    engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'
        Parquet library to use. If 'auto', then the option
        ``io.parquet.engine`` is used. The default ``io.parquet.engine``
        behavior is to try 'pyarrow', falling back to 'fastparquet' if
        'pyarrow' is unavailable.
    compression : str or None, default 'snappy'
        Name of the compression to use. Use ``None`` for no compression.
        Supported options: 'snappy', 'gzip', 'brotli', 'lz4', 'zstd'.
    index : bool, default None
        If ``True``, include the dataframe's index(es) in the file output.
        If ``False``, they will not be written to the file.
        If ``None``, similar to ``True`` the dataframe's index(es)
        will be saved. However, instead of being saved as values,
        the RangeIndex will be stored as a range in the metadata so it
        doesn't require much space and is faster. Other indexes will
        be included as columns in the file output.
    partition_cols : list, optional, default None
        Column names by which to partition the dataset.
        Columns are partitioned in the order they are given.
        Must be None if path is not a string.
    storage_options : dict, optional
        Extra options that make sense for a particular storage connection, e.g.
        host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
        are forwarded to ``urllib.request.Request`` as header options. For other
        URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
        forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
        details, and for more examples on storage options refer `here
        <https://pandas.pydata.org/docs/user_guide/io.html?
        highlight=storage_options#reading-writing-remote-files>`_.
    
    **kwargs
        Additional arguments passed to the parquet library. See
        :ref:`pandas io <io.parquet>` for more details.
    
    Returns
    -------
    bytes if no path argument is provided else None
    
    See Also
    --------
    read_parquet : Read a parquet file.
    DataFrame.to_orc : Write an orc file.
    DataFrame.to_csv : Write a csv file.
    DataFrame.to_sql : Write to a sql table.
    DataFrame.to_hdf : Write to hdf.
    
    Notes
    -----
    This function requires either the `fastparquet
    <https://pypi.org/project/fastparquet>`_ or `pyarrow
    <https://arrow.apache.org/docs/python/>`_ library.
    
    Examples
    --------
    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})
    >>> df.to_parquet('df.parquet.gzip',
    ...               compression='gzip')  # doctest: +SKIP
    >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP
       col1  col2
    0     1     3
    1     2     4
    
    If you want to get a buffer to the parquet content you can use a io.BytesIO
    object, as long as you don't use partition_cols, which creates multiple files.
    
    >>> import io
    >>> f = io.BytesIO()
    >>> df.to_parquet(f)
    >>> f.seek(0)
    0
    >>> content = f.read()

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_period &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_period in module pandas.core.frame:

to_period(freq: 'Frequency | None' = None, axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Convert DataFrame from DatetimeIndex to PeriodIndex.
    
    Convert DataFrame from DatetimeIndex to PeriodIndex with desired
    frequency (inferred from index if not passed).
    
    Parameters
    ----------
    freq : str, default
        Frequency of the PeriodIndex.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to convert (the index by default).
    copy : bool, default True
        If False then underlying input data is not copied.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    
    Returns
    -------
    DataFrame
        The DataFrame has a PeriodIndex.
    
    Examples
    --------
    >>> idx = pd.to_datetime(
    ...     [
    ...         "2001-03-31 00:00:00",
    ...         "2002-05-31 00:00:00",
    ...         "2003-08-31 00:00:00",
    ...     ]
    ... )
    
    >>> idx
    DatetimeIndex(['2001-03-31', '2002-05-31', '2003-08-31'],
    dtype='datetime64[ns]', freq=None)
    
    >>> idx.to_period("M")
    PeriodIndex(['2001-03', '2002-05', '2003-08'], dtype='period[M]')
    
    For the yearly frequency
    
    >>> idx.to_period("Y")
    PeriodIndex(['2001', '2002', '2003'], dtype='period[Y-DEC]')

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_pickle &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_pickle in module pandas.core.generic:

to_pickle(path: 'FilePath | WriteBuffer[bytes]', *, compression: 'CompressionOptions' = 'infer', protocol: 'int' = 5, storage_options: 'StorageOptions | None' = None) -> 'None' method of pandas.core.frame.DataFrame instance
    Pickle (serialize) object to file.
    
    Parameters
    ----------
    path : str, path object, or file-like object
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a binary ``write()`` function. File path where
        the pickled object will be stored.
    compression : str or dict, default 'infer'
        For on-the-fly compression of the output data. If 'infer' and 'path' is
        path-like, then detect compression from the following extensions: '.gz',
        '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
        (otherwise no compression).
        Set to ``None`` for no compression.
        Can also be a dict with key ``'method'`` set
        to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
        other key-value pairs are forwarded to
        ``zipfile.ZipFile``, ``gzip.GzipFile``,
        ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
        ``tarfile.TarFile``, respectively.
        As an example, the following could be passed for faster compression and to create
        a reproducible gzip archive:
        ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
    
        .. versionadded:: 1.5.0
            Added support for `.tar` files.
    protocol : int
        Int which indicates which protocol should be used by the pickler,
        default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible
        values are 0, 1, 2, 3, 4, 5. A negative value for the protocol
        parameter is equivalent to setting its value to HIGHEST_PROTOCOL.
    
        .. [1] https://docs.python.org/3/library/pickle.html.
    
    storage_options : dict, optional
        Extra options that make sense for a particular storage connection, e.g.
        host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
        are forwarded to ``urllib.request.Request`` as header options. For other
        URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
        forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
        details, and for more examples on storage options refer `here
        <https://pandas.pydata.org/docs/user_guide/io.html?
        highlight=storage_options#reading-writing-remote-files>`_.
    
    See Also
    --------
    read_pickle : Load pickled pandas object (or any object) from file.
    DataFrame.to_hdf : Write DataFrame to an HDF5 file.
    DataFrame.to_sql : Write DataFrame to a SQL database.
    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
    
    Examples
    --------
    >>> original_df = pd.DataFrame({"foo": range(5), "bar": range(5, 10)})  # doctest: +SKIP
    >>> original_df  # doctest: +SKIP
       foo  bar
    0    0    5
    1    1    6
    2    2    7
    3    3    8
    4    4    9
    >>> original_df.to_pickle("./dummy.pkl")  # doctest: +SKIP
    
    >>> unpickled_df = pd.read_pickle("./dummy.pkl")  # doctest: +SKIP
    >>> unpickled_df  # doctest: +SKIP
       foo  bar
    0    0    5
    1    1    6
    2    2    7
    3    3    8
    4    4    9

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_records &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_records in module pandas.core.frame:

to_records(index: 'bool' = True, column_dtypes=None, index_dtypes=None) -> 'np.rec.recarray' method of pandas.core.frame.DataFrame instance
    Convert DataFrame to a NumPy record array.
    
    Index will be included as the first field of the record array if
    requested.
    
    Parameters
    ----------
    index : bool, default True
        Include index in resulting record array, stored in 'index'
        field or using the index label, if set.
    column_dtypes : str, type, dict, default None
        If a string or type, the data type to store all columns. If
        a dictionary, a mapping of column names and indices (zero-indexed)
        to specific data types.
    index_dtypes : str, type, dict, default None
        If a string or type, the data type to store all index levels. If
        a dictionary, a mapping of index level names and indices
        (zero-indexed) to specific data types.
    
        This mapping is applied only if `index=True`.
    
    Returns
    -------
    numpy.rec.recarray
        NumPy ndarray with the DataFrame labels as fields and each row
        of the DataFrame as entries.
    
    See Also
    --------
    DataFrame.from_records: Convert structured or record ndarray
        to DataFrame.
    numpy.rec.recarray: An ndarray that allows field access using
        attributes, analogous to typed columns in a
        spreadsheet.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},
    ...                   index=['a', 'b'])
    >>> df
       A     B
    a  1  0.50
    b  2  0.75
    >>> df.to_records()
    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],
              dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])
    
    If the DataFrame index has no label then the recarray field name
    is set to 'index'. If the index has a label then this is used as the
    field name:
    
    >>> df.index = df.index.rename("I")
    >>> df.to_records()
    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],
              dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])
    
    The index can be excluded from the record array:
    
    >>> df.to_records(index=False)
    rec.array([(1, 0.5 ), (2, 0.75)],
              dtype=[('A', '<i8'), ('B', '<f8')])
    
    Data types can be specified for the columns:
    
    >>> df.to_records(column_dtypes={"A": "int32"})
    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],
              dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])
    
    As well as for the index:
    
    >>> df.to_records(index_dtypes="<S2")
    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],
              dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])
    
    >>> index_dtypes = f"<S{df.index.str.len().max()}"
    >>> df.to_records(index_dtypes=index_dtypes)
    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],
              dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_sql &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_sql in module pandas.core.generic:

to_sql(name: 'str', con, *, schema: 'str | None' = None, if_exists: "Literal['fail', 'replace', 'append']" = 'fail', index: 'bool_t' = True, index_label: 'IndexLabel | None' = None, chunksize: 'int | None' = None, dtype: 'DtypeArg | None' = None, method: "Literal['multi'] | Callable | None" = None) -> 'int | None' method of pandas.core.frame.DataFrame instance
    Write records stored in a DataFrame to a SQL database.
    
    Databases supported by SQLAlchemy [1]_ are supported. Tables can be
    newly created, appended to, or overwritten.
    
    Parameters
    ----------
    name : str
        Name of SQL table.
    con : sqlalchemy.engine.(Engine or Connection) or sqlite3.Connection
        Using SQLAlchemy makes it possible to use any DB supported by that
        library. Legacy support is provided for sqlite3.Connection objects. The user
        is responsible for engine disposal and connection closure for the SQLAlchemy
        connectable. See `here                 <https://docs.sqlalchemy.org/en/20/core/connections.html>`_.
        If passing a sqlalchemy.engine.Connection which is already in a transaction,
        the transaction will not be committed.  If passing a sqlite3.Connection,
        it will not be possible to roll back the record insertion.
    
    schema : str, optional
        Specify the schema (if database flavor supports this). If None, use
        default schema.
    if_exists : {'fail', 'replace', 'append'}, default 'fail'
        How to behave if the table already exists.
    
        * fail: Raise a ValueError.
        * replace: Drop the table before inserting new values.
        * append: Insert new values to the existing table.
    
    index : bool, default True
        Write DataFrame index as a column. Uses `index_label` as the column
        name in the table. Creates a table index for this column.
    index_label : str or sequence, default None
        Column label for index column(s). If None is given (default) and
        `index` is True, then the index names are used.
        A sequence should be given if the DataFrame uses MultiIndex.
    chunksize : int, optional
        Specify the number of rows in each batch to be written at a time.
        By default, all rows will be written at once.
    dtype : dict or scalar, optional
        Specifying the datatype for columns. If a dictionary is used, the
        keys should be the column names and the values should be the
        SQLAlchemy types or strings for the sqlite3 legacy mode. If a
        scalar is provided, it will be applied to all columns.
    method : {None, 'multi', callable}, optional
        Controls the SQL insertion clause used:
    
        * None : Uses standard SQL ``INSERT`` clause (one per row).
        * 'multi': Pass multiple values in a single ``INSERT`` clause.
        * callable with signature ``(pd_table, conn, keys, data_iter)``.
    
        Details and a sample callable implementation can be found in the
        section :ref:`insert method <io.sql.method>`.
    
    Returns
    -------
    None or int
        Number of rows affected by to_sql. None is returned if the callable
        passed into ``method`` does not return an integer number of rows.
    
        The number of returned rows affected is the sum of the ``rowcount``
        attribute of ``sqlite3.Cursor`` or SQLAlchemy connectable which may not
        reflect the exact number of written rows as stipulated in the
        `sqlite3 <https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount>`__ or
        `SQLAlchemy <https://docs.sqlalchemy.org/en/20/core/connections.html#sqlalchemy.engine.CursorResult.rowcount>`__.
    
        .. versionadded:: 1.4.0
    
    Raises
    ------
    ValueError
        When the table already exists and `if_exists` is 'fail' (the
        default).
    
    See Also
    --------
    read_sql : Read a DataFrame from a table.
    
    Notes
    -----
    Timezone aware datetime columns will be written as
    ``Timestamp with timezone`` type with SQLAlchemy if supported by the
    database. Otherwise, the datetimes will be stored as timezone unaware
    timestamps local to the original timezone.
    
    Not all datastores support ``method="multi"``. Oracle, for example,
    does not support multi-value insert.
    
    References
    ----------
    .. [1] https://docs.sqlalchemy.org
    .. [2] https://www.python.org/dev/peps/pep-0249/
    
    Examples
    --------
    Create an in-memory SQLite database.
    
    >>> from sqlalchemy import create_engine
    >>> engine = create_engine('sqlite://', echo=False)
    
    Create a table from scratch with 3 rows.
    
    >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})
    >>> df
         name
    0  User 1
    1  User 2
    2  User 3
    
    >>> df.to_sql(name='users', con=engine)
    3
    >>> from sqlalchemy import text
    >>> with engine.connect() as conn:
    ...    conn.execute(text("SELECT * FROM users")).fetchall()
    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]
    
    An `sqlalchemy.engine.Connection` can also be passed to `con`:
    
    >>> with engine.begin() as connection:
    ...     df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})
    ...     df1.to_sql(name='users', con=connection, if_exists='append')
    2
    
    This is allowed to support operations that require that the same
    DBAPI connection is used for the entire operation.
    
    >>> df2 = pd.DataFrame({'name' : ['User 6', 'User 7']})
    >>> df2.to_sql(name='users', con=engine, if_exists='append')
    2
    >>> with engine.connect() as conn:
    ...    conn.execute(text("SELECT * FROM users")).fetchall()
    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),
     (0, 'User 4'), (1, 'User 5'), (0, 'User 6'),
     (1, 'User 7')]
    
    Overwrite the table with just ``df2``.
    
    >>> df2.to_sql(name='users', con=engine, if_exists='replace',
    ...            index_label='id')
    2
    >>> with engine.connect() as conn:
    ...    conn.execute(text("SELECT * FROM users")).fetchall()
    [(0, 'User 6'), (1, 'User 7')]
    
    Use ``method`` to define a callable insertion method to do nothing
    if there's a primary key conflict on a table in a PostgreSQL database.
    
    >>> from sqlalchemy.dialects.postgresql import insert
    >>> def insert_on_conflict_nothing(table, conn, keys, data_iter):
    ...     # "a" is the primary key in "conflict_table"
    ...     data = [dict(zip(keys, row)) for row in data_iter]
    ...     stmt = insert(table.table).values(data).on_conflict_do_nothing(index_elements=["a"])
    ...     result = conn.execute(stmt)
    ...     return result.rowcount
    >>> df_conflict.to_sql(name="conflict_table", con=conn, if_exists="append", method=insert_on_conflict_nothing)  # doctest: +SKIP
    0
    
    For MySQL, a callable to update columns ``b`` and ``c`` if there's a conflict
    on a primary key.
    
    >>> from sqlalchemy.dialects.mysql import insert
    >>> def insert_on_conflict_update(table, conn, keys, data_iter):
    ...     # update columns "b" and "c" on primary key conflict
    ...     data = [dict(zip(keys, row)) for row in data_iter]
    ...     stmt = (
    ...         insert(table.table)
    ...         .values(data)
    ...     )
    ...     stmt = stmt.on_duplicate_key_update(b=stmt.inserted.b, c=stmt.inserted.c)
    ...     result = conn.execute(stmt)
    ...     return result.rowcount
    >>> df_conflict.to_sql(name="conflict_table", con=conn, if_exists="append", method=insert_on_conflict_update)  # doctest: +SKIP
    2
    
    Specify the dtype (especially useful for integers with missing values).
    Notice that while pandas is forced to store the data as floating point,
    the database supports nullable integers. When fetching the data with
    Python, we get back integer scalars.
    
    >>> df = pd.DataFrame({"A": [1, None, 2]})
    >>> df
         A
    0  1.0
    1  NaN
    2  2.0
    
    >>> from sqlalchemy.types import Integer
    >>> df.to_sql(name='integers', con=engine, index=False,
    ...           dtype={"A": Integer()})
    3
    
    >>> with engine.connect() as conn:
    ...   conn.execute(text("SELECT * FROM integers")).fetchall()
    [(1,), (None,), (2,)]

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_stata &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_stata in module pandas.core.frame:

to_stata(path: 'FilePath | WriteBuffer[bytes]', *, convert_dates: 'dict[Hashable, str] | None' = None, write_index: 'bool' = True, byteorder: 'ToStataByteorder | None' = None, time_stamp: 'datetime.datetime | None' = None, data_label: 'str | None' = None, variable_labels: 'dict[Hashable, str] | None' = None, version: 'int | None' = 114, convert_strl: 'Sequence[Hashable] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None, value_labels: 'dict[Hashable, dict[float, str]] | None' = None) -> 'None' method of pandas.core.frame.DataFrame instance
    Export DataFrame object to Stata dta format.
    
    Writes the DataFrame to a Stata dataset file.
    "dta" files contain a Stata dataset.
    
    Parameters
    ----------
    path : str, path object, or buffer
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a binary ``write()`` function.
    
    convert_dates : dict
        Dictionary mapping columns containing datetime types to stata
        internal format to use when writing the dates. Options are 'tc',
        'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer
        or a name. Datetime columns that do not have a conversion type
        specified will be converted to 'tc'. Raises NotImplementedError if
        a datetime column has timezone information.
    write_index : bool
        Write the index to Stata dataset.
    byteorder : str
        Can be ">", "<", "little", or "big". default is `sys.byteorder`.
    time_stamp : datetime
        A datetime to use as file creation date.  Default is the current
        time.
    data_label : str, optional
        A label for the data set.  Must be 80 characters or smaller.
    variable_labels : dict
        Dictionary containing columns as keys and variable labels as
        values. Each label must be 80 characters or smaller.
    version : {114, 117, 118, 119, None}, default 114
        Version to use in the output dta file. Set to None to let pandas
        decide between 118 or 119 formats depending on the number of
        columns in the frame. Version 114 can be read by Stata 10 and
        later. Version 117 can be read by Stata 13 or later. Version 118
        is supported in Stata 14 and later. Version 119 is supported in
        Stata 15 and later. Version 114 limits string variables to 244
        characters or fewer while versions 117 and later allow strings
        with lengths up to 2,000,000 characters. Versions 118 and 119
        support Unicode characters, and version 119 supports more than
        32,767 variables.
    
        Version 119 should usually only be used when the number of
        variables exceeds the capacity of dta format 118. Exporting
        smaller datasets in format 119 may have unintended consequences,
        and, as of November 2020, Stata SE cannot read version 119 files.
    
    convert_strl : list, optional
        List of column names to convert to string columns to Stata StrL
        format. Only available if version is 117.  Storing strings in the
        StrL format can produce smaller dta files if strings have more than
        8 characters and values are repeated.
    compression : str or dict, default 'infer'
        For on-the-fly compression of the output data. If 'infer' and 'path' is
        path-like, then detect compression from the following extensions: '.gz',
        '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
        (otherwise no compression).
        Set to ``None`` for no compression.
        Can also be a dict with key ``'method'`` set
        to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
        other key-value pairs are forwarded to
        ``zipfile.ZipFile``, ``gzip.GzipFile``,
        ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
        ``tarfile.TarFile``, respectively.
        As an example, the following could be passed for faster compression and to create
        a reproducible gzip archive:
        ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
    
        .. versionadded:: 1.5.0
            Added support for `.tar` files.
    
        .. versionchanged:: 1.4.0 Zstandard support.
    
    storage_options : dict, optional
        Extra options that make sense for a particular storage connection, e.g.
        host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
        are forwarded to ``urllib.request.Request`` as header options. For other
        URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
        forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
        details, and for more examples on storage options refer `here
        <https://pandas.pydata.org/docs/user_guide/io.html?
        highlight=storage_options#reading-writing-remote-files>`_.
    
    value_labels : dict of dicts
        Dictionary containing columns as keys and dictionaries of column value
        to labels as values. Labels for a single variable must be 32,000
        characters or smaller.
    
        .. versionadded:: 1.4.0
    
    Raises
    ------
    NotImplementedError
        * If datetimes contain timezone information
        * Column dtype is not representable in Stata
    ValueError
        * Columns listed in convert_dates are neither datetime64[ns]
          or datetime.datetime
        * Column listed in convert_dates is not in DataFrame
        * Categorical label contains more than 32,000 characters
    
    See Also
    --------
    read_stata : Import Stata data files.
    io.stata.StataWriter : Low-level writer for Stata data files.
    io.stata.StataWriter117 : Low-level writer for version 117 files.
    
    Examples
    --------
    >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',
    ...                               'parrot'],
    ...                    'speed': [350, 18, 361, 15]})
    >>> df.to_stata('animals.dta')  # doctest: +SKIP

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_string &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_string in module pandas.core.frame:

to_string(buf: 'FilePath | WriteBuffer[str] | None' = None, *, columns: 'Axes | None' = None, col_space: 'int | list[int] | dict[Hashable, int] | None' = None, header: 'bool | SequenceNotStr[str]' = True, index: 'bool' = True, na_rep: 'str' = 'NaN', formatters: 'fmt.FormattersType | None' = None, float_format: 'fmt.FloatFormatType | None' = None, sparsify: 'bool | None' = None, index_names: 'bool' = True, justify: 'str | None' = None, max_rows: 'int | None' = None, max_cols: 'int | None' = None, show_dimensions: 'bool' = False, decimal: 'str' = '.', line_width: 'int | None' = None, min_rows: 'int | None' = None, max_colwidth: 'int | None' = None, encoding: 'str | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Render a DataFrame to a console-friendly tabular output.
    
    Parameters
    ----------
    buf : str, Path or StringIO-like, optional, default None
        Buffer to write to. If None, the output is returned as a string.
    columns : array-like, optional, default None
        The subset of columns to write. Writes all columns by default.
    col_space : int, list or dict of int, optional
        The minimum width of each column. If a list of ints is given every integers corresponds with one column. If a dict is given, the key references the column, while the value defines the space to use..
    header : bool or list of str, optional
        Write out the column names. If a list of columns is given, it is assumed to be aliases for the column names.
    index : bool, optional, default True
        Whether to print index (row) labels.
    na_rep : str, optional, default 'NaN'
        String representation of ``NaN`` to use.
    formatters : list, tuple or dict of one-param. functions, optional
        Formatter functions to apply to columns' elements by position or
        name.
        The result of each function must be a unicode string.
        List/tuple must be of length equal to the number of columns.
    float_format : one-parameter function, optional, default None
        Formatter function to apply to columns' elements if they are
        floats. This function must return a unicode string and will be
        applied only to the non-``NaN`` elements, with ``NaN`` being
        handled by ``na_rep``.
    sparsify : bool, optional, default True
        Set to False for a DataFrame with a hierarchical index to print
        every multiindex key at each row.
    index_names : bool, optional, default True
        Prints the names of the indexes.
    justify : str, default None
        How to justify the column labels. If None uses the option from
        the print configuration (controlled by set_option), 'right' out
        of the box. Valid values are
    
        * left
        * right
        * center
        * justify
        * justify-all
        * start
        * end
        * inherit
        * match-parent
        * initial
        * unset.
    max_rows : int, optional
        Maximum number of rows to display in the console.
    max_cols : int, optional
        Maximum number of columns to display in the console.
    show_dimensions : bool, default False
        Display DataFrame dimensions (number of rows by number of columns).
    decimal : str, default '.'
        Character recognized as decimal separator, e.g. ',' in Europe.
    
    line_width : int, optional
        Width to wrap a line in characters.
    min_rows : int, optional
        The number of rows to display in the console in a truncated repr
        (when number of rows is above `max_rows`).
    max_colwidth : int, optional
        Max width to truncate each column in characters. By default, no limit.
    encoding : str, default "utf-8"
        Set character encoding.
    
    Returns
    -------
    str or None
        If buf is None, returns the result as a string. Otherwise returns
        None.
    
    See Also
    --------
    to_html : Convert DataFrame to HTML.
    
    Examples
    --------
    >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}
    >>> df = pd.DataFrame(d)
    >>> print(df.to_string())
       col1  col2
    0     1     4
    1     2     5
    2     3     6

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_timestamp &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_timestamp in module pandas.core.frame:

to_timestamp(freq: 'Frequency | None' = None, how: 'ToTimestampHow' = 'start', axis: 'Axis' = 0, copy: 'bool | None' = None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Cast to DatetimeIndex of timestamps, at *beginning* of period.
    
    Parameters
    ----------
    freq : str, default frequency of PeriodIndex
        Desired frequency.
    how : {'s', 'e', 'start', 'end'}
        Convention for converting period to timestamp; start of period
        vs. end.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to convert (the index by default).
    copy : bool, default True
        If False then underlying input data is not copied.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    
    Returns
    -------
    DataFrame
        The DataFrame has a DatetimeIndex.
    
    Examples
    --------
    >>> idx = pd.PeriodIndex(['2023', '2024'], freq='Y')
    >>> d = {'col1': [1, 2], 'col2': [3, 4]}
    >>> df1 = pd.DataFrame(data=d, index=idx)
    >>> df1
          col1   col2
    2023     1      3
    2024     2      4
    
    The resulting timestamps will be at the beginning of the year in this case
    
    >>> df1 = df1.to_timestamp()
    >>> df1
                col1   col2
    2023-01-01     1      3
    2024-01-01     2      4
    >>> df1.index
    DatetimeIndex(['2023-01-01', '2024-01-01'], dtype='datetime64[ns]', freq=None)
    
    Using `freq` which is the offset that the Timestamps will have
    
    >>> df2 = pd.DataFrame(data=d, index=idx)
    >>> df2 = df2.to_timestamp(freq='M')
    >>> df2
                col1   col2
    2023-01-31     1      3
    2024-01-31     2      4
    >>> df2.index
    DatetimeIndex(['2023-01-31', '2024-01-31'], dtype='datetime64[ns]', freq=None)

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_xarray &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_xarray in module pandas.core.generic:

to_xarray() method of pandas.core.frame.DataFrame instance
    Return an xarray object from the pandas object.
    
    Returns
    -------
    xarray.DataArray or xarray.Dataset
        Data in the pandas structure converted to Dataset if the object is
        a DataFrame, or a DataArray if the object is a Series.
    
    See Also
    --------
    DataFrame.to_hdf : Write DataFrame to an HDF5 file.
    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.
    
    Notes
    -----
    See the `xarray docs <https://xarray.pydata.org/en/stable/>`__
    
    Examples
    --------
    >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),
    ...                    ('parrot', 'bird', 24.0, 2),
    ...                    ('lion', 'mammal', 80.5, 4),
    ...                    ('monkey', 'mammal', np.nan, 4)],
    ...                   columns=['name', 'class', 'max_speed',
    ...                            'num_legs'])
    >>> df
         name   class  max_speed  num_legs
    0  falcon    bird      389.0         2
    1  parrot    bird       24.0         2
    2    lion  mammal       80.5         4
    3  monkey  mammal        NaN         4
    
    >>> df.to_xarray()  # doctest: +SKIP
    <xarray.Dataset>
    Dimensions:    (index: 4)
    Coordinates:
      * index      (index) int64 32B 0 1 2 3
    Data variables:
        name       (index) object 32B 'falcon' 'parrot' 'lion' 'monkey'
        class      (index) object 32B 'bird' 'bird' 'mammal' 'mammal'
        max_speed  (index) float64 32B 389.0 24.0 80.5 nan
        num_legs   (index) int64 32B 2 2 4 4
    
    >>> df['max_speed'].to_xarray()  # doctest: +SKIP
    <xarray.DataArray 'max_speed' (index: 4)>
    array([389. ,  24. ,  80.5,   nan])
    Coordinates:
      * index    (index) int64 0 1 2 3
    
    >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',
    ...                         '2018-01-02', '2018-01-02'])
    >>> df_multiindex = pd.DataFrame({'date': dates,
    ...                               'animal': ['falcon', 'parrot',
    ...                                          'falcon', 'parrot'],
    ...                               'speed': [350, 18, 361, 15]})
    >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])
    
    >>> df_multiindex
                       speed
    date       animal
    2018-01-01 falcon    350
               parrot     18
    2018-01-02 falcon    361
               parrot     15
    
    >>> df_multiindex.to_xarray()  # doctest: +SKIP
    <xarray.Dataset>
    Dimensions:  (date: 2, animal: 2)
    Coordinates:
      * date     (date) datetime64[ns] 2018-01-01 2018-01-02
      * animal   (animal) object 'falcon' 'parrot'
    Data variables:
        speed    (date, animal) int64 350 18 361 15

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& to_xml &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method to_xml in module pandas.core.frame:

to_xml(path_or_buffer: 'FilePath | WriteBuffer[bytes] | WriteBuffer[str] | None' = None, *, index: 'bool' = True, root_name: 'str | None' = 'data', row_name: 'str | None' = 'row', na_rep: 'str | None' = None, attr_cols: 'list[str] | None' = None, elem_cols: 'list[str] | None' = None, namespaces: 'dict[str | None, str] | None' = None, prefix: 'str | None' = None, encoding: 'str' = 'utf-8', xml_declaration: 'bool | None' = True, pretty_print: 'bool | None' = True, parser: 'XMLParsers | None' = 'lxml', stylesheet: 'FilePath | ReadBuffer[str] | ReadBuffer[bytes] | None' = None, compression: 'CompressionOptions' = 'infer', storage_options: 'StorageOptions | None' = None) -> 'str | None' method of pandas.core.frame.DataFrame instance
    Render a DataFrame to an XML document.
    
    .. versionadded:: 1.3.0
    
    Parameters
    ----------
    path_or_buffer : str, path object, file-like object, or None, default None
        String, path object (implementing ``os.PathLike[str]``), or file-like
        object implementing a ``write()`` function. If None, the result is returned
        as a string.
    index : bool, default True
        Whether to include index in XML document.
    root_name : str, default 'data'
        The name of root element in XML document.
    row_name : str, default 'row'
        The name of row element in XML document.
    na_rep : str, optional
        Missing data representation.
    attr_cols : list-like, optional
        List of columns to write as attributes in row element.
        Hierarchical columns will be flattened with underscore
        delimiting the different levels.
    elem_cols : list-like, optional
        List of columns to write as children in row element. By default,
        all columns output as children of row element. Hierarchical
        columns will be flattened with underscore delimiting the
        different levels.
    namespaces : dict, optional
        All namespaces to be defined in root element. Keys of dict
        should be prefix names and values of dict corresponding URIs.
        Default namespaces should be given empty string key. For
        example, ::
    
            namespaces = {"": "https://example.com"}
    
    prefix : str, optional
        Namespace prefix to be used for every element and/or attribute
        in document. This should be one of the keys in ``namespaces``
        dict.
    encoding : str, default 'utf-8'
        Encoding of the resulting document.
    xml_declaration : bool, default True
        Whether to include the XML declaration at start of document.
    pretty_print : bool, default True
        Whether output should be pretty printed with indentation and
        line breaks.
    parser : {'lxml','etree'}, default 'lxml'
        Parser module to use for building of tree. Only 'lxml' and
        'etree' are supported. With 'lxml', the ability to use XSLT
        stylesheet is supported.
    stylesheet : str, path object or file-like object, optional
        A URL, file-like object, or a raw string containing an XSLT
        script used to transform the raw XML output. Script should use
        layout of elements and attributes from original output. This
        argument requires ``lxml`` to be installed. Only XSLT 1.0
        scripts and not later versions is currently supported.
    compression : str or dict, default 'infer'
        For on-the-fly compression of the output data. If 'infer' and 'path_or_buffer' is
        path-like, then detect compression from the following extensions: '.gz',
        '.bz2', '.zip', '.xz', '.zst', '.tar', '.tar.gz', '.tar.xz' or '.tar.bz2'
        (otherwise no compression).
        Set to ``None`` for no compression.
        Can also be a dict with key ``'method'`` set
        to one of {``'zip'``, ``'gzip'``, ``'bz2'``, ``'zstd'``, ``'xz'``, ``'tar'``} and
        other key-value pairs are forwarded to
        ``zipfile.ZipFile``, ``gzip.GzipFile``,
        ``bz2.BZ2File``, ``zstandard.ZstdCompressor``, ``lzma.LZMAFile`` or
        ``tarfile.TarFile``, respectively.
        As an example, the following could be passed for faster compression and to create
        a reproducible gzip archive:
        ``compression={'method': 'gzip', 'compresslevel': 1, 'mtime': 1}``.
    
        .. versionadded:: 1.5.0
            Added support for `.tar` files.
    
        .. versionchanged:: 1.4.0 Zstandard support.
    
    storage_options : dict, optional
        Extra options that make sense for a particular storage connection, e.g.
        host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
        are forwarded to ``urllib.request.Request`` as header options. For other
        URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
        forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
        details, and for more examples on storage options refer `here
        <https://pandas.pydata.org/docs/user_guide/io.html?
        highlight=storage_options#reading-writing-remote-files>`_.
    
    Returns
    -------
    None or str
        If ``io`` is None, returns the resulting XML format as a
        string. Otherwise returns None.
    
    See Also
    --------
    to_json : Convert the pandas object to a JSON string.
    to_html : Convert DataFrame to a html.
    
    Examples
    --------
    >>> df = pd.DataFrame({'shape': ['square', 'circle', 'triangle'],
    ...                    'degrees': [360, 360, 180],
    ...                    'sides': [4, np.nan, 3]})
    
    >>> df.to_xml()  # doctest: +SKIP
    <?xml version='1.0' encoding='utf-8'?>
    <data>
      <row>
        <index>0</index>
        <shape>square</shape>
        <degrees>360</degrees>
        <sides>4.0</sides>
      </row>
      <row>
        <index>1</index>
        <shape>circle</shape>
        <degrees>360</degrees>
        <sides/>
      </row>
      <row>
        <index>2</index>
        <shape>triangle</shape>
        <degrees>180</degrees>
        <sides>3.0</sides>
      </row>
    </data>
    
    >>> df.to_xml(attr_cols=[
    ...           'index', 'shape', 'degrees', 'sides'
    ...           ])  # doctest: +SKIP
    <?xml version='1.0' encoding='utf-8'?>
    <data>
      <row index="0" shape="square" degrees="360" sides="4.0"/>
      <row index="1" shape="circle" degrees="360"/>
      <row index="2" shape="triangle" degrees="180" sides="3.0"/>
    </data>
    
    >>> df.to_xml(namespaces={"doc": "https://example.com"},
    ...           prefix="doc")  # doctest: +SKIP
    <?xml version='1.0' encoding='utf-8'?>
    <doc:data xmlns:doc="https://example.com">
      <doc:row>
        <doc:index>0</doc:index>
        <doc:shape>square</doc:shape>
        <doc:degrees>360</doc:degrees>
        <doc:sides>4.0</doc:sides>
      </doc:row>
      <doc:row>
        <doc:index>1</doc:index>
        <doc:shape>circle</doc:shape>
        <doc:degrees>360</doc:degrees>
        <doc:sides/>
      </doc:row>
      <doc:row>
        <doc:index>2</doc:index>
        <doc:shape>triangle</doc:shape>
        <doc:degrees>180</doc:degrees>
        <doc:sides>3.0</doc:sides>
      </doc:row>
    </doc:data>

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& transform &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method transform in module pandas.core.frame:

transform(func: 'AggFuncType', axis: 'Axis' = 0, *args, **kwargs) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Call ``func`` on self producing a DataFrame with the same axis shape as self.
    
    Parameters
    ----------
    func : function, str, list-like or dict-like
        Function to use for transforming the data. If a function, must either
        work when passed a DataFrame or when passed to DataFrame.apply. If func
        is both list-like and dict-like, dict-like behavior takes precedence.
    
        Accepted combinations are:
    
        - function
        - string function name
        - list-like of functions and/or function names, e.g. ``[np.exp, 'sqrt']``
        - dict-like of axis labels -> functions, function names or list-like of such.
    axis : {0 or 'index', 1 or 'columns'}, default 0
            If 0 or 'index': apply function to each column.
            If 1 or 'columns': apply function to each row.
    *args
        Positional arguments to pass to `func`.
    **kwargs
        Keyword arguments to pass to `func`.
    
    Returns
    -------
    DataFrame
        A DataFrame that must have the same length as self.
    
    Raises
    ------
    ValueError : If the returned DataFrame has a different length than self.
    
    See Also
    --------
    DataFrame.agg : Only perform aggregating type operations.
    DataFrame.apply : Invoke function on a DataFrame.
    
    Notes
    -----
    Functions that mutate the passed object can produce unexpected
    behavior or errors and are not supported. See :ref:`gotchas.udf-mutation`
    for more details.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': range(3), 'B': range(1, 4)})
    >>> df
       A  B
    0  0  1
    1  1  2
    2  2  3
    >>> df.transform(lambda x: x + 1)
       A  B
    0  1  2
    1  2  3
    2  3  4
    
    Even though the resulting DataFrame must have the same length as the
    input DataFrame, it is possible to provide several input functions:
    
    >>> s = pd.Series(range(3))
    >>> s
    0    0
    1    1
    2    2
    dtype: int64
    >>> s.transform([np.sqrt, np.exp])
           sqrt        exp
    0  0.000000   1.000000
    1  1.000000   2.718282
    2  1.414214   7.389056
    
    You can call transform on a GroupBy object:
    
    >>> df = pd.DataFrame({
    ...     "Date": [
    ...         "2015-05-08", "2015-05-07", "2015-05-06", "2015-05-05",
    ...         "2015-05-08", "2015-05-07", "2015-05-06", "2015-05-05"],
    ...     "Data": [5, 8, 6, 1, 50, 100, 60, 120],
    ... })
    >>> df
             Date  Data
    0  2015-05-08     5
    1  2015-05-07     8
    2  2015-05-06     6
    3  2015-05-05     1
    4  2015-05-08    50
    5  2015-05-07   100
    6  2015-05-06    60
    7  2015-05-05   120
    >>> df.groupby('Date')['Data'].transform('sum')
    0     55
    1    108
    2     66
    3    121
    4     55
    5    108
    6     66
    7    121
    Name: Data, dtype: int64
    
    >>> df = pd.DataFrame({
    ...     "c": [1, 1, 1, 2, 2, 2, 2],
    ...     "type": ["m", "n", "o", "m", "m", "n", "n"]
    ... })
    >>> df
       c type
    0  1    m
    1  1    n
    2  1    o
    3  2    m
    4  2    m
    5  2    n
    6  2    n
    >>> df['size'] = df.groupby('c')['type'].transform(len)
    >>> df
       c type size
    0  1    m    3
    1  1    n    3
    2  1    o    3
    3  2    m    4
    4  2    m    4
    5  2    n    4
    6  2    n    4

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& transpose &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method transpose in module pandas.core.frame:

transpose(*args, copy: 'bool' = False) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Transpose index and columns.
    
    Reflect the DataFrame over its main diagonal by writing rows as columns
    and vice-versa. The property :attr:`.T` is an accessor to the method
    :meth:`transpose`.
    
    Parameters
    ----------
    *args : tuple, optional
        Accepted for compatibility with NumPy.
    copy : bool, default False
        Whether to copy the data after transposing, even for DataFrames
        with a single dtype.
    
        Note that a copy is always required for mixed dtype DataFrames,
        or for DataFrames with any extension types.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    
    Returns
    -------
    DataFrame
        The transposed DataFrame.
    
    See Also
    --------
    numpy.transpose : Permute the dimensions of a given array.
    
    Notes
    -----
    Transposing a DataFrame with mixed dtypes will result in a homogeneous
    DataFrame with the `object` dtype. In such a case, a copy of the data
    is always made.
    
    Examples
    --------
    **Square DataFrame with homogeneous dtype**
    
    >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}
    >>> df1 = pd.DataFrame(data=d1)
    >>> df1
       col1  col2
    0     1     3
    1     2     4
    
    >>> df1_transposed = df1.T  # or df1.transpose()
    >>> df1_transposed
          0  1
    col1  1  2
    col2  3  4
    
    When the dtype is homogeneous in the original DataFrame, we get a
    transposed DataFrame with the same dtype:
    
    >>> df1.dtypes
    col1    int64
    col2    int64
    dtype: object
    >>> df1_transposed.dtypes
    0    int64
    1    int64
    dtype: object
    
    **Non-square DataFrame with mixed dtypes**
    
    >>> d2 = {'name': ['Alice', 'Bob'],
    ...       'score': [9.5, 8],
    ...       'employed': [False, True],
    ...       'kids': [0, 0]}
    >>> df2 = pd.DataFrame(data=d2)
    >>> df2
        name  score  employed  kids
    0  Alice    9.5     False     0
    1    Bob    8.0      True     0
    
    >>> df2_transposed = df2.T  # or df2.transpose()
    >>> df2_transposed
                  0     1
    name      Alice   Bob
    score       9.5   8.0
    employed  False  True
    kids          0     0
    
    When the DataFrame has mixed dtypes, we get a transposed DataFrame with
    the `object` dtype:
    
    >>> df2.dtypes
    name         object
    score       float64
    employed       bool
    kids          int64
    dtype: object
    >>> df2_transposed.dtypes
    0    object
    1    object
    dtype: object

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& truediv &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method truediv in module pandas.core.frame:

truediv(other, axis: 'Axis' = 'columns', level=None, fill_value=None) -> 'DataFrame' method of pandas.core.frame.DataFrame instance
    Get Floating division of dataframe and other, element-wise (binary operator `truediv`).
    
    Equivalent to ``dataframe / other``, but with support to substitute a fill_value
    for missing data in one of the inputs. With reverse version, `rtruediv`.
    
    Among flexible wrappers (`add`, `sub`, `mul`, `div`, `floordiv`, `mod`, `pow`) to
    arithmetic operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`.
    
    Parameters
    ----------
    other : scalar, sequence, Series, dict or DataFrame
        Any single or multiple element data structure, or list-like object.
    axis : {0 or 'index', 1 or 'columns'}
        Whether to compare by the index (0 or 'index') or columns.
        (1 or 'columns'). For Series input, axis to match Series index on.
    level : int or label
        Broadcast across a level, matching Index values on the
        passed MultiIndex level.
    fill_value : float or None, default None
        Fill existing missing (NaN) values, and any new element needed for
        successful DataFrame alignment, with this value before computation.
        If data in both corresponding DataFrame locations is missing
        the result will be missing.
    
    Returns
    -------
    DataFrame
        Result of the arithmetic operation.
    
    See Also
    --------
    DataFrame.add : Add DataFrames.
    DataFrame.sub : Subtract DataFrames.
    DataFrame.mul : Multiply DataFrames.
    DataFrame.div : Divide DataFrames (float division).
    DataFrame.truediv : Divide DataFrames (float division).
    DataFrame.floordiv : Divide DataFrames (integer division).
    DataFrame.mod : Calculate modulo (remainder after division).
    DataFrame.pow : Calculate exponential power.
    
    Notes
    -----
    Mismatched indices will be unioned together.
    
    Examples
    --------
    >>> df = pd.DataFrame({'angles': [0, 3, 4],
    ...                    'degrees': [360, 180, 360]},
    ...                   index=['circle', 'triangle', 'rectangle'])
    >>> df
               angles  degrees
    circle          0      360
    triangle        3      180
    rectangle       4      360
    
    Add a scalar with operator version which return the same
    results.
    
    >>> df + 1
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    >>> df.add(1)
               angles  degrees
    circle          1      361
    triangle        4      181
    rectangle       5      361
    
    Divide by constant with reverse version.
    
    >>> df.div(10)
               angles  degrees
    circle        0.0     36.0
    triangle      0.3     18.0
    rectangle     0.4     36.0
    
    >>> df.rdiv(10)
                 angles   degrees
    circle          inf  0.027778
    triangle   3.333333  0.055556
    rectangle  2.500000  0.027778
    
    Subtract a list and Series by axis with operator version.
    
    >>> df - [1, 2]
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub([1, 2], axis='columns')
               angles  degrees
    circle         -1      358
    triangle        2      178
    rectangle       3      358
    
    >>> df.sub(pd.Series([1, 1, 1], index=['circle', 'triangle', 'rectangle']),
    ...        axis='index')
               angles  degrees
    circle         -1      359
    triangle        2      179
    rectangle       3      359
    
    Multiply a dictionary by axis.
    
    >>> df.mul({'angles': 0, 'degrees': 2})
                angles  degrees
    circle           0      720
    triangle         0      360
    rectangle        0      720
    
    >>> df.mul({'circle': 0, 'triangle': 2, 'rectangle': 3}, axis='index')
                angles  degrees
    circle           0        0
    triangle         6      360
    rectangle       12     1080
    
    Multiply a DataFrame of different shape with operator version.
    
    >>> other = pd.DataFrame({'angles': [0, 3, 4]},
    ...                      index=['circle', 'triangle', 'rectangle'])
    >>> other
               angles
    circle          0
    triangle        3
    rectangle       4
    
    >>> df * other
               angles  degrees
    circle          0      NaN
    triangle        9      NaN
    rectangle      16      NaN
    
    >>> df.mul(other, fill_value=0)
               angles  degrees
    circle          0      0.0
    triangle        9      0.0
    rectangle      16      0.0
    
    Divide by a MultiIndex by level.
    
    >>> df_multindex = pd.DataFrame({'angles': [0, 3, 4, 4, 5, 6],
    ...                              'degrees': [360, 180, 360, 360, 540, 720]},
    ...                             index=[['A', 'A', 'A', 'B', 'B', 'B'],
    ...                                    ['circle', 'triangle', 'rectangle',
    ...                                     'square', 'pentagon', 'hexagon']])
    >>> df_multindex
                 angles  degrees
    A circle          0      360
      triangle        3      180
      rectangle       4      360
    B square          4      360
      pentagon        5      540
      hexagon         6      720
    
    >>> df.div(df_multindex, level=1, fill_value=0)
                 angles  degrees
    A circle        NaN      1.0
      triangle      1.0      1.0
      rectangle     1.0      1.0
    B square        0.0      0.0
      pentagon      0.0      0.0
      hexagon       0.0      0.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& truncate &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method truncate in module pandas.core.generic:

truncate(before=None, after=None, axis: 'Axis | None' = None, copy: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Truncate a Series or DataFrame before and after some index value.
    
    This is a useful shorthand for boolean indexing based on index
    values above or below certain thresholds.
    
    Parameters
    ----------
    before : date, str, int
        Truncate all rows before this index value.
    after : date, str, int
        Truncate all rows after this index value.
    axis : {0 or 'index', 1 or 'columns'}, optional
        Axis to truncate. Truncates the index (rows) by default.
        For `Series` this parameter is unused and defaults to 0.
    copy : bool, default is True,
        Return a copy of the truncated section.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    
    Returns
    -------
    type of caller
        The truncated Series or DataFrame.
    
    See Also
    --------
    DataFrame.loc : Select a subset of a DataFrame by label.
    DataFrame.iloc : Select a subset of a DataFrame by position.
    
    Notes
    -----
    If the index being truncated contains only datetime values,
    `before` and `after` may be specified as strings instead of
    Timestamps.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],
    ...                    'B': ['f', 'g', 'h', 'i', 'j'],
    ...                    'C': ['k', 'l', 'm', 'n', 'o']},
    ...                   index=[1, 2, 3, 4, 5])
    >>> df
       A  B  C
    1  a  f  k
    2  b  g  l
    3  c  h  m
    4  d  i  n
    5  e  j  o
    
    >>> df.truncate(before=2, after=4)
       A  B  C
    2  b  g  l
    3  c  h  m
    4  d  i  n
    
    The columns of a DataFrame can be truncated.
    
    >>> df.truncate(before="A", after="B", axis="columns")
       A  B
    1  a  f
    2  b  g
    3  c  h
    4  d  i
    5  e  j
    
    For Series, only rows can be truncated.
    
    >>> df['A'].truncate(before=2, after=4)
    2    b
    3    c
    4    d
    Name: A, dtype: object
    
    The index values in ``truncate`` can be datetimes or string
    dates.
    
    >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')
    >>> df = pd.DataFrame(index=dates, data={'A': 1})
    >>> df.tail()
                         A
    2016-01-31 23:59:56  1
    2016-01-31 23:59:57  1
    2016-01-31 23:59:58  1
    2016-01-31 23:59:59  1
    2016-02-01 00:00:00  1
    
    >>> df.truncate(before=pd.Timestamp('2016-01-05'),
    ...             after=pd.Timestamp('2016-01-10')).tail()
                         A
    2016-01-09 23:59:56  1
    2016-01-09 23:59:57  1
    2016-01-09 23:59:58  1
    2016-01-09 23:59:59  1
    2016-01-10 00:00:00  1
    
    Because the index is a DatetimeIndex containing only dates, we can
    specify `before` and `after` as strings. They will be coerced to
    Timestamps before truncation.
    
    >>> df.truncate('2016-01-05', '2016-01-10').tail()
                         A
    2016-01-09 23:59:56  1
    2016-01-09 23:59:57  1
    2016-01-09 23:59:58  1
    2016-01-09 23:59:59  1
    2016-01-10 00:00:00  1
    
    Note that ``truncate`` assumes a 0 value for any unspecified time
    component (midnight). This differs from partial string slicing, which
    returns any partially matching dates.
    
    >>> df.loc['2016-01-05':'2016-01-10', :].tail()
                         A
    2016-01-10 23:59:55  1
    2016-01-10 23:59:56  1
    2016-01-10 23:59:57  1
    2016-01-10 23:59:58  1
    2016-01-10 23:59:59  1

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& tz_convert &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method tz_convert in module pandas.core.generic:

tz_convert(tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None) -> 'Self' method of pandas.core.frame.DataFrame instance
    Convert tz-aware axis to target time zone.
    
    Parameters
    ----------
    tz : str or tzinfo object or None
        Target time zone. Passing ``None`` will convert to
        UTC and remove the timezone information.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to convert
    level : int, str, default None
        If axis is a MultiIndex, convert a specific level. Otherwise
        must be None.
    copy : bool, default True
        Also make a copy of the underlying data.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    
    Returns
    -------
    Series/DataFrame
        Object with time zone converted axis.
    
    Raises
    ------
    TypeError
        If the axis is tz-naive.
    
    Examples
    --------
    Change to another time zone:
    
    >>> s = pd.Series(
    ...     [1],
    ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']),
    ... )
    >>> s.tz_convert('Asia/Shanghai')
    2018-09-15 07:30:00+08:00    1
    dtype: int64
    
    Pass None to convert to UTC and get a tz-naive index:
    
    >>> s = pd.Series([1],
    ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))
    >>> s.tz_convert(None)
    2018-09-14 23:30:00    1
    dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& tz_localize &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method tz_localize in module pandas.core.generic:

tz_localize(tz, axis: 'Axis' = 0, level=None, copy: 'bool_t | None' = None, ambiguous: 'TimeAmbiguous' = 'raise', nonexistent: 'TimeNonexistent' = 'raise') -> 'Self' method of pandas.core.frame.DataFrame instance
    Localize tz-naive index of a Series or DataFrame to target time zone.
    
    This operation localizes the Index. To localize the values in a
    timezone-naive Series, use :meth:`Series.dt.tz_localize`.
    
    Parameters
    ----------
    tz : str or tzinfo or None
        Time zone to localize. Passing ``None`` will remove the
        time zone information and preserve local time.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        The axis to localize
    level : int, str, default None
        If axis ia a MultiIndex, localize a specific level. Otherwise
        must be None.
    copy : bool, default True
        Also make a copy of the underlying data.
    
        .. note::
            The `copy` keyword will change behavior in pandas 3.0.
            `Copy-on-Write
            <https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html>`__
            will be enabled by default, which means that all methods with a
            `copy` keyword will use a lazy copy mechanism to defer the copy and
            ignore the `copy` keyword. The `copy` keyword will be removed in a
            future version of pandas.
    
            You can already get the future behavior and improvements through
            enabling copy on write ``pd.options.mode.copy_on_write = True``
    ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'
        When clocks moved backward due to DST, ambiguous times may arise.
        For example in Central European Time (UTC+01), when going from
        03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at
        00:30:00 UTC and at 01:30:00 UTC. In such a situation, the
        `ambiguous` parameter dictates how ambiguous times should be
        handled.
    
        - 'infer' will attempt to infer fall dst-transition hours based on
          order
        - bool-ndarray where True signifies a DST time, False designates
          a non-DST time (note that this flag is only applicable for
          ambiguous times)
        - 'NaT' will return NaT where there are ambiguous times
        - 'raise' will raise an AmbiguousTimeError if there are ambiguous
          times.
    nonexistent : str, default 'raise'
        A nonexistent time does not exist in a particular timezone
        where clocks moved forward due to DST. Valid values are:
    
        - 'shift_forward' will shift the nonexistent time forward to the
          closest existing time
        - 'shift_backward' will shift the nonexistent time backward to the
          closest existing time
        - 'NaT' will return NaT where there are nonexistent times
        - timedelta objects will shift nonexistent times by the timedelta
        - 'raise' will raise an NonExistentTimeError if there are
          nonexistent times.
    
    Returns
    -------
    Series/DataFrame
        Same type as the input.
    
    Raises
    ------
    TypeError
        If the TimeSeries is tz-aware and tz is not None.
    
    Examples
    --------
    Localize local times:
    
    >>> s = pd.Series(
    ...     [1],
    ...     index=pd.DatetimeIndex(['2018-09-15 01:30:00']),
    ... )
    >>> s.tz_localize('CET')
    2018-09-15 01:30:00+02:00    1
    dtype: int64
    
    Pass None to convert to tz-naive index and preserve local time:
    
    >>> s = pd.Series([1],
    ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))
    >>> s.tz_localize(None)
    2018-09-15 01:30:00    1
    dtype: int64
    
    Be careful with DST changes. When there is sequential data, pandas
    can infer the DST time:
    
    >>> s = pd.Series(range(7),
    ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',
    ...                                       '2018-10-28 02:00:00',
    ...                                       '2018-10-28 02:30:00',
    ...                                       '2018-10-28 02:00:00',
    ...                                       '2018-10-28 02:30:00',
    ...                                       '2018-10-28 03:00:00',
    ...                                       '2018-10-28 03:30:00']))
    >>> s.tz_localize('CET', ambiguous='infer')
    2018-10-28 01:30:00+02:00    0
    2018-10-28 02:00:00+02:00    1
    2018-10-28 02:30:00+02:00    2
    2018-10-28 02:00:00+01:00    3
    2018-10-28 02:30:00+01:00    4
    2018-10-28 03:00:00+01:00    5
    2018-10-28 03:30:00+01:00    6
    dtype: int64
    
    In some cases, inferring the DST is impossible. In such cases, you can
    pass an ndarray to the ambiguous parameter to set the DST explicitly
    
    >>> s = pd.Series(range(3),
    ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',
    ...                                       '2018-10-28 02:36:00',
    ...                                       '2018-10-28 03:46:00']))
    >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))
    2018-10-28 01:20:00+02:00    0
    2018-10-28 02:36:00+02:00    1
    2018-10-28 03:46:00+01:00    2
    dtype: int64
    
    If the DST transition causes nonexistent times, you can shift these
    dates forward or backward with a timedelta object or `'shift_forward'`
    or `'shift_backward'`.
    
    >>> s = pd.Series(range(2),
    ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',
    ...                                       '2015-03-29 03:30:00']))
    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')
    2015-03-29 03:00:00+02:00    0
    2015-03-29 03:30:00+02:00    1
    dtype: int64
    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')
    2015-03-29 01:59:59.999999999+01:00    0
    2015-03-29 03:30:00+02:00              1
    dtype: int64
    >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1h'))
    2015-03-29 03:30:00+02:00    0
    2015-03-29 03:30:00+02:00    1
    dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& unstack &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method unstack in module pandas.core.frame:

unstack(level: 'IndexLabel' = -1, fill_value=None, sort: 'bool' = True) method of pandas.core.frame.DataFrame instance
    Pivot a level of the (necessarily hierarchical) index labels.
    
    Returns a DataFrame having a new level of column labels whose inner-most level
    consists of the pivoted index labels.
    
    If the index is not a MultiIndex, the output will be a Series
    (the analogue of stack when the columns are not a MultiIndex).
    
    Parameters
    ----------
    level : int, str, or list of these, default -1 (last level)
        Level(s) of index to unstack, can pass level name.
    fill_value : int, str or dict
        Replace NaN with this value if the unstack produces missing values.
    sort : bool, default True
        Sort the level(s) in the resulting MultiIndex columns.
    
    Returns
    -------
    Series or DataFrame
    
    See Also
    --------
    DataFrame.pivot : Pivot a table based on column values.
    DataFrame.stack : Pivot a level of the column labels (inverse operation
        from `unstack`).
    
    Notes
    -----
    Reference :ref:`the user guide <reshaping.stacking>` for more examples.
    
    Examples
    --------
    >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),
    ...                                    ('two', 'a'), ('two', 'b')])
    >>> s = pd.Series(np.arange(1.0, 5.0), index=index)
    >>> s
    one  a   1.0
         b   2.0
    two  a   3.0
         b   4.0
    dtype: float64
    
    >>> s.unstack(level=-1)
         a   b
    one  1.0  2.0
    two  3.0  4.0
    
    >>> s.unstack(level=0)
       one  two
    a  1.0   3.0
    b  2.0   4.0
    
    >>> df = s.unstack(level=0)
    >>> df.unstack()
    one  a  1.0
         b  2.0
    two  a  3.0
         b  4.0
    dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& update &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method update in module pandas.core.frame:

update(other, join: 'UpdateJoin' = 'left', overwrite: 'bool' = True, filter_func=None, errors: 'IgnoreRaise' = 'ignore') -> 'None' method of pandas.core.frame.DataFrame instance
    Modify in place using non-NA values from another DataFrame.
    
    Aligns on indices. There is no return value.
    
    Parameters
    ----------
    other : DataFrame, or object coercible into a DataFrame
        Should have at least one matching index/column label
        with the original DataFrame. If a Series is passed,
        its name attribute must be set, and that will be
        used as the column name to align with the original DataFrame.
    join : {'left'}, default 'left'
        Only left join is implemented, keeping the index and columns of the
        original object.
    overwrite : bool, default True
        How to handle non-NA values for overlapping keys:
    
        * True: overwrite original DataFrame's values
          with values from `other`.
        * False: only update values that are NA in
          the original DataFrame.
    
    filter_func : callable(1d-array) -> bool 1d-array, optional
        Can choose to replace values other than NA. Return True for values
        that should be updated.
    errors : {'raise', 'ignore'}, default 'ignore'
        If 'raise', will raise a ValueError if the DataFrame and `other`
        both contain non-NA data in the same place.
    
    Returns
    -------
    None
        This method directly changes calling object.
    
    Raises
    ------
    ValueError
        * When `errors='raise'` and there's overlapping non-NA data.
        * When `errors` is not either `'ignore'` or `'raise'`
    NotImplementedError
        * If `join != 'left'`
    
    See Also
    --------
    dict.update : Similar method for dictionaries.
    DataFrame.merge : For column(s)-on-column(s) operations.
    
    Examples
    --------
    >>> df = pd.DataFrame({'A': [1, 2, 3],
    ...                    'B': [400, 500, 600]})
    >>> new_df = pd.DataFrame({'B': [4, 5, 6],
    ...                        'C': [7, 8, 9]})
    >>> df.update(new_df)
    >>> df
       A  B
    0  1  4
    1  2  5
    2  3  6
    
    The DataFrame's length does not increase as a result of the update,
    only values at matching index/column labels are updated.
    
    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],
    ...                    'B': ['x', 'y', 'z']})
    >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})
    >>> df.update(new_df)
    >>> df
       A  B
    0  a  d
    1  b  e
    2  c  f
    
    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],
    ...                    'B': ['x', 'y', 'z']})
    >>> new_df = pd.DataFrame({'B': ['d', 'f']}, index=[0, 2])
    >>> df.update(new_df)
    >>> df
       A  B
    0  a  d
    1  b  y
    2  c  f
    
    For Series, its name attribute must be set.
    
    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],
    ...                    'B': ['x', 'y', 'z']})
    >>> new_column = pd.Series(['d', 'e', 'f'], name='B')
    >>> df.update(new_column)
    >>> df
       A  B
    0  a  d
    1  b  e
    2  c  f
    
    If `other` contains NaNs the corresponding values are not updated
    in the original dataframe.
    
    >>> df = pd.DataFrame({'A': [1, 2, 3],
    ...                    'B': [400., 500., 600.]})
    >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})
    >>> df.update(new_df)
    >>> df
       A      B
    0  1    4.0
    1  2  500.0
    2  3    6.0

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& value_counts &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method value_counts in module pandas.core.frame:

value_counts(subset: 'IndexLabel | None' = None, normalize: 'bool' = False, sort: 'bool' = True, ascending: 'bool' = False, dropna: 'bool' = True) -> 'Series' method of pandas.core.frame.DataFrame instance
    Return a Series containing the frequency of each distinct row in the Dataframe.
    
    Parameters
    ----------
    subset : label or list of labels, optional
        Columns to use when counting unique combinations.
    normalize : bool, default False
        Return proportions rather than frequencies.
    sort : bool, default True
        Sort by frequencies when True. Sort by DataFrame column values when False.
    ascending : bool, default False
        Sort in ascending order.
    dropna : bool, default True
        Don't include counts of rows that contain NA values.
    
        .. versionadded:: 1.3.0
    
    Returns
    -------
    Series
    
    See Also
    --------
    Series.value_counts: Equivalent method on Series.
    
    Notes
    -----
    The returned Series will have a MultiIndex with one level per input
    column but an Index (non-multi) for a single label. By default, rows
    that contain any NA values are omitted from the result. By default,
    the resulting Series will be in descending order so that the first
    element is the most frequently-occurring row.
    
    Examples
    --------
    >>> df = pd.DataFrame({'num_legs': [2, 4, 4, 6],
    ...                    'num_wings': [2, 0, 0, 0]},
    ...                   index=['falcon', 'dog', 'cat', 'ant'])
    >>> df
            num_legs  num_wings
    falcon         2          2
    dog            4          0
    cat            4          0
    ant            6          0
    
    >>> df.value_counts()
    num_legs  num_wings
    4         0            2
    2         2            1
    6         0            1
    Name: count, dtype: int64
    
    >>> df.value_counts(sort=False)
    num_legs  num_wings
    2         2            1
    4         0            2
    6         0            1
    Name: count, dtype: int64
    
    >>> df.value_counts(ascending=True)
    num_legs  num_wings
    2         2            1
    6         0            1
    4         0            2
    Name: count, dtype: int64
    
    >>> df.value_counts(normalize=True)
    num_legs  num_wings
    4         0            0.50
    2         2            0.25
    6         0            0.25
    Name: proportion, dtype: float64
    
    With `dropna` set to `False` we can also count rows with NA values.
    
    >>> df = pd.DataFrame({'first_name': ['John', 'Anne', 'John', 'Beth'],
    ...                    'middle_name': ['Smith', pd.NA, pd.NA, 'Louise']})
    >>> df
      first_name middle_name
    0       John       Smith
    1       Anne        <NA>
    2       John        <NA>
    3       Beth      Louise
    
    >>> df.value_counts()
    first_name  middle_name
    Beth        Louise         1
    John        Smith          1
    Name: count, dtype: int64
    
    >>> df.value_counts(dropna=False)
    first_name  middle_name
    Anne        NaN            1
    Beth        Louise         1
    John        Smith          1
                NaN            1
    Name: count, dtype: int64
    
    >>> df.value_counts("first_name")
    first_name
    John    2
    Anne    1
    Beth    1
    Name: count, dtype: int64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& values &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on ndarray object:

class ndarray(builtins.object)
 |  ndarray(shape, dtype=float, buffer=None, offset=0,
 |          strides=None, order=None)
 |  
 |  An array object represents a multidimensional, homogeneous array
 |  of fixed-size items.  An associated data-type object describes the
 |  format of each element in the array (its byte-order, how many bytes it
 |  occupies in memory, whether it is an integer, a floating point number,
 |  or something else, etc.)
 |  
 |  Arrays should be constructed using `array`, `zeros` or `empty` (refer
 |  to the See Also section below).  The parameters given here refer to
 |  a low-level method (`ndarray(...)`) for instantiating an array.
 |  
 |  For more information, refer to the `numpy` module and examine the
 |  methods and attributes of an array.
 |  
 |  Parameters
 |  ----------
 |  (for the __new__ method; see Notes below)
 |  
 |  shape : tuple of ints
 |      Shape of created array.
 |  dtype : data-type, optional
 |      Any object that can be interpreted as a numpy data type.
 |  buffer : object exposing buffer interface, optional
 |      Used to fill the array with data.
 |  offset : int, optional
 |      Offset of array data in buffer.
 |  strides : tuple of ints, optional
 |      Strides of data in memory.
 |  order : {'C', 'F'}, optional
 |      Row-major (C-style) or column-major (Fortran-style) order.
 |  
 |  Attributes
 |  ----------
 |  T : ndarray
 |      Transpose of the array.
 |  data : buffer
 |      The array's elements, in memory.
 |  dtype : dtype object
 |      Describes the format of the elements in the array.
 |  flags : dict
 |      Dictionary containing information related to memory use, e.g.,
 |      'C_CONTIGUOUS', 'OWNDATA', 'WRITEABLE', etc.
 |  flat : numpy.flatiter object
 |      Flattened version of the array as an iterator.  The iterator
 |      allows assignments, e.g., ``x.flat = 3`` (See `ndarray.flat` for
 |      assignment examples; TODO).
 |  imag : ndarray
 |      Imaginary part of the array.
 |  real : ndarray
 |      Real part of the array.
 |  size : int
 |      Number of elements in the array.
 |  itemsize : int
 |      The memory use of each array element in bytes.
 |  nbytes : int
 |      The total number of bytes required to store the array data,
 |      i.e., ``itemsize * size``.
 |  ndim : int
 |      The array's number of dimensions.
 |  shape : tuple of ints
 |      Shape of the array.
 |  strides : tuple of ints
 |      The step-size required to move from one element to the next in
 |      memory. For example, a contiguous ``(3, 4)`` array of type
 |      ``int16`` in C-order has strides ``(8, 2)``.  This implies that
 |      to move from element to element in memory requires jumps of 2 bytes.
 |      To move from row-to-row, one needs to jump 8 bytes at a time
 |      (``2 * 4``).
 |  ctypes : ctypes object
 |      Class containing properties of the array needed for interaction
 |      with ctypes.
 |  base : ndarray
 |      If the array is a view into another array, that array is its `base`
 |      (unless that array is also a view).  The `base` array is where the
 |      array data is actually stored.
 |  
 |  See Also
 |  --------
 |  array : Construct an array.
 |  zeros : Create an array, each element of which is zero.
 |  empty : Create an array, but leave its allocated memory unchanged (i.e.,
 |          it contains "garbage").
 |  dtype : Create a data-type.
 |  numpy.typing.NDArray : An ndarray alias :term:`generic <generic type>`
 |                         w.r.t. its `dtype.type <numpy.dtype.type>`.
 |  
 |  Notes
 |  -----
 |  There are two modes of creating an array using ``__new__``:
 |  
 |  1. If `buffer` is None, then only `shape`, `dtype`, and `order`
 |     are used.
 |  2. If `buffer` is an object exposing the buffer interface, then
 |     all keywords are interpreted.
 |  
 |  No ``__init__`` method is needed because the array is fully initialized
 |  after the ``__new__`` method.
 |  
 |  Examples
 |  --------
 |  These examples illustrate the low-level `ndarray` constructor.  Refer
 |  to the `See Also` section above for easier ways of constructing an
 |  ndarray.
 |  
 |  First mode, `buffer` is None:
 |  
 |  >>> np.ndarray(shape=(2,2), dtype=float, order='F')
 |  array([[0.0e+000, 0.0e+000], # random
 |         [     nan, 2.5e-323]])
 |  
 |  Second mode:
 |  
 |  >>> np.ndarray((2,), buffer=np.array([1,2,3]),
 |  ...            offset=np.int_().itemsize,
 |  ...            dtype=int) # offset = 1*itemsize, i.e. skip first element
 |  array([2, 3])
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __array__(...)
 |      a.__array__([dtype], /)
 |      
 |      Returns either a new reference to self if dtype is not given or a new array
 |      of provided data type if dtype is different from the current dtype of the
 |      array.
 |  
 |  __array_finalize__(...)
 |      a.__array_finalize__(obj, /)
 |      
 |      Present so subclasses can call super. Does nothing.
 |  
 |  __array_function__(...)
 |  
 |  __array_prepare__(...)
 |      a.__array_prepare__(array[, context], /)
 |      
 |      Returns a view of `array` with the same type as self.
 |  
 |  __array_ufunc__(...)
 |  
 |  __array_wrap__(...)
 |      a.__array_wrap__(array[, context], /)
 |      
 |      Returns a view of `array` with the same type as self.
 |  
 |  __bool__(self, /)
 |      True if self else False
 |  
 |  __complex__(...)
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __copy__(...)
 |      a.__copy__()
 |      
 |      Used if :func:`copy.copy` is called on an array. Returns a copy of the array.
 |      
 |      Equivalent to ``a.copy(order='K')``.
 |  
 |  __deepcopy__(...)
 |      a.__deepcopy__(memo, /)
 |      
 |      Used if :func:`copy.deepcopy` is called on an array.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __dlpack__(...)
 |      a.__dlpack__(*, stream=None)
 |      
 |      DLPack Protocol: Part of the Array API.
 |  
 |  __dlpack_device__(...)
 |      a.__dlpack_device__()
 |      
 |      DLPack Protocol: Part of the Array API.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(...)
 |      Default object formatter.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Return self+=value.
 |  
 |  __iand__(self, value, /)
 |      Return self&=value.
 |  
 |  __ifloordiv__(self, value, /)
 |      Return self//=value.
 |  
 |  __ilshift__(self, value, /)
 |      Return self<<=value.
 |  
 |  __imatmul__(self, value, /)
 |      Return self@=value.
 |  
 |  __imod__(self, value, /)
 |      Return self%=value.
 |  
 |  __imul__(self, value, /)
 |      Return self*=value.
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __ior__(self, value, /)
 |      Return self|=value.
 |  
 |  __ipow__(self, value, /)
 |      Return self**=value.
 |  
 |  __irshift__(self, value, /)
 |      Return self>>=value.
 |  
 |  __isub__(self, value, /)
 |      Return self-=value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __itruediv__(self, value, /)
 |      Return self/=value.
 |  
 |  __ixor__(self, value, /)
 |      Return self^=value.
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __matmul__(self, value, /)
 |      Return self@value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __reduce__(...)
 |      a.__reduce__()
 |      
 |      For pickling.
 |  
 |  __reduce_ex__(...)
 |      Helper for pickle.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmatmul__(self, value, /)
 |      Return value@self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __setstate__(...)
 |      a.__setstate__(state, /)
 |      
 |      For unpickling.
 |      
 |      The `state` argument must be a sequence that contains the following
 |      elements:
 |      
 |      Parameters
 |      ----------
 |      version : int
 |          optional pickle version. If omitted defaults to 0.
 |      shape : tuple
 |      dtype : data-type
 |      isFortran : bool
 |      rawdata : string or list
 |          a binary string with the data (or a list if 'a' is an object array)
 |  
 |  __sizeof__(...)
 |      Size of object in memory, in bytes.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  all(...)
 |      a.all(axis=None, out=None, keepdims=False, *, where=True)
 |      
 |      Returns True if all elements evaluate to True.
 |      
 |      Refer to `numpy.all` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.all : equivalent function
 |  
 |  any(...)
 |      a.any(axis=None, out=None, keepdims=False, *, where=True)
 |      
 |      Returns True if any of the elements of `a` evaluate to True.
 |      
 |      Refer to `numpy.any` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.any : equivalent function
 |  
 |  argmax(...)
 |      a.argmax(axis=None, out=None, *, keepdims=False)
 |      
 |      Return indices of the maximum values along the given axis.
 |      
 |      Refer to `numpy.argmax` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.argmax : equivalent function
 |  
 |  argmin(...)
 |      a.argmin(axis=None, out=None, *, keepdims=False)
 |      
 |      Return indices of the minimum values along the given axis.
 |      
 |      Refer to `numpy.argmin` for detailed documentation.
 |      
 |      See Also
 |      --------
 |      numpy.argmin : equivalent function
 |  
 |  argpartition(...)
 |      a.argpartition(kth, axis=-1, kind='introselect', order=None)
 |      
 |      Returns the indices that would partition this array.
 |      
 |      Refer to `numpy.argpartition` for full documentation.
 |      
 |      .. versionadded:: 1.8.0
 |      
 |      See Also
 |      --------
 |      numpy.argpartition : equivalent function
 |  
 |  argsort(...)
 |      a.argsort(axis=-1, kind=None, order=None)
 |      
 |      Returns the indices that would sort this array.
 |      
 |      Refer to `numpy.argsort` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.argsort : equivalent function
 |  
 |  astype(...)
 |      a.astype(dtype, order='K', casting='unsafe', subok=True, copy=True)
 |      
 |      Copy of the array, cast to a specified type.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or dtype
 |          Typecode or data-type to which the array is cast.
 |      order : {'C', 'F', 'A', 'K'}, optional
 |          Controls the memory layout order of the result.
 |          'C' means C order, 'F' means Fortran order, 'A'
 |          means 'F' order if all the arrays are Fortran contiguous,
 |          'C' order otherwise, and 'K' means as close to the
 |          order the array elements appear in memory as possible.
 |          Default is 'K'.
 |      casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional
 |          Controls what kind of data casting may occur. Defaults to 'unsafe'
 |          for backwards compatibility.
 |      
 |            * 'no' means the data types should not be cast at all.
 |            * 'equiv' means only byte-order changes are allowed.
 |            * 'safe' means only casts which can preserve values are allowed.
 |            * 'same_kind' means only safe casts or casts within a kind,
 |              like float64 to float32, are allowed.
 |            * 'unsafe' means any data conversions may be done.
 |      subok : bool, optional
 |          If True, then sub-classes will be passed-through (default), otherwise
 |          the returned array will be forced to be a base-class array.
 |      copy : bool, optional
 |          By default, astype always returns a newly allocated array. If this
 |          is set to false, and the `dtype`, `order`, and `subok`
 |          requirements are satisfied, the input array is returned instead
 |          of a copy.
 |      
 |      Returns
 |      -------
 |      arr_t : ndarray
 |          Unless `copy` is False and the other conditions for returning the input
 |          array are satisfied (see description for `copy` input parameter), `arr_t`
 |          is a new array of the same shape as the input array, with dtype, order
 |          given by `dtype`, `order`.
 |      
 |      Notes
 |      -----
 |      .. versionchanged:: 1.17.0
 |         Casting between a simple data type and a structured one is possible only
 |         for "unsafe" casting.  Casting to multiple fields is allowed, but
 |         casting from multiple fields is not.
 |      
 |      .. versionchanged:: 1.9.0
 |         Casting from numeric to string types in 'safe' casting mode requires
 |         that the string dtype length is long enough to store the max
 |         integer/float value converted.
 |      
 |      Raises
 |      ------
 |      ComplexWarning
 |          When casting from complex to float or int. To avoid this,
 |          one should use ``a.real.astype(t)``.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([1, 2, 2.5])
 |      >>> x
 |      array([1. ,  2. ,  2.5])
 |      
 |      >>> x.astype(int)
 |      array([1, 2, 2])
 |  
 |  byteswap(...)
 |      a.byteswap(inplace=False)
 |      
 |      Swap the bytes of the array elements
 |      
 |      Toggle between low-endian and big-endian data representation by
 |      returning a byteswapped array, optionally swapped in-place.
 |      Arrays of byte-strings are not swapped. The real and imaginary
 |      parts of a complex number are swapped individually.
 |      
 |      Parameters
 |      ----------
 |      inplace : bool, optional
 |          If ``True``, swap bytes in-place, default is ``False``.
 |      
 |      Returns
 |      -------
 |      out : ndarray
 |          The byteswapped array. If `inplace` is ``True``, this is
 |          a view to self.
 |      
 |      Examples
 |      --------
 |      >>> A = np.array([1, 256, 8755], dtype=np.int16)
 |      >>> list(map(hex, A))
 |      ['0x1', '0x100', '0x2233']
 |      >>> A.byteswap(inplace=True)
 |      array([  256,     1, 13090], dtype=int16)
 |      >>> list(map(hex, A))
 |      ['0x100', '0x1', '0x3322']
 |      
 |      Arrays of byte-strings are not swapped
 |      
 |      >>> A = np.array([b'ceg', b'fac'])
 |      >>> A.byteswap()
 |      array([b'ceg', b'fac'], dtype='|S3')
 |      
 |      ``A.newbyteorder().byteswap()`` produces an array with the same values
 |        but different representation in memory
 |      
 |      >>> A = np.array([1, 2, 3])
 |      >>> A.view(np.uint8)
 |      array([1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
 |             0, 0], dtype=uint8)
 |      >>> A.newbyteorder().byteswap(inplace=True)
 |      array([1, 2, 3])
 |      >>> A.view(np.uint8)
 |      array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
 |             0, 3], dtype=uint8)
 |  
 |  choose(...)
 |      a.choose(choices, out=None, mode='raise')
 |      
 |      Use an index array to construct a new array from a set of choices.
 |      
 |      Refer to `numpy.choose` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.choose : equivalent function
 |  
 |  clip(...)
 |      a.clip(min=None, max=None, out=None, **kwargs)
 |      
 |      Return an array whose values are limited to ``[min, max]``.
 |      One of max or min must be given.
 |      
 |      Refer to `numpy.clip` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.clip : equivalent function
 |  
 |  compress(...)
 |      a.compress(condition, axis=None, out=None)
 |      
 |      Return selected slices of this array along given axis.
 |      
 |      Refer to `numpy.compress` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.compress : equivalent function
 |  
 |  conj(...)
 |      a.conj()
 |      
 |      Complex-conjugate all elements.
 |      
 |      Refer to `numpy.conjugate` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.conjugate : equivalent function
 |  
 |  conjugate(...)
 |      a.conjugate()
 |      
 |      Return the complex conjugate, element-wise.
 |      
 |      Refer to `numpy.conjugate` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.conjugate : equivalent function
 |  
 |  copy(...)
 |      a.copy(order='C')
 |      
 |      Return a copy of the array.
 |      
 |      Parameters
 |      ----------
 |      order : {'C', 'F', 'A', 'K'}, optional
 |          Controls the memory layout of the copy. 'C' means C-order,
 |          'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,
 |          'C' otherwise. 'K' means match the layout of `a` as closely
 |          as possible. (Note that this function and :func:`numpy.copy` are very
 |          similar but have different default values for their order=
 |          arguments, and this function always passes sub-classes through.)
 |      
 |      See also
 |      --------
 |      numpy.copy : Similar function with different default behavior
 |      numpy.copyto
 |      
 |      Notes
 |      -----
 |      This function is the preferred method for creating an array copy.  The
 |      function :func:`numpy.copy` is similar, but it defaults to using order 'K',
 |      and will not pass sub-classes through by default.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([[1,2,3],[4,5,6]], order='F')
 |      
 |      >>> y = x.copy()
 |      
 |      >>> x.fill(0)
 |      
 |      >>> x
 |      array([[0, 0, 0],
 |             [0, 0, 0]])
 |      
 |      >>> y
 |      array([[1, 2, 3],
 |             [4, 5, 6]])
 |      
 |      >>> y.flags['C_CONTIGUOUS']
 |      True
 |  
 |  cumprod(...)
 |      a.cumprod(axis=None, dtype=None, out=None)
 |      
 |      Return the cumulative product of the elements along the given axis.
 |      
 |      Refer to `numpy.cumprod` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.cumprod : equivalent function
 |  
 |  cumsum(...)
 |      a.cumsum(axis=None, dtype=None, out=None)
 |      
 |      Return the cumulative sum of the elements along the given axis.
 |      
 |      Refer to `numpy.cumsum` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.cumsum : equivalent function
 |  
 |  diagonal(...)
 |      a.diagonal(offset=0, axis1=0, axis2=1)
 |      
 |      Return specified diagonals. In NumPy 1.9 the returned array is a
 |      read-only view instead of a copy as in previous NumPy versions.  In
 |      a future version the read-only restriction will be removed.
 |      
 |      Refer to :func:`numpy.diagonal` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.diagonal : equivalent function
 |  
 |  dot(...)
 |  
 |  dump(...)
 |      a.dump(file)
 |      
 |      Dump a pickle of the array to the specified file.
 |      The array can be read back with pickle.load or numpy.load.
 |      
 |      Parameters
 |      ----------
 |      file : str or Path
 |          A string naming the dump file.
 |      
 |          .. versionchanged:: 1.17.0
 |              `pathlib.Path` objects are now accepted.
 |  
 |  dumps(...)
 |      a.dumps()
 |      
 |      Returns the pickle of the array as a string.
 |      pickle.loads will convert the string back to an array.
 |      
 |      Parameters
 |      ----------
 |      None
 |  
 |  fill(...)
 |      a.fill(value)
 |      
 |      Fill the array with a scalar value.
 |      
 |      Parameters
 |      ----------
 |      value : scalar
 |          All elements of `a` will be assigned this value.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([1, 2])
 |      >>> a.fill(0)
 |      >>> a
 |      array([0, 0])
 |      >>> a = np.empty(2)
 |      >>> a.fill(1)
 |      >>> a
 |      array([1.,  1.])
 |      
 |      Fill expects a scalar value and always behaves the same as assigning
 |      to a single array element.  The following is a rare example where this
 |      distinction is important:
 |      
 |      >>> a = np.array([None, None], dtype=object)
 |      >>> a[0] = np.array(3)
 |      >>> a
 |      array([array(3), None], dtype=object)
 |      >>> a.fill(np.array(3))
 |      >>> a
 |      array([array(3), array(3)], dtype=object)
 |      
 |      Where other forms of assignments will unpack the array being assigned:
 |      
 |      >>> a[...] = np.array(3)
 |      >>> a
 |      array([3, 3], dtype=object)
 |  
 |  flatten(...)
 |      a.flatten(order='C')
 |      
 |      Return a copy of the array collapsed into one dimension.
 |      
 |      Parameters
 |      ----------
 |      order : {'C', 'F', 'A', 'K'}, optional
 |          'C' means to flatten in row-major (C-style) order.
 |          'F' means to flatten in column-major (Fortran-
 |          style) order. 'A' means to flatten in column-major
 |          order if `a` is Fortran *contiguous* in memory,
 |          row-major order otherwise. 'K' means to flatten
 |          `a` in the order the elements occur in memory.
 |          The default is 'C'.
 |      
 |      Returns
 |      -------
 |      y : ndarray
 |          A copy of the input array, flattened to one dimension.
 |      
 |      See Also
 |      --------
 |      ravel : Return a flattened array.
 |      flat : A 1-D flat iterator over the array.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([[1,2], [3,4]])
 |      >>> a.flatten()
 |      array([1, 2, 3, 4])
 |      >>> a.flatten('F')
 |      array([1, 3, 2, 4])
 |  
 |  getfield(...)
 |      a.getfield(dtype, offset=0)
 |      
 |      Returns a field of the given array as a certain type.
 |      
 |      A field is a view of the array data with a given data-type. The values in
 |      the view are determined by the given type and the offset into the current
 |      array in bytes. The offset needs to be such that the view dtype fits in the
 |      array dtype; for example an array of dtype complex128 has 16-byte elements.
 |      If taking a view with a 32-bit integer (4 bytes), the offset needs to be
 |      between 0 and 12 bytes.
 |      
 |      Parameters
 |      ----------
 |      dtype : str or dtype
 |          The data type of the view. The dtype size of the view can not be larger
 |          than that of the array itself.
 |      offset : int
 |          Number of bytes to skip before beginning the element view.
 |      
 |      Examples
 |      --------
 |      >>> x = np.diag([1.+1.j]*2)
 |      >>> x[1, 1] = 2 + 4.j
 |      >>> x
 |      array([[1.+1.j,  0.+0.j],
 |             [0.+0.j,  2.+4.j]])
 |      >>> x.getfield(np.float64)
 |      array([[1.,  0.],
 |             [0.,  2.]])
 |      
 |      By choosing an offset of 8 bytes we can select the complex part of the
 |      array for our view:
 |      
 |      >>> x.getfield(np.float64, offset=8)
 |      array([[1.,  0.],
 |             [0.,  4.]])
 |  
 |  item(...)
 |      a.item(*args)
 |      
 |      Copy an element of an array to a standard Python scalar and return it.
 |      
 |      Parameters
 |      ----------
 |      \*args : Arguments (variable number and type)
 |      
 |          * none: in this case, the method only works for arrays
 |            with one element (`a.size == 1`), which element is
 |            copied into a standard Python scalar object and returned.
 |      
 |          * int_type: this argument is interpreted as a flat index into
 |            the array, specifying which element to copy and return.
 |      
 |          * tuple of int_types: functions as does a single int_type argument,
 |            except that the argument is interpreted as an nd-index into the
 |            array.
 |      
 |      Returns
 |      -------
 |      z : Standard Python scalar object
 |          A copy of the specified element of the array as a suitable
 |          Python scalar
 |      
 |      Notes
 |      -----
 |      When the data type of `a` is longdouble or clongdouble, item() returns
 |      a scalar array object because there is no available Python scalar that
 |      would not lose information. Void arrays return a buffer object for item(),
 |      unless fields are defined, in which case a tuple is returned.
 |      
 |      `item` is very similar to a[args], except, instead of an array scalar,
 |      a standard Python scalar is returned. This can be useful for speeding up
 |      access to elements of the array and doing arithmetic on elements of the
 |      array using Python's optimized math.
 |      
 |      Examples
 |      --------
 |      >>> np.random.seed(123)
 |      >>> x = np.random.randint(9, size=(3, 3))
 |      >>> x
 |      array([[2, 2, 6],
 |             [1, 3, 6],
 |             [1, 0, 1]])
 |      >>> x.item(3)
 |      1
 |      >>> x.item(7)
 |      0
 |      >>> x.item((0, 1))
 |      2
 |      >>> x.item((2, 2))
 |      1
 |  
 |  itemset(...)
 |      a.itemset(*args)
 |      
 |      Insert scalar into an array (scalar is cast to array's dtype, if possible)
 |      
 |      There must be at least 1 argument, and define the last argument
 |      as *item*.  Then, ``a.itemset(*args)`` is equivalent to but faster
 |      than ``a[args] = item``.  The item should be a scalar value and `args`
 |      must select a single item in the array `a`.
 |      
 |      Parameters
 |      ----------
 |      \*args : Arguments
 |          If one argument: a scalar, only used in case `a` is of size 1.
 |          If two arguments: the last argument is the value to be set
 |          and must be a scalar, the first argument specifies a single array
 |          element location. It is either an int or a tuple.
 |      
 |      Notes
 |      -----
 |      Compared to indexing syntax, `itemset` provides some speed increase
 |      for placing a scalar into a particular location in an `ndarray`,
 |      if you must do this.  However, generally this is discouraged:
 |      among other problems, it complicates the appearance of the code.
 |      Also, when using `itemset` (and `item`) inside a loop, be sure
 |      to assign the methods to a local variable to avoid the attribute
 |      look-up at each loop iteration.
 |      
 |      Examples
 |      --------
 |      >>> np.random.seed(123)
 |      >>> x = np.random.randint(9, size=(3, 3))
 |      >>> x
 |      array([[2, 2, 6],
 |             [1, 3, 6],
 |             [1, 0, 1]])
 |      >>> x.itemset(4, 0)
 |      >>> x.itemset((2, 2), 9)
 |      >>> x
 |      array([[2, 2, 6],
 |             [1, 0, 6],
 |             [1, 0, 9]])
 |  
 |  max(...)
 |      a.max(axis=None, out=None, keepdims=False, initial=<no value>, where=True)
 |      
 |      Return the maximum along a given axis.
 |      
 |      Refer to `numpy.amax` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.amax : equivalent function
 |  
 |  mean(...)
 |      a.mean(axis=None, dtype=None, out=None, keepdims=False, *, where=True)
 |      
 |      Returns the average of the array elements along given axis.
 |      
 |      Refer to `numpy.mean` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.mean : equivalent function
 |  
 |  min(...)
 |      a.min(axis=None, out=None, keepdims=False, initial=<no value>, where=True)
 |      
 |      Return the minimum along a given axis.
 |      
 |      Refer to `numpy.amin` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.amin : equivalent function
 |  
 |  newbyteorder(...)
 |      arr.newbyteorder(new_order='S', /)
 |      
 |      Return the array with the same data viewed with a different byte order.
 |      
 |      Equivalent to::
 |      
 |          arr.view(arr.dtype.newbytorder(new_order))
 |      
 |      Changes are also made in all fields and sub-arrays of the array data
 |      type.
 |      
 |      
 |      
 |      Parameters
 |      ----------
 |      new_order : string, optional
 |          Byte order to force; a value from the byte order specifications
 |          below. `new_order` codes can be any of:
 |      
 |          * 'S' - swap dtype from current to opposite endian
 |          * {'<', 'little'} - little endian
 |          * {'>', 'big'} - big endian
 |          * {'=', 'native'} - native order, equivalent to `sys.byteorder`
 |          * {'|', 'I'} - ignore (no change to byte order)
 |      
 |          The default value ('S') results in swapping the current
 |          byte order.
 |      
 |      
 |      Returns
 |      -------
 |      new_arr : array
 |          New array object with the dtype reflecting given change to the
 |          byte order.
 |  
 |  nonzero(...)
 |      a.nonzero()
 |      
 |      Return the indices of the elements that are non-zero.
 |      
 |      Refer to `numpy.nonzero` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.nonzero : equivalent function
 |  
 |  partition(...)
 |      a.partition(kth, axis=-1, kind='introselect', order=None)
 |      
 |      Rearranges the elements in the array in such a way that the value of the
 |      element in kth position is in the position it would be in a sorted array.
 |      All elements smaller than the kth element are moved before this element and
 |      all equal or greater are moved behind it. The ordering of the elements in
 |      the two partitions is undefined.
 |      
 |      .. versionadded:: 1.8.0
 |      
 |      Parameters
 |      ----------
 |      kth : int or sequence of ints
 |          Element index to partition by. The kth element value will be in its
 |          final sorted position and all smaller elements will be moved before it
 |          and all equal or greater elements behind it.
 |          The order of all elements in the partitions is undefined.
 |          If provided with a sequence of kth it will partition all elements
 |          indexed by kth of them into their sorted position at once.
 |      
 |          .. deprecated:: 1.22.0
 |              Passing booleans as index is deprecated.
 |      axis : int, optional
 |          Axis along which to sort. Default is -1, which means sort along the
 |          last axis.
 |      kind : {'introselect'}, optional
 |          Selection algorithm. Default is 'introselect'.
 |      order : str or list of str, optional
 |          When `a` is an array with fields defined, this argument specifies
 |          which fields to compare first, second, etc. A single field can
 |          be specified as a string, and not all fields need to be specified,
 |          but unspecified fields will still be used, in the order in which
 |          they come up in the dtype, to break ties.
 |      
 |      See Also
 |      --------
 |      numpy.partition : Return a partitioned copy of an array.
 |      argpartition : Indirect partition.
 |      sort : Full sort.
 |      
 |      Notes
 |      -----
 |      See ``np.partition`` for notes on the different algorithms.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([3, 4, 2, 1])
 |      >>> a.partition(3)
 |      >>> a
 |      array([2, 1, 3, 4])
 |      
 |      >>> a.partition((1, 3))
 |      >>> a
 |      array([1, 2, 3, 4])
 |  
 |  prod(...)
 |      a.prod(axis=None, dtype=None, out=None, keepdims=False, initial=1, where=True)
 |      
 |      Return the product of the array elements over the given axis
 |      
 |      Refer to `numpy.prod` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.prod : equivalent function
 |  
 |  ptp(...)
 |      a.ptp(axis=None, out=None, keepdims=False)
 |      
 |      Peak to peak (maximum - minimum) value along a given axis.
 |      
 |      Refer to `numpy.ptp` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.ptp : equivalent function
 |  
 |  put(...)
 |      a.put(indices, values, mode='raise')
 |      
 |      Set ``a.flat[n] = values[n]`` for all `n` in indices.
 |      
 |      Refer to `numpy.put` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.put : equivalent function
 |  
 |  ravel(...)
 |      a.ravel([order])
 |      
 |      Return a flattened array.
 |      
 |      Refer to `numpy.ravel` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.ravel : equivalent function
 |      
 |      ndarray.flat : a flat iterator on the array.
 |  
 |  repeat(...)
 |      a.repeat(repeats, axis=None)
 |      
 |      Repeat elements of an array.
 |      
 |      Refer to `numpy.repeat` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.repeat : equivalent function
 |  
 |  reshape(...)
 |      a.reshape(shape, order='C')
 |      
 |      Returns an array containing the same data with a new shape.
 |      
 |      Refer to `numpy.reshape` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.reshape : equivalent function
 |      
 |      Notes
 |      -----
 |      Unlike the free function `numpy.reshape`, this method on `ndarray` allows
 |      the elements of the shape parameter to be passed in as separate arguments.
 |      For example, ``a.reshape(10, 11)`` is equivalent to
 |      ``a.reshape((10, 11))``.
 |  
 |  resize(...)
 |      a.resize(new_shape, refcheck=True)
 |      
 |      Change shape and size of array in-place.
 |      
 |      Parameters
 |      ----------
 |      new_shape : tuple of ints, or `n` ints
 |          Shape of resized array.
 |      refcheck : bool, optional
 |          If False, reference count will not be checked. Default is True.
 |      
 |      Returns
 |      -------
 |      None
 |      
 |      Raises
 |      ------
 |      ValueError
 |          If `a` does not own its own data or references or views to it exist,
 |          and the data memory must be changed.
 |          PyPy only: will always raise if the data memory must be changed, since
 |          there is no reliable way to determine if references or views to it
 |          exist.
 |      
 |      SystemError
 |          If the `order` keyword argument is specified. This behaviour is a
 |          bug in NumPy.
 |      
 |      See Also
 |      --------
 |      resize : Return a new array with the specified shape.
 |      
 |      Notes
 |      -----
 |      This reallocates space for the data area if necessary.
 |      
 |      Only contiguous arrays (data elements consecutive in memory) can be
 |      resized.
 |      
 |      The purpose of the reference count check is to make sure you
 |      do not use this array as a buffer for another Python object and then
 |      reallocate the memory. However, reference counts can increase in
 |      other ways so if you are sure that you have not shared the memory
 |      for this array with another Python object, then you may safely set
 |      `refcheck` to False.
 |      
 |      Examples
 |      --------
 |      Shrinking an array: array is flattened (in the order that the data are
 |      stored in memory), resized, and reshaped:
 |      
 |      >>> a = np.array([[0, 1], [2, 3]], order='C')
 |      >>> a.resize((2, 1))
 |      >>> a
 |      array([[0],
 |             [1]])
 |      
 |      >>> a = np.array([[0, 1], [2, 3]], order='F')
 |      >>> a.resize((2, 1))
 |      >>> a
 |      array([[0],
 |             [2]])
 |      
 |      Enlarging an array: as above, but missing entries are filled with zeros:
 |      
 |      >>> b = np.array([[0, 1], [2, 3]])
 |      >>> b.resize(2, 3) # new_shape parameter doesn't have to be a tuple
 |      >>> b
 |      array([[0, 1, 2],
 |             [3, 0, 0]])
 |      
 |      Referencing an array prevents resizing...
 |      
 |      >>> c = a
 |      >>> a.resize((1, 1))
 |      Traceback (most recent call last):
 |      ...
 |      ValueError: cannot resize an array that references or is referenced ...
 |      
 |      Unless `refcheck` is False:
 |      
 |      >>> a.resize((1, 1), refcheck=False)
 |      >>> a
 |      array([[0]])
 |      >>> c
 |      array([[0]])
 |  
 |  round(...)
 |      a.round(decimals=0, out=None)
 |      
 |      Return `a` with each element rounded to the given number of decimals.
 |      
 |      Refer to `numpy.around` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.around : equivalent function
 |  
 |  searchsorted(...)
 |      a.searchsorted(v, side='left', sorter=None)
 |      
 |      Find indices where elements of v should be inserted in a to maintain order.
 |      
 |      For full documentation, see `numpy.searchsorted`
 |      
 |      See Also
 |      --------
 |      numpy.searchsorted : equivalent function
 |  
 |  setfield(...)
 |      a.setfield(val, dtype, offset=0)
 |      
 |      Put a value into a specified place in a field defined by a data-type.
 |      
 |      Place `val` into `a`'s field defined by `dtype` and beginning `offset`
 |      bytes into the field.
 |      
 |      Parameters
 |      ----------
 |      val : object
 |          Value to be placed in field.
 |      dtype : dtype object
 |          Data-type of the field in which to place `val`.
 |      offset : int, optional
 |          The number of bytes into the field at which to place `val`.
 |      
 |      Returns
 |      -------
 |      None
 |      
 |      See Also
 |      --------
 |      getfield
 |      
 |      Examples
 |      --------
 |      >>> x = np.eye(3)
 |      >>> x.getfield(np.float64)
 |      array([[1.,  0.,  0.],
 |             [0.,  1.,  0.],
 |             [0.,  0.,  1.]])
 |      >>> x.setfield(3, np.int32)
 |      >>> x.getfield(np.int32)
 |      array([[3, 3, 3],
 |             [3, 3, 3],
 |             [3, 3, 3]], dtype=int32)
 |      >>> x
 |      array([[1.0e+000, 1.5e-323, 1.5e-323],
 |             [1.5e-323, 1.0e+000, 1.5e-323],
 |             [1.5e-323, 1.5e-323, 1.0e+000]])
 |      >>> x.setfield(np.eye(3), np.int32)
 |      >>> x
 |      array([[1.,  0.,  0.],
 |             [0.,  1.,  0.],
 |             [0.,  0.,  1.]])
 |  
 |  setflags(...)
 |      a.setflags(write=None, align=None, uic=None)
 |      
 |      Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY,
 |      respectively.
 |      
 |      These Boolean-valued flags affect how numpy interprets the memory
 |      area used by `a` (see Notes below). The ALIGNED flag can only
 |      be set to True if the data is actually aligned according to the type.
 |      The WRITEBACKIFCOPY and flag can never be set
 |      to True. The flag WRITEABLE can only be set to True if the array owns its
 |      own memory, or the ultimate owner of the memory exposes a writeable buffer
 |      interface, or is a string. (The exception for string is made so that
 |      unpickling can be done without copying memory.)
 |      
 |      Parameters
 |      ----------
 |      write : bool, optional
 |          Describes whether or not `a` can be written to.
 |      align : bool, optional
 |          Describes whether or not `a` is aligned properly for its type.
 |      uic : bool, optional
 |          Describes whether or not `a` is a copy of another "base" array.
 |      
 |      Notes
 |      -----
 |      Array flags provide information about how the memory area used
 |      for the array is to be interpreted. There are 7 Boolean flags
 |      in use, only four of which can be changed by the user:
 |      WRITEBACKIFCOPY, WRITEABLE, and ALIGNED.
 |      
 |      WRITEABLE (W) the data area can be written to;
 |      
 |      ALIGNED (A) the data and strides are aligned appropriately for the hardware
 |      (as determined by the compiler);
 |      
 |      WRITEBACKIFCOPY (X) this array is a copy of some other array (referenced
 |      by .base). When the C-API function PyArray_ResolveWritebackIfCopy is
 |      called, the base array will be updated with the contents of this array.
 |      
 |      All flags can be accessed using the single (upper case) letter as well
 |      as the full name.
 |      
 |      Examples
 |      --------
 |      >>> y = np.array([[3, 1, 7],
 |      ...               [2, 0, 0],
 |      ...               [8, 5, 9]])
 |      >>> y
 |      array([[3, 1, 7],
 |             [2, 0, 0],
 |             [8, 5, 9]])
 |      >>> y.flags
 |        C_CONTIGUOUS : True
 |        F_CONTIGUOUS : False
 |        OWNDATA : True
 |        WRITEABLE : True
 |        ALIGNED : True
 |        WRITEBACKIFCOPY : False
 |      >>> y.setflags(write=0, align=0)
 |      >>> y.flags
 |        C_CONTIGUOUS : True
 |        F_CONTIGUOUS : False
 |        OWNDATA : True
 |        WRITEABLE : False
 |        ALIGNED : False
 |        WRITEBACKIFCOPY : False
 |      >>> y.setflags(uic=1)
 |      Traceback (most recent call last):
 |        File "<stdin>", line 1, in <module>
 |      ValueError: cannot set WRITEBACKIFCOPY flag to True
 |  
 |  sort(...)
 |      a.sort(axis=-1, kind=None, order=None)
 |      
 |      Sort an array in-place. Refer to `numpy.sort` for full documentation.
 |      
 |      Parameters
 |      ----------
 |      axis : int, optional
 |          Axis along which to sort. Default is -1, which means sort along the
 |          last axis.
 |      kind : {'quicksort', 'mergesort', 'heapsort', 'stable'}, optional
 |          Sorting algorithm. The default is 'quicksort'. Note that both 'stable'
 |          and 'mergesort' use timsort under the covers and, in general, the
 |          actual implementation will vary with datatype. The 'mergesort' option
 |          is retained for backwards compatibility.
 |      
 |          .. versionchanged:: 1.15.0
 |             The 'stable' option was added.
 |      
 |      order : str or list of str, optional
 |          When `a` is an array with fields defined, this argument specifies
 |          which fields to compare first, second, etc.  A single field can
 |          be specified as a string, and not all fields need be specified,
 |          but unspecified fields will still be used, in the order in which
 |          they come up in the dtype, to break ties.
 |      
 |      See Also
 |      --------
 |      numpy.sort : Return a sorted copy of an array.
 |      numpy.argsort : Indirect sort.
 |      numpy.lexsort : Indirect stable sort on multiple keys.
 |      numpy.searchsorted : Find elements in sorted array.
 |      numpy.partition: Partial sort.
 |      
 |      Notes
 |      -----
 |      See `numpy.sort` for notes on the different sorting algorithms.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([[1,4], [3,1]])
 |      >>> a.sort(axis=1)
 |      >>> a
 |      array([[1, 4],
 |             [1, 3]])
 |      >>> a.sort(axis=0)
 |      >>> a
 |      array([[1, 3],
 |             [1, 4]])
 |      
 |      Use the `order` keyword to specify a field to use when sorting a
 |      structured array:
 |      
 |      >>> a = np.array([('a', 2), ('c', 1)], dtype=[('x', 'S1'), ('y', int)])
 |      >>> a.sort(order='y')
 |      >>> a
 |      array([(b'c', 1), (b'a', 2)],
 |            dtype=[('x', 'S1'), ('y', '<i8')])
 |  
 |  squeeze(...)
 |      a.squeeze(axis=None)
 |      
 |      Remove axes of length one from `a`.
 |      
 |      Refer to `numpy.squeeze` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.squeeze : equivalent function
 |  
 |  std(...)
 |      a.std(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)
 |      
 |      Returns the standard deviation of the array elements along given axis.
 |      
 |      Refer to `numpy.std` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.std : equivalent function
 |  
 |  sum(...)
 |      a.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0, where=True)
 |      
 |      Return the sum of the array elements over the given axis.
 |      
 |      Refer to `numpy.sum` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.sum : equivalent function
 |  
 |  swapaxes(...)
 |      a.swapaxes(axis1, axis2)
 |      
 |      Return a view of the array with `axis1` and `axis2` interchanged.
 |      
 |      Refer to `numpy.swapaxes` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.swapaxes : equivalent function
 |  
 |  take(...)
 |      a.take(indices, axis=None, out=None, mode='raise')
 |      
 |      Return an array formed from the elements of `a` at the given indices.
 |      
 |      Refer to `numpy.take` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.take : equivalent function
 |  
 |  tobytes(...)
 |      a.tobytes(order='C')
 |      
 |      Construct Python bytes containing the raw data bytes in the array.
 |      
 |      Constructs Python bytes showing a copy of the raw contents of
 |      data memory. The bytes object is produced in C-order by default.
 |      This behavior is controlled by the ``order`` parameter.
 |      
 |      .. versionadded:: 1.9.0
 |      
 |      Parameters
 |      ----------
 |      order : {'C', 'F', 'A'}, optional
 |          Controls the memory layout of the bytes object. 'C' means C-order,
 |          'F' means F-order, 'A' (short for *Any*) means 'F' if `a` is
 |          Fortran contiguous, 'C' otherwise. Default is 'C'.
 |      
 |      Returns
 |      -------
 |      s : bytes
 |          Python bytes exhibiting a copy of `a`'s raw data.
 |      
 |      See also
 |      --------
 |      frombuffer
 |          Inverse of this operation, construct a 1-dimensional array from Python
 |          bytes.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([[0, 1], [2, 3]], dtype='<u2')
 |      >>> x.tobytes()
 |      b'\x00\x00\x01\x00\x02\x00\x03\x00'
 |      >>> x.tobytes('C') == x.tobytes()
 |      True
 |      >>> x.tobytes('F')
 |      b'\x00\x00\x02\x00\x01\x00\x03\x00'
 |  
 |  tofile(...)
 |      a.tofile(fid, sep="", format="%s")
 |      
 |      Write array to a file as text or binary (default).
 |      
 |      Data is always written in 'C' order, independent of the order of `a`.
 |      The data produced by this method can be recovered using the function
 |      fromfile().
 |      
 |      Parameters
 |      ----------
 |      fid : file or str or Path
 |          An open file object, or a string containing a filename.
 |      
 |          .. versionchanged:: 1.17.0
 |              `pathlib.Path` objects are now accepted.
 |      
 |      sep : str
 |          Separator between array items for text output.
 |          If "" (empty), a binary file is written, equivalent to
 |          ``file.write(a.tobytes())``.
 |      format : str
 |          Format string for text file output.
 |          Each entry in the array is formatted to text by first converting
 |          it to the closest Python type, and then using "format" % item.
 |      
 |      Notes
 |      -----
 |      This is a convenience function for quick storage of array data.
 |      Information on endianness and precision is lost, so this method is not a
 |      good choice for files intended to archive data or transport data between
 |      machines with different endianness. Some of these problems can be overcome
 |      by outputting the data as text files, at the expense of speed and file
 |      size.
 |      
 |      When fid is a file object, array contents are directly written to the
 |      file, bypassing the file object's ``write`` method. As a result, tofile
 |      cannot be used with files objects supporting compression (e.g., GzipFile)
 |      or file-like objects that do not support ``fileno()`` (e.g., BytesIO).
 |  
 |  tolist(...)
 |      a.tolist()
 |      
 |      Return the array as an ``a.ndim``-levels deep nested list of Python scalars.
 |      
 |      Return a copy of the array data as a (nested) Python list.
 |      Data items are converted to the nearest compatible builtin Python type, via
 |      the `~numpy.ndarray.item` function.
 |      
 |      If ``a.ndim`` is 0, then since the depth of the nested list is 0, it will
 |      not be a list at all, but a simple Python scalar.
 |      
 |      Parameters
 |      ----------
 |      none
 |      
 |      Returns
 |      -------
 |      y : object, or list of object, or list of list of object, or ...
 |          The possibly nested list of array elements.
 |      
 |      Notes
 |      -----
 |      The array may be recreated via ``a = np.array(a.tolist())``, although this
 |      may sometimes lose precision.
 |      
 |      Examples
 |      --------
 |      For a 1D array, ``a.tolist()`` is almost the same as ``list(a)``,
 |      except that ``tolist`` changes numpy scalars to Python scalars:
 |      
 |      >>> a = np.uint32([1, 2])
 |      >>> a_list = list(a)
 |      >>> a_list
 |      [1, 2]
 |      >>> type(a_list[0])
 |      <class 'numpy.uint32'>
 |      >>> a_tolist = a.tolist()
 |      >>> a_tolist
 |      [1, 2]
 |      >>> type(a_tolist[0])
 |      <class 'int'>
 |      
 |      Additionally, for a 2D array, ``tolist`` applies recursively:
 |      
 |      >>> a = np.array([[1, 2], [3, 4]])
 |      >>> list(a)
 |      [array([1, 2]), array([3, 4])]
 |      >>> a.tolist()
 |      [[1, 2], [3, 4]]
 |      
 |      The base case for this recursion is a 0D array:
 |      
 |      >>> a = np.array(1)
 |      >>> list(a)
 |      Traceback (most recent call last):
 |        ...
 |      TypeError: iteration over a 0-d array
 |      >>> a.tolist()
 |      1
 |  
 |  tostring(...)
 |      a.tostring(order='C')
 |      
 |      A compatibility alias for `tobytes`, with exactly the same behavior.
 |      
 |      Despite its name, it returns `bytes` not `str`\ s.
 |      
 |      .. deprecated:: 1.19.0
 |  
 |  trace(...)
 |      a.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)
 |      
 |      Return the sum along diagonals of the array.
 |      
 |      Refer to `numpy.trace` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.trace : equivalent function
 |  
 |  transpose(...)
 |      a.transpose(*axes)
 |      
 |      Returns a view of the array with axes transposed.
 |      
 |      Refer to `numpy.transpose` for full documentation.
 |      
 |      Parameters
 |      ----------
 |      axes : None, tuple of ints, or `n` ints
 |      
 |       * None or no argument: reverses the order of the axes.
 |      
 |       * tuple of ints: `i` in the `j`-th place in the tuple means that the
 |         array's `i`-th axis becomes the transposed array's `j`-th axis.
 |      
 |       * `n` ints: same as an n-tuple of the same ints (this form is
 |         intended simply as a "convenience" alternative to the tuple form).
 |      
 |      Returns
 |      -------
 |      p : ndarray
 |          View of the array with its axes suitably permuted.
 |      
 |      See Also
 |      --------
 |      transpose : Equivalent function.
 |      ndarray.T : Array property returning the array transposed.
 |      ndarray.reshape : Give a new shape to an array without changing its data.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([[1, 2], [3, 4]])
 |      >>> a
 |      array([[1, 2],
 |             [3, 4]])
 |      >>> a.transpose()
 |      array([[1, 3],
 |             [2, 4]])
 |      >>> a.transpose((1, 0))
 |      array([[1, 3],
 |             [2, 4]])
 |      >>> a.transpose(1, 0)
 |      array([[1, 3],
 |             [2, 4]])
 |      
 |      >>> a = np.array([1, 2, 3, 4])
 |      >>> a
 |      array([1, 2, 3, 4])
 |      >>> a.transpose()
 |      array([1, 2, 3, 4])
 |  
 |  var(...)
 |      a.var(axis=None, dtype=None, out=None, ddof=0, keepdims=False, *, where=True)
 |      
 |      Returns the variance of the array elements, along given axis.
 |      
 |      Refer to `numpy.var` for full documentation.
 |      
 |      See Also
 |      --------
 |      numpy.var : equivalent function
 |  
 |  view(...)
 |      a.view([dtype][, type])
 |      
 |      New view of array with the same data.
 |      
 |      .. note::
 |          Passing None for ``dtype`` is different from omitting the parameter,
 |          since the former invokes ``dtype(None)`` which is an alias for
 |          ``dtype('float_')``.
 |      
 |      Parameters
 |      ----------
 |      dtype : data-type or ndarray sub-class, optional
 |          Data-type descriptor of the returned view, e.g., float32 or int16.
 |          Omitting it results in the view having the same data-type as `a`.
 |          This argument can also be specified as an ndarray sub-class, which
 |          then specifies the type of the returned object (this is equivalent to
 |          setting the ``type`` parameter).
 |      type : Python type, optional
 |          Type of the returned view, e.g., ndarray or matrix.  Again, omission
 |          of the parameter results in type preservation.
 |      
 |      Notes
 |      -----
 |      ``a.view()`` is used two different ways:
 |      
 |      ``a.view(some_dtype)`` or ``a.view(dtype=some_dtype)`` constructs a view
 |      of the array's memory with a different data-type.  This can cause a
 |      reinterpretation of the bytes of memory.
 |      
 |      ``a.view(ndarray_subclass)`` or ``a.view(type=ndarray_subclass)`` just
 |      returns an instance of `ndarray_subclass` that looks at the same array
 |      (same shape, dtype, etc.)  This does not cause a reinterpretation of the
 |      memory.
 |      
 |      For ``a.view(some_dtype)``, if ``some_dtype`` has a different number of
 |      bytes per entry than the previous dtype (for example, converting a regular
 |      array to a structured array), then the last axis of ``a`` must be
 |      contiguous. This axis will be resized in the result.
 |      
 |      .. versionchanged:: 1.23.0
 |         Only the last axis needs to be contiguous. Previously, the entire array
 |         had to be C-contiguous.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([(1, 2)], dtype=[('a', np.int8), ('b', np.int8)])
 |      
 |      Viewing array data using a different type and dtype:
 |      
 |      >>> y = x.view(dtype=np.int16, type=np.matrix)
 |      >>> y
 |      matrix([[513]], dtype=int16)
 |      >>> print(type(y))
 |      <class 'numpy.matrix'>
 |      
 |      Creating a view on a structured array so it can be used in calculations
 |      
 |      >>> x = np.array([(1, 2),(3,4)], dtype=[('a', np.int8), ('b', np.int8)])
 |      >>> xv = x.view(dtype=np.int8).reshape(-1,2)
 |      >>> xv
 |      array([[1, 2],
 |             [3, 4]], dtype=int8)
 |      >>> xv.mean(0)
 |      array([2.,  3.])
 |      
 |      Making changes to the view changes the underlying array
 |      
 |      >>> xv[0,1] = 20
 |      >>> x
 |      array([(1, 20), (3,  4)], dtype=[('a', 'i1'), ('b', 'i1')])
 |      
 |      Using a view to convert an array to a recarray:
 |      
 |      >>> z = x.view(np.recarray)
 |      >>> z.a
 |      array([1, 3], dtype=int8)
 |      
 |      Views share data:
 |      
 |      >>> x[0] = (9, 10)
 |      >>> z[0]
 |      (9, 10)
 |      
 |      Views that change the dtype size (bytes per entry) should normally be
 |      avoided on arrays defined by slices, transposes, fortran-ordering, etc.:
 |      
 |      >>> x = np.array([[1, 2, 3], [4, 5, 6]], dtype=np.int16)
 |      >>> y = x[:, ::2]
 |      >>> y
 |      array([[1, 3],
 |             [4, 6]], dtype=int16)
 |      >>> y.view(dtype=[('width', np.int16), ('length', np.int16)])
 |      Traceback (most recent call last):
 |          ...
 |      ValueError: To change to a dtype of a different size, the last axis must be contiguous
 |      >>> z = y.copy()
 |      >>> z.view(dtype=[('width', np.int16), ('length', np.int16)])
 |      array([[(1, 3)],
 |             [(4, 6)]], dtype=[('width', '<i2'), ('length', '<i2')])
 |      
 |      However, views that change dtype are totally fine for arrays with a
 |      contiguous last axis, even if the rest of the axes are not C-contiguous:
 |      
 |      >>> x = np.arange(2 * 3 * 4, dtype=np.int8).reshape(2, 3, 4)
 |      >>> x.transpose(1, 0, 2).view(np.int16)
 |      array([[[ 256,  770],
 |              [3340, 3854]],
 |      <BLANKLINE>
 |             [[1284, 1798],
 |              [4368, 4882]],
 |      <BLANKLINE>
 |             [[2312, 2826],
 |              [5396, 5910]]], dtype=int16)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  __class_getitem__(...) from builtins.type
 |      a.__class_getitem__(item, /)
 |      
 |      Return a parametrized wrapper around the `~numpy.ndarray` type.
 |      
 |      .. versionadded:: 1.22
 |      
 |      Returns
 |      -------
 |      alias : types.GenericAlias
 |          A parametrized `~numpy.ndarray` type.
 |      
 |      Examples
 |      --------
 |      >>> from typing import Any
 |      >>> import numpy as np
 |      
 |      >>> np.ndarray[Any, np.dtype[Any]]
 |      numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]
 |      
 |      See Also
 |      --------
 |      :pep:`585` : Type hinting generics in standard collections.
 |      numpy.typing.NDArray : An ndarray alias :term:`generic <generic type>`
 |                          w.r.t. its `dtype.type <numpy.dtype.type>`.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  T
 |      View of the transposed array.
 |      
 |      Same as ``self.transpose()``.
 |      
 |      Examples
 |      --------
 |      >>> a = np.array([[1, 2], [3, 4]])
 |      >>> a
 |      array([[1, 2],
 |             [3, 4]])
 |      >>> a.T
 |      array([[1, 3],
 |             [2, 4]])
 |      
 |      >>> a = np.array([1, 2, 3, 4])
 |      >>> a
 |      array([1, 2, 3, 4])
 |      >>> a.T
 |      array([1, 2, 3, 4])
 |      
 |      See Also
 |      --------
 |      transpose
 |  
 |  __array_interface__
 |      Array protocol: Python side.
 |  
 |  __array_priority__
 |      Array priority.
 |  
 |  __array_struct__
 |      Array protocol: C-struct side.
 |  
 |  base
 |      Base object if memory is from some other object.
 |      
 |      Examples
 |      --------
 |      The base of an array that owns its memory is None:
 |      
 |      >>> x = np.array([1,2,3,4])
 |      >>> x.base is None
 |      True
 |      
 |      Slicing creates a view, whose memory is shared with x:
 |      
 |      >>> y = x[2:]
 |      >>> y.base is x
 |      True
 |  
 |  ctypes
 |      An object to simplify the interaction of the array with the ctypes
 |      module.
 |      
 |      This attribute creates an object that makes it easier to use arrays
 |      when calling shared libraries with the ctypes module. The returned
 |      object has, among others, data, shape, and strides attributes (see
 |      Notes below) which themselves return ctypes objects that can be used
 |      as arguments to a shared library.
 |      
 |      Parameters
 |      ----------
 |      None
 |      
 |      Returns
 |      -------
 |      c : Python object
 |          Possessing attributes data, shape, strides, etc.
 |      
 |      See Also
 |      --------
 |      numpy.ctypeslib
 |      
 |      Notes
 |      -----
 |      Below are the public attributes of this object which were documented
 |      in "Guide to NumPy" (we have omitted undocumented public attributes,
 |      as well as documented private attributes):
 |      
 |      .. autoattribute:: numpy.core._internal._ctypes.data
 |          :noindex:
 |      
 |      .. autoattribute:: numpy.core._internal._ctypes.shape
 |          :noindex:
 |      
 |      .. autoattribute:: numpy.core._internal._ctypes.strides
 |          :noindex:
 |      
 |      .. automethod:: numpy.core._internal._ctypes.data_as
 |          :noindex:
 |      
 |      .. automethod:: numpy.core._internal._ctypes.shape_as
 |          :noindex:
 |      
 |      .. automethod:: numpy.core._internal._ctypes.strides_as
 |          :noindex:
 |      
 |      If the ctypes module is not available, then the ctypes attribute
 |      of array objects still returns something useful, but ctypes objects
 |      are not returned and errors may be raised instead. In particular,
 |      the object will still have the ``as_parameter`` attribute which will
 |      return an integer equal to the data attribute.
 |      
 |      Examples
 |      --------
 |      >>> import ctypes
 |      >>> x = np.array([[0, 1], [2, 3]], dtype=np.int32)
 |      >>> x
 |      array([[0, 1],
 |             [2, 3]], dtype=int32)
 |      >>> x.ctypes.data
 |      31962608 # may vary
 |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32))
 |      <__main__.LP_c_uint object at 0x7ff2fc1fc200> # may vary
 |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint32)).contents
 |      c_uint(0)
 |      >>> x.ctypes.data_as(ctypes.POINTER(ctypes.c_uint64)).contents
 |      c_ulong(4294967296)
 |      >>> x.ctypes.shape
 |      <numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1fce60> # may vary
 |      >>> x.ctypes.strides
 |      <numpy.core._internal.c_long_Array_2 object at 0x7ff2fc1ff320> # may vary
 |  
 |  data
 |      Python buffer object pointing to the start of the array's data.
 |  
 |  dtype
 |      Data-type of the array's elements.
 |      
 |      .. warning::
 |      
 |          Setting ``arr.dtype`` is discouraged and may be deprecated in the
 |          future.  Setting will replace the ``dtype`` without modifying the
 |          memory (see also `ndarray.view` and `ndarray.astype`).
 |      
 |      Parameters
 |      ----------
 |      None
 |      
 |      Returns
 |      -------
 |      d : numpy dtype object
 |      
 |      See Also
 |      --------
 |      ndarray.astype : Cast the values contained in the array to a new data-type.
 |      ndarray.view : Create a view of the same data but a different data-type.
 |      numpy.dtype
 |      
 |      Examples
 |      --------
 |      >>> x
 |      array([[0, 1],
 |             [2, 3]])
 |      >>> x.dtype
 |      dtype('int32')
 |      >>> type(x.dtype)
 |      <type 'numpy.dtype'>
 |  
 |  flags
 |      Information about the memory layout of the array.
 |      
 |      Attributes
 |      ----------
 |      C_CONTIGUOUS (C)
 |          The data is in a single, C-style contiguous segment.
 |      F_CONTIGUOUS (F)
 |          The data is in a single, Fortran-style contiguous segment.
 |      OWNDATA (O)
 |          The array owns the memory it uses or borrows it from another object.
 |      WRITEABLE (W)
 |          The data area can be written to.  Setting this to False locks
 |          the data, making it read-only.  A view (slice, etc.) inherits WRITEABLE
 |          from its base array at creation time, but a view of a writeable
 |          array may be subsequently locked while the base array remains writeable.
 |          (The opposite is not true, in that a view of a locked array may not
 |          be made writeable.  However, currently, locking a base object does not
 |          lock any views that already reference it, so under that circumstance it
 |          is possible to alter the contents of a locked array via a previously
 |          created writeable view onto it.)  Attempting to change a non-writeable
 |          array raises a RuntimeError exception.
 |      ALIGNED (A)
 |          The data and all elements are aligned appropriately for the hardware.
 |      WRITEBACKIFCOPY (X)
 |          This array is a copy of some other array. The C-API function
 |          PyArray_ResolveWritebackIfCopy must be called before deallocating
 |          to the base array will be updated with the contents of this array.
 |      FNC
 |          F_CONTIGUOUS and not C_CONTIGUOUS.
 |      FORC
 |          F_CONTIGUOUS or C_CONTIGUOUS (one-segment test).
 |      BEHAVED (B)
 |          ALIGNED and WRITEABLE.
 |      CARRAY (CA)
 |          BEHAVED and C_CONTIGUOUS.
 |      FARRAY (FA)
 |          BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS.
 |      
 |      Notes
 |      -----
 |      The `flags` object can be accessed dictionary-like (as in ``a.flags['WRITEABLE']``),
 |      or by using lowercased attribute names (as in ``a.flags.writeable``). Short flag
 |      names are only supported in dictionary access.
 |      
 |      Only the WRITEBACKIFCOPY, WRITEABLE, and ALIGNED flags can be
 |      changed by the user, via direct assignment to the attribute or dictionary
 |      entry, or by calling `ndarray.setflags`.
 |      
 |      The array flags cannot be set arbitrarily:
 |      
 |      - WRITEBACKIFCOPY can only be set ``False``.
 |      - ALIGNED can only be set ``True`` if the data is truly aligned.
 |      - WRITEABLE can only be set ``True`` if the array owns its own memory
 |        or the ultimate owner of the memory exposes a writeable buffer
 |        interface or is a string.
 |      
 |      Arrays can be both C-style and Fortran-style contiguous simultaneously.
 |      This is clear for 1-dimensional arrays, but can also be true for higher
 |      dimensional arrays.
 |      
 |      Even for contiguous arrays a stride for a given dimension
 |      ``arr.strides[dim]`` may be *arbitrary* if ``arr.shape[dim] == 1``
 |      or the array has no elements.
 |      It does *not* generally hold that ``self.strides[-1] == self.itemsize``
 |      for C-style contiguous arrays or ``self.strides[0] == self.itemsize`` for
 |      Fortran-style contiguous arrays is true.
 |  
 |  flat
 |      A 1-D iterator over the array.
 |      
 |      This is a `numpy.flatiter` instance, which acts similarly to, but is not
 |      a subclass of, Python's built-in iterator object.
 |      
 |      See Also
 |      --------
 |      flatten : Return a copy of the array collapsed into one dimension.
 |      
 |      flatiter
 |      
 |      Examples
 |      --------
 |      >>> x = np.arange(1, 7).reshape(2, 3)
 |      >>> x
 |      array([[1, 2, 3],
 |             [4, 5, 6]])
 |      >>> x.flat[3]
 |      4
 |      >>> x.T
 |      array([[1, 4],
 |             [2, 5],
 |             [3, 6]])
 |      >>> x.T.flat[3]
 |      5
 |      >>> type(x.flat)
 |      <class 'numpy.flatiter'>
 |      
 |      An assignment example:
 |      
 |      >>> x.flat = 3; x
 |      array([[3, 3, 3],
 |             [3, 3, 3]])
 |      >>> x.flat[[1,4]] = 1; x
 |      array([[3, 1, 3],
 |             [3, 1, 3]])
 |  
 |  imag
 |      The imaginary part of the array.
 |      
 |      Examples
 |      --------
 |      >>> x = np.sqrt([1+0j, 0+1j])
 |      >>> x.imag
 |      array([ 0.        ,  0.70710678])
 |      >>> x.imag.dtype
 |      dtype('float64')
 |  
 |  itemsize
 |      Length of one array element in bytes.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([1,2,3], dtype=np.float64)
 |      >>> x.itemsize
 |      8
 |      >>> x = np.array([1,2,3], dtype=np.complex128)
 |      >>> x.itemsize
 |      16
 |  
 |  nbytes
 |      Total bytes consumed by the elements of the array.
 |      
 |      Notes
 |      -----
 |      Does not include memory consumed by non-element attributes of the
 |      array object.
 |      
 |      See Also
 |      --------
 |      sys.getsizeof
 |          Memory consumed by the object itself without parents in case view.
 |          This does include memory consumed by non-element attributes.
 |      
 |      Examples
 |      --------
 |      >>> x = np.zeros((3,5,2), dtype=np.complex128)
 |      >>> x.nbytes
 |      480
 |      >>> np.prod(x.shape) * x.itemsize
 |      480
 |  
 |  ndim
 |      Number of array dimensions.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([1, 2, 3])
 |      >>> x.ndim
 |      1
 |      >>> y = np.zeros((2, 3, 4))
 |      >>> y.ndim
 |      3
 |  
 |  real
 |      The real part of the array.
 |      
 |      Examples
 |      --------
 |      >>> x = np.sqrt([1+0j, 0+1j])
 |      >>> x.real
 |      array([ 1.        ,  0.70710678])
 |      >>> x.real.dtype
 |      dtype('float64')
 |      
 |      See Also
 |      --------
 |      numpy.real : equivalent function
 |  
 |  shape
 |      Tuple of array dimensions.
 |      
 |      The shape property is usually used to get the current shape of an array,
 |      but may also be used to reshape the array in-place by assigning a tuple of
 |      array dimensions to it.  As with `numpy.reshape`, one of the new shape
 |      dimensions can be -1, in which case its value is inferred from the size of
 |      the array and the remaining dimensions. Reshaping an array in-place will
 |      fail if a copy is required.
 |      
 |      .. warning::
 |      
 |          Setting ``arr.shape`` is discouraged and may be deprecated in the
 |          future.  Using `ndarray.reshape` is the preferred approach.
 |      
 |      Examples
 |      --------
 |      >>> x = np.array([1, 2, 3, 4])
 |      >>> x.shape
 |      (4,)
 |      >>> y = np.zeros((2, 3, 4))
 |      >>> y.shape
 |      (2, 3, 4)
 |      >>> y.shape = (3, 8)
 |      >>> y
 |      array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
 |             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
 |             [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])
 |      >>> y.shape = (3, 6)
 |      Traceback (most recent call last):
 |        File "<stdin>", line 1, in <module>
 |      ValueError: total size of new array must be unchanged
 |      >>> np.zeros((4,2))[::2].shape = (-1,)
 |      Traceback (most recent call last):
 |        File "<stdin>", line 1, in <module>
 |      AttributeError: Incompatible shape for in-place modification. Use
 |      `.reshape()` to make a copy with the desired shape.
 |      
 |      See Also
 |      --------
 |      numpy.shape : Equivalent getter function.
 |      numpy.reshape : Function similar to setting ``shape``.
 |      ndarray.reshape : Method similar to setting ``shape``.
 |  
 |  size
 |      Number of elements in the array.
 |      
 |      Equal to ``np.prod(a.shape)``, i.e., the product of the array's
 |      dimensions.
 |      
 |      Notes
 |      -----
 |      `a.size` returns a standard arbitrary precision Python integer. This
 |      may not be the case with other methods of obtaining the same value
 |      (like the suggested ``np.prod(a.shape)``, which returns an instance
 |      of ``np.int_``), and may be relevant if the value is used further in
 |      calculations that may overflow a fixed size integer type.
 |      
 |      Examples
 |      --------
 |      >>> x = np.zeros((3, 5, 2), dtype=np.complex128)
 |      >>> x.size
 |      30
 |      >>> np.prod(x.shape)
 |      30
 |  
 |  strides
 |      Tuple of bytes to step in each dimension when traversing an array.
 |      
 |      The byte offset of element ``(i[0], i[1], ..., i[n])`` in an array `a`
 |      is::
 |      
 |          offset = sum(np.array(i) * a.strides)
 |      
 |      A more detailed explanation of strides can be found in the
 |      "ndarray.rst" file in the NumPy reference guide.
 |      
 |      .. warning::
 |      
 |          Setting ``arr.strides`` is discouraged and may be deprecated in the
 |          future.  `numpy.lib.stride_tricks.as_strided` should be preferred
 |          to create a new view of the same data in a safer way.
 |      
 |      Notes
 |      -----
 |      Imagine an array of 32-bit integers (each 4 bytes)::
 |      
 |        x = np.array([[0, 1, 2, 3, 4],
 |                      [5, 6, 7, 8, 9]], dtype=np.int32)
 |      
 |      This array is stored in memory as 40 bytes, one after the other
 |      (known as a contiguous block of memory).  The strides of an array tell
 |      us how many bytes we have to skip in memory to move to the next position
 |      along a certain axis.  For example, we have to skip 4 bytes (1 value) to
 |      move to the next column, but 20 bytes (5 values) to get to the same
 |      position in the next row.  As such, the strides for the array `x` will be
 |      ``(20, 4)``.
 |      
 |      See Also
 |      --------
 |      numpy.lib.stride_tricks.as_strided
 |      
 |      Examples
 |      --------
 |      >>> y = np.reshape(np.arange(2*3*4), (2,3,4))
 |      >>> y
 |      array([[[ 0,  1,  2,  3],
 |              [ 4,  5,  6,  7],
 |              [ 8,  9, 10, 11]],
 |             [[12, 13, 14, 15],
 |              [16, 17, 18, 19],
 |              [20, 21, 22, 23]]])
 |      >>> y.strides
 |      (48, 16, 4)
 |      >>> y[1,1,1]
 |      17
 |      >>> offset=sum(y.strides * np.array((1,1,1)))
 |      >>> offset/y.itemsize
 |      17
 |      
 |      >>> x = np.reshape(np.arange(5*6*7*8), (5,6,7,8)).transpose(2,3,1,0)
 |      >>> x.strides
 |      (32, 4, 224, 1344)
 |      >>> i = np.array([3,5,2,2])
 |      >>> offset = sum(i * x.strides)
 |      >>> x[3,5,2,2]
 |      813
 |      >>> offset / x.itemsize
 |      813
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& var &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method var in module pandas.core.frame:

var(axis: 'Axis | None' = 0, skipna: 'bool' = True, ddof: 'int' = 1, numeric_only: 'bool' = False, **kwargs) method of pandas.core.frame.DataFrame instance
    Return unbiased variance over requested axis.
    
    Normalized by N-1 by default. This can be changed using the ddof argument.
    
    Parameters
    ----------
    axis : {index (0), columns (1)}
        For `Series` this parameter is unused and defaults to 0.
    
        .. warning::
    
            The behavior of DataFrame.var with ``axis=None`` is deprecated,
            in a future version this will reduce over both axes and return a scalar
            To retain the old behavior, pass axis=0 (or do not pass axis).
    
    skipna : bool, default True
        Exclude NA/null values. If an entire row/column is NA, the result
        will be NA.
    ddof : int, default 1
        Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
        where N represents the number of elements.
    numeric_only : bool, default False
        Include only float, int, boolean columns. Not implemented for Series.
    
    Returns
    -------
    Series or DataFrame (if level specified) 
    
    Examples
    --------
    >>> df = pd.DataFrame({'person_id': [0, 1, 2, 3],
    ...                    'age': [21, 25, 62, 43],
    ...                    'height': [1.61, 1.87, 1.49, 2.01]}
    ...                   ).set_index('person_id')
    >>> df
               age  height
    person_id
    0           21    1.61
    1           25    1.87
    2           62    1.49
    3           43    2.01
    
    >>> df.var()
    age       352.916667
    height      0.056367
    dtype: float64
    
    Alternatively, ``ddof=0`` can be set to normalize by N instead of N-1:
    
    >>> df.var(ddof=0)
    age       264.687500
    height      0.042275
    dtype: float64

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& where &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method where in module pandas.core.generic:

where(cond, other=nan, *, inplace: 'bool_t' = False, axis: 'Axis | None' = None, level: 'Level | None' = None) -> 'Self | None' method of pandas.core.frame.DataFrame instance
    Replace values where the condition is False.
    
    Parameters
    ----------
    cond : bool Series/DataFrame, array-like, or callable
        Where `cond` is True, keep the original value. Where
        False, replace with corresponding value from `other`.
        If `cond` is callable, it is computed on the Series/DataFrame and
        should return boolean Series/DataFrame or array. The callable must
        not change input Series/DataFrame (though pandas doesn't check it).
    other : scalar, Series/DataFrame, or callable
        Entries where `cond` is False are replaced with
        corresponding value from `other`.
        If other is callable, it is computed on the Series/DataFrame and
        should return scalar or Series/DataFrame. The callable must not
        change input Series/DataFrame (though pandas doesn't check it).
        If not specified, entries will be filled with the corresponding
        NULL value (``np.nan`` for numpy dtypes, ``pd.NA`` for extension
        dtypes).
    inplace : bool, default False
        Whether to perform the operation in place on the data.
    axis : int, default None
        Alignment axis if needed. For `Series` this parameter is
        unused and defaults to 0.
    level : int, default None
        Alignment level if needed.
    
    Returns
    -------
    Same type as caller or None if ``inplace=True``.
    
    See Also
    --------
    :func:`DataFrame.mask` : Return an object of same shape as
        self.
    
    Notes
    -----
    The where method is an application of the if-then idiom. For each
    element in the calling DataFrame, if ``cond`` is ``True`` the
    element is used; otherwise the corresponding element from the DataFrame
    ``other`` is used. If the axis of ``other`` does not align with axis of
    ``cond`` Series/DataFrame, the misaligned index positions will be filled with
    False.
    
    The signature for :func:`DataFrame.where` differs from
    :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to
    ``np.where(m, df1, df2)``.
    
    For further details and examples see the ``where`` documentation in
    :ref:`indexing <indexing.where_mask>`.
    
    The dtype of the object takes precedence. The fill value is casted to
    the object's dtype, if this can be done losslessly.
    
    Examples
    --------
    >>> s = pd.Series(range(5))
    >>> s.where(s > 0)
    0    NaN
    1    1.0
    2    2.0
    3    3.0
    4    4.0
    dtype: float64
    >>> s.mask(s > 0)
    0    0.0
    1    NaN
    2    NaN
    3    NaN
    4    NaN
    dtype: float64
    
    >>> s = pd.Series(range(5))
    >>> t = pd.Series([True, False])
    >>> s.where(t, 99)
    0     0
    1    99
    2    99
    3    99
    4    99
    dtype: int64
    >>> s.mask(t, 99)
    0    99
    1     1
    2    99
    3    99
    4    99
    dtype: int64
    
    >>> s.where(s > 1, 10)
    0    10
    1    10
    2    2
    3    3
    4    4
    dtype: int64
    >>> s.mask(s > 1, 10)
    0     0
    1     1
    2    10
    3    10
    4    10
    dtype: int64
    
    >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])
    >>> df
       A  B
    0  0  1
    1  2  3
    2  4  5
    3  6  7
    4  8  9
    >>> m = df % 3 == 0
    >>> df.where(m, -df)
       A  B
    0  0 -1
    1 -2  3
    2 -4 -5
    3  6 -7
    4 -8  9
    >>> df.where(m, -df) == np.where(m, df, -df)
          A     B
    0  True  True
    1  True  True
    2  True  True
    3  True  True
    4  True  True
    >>> df.where(m, -df) == df.mask(~m, -df)
          A     B
    0  True  True
    1  True  True
    2  True  True
    3  True  True
    4  True  True

None
&&&&&&&&&&&&&&&&&&&&&&&&&&& xs &&&&&&&&&&&&&&&&&&&&&&&&&&&
Help on method xs in module pandas.core.generic:

xs(key: 'IndexLabel', axis: 'Axis' = 0, level: 'IndexLabel | None' = None, drop_level: 'bool_t' = True) -> 'Self' method of pandas.core.frame.DataFrame instance
    Return cross-section from the Series/DataFrame.
    
    This method takes a `key` argument to select data at a particular
    level of a MultiIndex.
    
    Parameters
    ----------
    key : label or tuple of label
        Label contained in the index, or partially in a MultiIndex.
    axis : {0 or 'index', 1 or 'columns'}, default 0
        Axis to retrieve cross-section on.
    level : object, defaults to first n levels (n=1 or len(key))
        In case of a key partially contained in a MultiIndex, indicate
        which levels are used. Levels can be referred by label or position.
    drop_level : bool, default True
        If False, returns object with same levels as self.
    
    Returns
    -------
    Series or DataFrame
        Cross-section from the original Series or DataFrame
        corresponding to the selected index levels.
    
    See Also
    --------
    DataFrame.loc : Access a group of rows and columns
        by label(s) or a boolean array.
    DataFrame.iloc : Purely integer-location based indexing
        for selection by position.
    
    Notes
    -----
    `xs` can not be used to set values.
    
    MultiIndex Slicers is a generic way to get/set values on
    any level or levels.
    It is a superset of `xs` functionality, see
    :ref:`MultiIndex Slicers <advanced.mi_slicers>`.
    
    Examples
    --------
    >>> d = {'num_legs': [4, 4, 2, 2],
    ...      'num_wings': [0, 0, 2, 2],
    ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],
    ...      'animal': ['cat', 'dog', 'bat', 'penguin'],
    ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}
    >>> df = pd.DataFrame(data=d)
    >>> df = df.set_index(['class', 'animal', 'locomotion'])
    >>> df
                               num_legs  num_wings
    class  animal  locomotion
    mammal cat     walks              4          0
           dog     walks              4          0
           bat     flies              2          2
    bird   penguin walks              2          2
    
    Get values at specified index
    
    >>> df.xs('mammal')
                       num_legs  num_wings
    animal locomotion
    cat    walks              4          0
    dog    walks              4          0
    bat    flies              2          2
    
    Get values at several indexes
    
    >>> df.xs(('mammal', 'dog', 'walks'))
    num_legs     4
    num_wings    0
    Name: (mammal, dog, walks), dtype: int64
    
    Get values at specified index and level
    
    >>> df.xs('cat', level=1)
                       num_legs  num_wings
    class  locomotion
    mammal walks              4          0
    
    Get values at several indexes and levels
    
    >>> df.xs(('bird', 'walks'),
    ...       level=[0, 'locomotion'])
             num_legs  num_wings
    animal
    penguin         2          2
    
    Get values at specified column and axis
    
    >>> df.xs('num_wings', axis=1)
    class   animal   locomotion
    mammal  cat      walks         0
            dog      walks         0
            bat      flies         2
    bird    penguin  walks         2
    Name: num_wings, dtype: int64

None
